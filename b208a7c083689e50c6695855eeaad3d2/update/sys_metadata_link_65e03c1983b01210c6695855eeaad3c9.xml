<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>212a1061eb1211003623666cd206fe55</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.sc_ic_QuestionClass&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Wrapper class for the Question class table (sc_ic_question_class)&lt;/description&gt;
        &lt;name&gt;sc_ic_QuestionClass&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var sc_ic_QuestionClass = Class.create();
sc_ic_QuestionClass.prototype = Object.extendsObject(sc_ic_Base,{
    initialize: function(_gr,_gs) {
		sc_ic_Base.prototype.initialize.call(this,_gr,_gs);
    },

    type: 'sc_ic_QuestionClass'
});

sc_ic_QuestionClass.getAvailableClasses = function () {
	var log = new GSLog(sc_ic.LOG_LEVEL,"sc_ic_QuestionClass").setLog4J();
	
	var questionClassTypes = {};
	var questionClassGr = new GlideRecord(sc_ic.QUESTION_CLASS);
	questionClassGr.addActiveQuery();
	questionClassGr.orderBy("name");
	questionClassGr.query();
	
	while (questionClassGr.next())
		questionClassTypes[questionClassGr[sc_ic.TYPE]+""] = !questionClassGr[sc_ic.PRECONFIGURED_ONLY];
	
	var questionTypeGr = new GlideAggregate(sc_ic.QUESTION_TYPE);
	questionTypeGr.addActiveQuery();
	questionTypeGr.addQuery(sc_ic.QUESTION_CLASS + "." + sc_ic.PRECONFIGURED_ONLY, true);
	questionTypeGr.groupBy(sc_ic.QUESTION_CLASS);
	questionTypeGr.query();
	
	while (questionTypeGr.next())
		questionClassTypes[questionTypeGr[sc_ic.QUESTION_CLASS]+""] = true;
	
	var refQual = "typeIN0";
	for (var questionType in questionClassTypes) {
		if (questionClassTypes[questionType])
			refQual += "," + questionType;
	}
	
	log.debug("[getAvailableClasses] Ref Qualifier: " + refQual);
	return refQual;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;nigel.bell&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-01-15 19:08:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;212a1061eb1211003623666cd206fe55&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;sc_ic_QuestionClass&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;3607b4283cb1311068bcf327dfe37fee&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_212a1061eb1211003623666cd206fe55&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;nigel.bell&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2014-01-21 19:48:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:58</sys_created_on>
        <sys_id>65e03c1983b01210c6695855eeaad3c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sc_ic_QuestionClass</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_65e03c1983b01210c6695855eeaad3c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:58</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
