<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2b9d298353be0010a393ddeeff7b1217</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_slm_timer.SLATimerConfigMappingSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SLATimerConfigMappingSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SLATimerConfigMappingSNC = Class.create();

SLATimerConfigMappingSNC.LOG_PROP = SLATimerSNC.LOG_PROP;
SLATimerConfigMappingSNC.SLA_TIMER_SOURCE = 2;

SLATimerConfigMappingSNC.prototype = {
	initialize: function(_gr, _gs) {
		this._log = new global.GSLog(SLATimerConfigMappingSNC.LOG_PROP, this.type);

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug('[initialize] type: ' + this.type);

		this._gr = _gr;
		this._gs = _gs || gs;
	},

	isDuplicate: function() {
		if (!this._gr || !this._gr.getUniqueValue())
			return false;

		var mappingGr = new GlideRecord('sla_timer_config_mapping');
		mappingGr.addQuery('config', this._gr.getValue('config'));
		mappingGr.addQuery('table', this._gr.getValue('table'));
		mappingGr.addQuery('sla', this._gr.getValue('sla')).addOrCondition('order', this._gr.getValue('order'));
		mappingGr.addNotNullQuery('config');
		mappingGr.addNotNullQuery('table');
		mappingGr.addNotNullQuery('sla');
		mappingGr.addNotNullQuery('order');
		mappingGr.query();

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[isDuplicate] encodedQuery: " + mappingGr.getEncodedQuery());

		var isDuplicate = false;
		while (mappingGr.next()) {
			if (mappingGr.getUniqueValue() !== this._gr.getUniqueValue())
				isDuplicate = true;
		}

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[isDuplicate] isDuplicate: " + isDuplicate);

		return isDuplicate;
	},

	getNextOrder: function() {
		if (!this._gr || !this._gr.getUniqueValue())
			return -1;

		return this._getMaxOrder() + 10;
	},

	_getMaxOrder: function() {
		if (!this._gr || !this._gr.getUniqueValue())
			return -1;

		var mappingGa = new GlideAggregate('sla_timer_config_mapping');
		mappingGa.addQuery('config', this._gr.getValue('config'));
		mappingGa.addQuery('table', this._gr.getValue('table'));
		mappingGa.addNotNullQuery('order');
		mappingGa.orderByAggregate('MAX', 'order');
		mappingGa.addAggregate('MAX', 'order');
		mappingGa.query();

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[_getMaxOrder] encodedQuery: " + mappingGa.getEncodedQuery());

		var order = 0;
		if (mappingGa.next())
			order = parseInt(mappingGa.getAggregate('MAX', 'order'));

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[_getMaxOrder] order: " + order);

		return order;
	},

	limitByTable: function(table) {
		table = table || current.table || '';

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[limitByTable] table: " + table);

		if (!table)
			return '';

		var refQual = 'collection=' + table;

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[limitByTable] refQual: " + refQual);

		return refQual;
	},

	limitByMapping: function() {
		var refQual = 'sla_timer_source=' + SLATimerConfigMappingSNC.SLA_TIMER_SOURCE;

		if (this._log.atLevel(global.GSLog.DEBUG))
			this._log.debug("[limitByMapping] refQual: " + refQual);

		return refQual;
	},

	type: 'SLATimerConfigMappingSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-02-10 19:33:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2b9d298353be0010a393ddeeff7b1217&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SLATimerConfigMappingSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Level Management - SLA Timer Config API" source="sn_slm_timer"&gt;76d8e8b253320010a393ddeeff7b127b&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Service Level Management - SLA Timer Config API"&gt;76d8e8b253320010a393ddeeff7b127b&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2b9d298353be0010a393ddeeff7b1217&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-02-10 19:53:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:03</sys_created_on>
        <sys_id>d921309983b01210c6695855eeaad3a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SLATimerConfigMappingSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d921309983b01210c6695855eeaad3a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:03</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
