<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2de1c994737910107419c907fbf6a76b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_table_builder.TBUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TBUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TBUtil = Class.create();

TBUtil.isGRInstance = function isGRInstance(gr) {
    return gr instanceof GlideRecord;
};

// Object assign pollyfill
TBUtil.assign = function assign(target) {
    for (var i = 1; i &lt; arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

TBUtil.getValidTableId = function(value) {
    var gr = new GlideRecord(TBConstants.SYS_CLASS_DB_OBJECT);
    gr.addEncodedQuery('name=' + value + '^ORsys_id=' + value);
    gr.query();
    if (gr.next())
        return gr.getValue('sys_id');
    else
        return value;
};

TBUtil.getRecordLimit = function getRecordLimit(offset, limit) {
    var baseLimit = limit || 10;
    var lower = (offset - 1) * baseLimit;
    var upper = (offset * baseLimit);
    return {
        firstIndex: lower,
        lastIndex: upper
    };
};

TBUtil.prepConditionalQuery = function prepConditionalQuery() {
    var querySets = Array.prototype.slice.call(arguments);
    return querySets
        .filter(function(qset) {
            return qset &amp;&amp; qset.trim();
        }).join('^');
};

TBUtil.applySortQuery = function applySortQuery(query, sortQuery) {
    if (!gs.nil(sortQuery))
        return query + '^EQ^' + sortQuery;
    return query;
};

TBUtil.getPerspectives = function() {
    var perspectives = [];
    for (var i in TBConstants.TB_PERSPECTIVES) {
        perspectives.push(TBConstants.TB_PERSPECTIVES[i]);
    }
    return perspectives;
};

/**
 * normalize query params values, which come in array
 */
TBUtil.normalizeQueryParams = function(params) {
    var nrm = {};
    Object.keys(params).forEach(function(item) {
        nrm[item] = params[item][0];
    });
    return nrm;
};

TBUtil.error = function(res) {
    var error = new sn_ws_err.ServiceError();
    error.setStatus(res.status || TBConstants.CODE_404);
    error.setMessage(res.message);
    error.setDetail(res.detail || '');
    return error;
};

// Note - not using now, but keeping it for sometime for future uses, if any.
TBUtil.getAdditionalInfo = function(fieldClass) {
    var typeRecord = new GlideRecord(TBConstants.FIELD_CLASS_TABLE);
    typeRecord.addQuery('name', fieldClass);
    typeRecord.query();
    typeRecord.next();
    var sysId = typeRecord.getValue('sys_id');
    var primitiveType = typeRecord.getValue('scalar_type');
    var additionalInfo = new GetAdditionalInformation(TBConstants.FIELD_CLASS_TABLE, sysId, primitiveType);

    return {
        "icon": additionalInfo.getIcon(),
        "image": additionalInfo.getImage()
    };
};

TBUtil.getChoiceTypes = function() {
    var res = [];
    var gr = new GlideRecord(TBConstants.SYS_CLASS_CHOICE);
    gr.addQuery('name', TBConstants.SYS_CLASS_DICTIONARY);
    gr.addQuery('element', 'choice');
    gr.addQuery('language', gs.getSession().getLanguage());
    gr.query();
    while (gr.next()) {
        res.push({
            label: gr.getDisplayValue('label'),
            id: gr.getValue('value')
        });
    }
    return res;
};

TBUtil.getChoiceFieldMeta = function(choiceType, name, element) {
    var choices = [];

    var gr = new GlideRecord(TBConstants.SYS_CLASS_CHOICE);
    gr.addQuery('name', name);
    gr.addQuery('element', element);

    // if user session language is english - we have to send choice options whose language is only english
    // if user session language is non-english - we have to send choice options whose language is enligsh/session language
    var grOR = gr.addQuery('language', 'en');
    grOR.addOrCondition('language', gs.getSession().getLanguage());

    gr.query();
    while (gr.next()) {
        choices.push({
            sequence: gr.getValue('sequence') || '0',
            sysId: gr.getValue('sys_id'),
            label: gr.getDisplayValue('label'),
            value: gr.getValue('value')
        });
    }
    return {
        choiceType: choiceType,
        choices: choices,
        name: name,
        element: element
    };
};

TBUtil.isQueryHasTableFilter = function(query) {
    return query.indexOf('name=') !== -1;
};

TBUtil.prototype = {
    initialize: function() {},

    type: 'TBUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-06-30 06:27:33&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2de1c994737910107419c907fbf6a76b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;31&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TBUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Table Builder" source="sn_table_builder"&gt;f53f19bac362fa22ca2e93692d32f18f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Table Builder"&gt;f53f19bac362fa22ca2e93692d32f18f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2de1c994737910107419c907fbf6a76b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-03 11:39:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:20</sys_created_on>
        <sys_id>2131749983b01210c6695855eeaad3c8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TBUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2131749983b01210c6695855eeaad3c8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:20</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
