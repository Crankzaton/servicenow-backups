<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>(current.evaluation_method == "assessment" || current.evaluation_method == "attestation_v2" || current.evaluation_method == "risk_assessment" || current.evaluation_method == "vdr_risk_asmt") &amp;&amp; current.sys_class_name + "" !== "change_risk_asmt"</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Business Rule on Remote table</name>
        <order>110</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[if ((!current.table.nil()) && !isTableBlacklisted(current.table)
 && (current.operation() == 'insert' || current.table.changes() || current.condition.changes())) {
 var updateCurrent = false;
    updateCurrent = createBusinessRule(current);
    updateCurrent = createDeleteBusinessRule(current) || updateCurrent;
 if (updateCurrent) {
  current.setWorkflow(false);
  current.update();
  current.setWorkflow(true);
 }
}

function createBusinessRule(current) {
 var gr = new GlideRecord("sys_script");
 if (!current.business_rule.nil() && ((!gr.get(current.business_rule)) || (current.operation() == "insert")))
   current.business_rule = "";
 
 if ((current.table.changes()) || current.condition.changes() || (current.operation() == "insert")) {
  gr.collection = current.table;
  gr.script = buildScript(current);
  gr.execute_function = true;
  gr.condition = "";
 }
 if (current.business_rule.nil()) {
  gr.name = "Auto business rule for Assessments";
  gr.action_insert = true;
  gr.action_update = true;
  gr.active = true;
  gr.when = "after";
  var br = gr.insert();
  current.business_rule = br;
  return true;
 } else
  gr.update();
 return false;
}

function createDeleteBusinessRule(current) {
 var gr = new GlideRecord("sys_script");
  
 if (!current.delete_business_rule.nil() && ((!gr.get(current.delete_business_rule)) || (current.operation() == "insert")))
   current.delete_business_rule = "";
 if ((current.table.changes()) || (current.operation() == "insert")) {
  gr.collection = current.table;
  gr.script = buildDeletionScript(current);
  gr.execute_function = true;
 }
 if (current.delete_business_rule.nil()) {
  gr.name = "Auto deletion rule for Assessments";
  gr.action_delete = true;
  gr.active = true;
  gr.when = "before";
  gr.script = buildDeletionScript(current);
  var br = gr.insert();
  current.delete_business_rule = br;
  return true;
 } else 
  gr.update();
 return false;
}

function buildScript(current) {
 var escapeCondition = current.condition.toString();
 escapeCondition = escapeCondition.replace(/[\'\"]/g, "\\'");
 var brCondition = "AssessmentUtils.conditionCheck(current, '" + escapeCondition + "')";
 var script = "function onAfter(current, previous) {\n var AssessmentUtils = new global.AssessmentUtils(); \n if (" + brCondition + ") { \n ";
 script += "    AssessmentUtils.checkRecord(current, '" + current.sys_id + "', true);\n";
 script += "}}";
 return script;
}

function buildDeletionScript(current) {
 var script = "function onBefore(current, previous) { \n";
 script += "   new global.AssessmentUtils().checkDeleteRecord(current, '" + current.sys_id + "', true);\n";
 script += "}";
 return script;

}

function isTableBlacklisted(table) {
 var isBlackListTable = false;
 var blackListTables = gs.getProperty("com.snc.assessment.tables.blacklist");
 if (!blackListTables) return false;
 blackListTables = blackListTables.toString().split(',');
 for (var i = 0; i < blackListTables.length; i++) {
  if (blackListTables[i] == table) return true;
 }
 return false;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:38</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>decb2c1583701210c6695855eeaad3ca</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Business Rule on Remote table</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_decb2c1583701210c6695855eeaad3ca</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:38</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=decb2c1583701210c6695855eeaad3ca"/>
</record_update>
