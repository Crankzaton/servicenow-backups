<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!(('FSMConditions' in global) &amp;&amp; new FSMConditions().checkScheduleOptimizationCondition(current))</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Date Checks General</name>
        <order>119</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var useScheduleEnabled = false;
        var sharedServiceUtil = new SharedServiceUtils();
        if (current.sys_class_name == 'wm_task') {
            var cacheManager = new global.SMConfigCacheManager().getSMConfig('wm_task');
            useScheduleEnabled = (cacheManager.use_schedule == 'true' ? true : false);
        } else {
            var smConfig = (new sn_sm.SMConfiguration());
            useScheduleEnabled = smConfig.isEnabled(current, "use_schedule", "false");
        }

        //Checking
        if (useScheduleEnabled)
            estimatedWork(current);
        if (sharedServiceUtil.fieldChangeCheck("window_start,window_end,estimated_work_duration"))
            validateWindow(current);

        function estimatedWork(current) {
            if (current.getValue('estimated_work_duration') == '0' || current.getValue('estimated_work_duration') == "") {
                gs.addErrorMessage(gs.getMessage("The estimated work duration cannot be 0 or empty"));
                current.setAbortAction(true);
            }
            if (!current.window_start.nil() && !current.window_end.nil()) {
                var time = new GlideDateTime(current.window_start);
                var time2 = new GlideDateTime(current.window_end);

                if (time.compareTo(time2) == 1) {
                    gs.addErrorMessage(gs.getMessage("The start date should come before the end date"));
                    current.setAbortAction(true);
                }
            }
        }

        function validateWindow(current) {

            // If window end empty, don't bother checking, time is OK
            if (current.window_end.nil())
                return;

            // If window start empty, use now.
            var winStart;
            if (!current.window_start.nil())
                winStart = current.window_start.getGlideObject();
            else
                winStart = new GlideDateTime();
            // Check window start/now + duration < end
            var winEnd = current.window_end.getGlideObject();
            var duration = 0;
            if (!current.estimated_work_duration.nil())
                duration = current.estimated_work_duration.getGlideObject().getNumericValue();
            if (GlideDateTime.subtract(winStart, winEnd).getNumericValue() < duration) {
                gs.addErrorMessage(gs.getMessage("The window must include enough time to complete the task, based on the estimated work duration"));
                current.setAbortAction(true);
            }
        }]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:08</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ac7b289183701210c6695855eeaad39d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Date Checks General</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_ac7b289183701210c6695855eeaad39d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:08</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=ac7b289183701210c6695855eeaad39d"/>
</record_update>
