<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Security Admin incompatible with MID</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 
 //
 // Reject request if the mid_server role(s) is currently assigned to the user
 //
 
 // Determine mid_server role sys_id
 var gd_mid_role = new GlideRecord('sys_user_role');
 gd_mid_role.addQuery('name', 'mid_server');
 gd_mid_role.query();
 
 // Exit if no mid_server role defined
 if (! gd_mid_role.next())
  return;
 
 // Determine security_admin role sys_id
 var gd_security_admin_role = new GlideRecord('sys_user_role');
 gd_security_admin_role.addQuery('name', 'security_admin');
 gd_security_admin_role.query();
 
 // Exit if no mid_server role defined
 if (! gd_security_admin_role.next())
  return;
 
 // Determine if the user already has the other role
 var gd_user_has_role = new GlideRecord('sys_user_has_role');
 gd_user_has_role.addQuery('user', current.user.sys_id);
 if (current.role.sys_id == gd_security_admin_role.sys_id) {
  gd_user_has_role.addQuery('role', gd_mid_role.sys_id);
 } else {
  gd_user_has_role.addQuery('role', gd_security_admin_role.sys_id);
 }
 gd_user_has_role.query();
 
 // Reject message if both Security Admin and MID Server role assigned to the user
 if (gd_user_has_role.hasNext()) {
  
  // Rejection criteria has been met
  gs.addErrorMessage(gs.getMessage("A user cannot be granted both the mid_server and security_admin roles"));
  gs.addErrorMessage(gs.getMessage("'{0}' role assignment rejected", current.role.name));
   
  current.setAbortAction(true);
 }
  
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:52</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>718c2c5983701210c6695855eeaad335</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Security Admin incompatible with MID</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_718c2c5983701210c6695855eeaad335</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:52</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=718c2c5983701210c6695855eeaad335"/>
</record_update>
