<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>rm_release_phase_ProcessFlowList</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/*
 * Retuns list of process  flow formatter entries for a Release(rm_release_phase) table
 *  Outputs:
 *      ChoiceList or null, list of choice list items where each choice should have below data or null
 *       value - name of the flow formatter entry
 *       label - label of the flow formatter entry
 *       parameter("description") - description of the flow formatter entry
 *       parameter("state") - past or current or future or completed
 *       parameter("next_state") - current, future or end (used to determine which chevron to use)
 */

function rm_release_phase_ProcessFlowList() {
    var choices = null;
    if (current.canRead()) {
        var visited_states = current.getValue('visited_state') || '';
        visited_states = visited_states.split(",");
        var gr = new GlideRecord('sys_process_flow');
        gr.addEncodedQuery('table=rm_release_phase^active=true');
        gr.orderBy('order');
        gr.query();
        var state = 'future';
        while (gr.next()) {

            if (!choices) {
                choices = new GlideChoiceList();
            }
            var choice = new GlideChoice(gr.name, gr.getDisplayValue("label"));
            var match = GlideFilter.checkRecord(current, gr.condition);

            if (match)
                choice.setParameter('state', 'current');
            else
                choice.setParameter('state', 'future');

            //if the state is already processed, mark it as past
            for (i = 0; i < visited_states.length; i++) {
                if (visited_states[i] == gr.name && !match) {
                    choice.setParameter('state', 'past');
                    break;
                }
            }

            choices.add(choice);
        }
    }
    return choices;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:08</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>502ca0d583701210c6695855eeaad345</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>rm_release_phase_ProcessFlowList</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_502ca0d583701210c6695855eeaad345</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:08</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=502ca0d583701210c6695855eeaad345"/>
</record_update>
