<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>47229b1feb30a110da1861c59c5228b0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_instance_clone.AdminCloneUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AdminCloneUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AdminCloneUtil = Class.create();
AdminCloneUtil.prototype = {
    initialize: function() {
        this.PROFILE_EXCLUSION_KEY = 'exclusion';
        this.PROFILE_PRESERVER_KEY = 'preserver';
        this.PROFILE_CLEANUP_SCRIPT_KEY = 'cleanup_script';
        this.cloneRestService = new CloneRestService();
    },

    getBreadCrumbsByPageParams: function(table_name) {
        try {
            var result = {};
            var href = "now/clone/ui/list/" + table_name + "/params/ace-nav/" + table_name;
            var gr = new GlideRecord(table_name);
            var table_display_value = gr.getClassDisplayValue();
            
            var data = [{
                    "label": table_display_value + "s",
                    "href": href
                },
                {
                    "label": table_display_value,
                    "href": "#"
                }
            ];
            result.body = data;
            result.status = this.setStatus(result.body);
        } catch (ex) {
            result.body = {
                "isError": true + ex,
            };
            result.status = 400;
        }
        return result;
    },

    deleteInstance: function(record_sys_id) {
        try {
            var result = {};
            var grInstance = new GlideRecord("instance");
            grInstance.get(record_sys_id);
            var isError = grInstance.deleteRecord() ? false : true;
            result.body = {
                "isError": isError,
            };
            result.status = this.setStatus(result.body);
        } catch (ex) {
            result.body = {
                "isError": true,
            };
        }
        return result;
    },

    getCloneRequestSysId: function(request_id) {
        var result = {};
        var query = "request_id=" + request_id + "^ORchange_number=" + request_id;
        var cloneStatusGr = new GlideRecord("sn_instance_clone_request");
        cloneStatusGr.addEncodedQuery(query);
        cloneStatusGr.query();
        if (cloneStatusGr.next()) {
            result.body = {
                sys_id: cloneStatusGr.sys_id.toString()
            };
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    getCloneCancelRollbackReasons: function(options) {
        var result = {};
        if (options == "cancelOptions") {
            result.body = CloneConstants.cancelOptions;
        } else if (options == "rollbackOptions") {
            result.body = CloneConstants.rollbackOptions;
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    getCloneDefinitionsReocrds: function(table_name, profile_sys_id, row_name) {
        var result = {};
        var gr = new GlideRecord(table_name);
        if (!gs.nil(profile_sys_id))
            gr.addQuery("profile.sys_id=" + profile_sys_id + "^ORprofile.sys_id=" + CloneConstants.SYSTEM_PROFILE_SYS_ID);
        if (gr.isValidField('active'))
            gr.addQuery('active', true);
        gr.orderBy(row_name);
        gr.query();
        var cloneDefinitionsData = [];
        while (gr.next()) {
            row_data = [gr.sys_id.toString(), gr.getDisplayValue(row_name)];
            cloneDefinitionsData.push(row_data);
        }
        result.body = cloneDefinitionsData;
        result.status = this.setStatus(result.body);
        return result;
    },

    setStepperComponentData: function(record) {
        try {
            var stepperData = [];
            var progress = "done";
            var steps = CloneConstants.stepperComponentsSteps;
            var isValideState = false;
            for (var i = 0; i &lt; steps.length; i++) {
                var step = steps[i];
                for (var key in step) {
                    if (step[key] == record.stage) {
                        isValideState = true;
                        break;
                    }
                }
            }
            if (!isValideState) {
                record.stage = gs.getMessage("Building Configurations");
                record.stage_percent_complete = 0;
                record.substep_heading = record.stage;
                progress = "partial";
                record.current_step = gs.getMessage("{0} of {1} Steps Completed", ['0', steps.length.toString()]);
            }
            for (i = 0; i &lt; steps.length; i++) {
                step = steps[i];
                for (key in step) {
                    if (step[key] == record.stage) {
                        record.current_step = gs.getMessage("{0} of {1} Steps Completed", [i.toString(), steps.length.toString()]);
                        record.current_step_id = key;
                        progress = "partial";
                        record.substep_icon = "circle-outline";
                        record.substep_sub_heading = "In Progress";
                        if (i == steps.length - 1) {
                            if (record.stage_percent_complete == 100) {
                                record.current_step = gs.getMessage("{0} of {1} Steps Completed", [(i + 1).toString(), steps.length.toString()]);
                                record.substep_sub_heading = "Completed";
                                progress = "done";
                                record.substep_icon = "circle-check-fill";
                            }
                        }
                        record.show_substep_container = false;
                        record.show_step_progress = true;
                    }
                    stepperData.push({
                        "id": key,
                        "label": step[key],
                        "progress": progress,
                    });
                    if (progress == "partial") {
                        progress = "none";
                    }
                }
            }
            record.steps = stepperData;
            return record;
        } catch (ex) {
            gs.info("Failed in Fetching Stepper data", ex);
            return record;
        }
    },

    getCloneStatusRequestData: function(sys_id) {
        var result = {};
        var _tYes = gs.getMessage("Yes");
        var _tNo = gs.getMessage("No");
        try {
            var record = {
                current_sys_id: "",
                request_status: "",
                source_instance: "",
                target_instance: "",
                clone_profile_name: "",
                clone_progress_percent: 0,
                clone_progress_heading: "",
                clone_scheduled: "",
                estimated_clone_duration: "",
                estimated_completion: "",
                request_id: "",
                status_icon: "undo-top-fill",
                clone_status_heading: gs.getMessage("Clone Status"),
                show_clone_cancel_button: false,
                show_roll_back_button: false,
                show_semi_check: false,
                show_green_tick: false,
                show_red_error: false,
                show_clock_running: false,
                show_clone_outline: false,
                show_rollback_top: false,
                estimated_label: "",
                estimated_value: "",
                show_more_less_text: "Show more",
                show_more_data: false,
                profile_sys_id: "",
                excluders: 0,
                preservers: 0,
                cleanups: 0,
                main_content_css: "block",
                show_record_missing: false,
                exclude_all_from_exclusion_list: "",
                exclude_large_data: "",
                preserve_theme: "",
                preserve_in_progress_update_sets: "",
                filter_attachment_data: "",
                amount_of_data_copied_from_large_tables: "",
                on_demand_backup: "",
                occurrences: "",
                lock_profile_settings: "",
                email: "",
                frequency: "",
                stage: "",
                sub_stage: "",
                stage_percent_complete: "",
                substep_heading: "",
                substep_progress_bar_heading: "",
                show_substep_container: false,
                show_step_progress: false,
                substep_icon: "circle-semi-check-fill",
                substep_sub_heading: "Not Started",
                current_step_id: "",
                rollback_eligible_until_date: "",
                show_modal_container: true,
                show_loader_modal: false,
                show_modal_stack: false,
                show_stack_links: false,
                learn_more_about_rollback: "",
                learn_more_about_steps: "",
                show_definitons_alert: false,
                progress: gs.getMessage("Progress :")
            };
            var cloneStatusGr = new GlideRecord("sn_instance_clone_request");
            cloneStatusGr.get(sys_id);
            if (cloneStatusGr.request_id == "") {
                record.request_status = gs.getMessage("Record not found");
                record.main_content_css = "none";
                record.show_record_missing = true;
            } else {
                record.request_status = cloneStatusGr.getValue('state');
                if (record.request_status == "Completed" || record.request_status == "Rollback requested" || record.request_status == "Rolling back" ||
                    record.request_status == "Rollback failure" || record.request_status == "Rolled back") {
                    record.stage = gs.getMessage("Post Clone");
                    record.substep_heading = record.stage;
                    record.sub_stage = cloneStatusGr.sub_stage;
                    record.substage_percent_value = 100;
                    record.stage_percent_complete = 100;
                } else {
                    record.stage = cloneStatusGr.stage || "";
                    record.substep_heading = record.stage;
                    record.sub_stage = cloneStatusGr.sub_stage;
                    record.substage_percent_value = cloneStatusGr.stage_percent_complete || 0;
                    record.stage_percent_complete = record.substage_percent_value || 0;
                }
                try {
                    record = this.setStepperComponentData(record);
                } catch (ex) {
                    gs.info("Failed Fetching stepperData" + ex);
                }
                record.request_id = cloneStatusGr.change_number || cloneStatusGr.request_id;
                record.source_instance = cloneStatusGr.getDisplayValue('source_instance') || "Current Instance";
                record.target_instance = cloneStatusGr.getDisplayValue('target_instance');
                record.clone_profile_name = cloneStatusGr.getDisplayValue('profile_name') || "None selected";
                record.clone_scheduled = cloneStatusGr.getDisplayValue('scheduled');
                record.request_status = cloneStatusGr.getValue('state');
                record.clone_progress_percent = parseInt(cloneStatusGr.clone_percent_complete) || 0;
                record.substep_progress_bar_heading = gs.getMessage("Progress : {0} %", record.stage_percent_complete.toString());
                record.progress_bar_heading = gs.getMessage("Overall clone progress : {0} %", record.clone_progress_percent.toString());
                record.current_sys_id = sys_id;
                record.profile_sys_id = cloneStatusGr.profile;
                record.estimated_clone_duration = cloneStatusGr.getDisplayValue("estimated_clone_duration") || "";
                record.exclude_all_from_exclusion_list = cloneStatusGr.exclude_all_from_exclusion_list ? _tYes : _tNo;
                record.exclude_large_data = cloneStatusGr.exclude_large_data ? _tYes : _tNo;
                record.preserve_theme = cloneStatusGr.preserve_theme ? _tYes : _tNo;
                record.preserve_in_progress_update_sets = cloneStatusGr.preserve_in_progress_update_sets ? _tYes : _tNo;
                record.filter_attachment_data = cloneStatusGr.filter_attachment_data ? _tYes : _tNo;
                record.amount_of_data_copied_from_large_tables = cloneStatusGr.getDisplayValue('amount_of_data_copied_from_large_tables');
                record.on_demand_backup = cloneStatusGr.on_demand_backup ? _tYes : _tNo;
                record.occurrences = cloneStatusGr.occurrences || "0";
                record.lock_profile_settings = cloneStatusGr.lock_profile_settings ? _tYes : _tNo;
                record.frequency = cloneStatusGr.getDisplayValue('clone_frequency') || gs.getMessage("None");
                record.show_substep_container = false;
                record.show_step_progress = true;
                var emails = "";
                var emailQuery = "sys_idIN" + cloneStatusGr.getValue("email");
                var userGr = new GlideRecord('sys_user');
                userGr.addEncodedQuery(emailQuery);
                userGr.query();
                while (userGr.next())
                    emails += userGr.getValue('email') + "; ";

                emails = emails.slice(0, -2);
                record.email = emails ? emails : gs.getMessage("None");
                var duration_obj = new GlideDateTime(cloneStatusGr.estimated_clone_duration);
                var scheduled_date = new GlideDateTime(cloneStatusGr.scheduled);
                scheduled_date.add(duration_obj.getNumericValue());
                record.estimated_value = scheduled_date.getDisplayValue();
                if (record.lock_profile_settings == 'Yes') {
                    record.show_definitons_alert = true;
                } else {
                    record.show_definitons_alert = false;
                }

                if (record.source_instance == "Current Instance") {
                    record.show_modal_stack = true;
                    record.show_stack_links = false;
                    var definitions = this.getDefinitions(cloneStatusGr.profile);
                    for (var key in definitions)
                        if (definitions.hasOwnProperty(key))
                            record[key] = definitions[key];
                } else {
                    try {
                        if (cloneStatusGr.cloud_details) {
                            record.show_modal_stack = false;
                            record.show_stack_links = true;
                            record.cloud_details = JSON.parse(cloneStatusGr.cloud_details);
                            record.excluders_link = record.cloud_details.exclusion.link;
                            record.preserver_link = record.cloud_details.preserver.link;
                            record.cleanupScript_link = record.cloud_details.cleanupScript.link;
                        }
                    } catch (ex) {
                        gs.info("Failed to fetch Clould Details for " + record.request_id);
                    }
                }
                record.estimated_label = gs.getMessage("Estimated Time of Completion");
                switch (record.request_status) {
                    case "Requested":
                        record.show_clone_cancel_button = true;
                        record.show_clock_running = true;
                        break;
                    case "Running":
                        record.show_clone_cancel_button = true;
                        record.show_clock_running = true;
                        break;
                    case "Canceled":
                        record.show_clone_outline = true;
                        break;
                    case "Error":
                        record.show_clone_cancel_button = false;
                        record.show_red_error = true;
                        record.error_message = cloneStatusGr.error_message ? cloneStatusGr.error_message : gs.getMessage("Error Occured . Please contact support");
                        break;
                    case "Completed":
                        record.estimated_label = gs.getMessage("Duration of Clone");
                        record.rollback_eligible_until_date = gs.getMessage("Rollback eligible until {0}", cloneStatusGr.getDisplayValue('rollback_eligible_until_date'));
                        record.estimated_value = cloneStatusGr.getDisplayValue("duration");
                        record.show_green_tick = true;
                        record.show_roll_back_button = true;
                        break;
                    case "Rolled back":
                        record.show_rollback_top = true;
                        break;
                    case "Rolling back":
                        record.show_rollback_top = true;
                        break;
                    case "Rollback failure":
                        record.show_rollback_top = true;
                        break;
                    case "Rollback requested":
                        record.show_rollback_top = true;
                        break;
                    default:
                        record.request_status = gs.getMessage("Invalid State");
                }
                record.request_status = record.clone_status_heading + " : " + record.request_status;
            }
        } catch (exception) {
            record.request_status = gs.getMessage("Failed Fetching Record");
            record.main_content_css = "none";
            record.show_record_missing = true;
            gs.info("Failed in fetching Data" + exception + exception.stack);
        }
        result.body = record;
        result.status = this.setStatus(result.body);
        return result;
    },

    cancelRollbackCloneRequest: function(cloneId, reason, request_type) {
        var cloneRestService = new sn_instance_clone.CloneRestService();
        var result = {};
        try {
            if (request_type == "cancelOptions") {
                result.body = cloneRestService.cancelClone(cloneId, reason);
            }
            if (request_type == "rollbackOptions") {
                result.body = cloneRestService.rollbackClone(cloneId, reason);
            }
            cloneRestService.getCloneStatus(cloneId);
            result.status = this.setStatus(result.body);
            return result;
        } catch (ex) {}
    },

    updateRecord: function(table, sysId, props) {
        var result = {};
        sysId = this.updateRecordGr(table, sysId, props);
        if (sysId) {
            result.body = {
                isError: false,
                sysId: sysId
            };
        } else {
            result.body = {
                isError: true,
                message: gs.getMessage('Invalid update')
            };
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    authenticateInstance: function(instanceUrl, userName, password, registerInstance) {
        var cloneRestService = new sn_instance_clone.CloneRestService(),
            result = {},
            cloneReqSysId = '';
        if (!registerInstance)
            cloneReqSysId = gs.generateGUID();
        result.body = cloneRestService.authenticateInstance(instanceUrl, userName, password, cloneReqSysId);
        result.status = this.setStatus(result.body);
        result.body['cloneReqSysId'] = cloneReqSysId;
        return result;
    },

    deleteRecord: function(table, sysId) {
        var deleted = this.deleteRecordGr(table, sysId);
        var result = {};
        if (deleted) {
            result.body = {
                isError: false,
                sysId: sysId
            };
        } else {
            result.body = {
                isError: true,
                message: gs.getMessage('Invalid update')
            };
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    createRecord: function(table, valuePairs) {
        var result = {};
        var sysId = this._grRecordCreator(table, valuePairs, null);
        if (sysId) {
            result.body = {
                isError: false,
                sysId: sysId
            };
        } else {
            result.body = {
                isError: true,
                message: gs.getErrorMessages()[0],
            };
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    readRecord: function(table, sysId) {
        var result = {};
        result.body = {
            "record": this.getRecord(table, sysId, props)
        };
        result.status = this.setStatus(result.body);
        return result;
    },

    getSysUsersRecord: function(query) {
        var result = {};
        result.body = this.getSysUsers(query);
        result.status = this.setStatus(result.body);
        return result;
    },

    getRemoteInstanceCloneProfileList: function(instanceUrl, username, password) {
        var result = {};
        if (!instanceUrl.startsWith("https://") &amp;&amp; !instanceUrl.startsWith("http://")) {
            instanceUrl = "https://" + instanceUrl;
        }
        result.body = ProfileUtils.fetchProfilesFromInstance(instanceUrl, username, password);
        result.status = this.setStatus(result.body);
        return result;
    },

    getRemoteInstanceDefinitionsData: function(instanceUrl, username, password, profileName) {
        var result = {};
        if (!instanceUrl.startsWith("https://") &amp;&amp; !instanceUrl.startsWith("http://")) {
            instanceUrl = "https://" + instanceUrl;
        }
        result.body = ProfileUtils.buildConfigCountFromRemoteInstance(instanceUrl, username, password, profileName);
        if (!gs.nil(result.body) &amp;&amp; !result.body.isError) {
            if (gs.nil(result.body.exclusion.count)) {
                result.body.exclusion.count = "N/A";
            }
            if (gs.nil(result.body.preserver.count)) {
                result.body.preserver.count = "N/A";
            }
            if (gs.nil(result.body.cleanupScript.count)) {
                result.body.cleanupScript.count = "N/A";
            }
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    getCloneProfileData: function(sysId) {
        var result = {};
        result.body = this.getCloneProfileRecord(sysId);
        result.status = this.setStatus(result.body);
        return result;
    },

    setStatus: function(obj) {
        if (!obj) {
            return 400;
        }
        return 200;
    },

    getRecord: function(table, sysId, props /* Array of fields */ ) {
        var result = {};
        var _self = this;
        try {
            var gr = new GlideRecordSecure(table);
            if (gr.get(sysId)) {
                props.forEach(function(prop) {
                    result[prop] = gr[prop].toString(); //Do not use getValue() as it is showing display value in some cases like incident.category
                });
            }
            return result;
        } catch (e) {
            return result;
        }
    },

    _grRecordCreator: function(table, valuePairs) {
        try {
            var clonedValuePairs = {},
                field;
            var gr = new GlideRecordSecure(table);
            gr.initialize();
            for (field in clonedValuePairs) {
                gr[field] = clonedValuePairs[field];
            }
            for (field in valuePairs) {
                gr[field] = valuePairs[field];
            }
            if (gr.canWrite()) {
                return gr.insert();
            } else {
                gs.error("Inserting record failed to perform the operation as the user don't have write accesss " + table);
            }
        } catch (e) {
            return null;
        }
    },

    deleteRecordGr: function(table, sysId) {
        var gr = new GlideRecordSecure(table);
        if (gr.get(sysId)) return gr.deleteRecord();
        return null;
    },

    updateRecordGr: function(table, sysId, props) {
        var gr = new GlideRecordSecure(table);
        var result = null;
        if (gr.get(sysId)) {
            for (var key in props) {
                gr.setValue(key, props[key]);
            }
            if (gr.canWrite()) {
                result = gr.update();
                if (result) {
                    return result;
                } else {
                    gs.error("Updating record failed to perform the operation");
                }
            } else {
                gs.error("Updating record failed to perform the operation as the user don't have write accesss " + table + " " + sysId);
            }
        }
        return null;
    },

    getDefinitions: function(currentProfileSysId) {
        var definitions = {
            excluderCount: 0,
            excluderTable: '',
            excluderLabel: 'Clone Exclusions',
            excluderRowName: 'name',
            preserverCount: 0,
            preserverTable: '',
            preserverLabel: 'Clone Preservers',
            preserverRowName: 'table',
            cleanupScriptCount: 0,
            cleanupScriptTable: '',
            cleanupScriptLabel: 'Clone Cleanup Scripts',
            cleanupScriptRowName: 'name',
        };
        var props = {};
        if (gs.nil(currentProfileSysId)) {
            definitions.excluderCount = this.getRecordCount(CloneConstants.tableName.CLONE_DATA_EXCLUSION);
            definitions.excluderTable = CloneConstants.tableName.CLONE_DATA_EXCLUSION;
            definitions.preserverCount = this.getRecordCount(CloneConstants.tableName.CLONE_DATA_PRESERVER);
            definitions.preserverTable = CloneConstants.tableName.CLONE_DATA_PRESERVER;
            definitions.cleanupScriptCount = this.getRecordCount(CloneConstants.tableName.CLONE_CLEANUP_SCRIPT);
            definitions.cleanupScriptTable = CloneConstants.tableName.CLONE_CLEANUP_SCRIPT;
        } else {
            definitions.excluderCount = this.getRecordCount(CloneConstants.tableName.CLONE_PROFILE_EXCLUSION, currentProfileSysId);
            definitions.excluderTable = CloneConstants.tableName.CLONE_PROFILE_EXCLUSION;
            definitions.excluderRowName = 'exclusion';
            definitions.preserverCount = this.getRecordCount(CloneConstants.tableName.CLONE_PROFILE_PRESERVER, currentProfileSysId);
            definitions.preserverTable = CloneConstants.tableName.CLONE_PROFILE_PRESERVER;
            definitions.preserverRowName = 'preserver';
            definitions.cleanupScriptCount = this.getRecordCount(CloneConstants.tableName.CLONE_PROFILE_CLEANUP_SCRIPT, currentProfileSysId);
            definitions.cleanupScriptTable = CloneConstants.tableName.CLONE_PROFILE_CLEANUP_SCRIPT;
            definitions.cleanupScriptRowName = 'cleanup_script';
        }
        return definitions;
    },

    getRecordCount: function(table, currentProfileSysId) {
        var tableGr = new GlideAggregate(table);
        tableGr.addAggregate('COUNT');
        if (!gs.nil(currentProfileSysId)) {
            var query = tableGr.addQuery('profile', currentProfileSysId);
            query.addOrCondition('profile.name', 'System Profile');
        }
		if(tableGr.isValidField('active'))
			tableGr.addQuery('active', true);
			tableGr.query();
        if (tableGr.next())
            return tableGr.getAggregate('COUNT');
    },

    getTargetInstances: function() {
        var instanceGr = new GlideRecord("instance");
        instanceGr.addQuery("source", false);
        instanceGr.orderBy("instance_name");
        instanceGr.query();
        var items = [];
        while (instanceGr.next()) {
            var instance = {};
            instance.label = instanceGr.getValue("instance_name");
            instance.instanceUrl = instanceGr.getValue("instance_url");
            instance.id = instanceGr.getValue("sys_id");
            items.push(instance);
        }
        return items;
    },

    getSourceInstances: function() {
        var instanceGr = new GlideRecord("instance");
        instanceGr.addQuery("source", false);
        instanceGr.orderBy("instance_name");
        instanceGr.query();
        var items = [];
        items.push({
            label: gs.getMessage("Current instance"),
            instanceUrl: "",
            id: "currentInstance"
        });
        while (instanceGr.next()) {
            var instance = {};
            instance.label = instanceGr.getValue("instance_name");
            instance.instanceUrl = instanceGr.getValue("instance_url");
            instance.id = instanceGr.getValue("sys_id");
            items.push(instance);
        }
        return items;
    },

    getNextAvailableSlot: function(srcInstanceSysId, targetInstanceSysId) {
        var result = {};
        if (targetInstanceSysId) {
            var srcInstanceId = "";
            if (!gs.nil(srcInstanceSysId)) {
                srcInstanceId = this.getInstanceId(srcInstanceSysId);
            }
            var targetInstanceId = this.getInstanceId(targetInstanceSysId);
            result.body = this.cloneRestService.getNextAvailableSlot(srcInstanceId, targetInstanceId);
        }
        if (!gs.nil(result.body) &amp;&amp; !result.body.isError) {
            result.body.estimatedDuration = this.millisecondToDuration(result.body.estimatedDurationMs);
            //converting date time into user date time format
            result.body.estimatedStartDateTime = this.convertDateTimeToUserDateTime(result.body.estimatedStartDateTime);
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    getMaximumCloneOccurrence: function(maxCloneDuration, frequency) {
        var result = {};
        var maxCloneOccurrences = CloneUtils.getMaxCloneOccurrence(maxCloneDuration, frequency);
        result.body = {
            maxCloneOccurrences: maxCloneOccurrences || 0
        };
        result.status = this.setStatus(result.body);
        return result;
    },

    getEstimatedCloneSeriesEndDate: function(requestedTime, cloneFrequency, numberOfOccurrences, days) {
        var result = {};
        var estimatedSeriesEndDate = CloneUtils.getEstimatedSeriesEndDate(requestedTime, cloneFrequency, numberOfOccurrences, days);
        result.body = {
            estimatedSeriesEndDate: estimatedSeriesEndDate.displayValue || estimatedSeriesEndDate
        };
        result.status = this.setStatus(result.body);
        return result;
    },

    getCloneProfiles: function() {
        var cloneProfileGr = new GlideRecord("clone_profile");
        cloneProfileGr.query();
        var items = [];
        while (cloneProfileGr.next()) {
            var profile = {};
            profile.label = cloneProfileGr.getValue("name");
            profile.id = cloneProfileGr.getValue("sys_id");
            items.push(profile);
        }
        return items;
    },

    getSysUsers: function(query) {
        var filter = "emailISNOTEMPTY";
        if (!gs.nil(query)) {
            filter += "^emailSTARTSWITH" + query;
        }
        var sysUserGr = new GlideRecord("sys_user");
        sysUserGr.addEncodedQuery(filter);
        sysUserGr.orderBy('email');
        sysUserGr.setLimit(10);
        sysUserGr.query();
        var users = [];
        while (sysUserGr.next()) {
            var userData = {
                avatarProps: {}
            };
            userData.label = sysUserGr.getValue("email");
            userData.id = sysUserGr.getValue("sys_id");
            userData["avatarProps"]["imageSrc"] = sysUserGr.getValue("avatar") ? sysUserGr.getValue("avatar") + ".iix" : "";
            userData["avatarProps"]["userName"] = sysUserGr.getValue("name");
            users.push(userData);
        }
        return users;
    },

    getCurrentUserDetails: function() {
        var sysUserGr = new GlideRecord("sys_user");
        var currentUserSysId = gs.getUserID();
        sysUserGr.addQuery("sys_id", currentUserSysId);
        sysUserGr.query();
        var userData = {};
        if (sysUserGr.next()) {
            userData.label = sysUserGr.getValue("email");
            userData.id = sysUserGr.getValue("sys_id");
            userData["avatarProps"] = {};
            userData["avatarProps"]["imageSrc"] = sysUserGr.getValue("avatar") ? sysUserGr.getValue("avatar") + ".iix" : "";
            userData["avatarProps"]["userName"] = sysUserGr.getValue("name");
        }
        return userData;
    },

    getCloneProfileDefaultRecord: function() {
        return record = {
            "amount_of_data_copied_from_large_tables": "full",
            "default_profile": false,
            "exclude_all_from_exclusion_list": true,
            "exclude_large_data": true,
            "filter_attachment_data": true,
            "name": "",
            "on_demand_backup": false,
            "preserve_in_progress_update_sets": "none",
            "preserve_theme": true,
            "target_instance": "",
            "header": gs.getMessage("Add new clone profile"),
            "modalDeleteMessageText": gs.getMessage("Are you sure you want to delete the Clone profile "),
            "dataCopyItems": [{
                    "id": "full",
                    "label": gs.getMessage("Full")
                },
                {
                    "id": "last_90_days",
                    "label": gs.getMessage("Last 90 days")
                }
            ],
            "updateSetItems": [{
                    "id": "none",
                    "label": gs.getMessage("--None--")
                },
                {
                    "id": "last_90_days",
                    "label": gs.getMessage("Last 90 days")
                }
            ]
        };
    },

    getCloneProfileRecord: function(sysId) {
        var record = this.getCloneProfileDefaultRecord();
        if (gs.nil(sysId)) {
            record.preserversCount = this.getRecordCount(CloneConstants.tableName.CLONE_DATA_PRESERVER);
            record.exclusionsCount = this.getRecordCount(CloneConstants.tableName.CLONE_DATA_EXCLUSION);
            record.cleanupScriptsCount = this.getRecordCount(CloneConstants.tableName.CLONE_CLEANUP_SCRIPT);
        } else {
            var cloneProfileGr = new GlideRecord("clone_profile");
            cloneProfileGr.get(sysId);
            record.name = cloneProfileGr.getValue("name");
            record.amount_of_data_copied_from_large_tables = cloneProfileGr.getValue("amount_of_data_copied_from_large_tables");
            record.default_profile = cloneProfileGr.getDisplayValue("default_profile");
            record.exclude_all_from_exclusion_list = cloneProfileGr.getDisplayValue("exclude_all_from_exclusion_list") || "No";
            record.exclude_large_data = cloneProfileGr.getDisplayValue("exclude_large_data");
            record.filter_attachment_data = cloneProfileGr.getDisplayValue("filter_attachment_data");
            record.on_demand_backup = cloneProfileGr.getDisplayValue("on_demand_backup");
            record.preserve_in_progress_update_sets = cloneProfileGr.getValue("preserve_in_progress_update_sets") || "none";
            record.preserve_theme = cloneProfileGr.getDisplayValue("preserve_theme");
            record.sys_class_name = cloneProfileGr.getValue("sys_class_name");
            record.sys_created_by = cloneProfileGr.getValue("sys_created_by");
            record.sys_created_on = cloneProfileGr.getValue("sys_created_on");
            record.sys_id = cloneProfileGr.getValue("sys_id");
            record.sys_scope = cloneProfileGr.getValue("sys_scope");
            record.target_instance = cloneProfileGr.getValue("target_instance");
            record.header = record.name;
            var definitions = this.getDefinitions(sysId || CloneConstants.SYSTEM_PROFILE_SYS_ID);
            record.preserversCount = definitions.preserverCount;
            record.exclusionsCount = definitions.excluderCount;
            record.cleanupScriptsCount = definitions.cleanupScriptCount;
        }
        return record;
    },

    getCloneRequestData: function() {
        return {
            "frequencyCard": {
                "cloneFrequency": {
                    "items": [{
                        "id": "0",
                        "label": gs.getMessage("None")
                    }, {
                        "id": "1",
                        "label": gs.getMessage("Weekly")
                    }, {
                        "id": "2",
                        "label": gs.getMessage("Bi-Weekly")
                    }, {
                        "id": "3",
                        "label": gs.getMessage("Monthly")
                    }],
                    "selected": ""
                },
                "occurrences": {
                    "show": "false",
                    "label": gs.getMessage("Occurrences cannot be more than "),
                    "maxCount": 0,
                    "count": 0
                },
                "estimatedEndDateLabel": gs.getMessage("Estimated End Date : "),
                "estimatedEndDate": "",
                "estimatedEdnDateShow": "false",
                "weeklyBiweekly": {
                    "show": "false",
                    "label": "",
                    "monthlyLabel": gs.getMessage("Every four weeks on"),
                    "weeklyLabel": gs.getMessage("Weekly on"),
                    "biweeklyLabel": gs.getMessage("Bi-weekly on"),
                    "days": {
                        "sunday": {
                            "variant": "secondary",
                            "selected": "false"
                        },
                        "monday": {
                            "variant": "secondary",
                            "selected": "false"
                        },
                        "tuesday": {
                            "variant": "secondary",
                            "selected": "false"
                        },
                        "wednesday": {
                            "variant": "secondary",
                            "selected": "false"
                        },
                        "thursday": {
                            "variant": "secondary",
                            "selected": "false"
                        },
                        "friday": {
                            "variant": "secondary",
                            "selected": "false"
                        },
                        "saturday": {
                            "variant": "secondary",
                            "selected": "false"
                        }
                    }
                }
            },
            "estimatedDurationInfoMessage": gs.getMessage("Based on the Clone Scheduled Start time specified above and the size of the data to be copied to the target instance, the estimated duration for the Clone is "),
            "estimatedDurationLabel": gs.getMessage("Estimated duration"),
            "successModalInfoMessage": gs.getMessage("The estimated duration for the Clone is "),
            "authenticateTargetHeader": gs.getMessage("Authenticate Target - "),
            "today": this.getTodaysDate(),
            "timeZone": this.getTimeZone(),
            "errorMessage": gs.getMessage("Clone Request creation failed"),
            "dataCopyItems": [{
                    "id": "full",
                    "label": gs.getMessage("Full")
                },
                {
                    "id": "last_90_days",
                    "label": gs.getMessage("Last 90 days")
                }
            ],
            "updateSetItems": [{
                    "id": "none",
                    "label": gs.getMessage("--None--")
                },
                {
                    "id": "last_90_days",
                    "label": gs.getMessage("Last 90 days")
                }
            ],
            "text": {
                "None": gs.getMessage("None"),
                "Current_instance": gs.getMessage("Current instance"),
                "Yes": gs.getMessage("Yes"),
                "No": gs.getMessage("No"),
                "Full": gs.getMessage("Full"),
                "Last_90_days": gs.getMessage("Last 90 days"),
                "Authenticate": gs.getMessage("Authenticate"),
                "Authenticating": gs.getMessage("Authenticating"),
                "NumberZero": gs.getMessage("0"),
                "Exclusions": gs.getMessage("Exclusions"),
                "Preservers": gs.getMessage("Preservers"),
                "Cleanup_Scripts": gs.getMessage("Cleanup Scripts"),
                "GenericErrorMessage": gs.getMessage("Error Occurred. Please contact your administrator."),
                "OnDemandBackupMessage": gs.getMessage("Requesting on-demand backup will increase the time for your clone"),
            }
        };
    },

    runPreflightChecks: function(cloneProfileSysId, validationRules, largeTablesList) {
        var result = {};
        result.body = CloneUtils.runPreflightChecks(cloneProfileSysId, validationRules, largeTablesList);
        result.status = this.setStatus(result.body);
        return result;
    },

    createCloneRequest: function(cloneRequestData) {
        var result = {};
        var gr = new GlideRecord("sn_instance_clone_request");
        var scheduledGlideDateTime = new GlideDateTime();
        scheduledGlideDateTime.setDisplayValue(cloneRequestData.estimated_start_date_time);
        var estimatedGlideDuration = new GlideDuration(cloneRequestData.estimated_duration);
        gr.initialize();
        gr.setValue("amount_of_data_copied_from_large_tables", cloneRequestData.amount_of_data_copied_from_large_tables);
        gr.setValue("email", cloneRequestData.email_upon_completion);
        gr.setValue("estimated_clone_duration", estimatedGlideDuration);
        gr.setValue("exclude_all_from_exclusion_list", cloneRequestData.exclude_all_from_exclusion_list);
        gr.setValue("exclude_large_data", cloneRequestData.exclude_large_data);
        gr.setValue("filter_attachment_data", cloneRequestData.filter_attachment_data);
        gr.setValue("clone_frequency", cloneRequestData.frequency);
        gr.setValue("lock_profile_settings", cloneRequestData.lock_profile_settings);
        gr.setValue("occurrences", cloneRequestData.occurrences);
        gr.setValue("on_demand_backup", cloneRequestData.on_demand_backup);
        gr.setValue("preserve_in_progress_update_sets", cloneRequestData.preserve_in_progress_update_sets);
        gr.setValue("preserve_theme", cloneRequestData.preserve_theme);
        gr.setValue("profile", cloneRequestData.clone_profile);
        gr.setValue("profile_name", cloneRequestData.clone_profile_name);
        gr.setValue("scheduled", scheduledGlideDateTime.getValue());
        gr.setValue("source_instance", cloneRequestData.source_instance);
        gr.setValue("state", "Requested");
        gr.setValue("target_instance", cloneRequestData.target_instance);
        gr.setValue("cloud_details", JSON.stringify(cloneRequestData.cloud_details));
        gr.setValue('security_token', cloneRequestData.securityToken);
        gr.setNewGuidValue(cloneRequestData.cloneReqSysId);
        var response = CloneUtils.validateAndSubmitCloneRequest(gr);
        if (response.isError) {
            result.body = {
                error: response.message.join("&lt;br/&gt;&lt;br/&gt;")
            };
            result.status = 400;
            return result;
        }
        try {
            CloneUtils.generateRecurringClones(gr, cloneRequestData.selectedDayOfWeek);
            var cloneRequestId = gr.getValue("sys_id");
            result.body = {
                cloneRequestId: cloneRequestId
            };
            result.status = 200;
        } catch (e) {
            result.body = {
                error: "Clone request created, but failed to create recurring clones."
            };
            result.status = 400;
        }
        return result;
    },

    getCalendarEntries: function(startDate, endDate, targetInstanceSysId) {
        startDate = new GlideDateTime(startDate);
        endDate = new GlideDateTime(endDate);
        var result = {};
        if (targetInstanceSysId) {
            var targetInstanceId = this.getInstanceId(targetInstanceSysId);
            result.body = CloneUtils.getConflictsArray(startDate, endDate, targetInstanceId);
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    getInstanceId: function(instanceSysId) {
        var gr = new GlideRecord("instance");
        if (gr.get(instanceSysId)) {
            return gr.instance_id;
        }
        return null;
    },

    getTodaysDate: function() {
        var today = new GlideDateTime();
        return today.getDisplayValue().split(' ')[0];
    },

    getTimeZone: function() {
        var session = gs.getSession();
        var zoneName = session.getTimeZoneName();
        return zoneName;
    },

    getListHeader: function(tableName) {
        switch (tableName) {
            case 'clone_data_exclude':
                return gs.getMessage('Exclusions');
            case 'clone_data_preserver':
                return gs.getMessage('Preservers');
            case 'clone_cleanup_script':
                return gs.getMessage('Cleanup scripts');
            default:
        }
    },

    millisecondToDuration: function(millisecond) {
        var duration = new GlideDuration(millisecond);
        return duration.getDisplayValue();
    },

    convertDateTimeToUserDateTime: function(dateTime) {
        var userDateTime = new GlideDateTime(dateTime);
        //GlideDateTime .getDisplayValue method returns date time in user date time format
        return userDateTime.getDisplayValue();
    },

    checkSlotAvailability: function(sourceInstanceSysId, targetInstanceSysId, requestedTime) {
        var result = {};
        var requestedTimeGlideDateTime = new GlideDateTime();
        requestedTimeGlideDateTime.setDisplayValue(requestedTime);
        var bufferTime = new GlideTime();
        bufferTime.setValue("00:05:00"); // Setting buffer time as 5 min
        var currentTime = new GlideDateTime();
        currentTime.subtract(bufferTime);
        if (requestedTimeGlideDateTime.before(currentTime)) {
            result.body = {
                isError: true,
                message: gs.getMessage("Scheduled start time cannot be past time.")
            };
            result.status = this.setStatus(result.body);
            return result;
        }
        if (targetInstanceSysId) {
            var sourceInstanceId = "";
            if (!gs.nil(sourceInstanceSysId)) {
                sourceInstanceId = this.getInstanceId(sourceInstanceSysId);
            }
            var targetInstanceId = this.getInstanceId(targetInstanceSysId);
            result.body = this.cloneRestService.checkForAvailableSlot(sourceInstanceId, targetInstanceId, requestedTimeGlideDateTime.getValue());
        }
        if (!result.body.isError) {
            result.body.estimatedDuration = this.millisecondToDuration(result.body.estimatedDurationMs);
            //converting date time into user date time format
            result.body.estimatedStartDateTime = this.convertDateTimeToUserDateTime(requestedTimeGlideDateTime.getValue());
        }
        result.status = this.setStatus(result.body);
        return result;
    },

    getCloneProfileDefinitionDetails: function(tableName, filter) {
        var result = {
            "header": gs.getMessage("All"),
            "listAlertMessage": gs.getMessage(" saved successfully"),
            "listAlertDeleteMessage": gs.getMessage("clone profile deleted successfully")
        };
        switch (tableName) {
            case 'clone_data_exclude':
                result.header = gs.getMessage('Exclusions');
                break;
            case 'clone_profile_exclusions':
                result.header = gs.getMessage('Exclusions');
                result.definitions = this.getAvailableDefinitions(CloneConstants.tableName.CLONE_DATA_EXCLUSION, tableName, filter, this.PROFILE_EXCLUSION_KEY);
                result.selected = this.getSelectedDefinitions(tableName, filter, this.PROFILE_EXCLUSION_KEY);
                break;
            case 'clone_data_preserver':
                result.header = gs.getMessage('Preservers');
                break;
            case 'clone_profile_preservers':
                result.header = gs.getMessage('Preservers');
                result.definitions = this.getAvailableDefinitions(CloneConstants.tableName.CLONE_DATA_PRESERVER, tableName, filter, this.PROFILE_PRESERVER_KEY);
                result.selected = this.getSelectedDefinitions(tableName, filter, this.PROFILE_PRESERVER_KEY);
                break;
            case 'clone_cleanup_script':
                result.header = gs.getMessage('Cleanup scripts');
                break;
            case 'clone_profile_cleanup_scripts':
                result.header = gs.getMessage('Cleanup scripts');
                result.definitions = this.getAvailableDefinitions(CloneConstants.tableName.CLONE_CLEANUP_SCRIPT, tableName, filter, this.PROFILE_CLEANUP_SCRIPT_KEY);
                result.selected = this.getSelectedDefinitions(tableName, filter, this.PROFILE_CLEANUP_SCRIPT_KEY);
                break;
            default:
        }
        result.breadcrumbs = this.getBreadcrumbs(filter, result.header) || [];
        return result;
    },

    getBreadcrumbs: function(filter, header) {
        if (!filter) {
            return [];
        }
        var currentProfileName = filter.split('IN')[1].split(',')[1];
        var profileId = this.getCloneProfileId(currentProfileName);
        var link = '/now/clone/ui/clone-profile/' + profileId + '/params/aceNav/clone_profile';
        var breadcrumbs = [{
                label: currentProfileName,
                href: link
            },
            {
                label: header,
                href: '#'
            },
        ];
        return breadcrumbs;
    },

    getCloneProfilesForDefinition: function(table, sysId) {
        var result = {},
            available = {},
            selected = [],
            profiles = {},
            cloneProfileTable,
            definitionKey;
        switch (table) {
            case CloneConstants.tableName.CLONE_DATA_EXCLUSION:
                cloneProfileTable = CloneConstants.tableName.CLONE_PROFILE_EXCLUSION;
                definitionKey = this.PROFILE_EXCLUSION_KEY;
                break;
            case CloneConstants.tableName.CLONE_DATA_PRESERVER:
                cloneProfileTable = CloneConstants.tableName.CLONE_PROFILE_PRESERVER;
                definitionKey = this.PROFILE_PRESERVER_KEY;
                break;
            case CloneConstants.tableName.CLONE_CLEANUP_SCRIPT:
                cloneProfileTable = CloneConstants.tableName.CLONE_PROFILE_CLEANUP_SCRIPT;
                definitionKey = this.PROFILE_CLEANUP_SCRIPT_KEY;
                break;
            default:
                break;
        }
        var profileGr = new GlideRecord('clone_profile');
        profileGr.addQuery('sys_id', '!=', CloneConstants.SYSTEM_PROFILE_SYS_ID);
        profileGr.query();
        while (profileGr.next()) {
            var gr = new GlideRecord(cloneProfileTable);
            gr.addQuery(definitionKey, sysId);
            gr.addQuery('profile', profileGr.sys_id);
            gr.query();
            if (gr.next()) {
                var selectedProfile = [];
                var selectedItem = {};
                selectedItem.id = gr.getValue('profile');
                selectedItem.label = gr.getDisplayValue('profile');
                selectedProfile.push(selectedItem);
                selected.push(selectedProfile);
            } else {
                var profileId = profileGr.sys_id;
                var profileName = profileGr.getValue('name');
                var item = {};
                item.label = profileName;
                profiles[profileId] = item;
            }
        }
        available.profiles = profiles;
        result.available = available;
        result.selected = selected;
        return result;
    },

    getAvailableDefinitions: function(baseTable, table, filter, key) {
        var result = {};
        var definitions = {};
        var currentProfileName = filter.split('IN')[1].split(',')[1];
        var profileId = this.getCloneProfileId(currentProfileName);
        var finalQuery = 'profile=' + profileId + '^' + key + '=';
        var gr = new GlideRecord(baseTable);
        gr.addQuery('default', false);
        if (baseTable == CloneConstants.tableName.CLONE_CLEANUP_SCRIPT)
            gr.addQuery('active', true);
        gr.query();
        while (gr.next()) {
            var definitionId = gr.getUniqueValue();
            var item = {};
            var definitionName = gr.getDisplayValue('name');
            var grt = new GlideRecord(table);
            grt.addEncodedQuery(finalQuery + definitionId);
            grt.query();
            if (!grt.next()) {
                item.label = definitionName;
                definitions[definitionId] = item;
            }
        }
        result.definitions = definitions;
        return result;
    },

    getSelectedDefinitions: function(table, filter, key) {
        var result = [];
        var currentProfileName = filter.split('IN')[1].split(',')[1];
        var profileId = this.getCloneProfileId(currentProfileName);
        var grt = new GlideRecord(table);
        grt.addQuery('profile', profileId);
        grt.query();
        while (grt.next()) {
            var selected = [];
            var item = {};
            item.id = grt.getValue(key);
            item.label = grt.getDisplayValue(key);
            selected.push(item);
            result.push(selected);
        }
        return result;
    },

    getCloneProfileId: function(profileName) {
        var cloneProfileGr = new GlideRecord('clone_profile');
        cloneProfileGr.addQuery('name', profileName);
        cloneProfileGr.query();
        if (cloneProfileGr.next()) {
            return cloneProfileGr.getUniqueValue();
        }
        return '';
    },

    getCloneProfileName: function(sysId) {
        var result = {
            body: {
                "isError": true,
                "name": ''
            }
        };
        var cloneProfileGr = new GlideRecord('clone_profile');
        if (cloneProfileGr.get(sysId)) {
            result.body.isError = false;
            result.body.name = cloneProfileGr.getValue('name');
            result.status = this.setStatus(result.body);
            return result;
        }
        result.status = this.setStatus('');
        return result;
    },

    createM2MRecordsForDefinitions: function(table, filter, items) {
        var result = {};
        var currentProfileName = filter.split('IN')[1].split(',')[1];
        var profileId = this.getCloneProfileId(currentProfileName);
        var key;
        switch (table) {
            case CloneConstants.tableName.CLONE_PROFILE_EXCLUSION:
                key = this.PROFILE_EXCLUSION_KEY;
                break;
            case CloneConstants.tableName.CLONE_PROFILE_PRESERVER:
                key = this.PROFILE_PRESERVER_KEY;
                break;
            case CloneConstants.tableName.CLONE_PROFILE_CLEANUP_SCRIPT:
                key = this.PROFILE_CLEANUP_SCRIPT_KEY;
                break;
        }
        items.haveToCreate.forEach(function(item) {
            var createDefinitionGr = new GlideRecord(table);
            createDefinitionGr.initialize();
            createDefinitionGr.setValue('profile', profileId);
            createDefinitionGr.setValue(key, item);
            createDefinitionGr.insert();
        });
        items.haveToDelete.forEach(function(item) {
            var deleteDefinitionGr = new GlideRecord(table);
            deleteDefinitionGr.addQuery(key, item);
            deleteDefinitionGr.addQuery('profile', profileId);
            deleteDefinitionGr.query();
            if (deleteDefinitionGr.next()) {
                deleteDefinitionGr.deleteRecord();
            }
        });
        result.body = {
            "isError": false
        };
        result.status = this.setStatus(result.body);
        return result;
    },
	
    createM2MRecordsWithProfilesForDefinition: function(table, sysId, items) {
        var result = {};
        var profileDefinitionTable;
        var key;
        switch (table) {
            case CloneConstants.tableName.CLONE_DATA_EXCLUSION:
                key = this.PROFILE_EXCLUSION_KEY;
                profileDefinitionTable = CloneConstants.tableName.CLONE_PROFILE_EXCLUSION;
                break;
            case CloneConstants.tableName.CLONE_DATA_PRESERVER:
                key = this.PROFILE_PRESERVER_KEY;
                profileDefinitionTable = CloneConstants.tableName.CLONE_PROFILE_PRESERVER;
                break;
            case CloneConstants.tableName.CLONE_CLEANUP_SCRIPT:
                key = this.PROFILE_CLEANUP_SCRIPT_KEY;
                profileDefinitionTable = CloneConstants.tableName.CLONE_PROFILE_CLEANUP_SCRIPT;
                break;
        }
        items.haveToCreate.forEach(function(item) {
            var createDefinitionGr = new GlideRecord(profileDefinitionTable);
            createDefinitionGr.initialize();
            createDefinitionGr.setValue('profile', item);
            createDefinitionGr.setValue(key, sysId);
            createDefinitionGr.insert();
        });
        items.haveToDelete.forEach(function(item) {
            var deleteDefinitionGr = new GlideRecord(profileDefinitionTable);
            deleteDefinitionGr.addQuery(key, sysId);
            deleteDefinitionGr.addQuery('profile', item);
            deleteDefinitionGr.query();
            if (deleteDefinitionGr.next()) {
                deleteDefinitionGr.deleteRecord();
            }
        });
        result.body = {
            "isError": false
        };
        result.status = this.setStatus(result.body);
        return result;
    },
    type: 'AdminCloneUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-09 12:31:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;47229b1feb30a110da1861c59c5228b0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;435&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AdminCloneUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Clone Admin Console" source="sn_instance_clone"&gt;31774a2953839110a6f8ddeeff7b12cb&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Clone Admin Console"&gt;31774a2953839110a6f8ddeeff7b12cb&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_47229b1feb30a110da1861c59c5228b0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-29 04:50:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:32</sys_created_on>
        <sys_id>9186b4d983f01210c6695855eeaad38e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AdminCloneUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9186b4d983f01210c6695855eeaad38e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:32</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
