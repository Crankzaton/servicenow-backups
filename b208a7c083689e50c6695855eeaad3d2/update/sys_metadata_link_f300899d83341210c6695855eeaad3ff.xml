<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b2630d35530330107234ddeeff7b1229</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFClassificationEvaluator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Evaluation script for 'Classification' Evaluation type&lt;/description&gt;
        &lt;name&gt;RFClassificationEvaluator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFClassificationEvaluator = Class.create();
RFClassificationEvaluator.prototype = Object.extendsObject(sn_rf.RFEvaluatorSNC, {
    category: 'rf_evaluation_script', // DO NOT REMOVE THIS LINE!

    getEvaluationOutputSchema: function(param) {
        var rfLogger = new RFLogger('RFClassificationEvaluator - getEvaluationOutputSchema');
        var inputs = param.inputs;
        var classification = new RFClassificationService(inputs.classification_definition);
        if (classification.hasValidRecord()) {
            var schema = [];
            var metaData = {};
            if (classification.getOutputFieldType() == RFConstants.evaluationOutputTypes.REFERENCE) {
                RFUtils.addToSchema(schema,
                    RFConstants.evaluationOutputNames.PREDICTED_RECORD,
                    RFConstants.evaluationOutputLabels.PREDICTED_RECORD,
                    RFConstants.evaluationOutputTypes.REFERENCE,
                    classification.getOutputFieldReferenceTable());
                metaData['uniqueKey'] = [RFConstants.evaluationOutputNames.PREDICTED_RECORD];
            } else {
                RFUtils.addToSchema(schema,
                    RFConstants.evaluationOutputNames.PREDICTED_VALUE,
                    RFConstants.evaluationOutputLabels.PREDICTED_VALUE,
                    RFConstants.evaluationOutputTypes.STRING);
                metaData['uniqueKey'] = [RFConstants.evaluationOutputNames.PREDICTED_VALUE];
            }
            RFUtils.addToSchema(schema,
                RFConstants.evaluationOutputNames.CONFIDENCE_SCORE,
                RFConstants.evaluationOutputLabels.CONFIDENCE_SCORE,
                RFConstants.evaluationOutputTypes.STRING);
            metaData['confidence'] = RFConstants.evaluationOutputNames.CONFIDENCE_SCORE;
            return {
                'status': RFConstants.SUCCESS,
                'schema': schema,
                'metaData': metaData
            };
        }
        var errorDetails = new RFExceptionManager('INVALID_CLASSIFICATION_SOLUTION_DEFINITION');
        rfLogger.logError('Solution definition ' + inputs.classification_definition + ' is invalid');
        return {
            'status': RFConstants.ERROR,
            'errorCode': errorDetails.getCode(),
            'errorMessage': errorDetails.getMessage()
        };
    },

    getEvaluationOutputs: function(param) {
        var rfLogger = new RFLogger('RFClassificationEvaluator - getEvaluationOutputs');
        var inputs = param.inputs;
        var classification = new RFClassificationService(inputs.classification_definition);

        if (classification.hasValidRecord()) {
            var additionalParameters = {};
            additionalParameters[RFConstants.mlPredictorOptions.TOP_N] = inputs.top_n_results;
            var predictions = classification.getPredictions(param.contextRecord, additionalParameters);
            rfLogger.logDebug('Classification solution ' + inputs.classification_definition + ' returned ' + predictions.length + ' predictions');
            var evaluationOutputs = [];
            for (var predictionIdx = 0; predictionIdx &lt; predictions.length; predictionIdx++) {
                var prediction = {};
                if (classification.getOutputFieldType() == RFConstants.evaluationOutputTypes.REFERENCE) {
                    prediction[RFConstants.evaluationOutputNames.PREDICTED_RECORD] = predictions[predictionIdx].predictedValueSysId();
                } else {
                    prediction[RFConstants.evaluationOutputNames.PREDICTED_VALUE] = predictions[predictionIdx].predictedValue();
                }
                prediction[RFConstants.evaluationOutputNames.CONFIDENCE_SCORE] = predictions[predictionIdx].confidence();
                evaluationOutputs.push(prediction);
            }
            return {
                'status': RFConstants.SUCCESS,
                'evaluationOutputs': evaluationOutputs
            };
        }
        var errorDetails = new RFExceptionManager('INVALID_CLASSIFICATION_SOLUTION_DEFINITION');
        rfLogger.logError('Solution definition ' + inputs.classification_definition + ' is invalid');
        return {
            'status': RFConstants.ERROR,
            'errorCode': errorDetails.getCode(),
            'errorMessage': errorDetails.getMessage()
        };
    },

    type: 'RFClassificationEvaluator'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-07 18:06:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b2630d35530330107234ddeeff7b1229&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFClassificationEvaluator&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b2630d35530330107234ddeeff7b1229&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-01 07:25:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:13</sys_created_on>
        <sys_id>f300899d83341210c6695855eeaad3ff</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFClassificationEvaluator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f300899d83341210c6695855eeaad3ff</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
