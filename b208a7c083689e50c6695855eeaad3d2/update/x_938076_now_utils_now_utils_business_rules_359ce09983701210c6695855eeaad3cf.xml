<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.isNewRecord() || current.asset_state.changes() || current.asset_substate.changes() || current.hardware_ci_status.changes() || current.hardware_ci_substatus.changes() || current.synch_direction.changes()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check if Asset/CI state already exists</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 /*
 The basic idea is to check if there is a record already existing with the same start point:
 if we are adding a record with direction A1 -> C1
     then we need to check if there is already A1 -> Cx or A1 <-> Cx
 if we are adding a record with direction C1 -> A1
     then we need to check if there is already C1 -> Ax or C1 <-> Ax
 if we are adding a record with direction both A1 <-> C1
     then we need to check if there is already A1 -> Cx or A1 <-> Cx or C1 -> Ax or C1 <-> Ax
  */
 if (current.getValue('synch_direction') === 'asset_to_ci') {
  if (_doesAssetExistAsStartPoint(current.asset_state, current.asset_substate)) {
   current.setAbortAction(true);
  }
 } else if (current.getValue('synch_direction') === 'ci_to_asset') {
  if (_doesCiExistAsStartPoint(current.hardware_ci_status, current.hardware_ci_substatus)) {
   current.setAbortAction(true);
  }
 } else if (current.getValue('synch_direction') === 'both') {
  if (_doesAssetExistAsStartPoint(current.asset_state, current.asset_substate) ||
      _doesCiExistAsStartPoint(current.hardware_ci_status, current.hardware_ci_substatus)) {
   current.setAbortAction(true);
  }
 } else {
  gs.addErrorMessage(gs.getMessage('Unsupported Synch direction value'));
  current.setAbortAction(true);
 }

 function _doesAssetExistAsStartPoint(state, substate) {
  var doesExist = _doesStartPointExistInField('asset_state', state, 'asset_substate', substate, 'asset_to_ci,both');
  if (doesExist) {
   gs.addErrorMessage(gs.getMessage("Either this mapping already exists or another mapping exists with a conflicting value for Asset state and substate."));
  }
  return doesExist;
 }

 function _doesCiExistAsStartPoint(status, substatus) {
  var doesExist = _doesStartPointExistInField('hardware_ci_status', status, 'hardware_ci_substatus', substatus, 'ci_to_asset,both');
  if (doesExist) {
   gs.addErrorMessage(gs.getMessage("Either this mapping already exists or another mapping exists with a conflicting value for Configuration Item status and substatus."));
  }
  return doesExist;
 }

 function _doesStartPointExistInField(stateField, state, substateField, substate, directions) {
  var gr = new GlideRecord(current.getTableName());
  gr.addQuery('synch_direction', 'IN', directions);
  gr.addQuery(stateField, state);
  gr.addQuery(substateField, substate);
  gr.query();
  return gr.hasNext();
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:08</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>359ce09983701210c6695855eeaad3cf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check if Asset/CI state already exists</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_359ce09983701210c6695855eeaad3cf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:08</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=359ce09983701210c6695855eeaad3cf"/>
</record_update>
