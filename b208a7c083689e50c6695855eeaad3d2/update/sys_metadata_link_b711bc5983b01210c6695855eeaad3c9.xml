<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2acbdc555b311010e91728582d81c789</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AISearchSourceRefQualUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This util class is used to limit the ais search source that can be selected in sys_search_filter and sy_search_source_filter table. The constraint is that selectable ais search sources must come from the same search profile as the sys_search_filter/sys_search_source_filter through sys_search_context_config which links to search profile.&lt;/description&gt;
        &lt;name&gt;AISearchSourceRefQualUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AISearchSourceRefQualUtils = Class.create();
AISearchSourceRefQualUtils.prototype = {
    initialize: function() {
    },
	
	getRefQualForSearchFilter: function(current) {
		var gr = new GlideRecord('ais_search_profile_ais_search_source_m2m'); 
		gr.addQuery('profile', current.search_context_config.search_profile);
		gr.addQuery('search_source.active', true);
		gr.query();
		var ids=[];
		while (gr.next()) {
			ids.push(gr.search_source.sys_id);
		}
		var result = 'sys_idIN' + ids.join(",");
		return result;
	},
	
	getRefQualForSearchSourceFilter: function(current) {
		var gr = new GlideRecord('ais_search_profile_ais_search_source_m2m'); 
		gr.addQuery('profile', current.search_filter.search_context_config.search_profile); 
		gr.addQuery('search_source.active', true);
		gr.query();
		var ids=[];
		while (gr.next()) {
			ids.push(gr.search_source.sys_id);
		}
		var result = 'sys_idIN' + ids.join(",");
		return result;
	},

    type: 'AISearchSourceRefQualUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-07-03 06:20:29&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2acbdc555b311010e91728582d81c789&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AISearchSourceRefQualUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Search Filters" source="com.glide.search.filters"&gt;3d38b8203cf1311068bcf327dfe37f4b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2acbdc555b311010e91728582d81c789&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-07-20 23:20:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:57</sys_created_on>
        <sys_id>b711bc5983b01210c6695855eeaad3c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AISearchSourceRefQualUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b711bc5983b01210c6695855eeaad3c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
