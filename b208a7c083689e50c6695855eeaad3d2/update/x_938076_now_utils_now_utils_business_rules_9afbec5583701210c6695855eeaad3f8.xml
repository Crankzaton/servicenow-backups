<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.run_calc_brs != false</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Parent Percent Complete</name>
        <order>110</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    if (current.sys_class_name != 'tm_test_case_instance') {
        var rollupAPI = new RollupAPI();
        var percentCompleteHelper = new PercentCompleteHelper();
        if (percentCompleteHelper.canRollup(current)) {
            if (current.operation() == "update" && current.parent.changes()) {
                if (previous != null && !previous.parent.nil()) {
                    gs.log("Rollup Previous Parent: " + previous.parent);
                    rollupAPI.rollup(previous, 'percent_complete', true);
                }
                if (!current.parent.nil()) {
                    rollupAPI.rollup(current, 'percent_complete', true);
                }
            }
   
            var triggerRollUpForStartChange = current.start_date.changes() && _checkIfparentDurationMightHaveChanged(current, previous);
            if (!current.parent.nil() && (current.percent_complete.changes() || current.duration.changes() || triggerRollUpForStartChange))
                rollupAPI.rollup(current, 'percent_complete', true);
        }
    }

    function _checkIfparentDurationMightHaveChanged(current, previous) {
        var currTask = new GlideRecord('planned_task');
        currTask.get(current.getUniqueValue());
        var currentStart = currTask.getValue('start_date');
        var currentEnd = currTask.getValue('end_date');
        var result = _getEarliestStartAndLatestEndDateOfSiblings(currTask.getValue('parent'), currTask.getUniqueValue());
  
  var earliestStartAndEndAreNotEmpty = JSUtil.notNil(result) && JSUtil.notNil(result.earliestStart) && JSUtil.notNil(result.latestEnd);
        if (!earliestStartAndEndAreNotEmpty)
            return false;
  
  PPMDebug.log('***result -> '+ JSON.stringify(result));
  var earliestStart = result.earliestStart;
  var latestEnd = result.latestEnd;

        var endDateExtended = _isCurrTaskEndDateLatest(currentEnd, latestEnd);
        var startedDateExtended = _isCurrTaskStartDateEarliest(currentStart, earliestStart);
        return endDateExtended || startedDateExtended;
    }

 
 function _getEarliestStartAndLatestEndDateOfSiblings(parentId, currId){
  var gAgg = new GlideAggregate('planned_task');
  
  gAgg.addQuery('parent',parentId);
  gAgg.addQuery('sys_id','NOT IN', currId);
  
  gAgg.addNotNullQuery('start_date');
  gAgg.addNotNullQuery('end_date');

  gAgg.addAggregate('MIN','start_date');
  gAgg.addAggregate('MAX','end_date');
  gAgg.setGroup(false);
  gAgg.query();
  if(gAgg.next()){
   return{
    earliestStart: gAgg.getAggregate('MIN','start_date'),
    latestEnd: gAgg.getAggregate('MAX','end_date')
   };
  }
  return null;
 }
 

    function _isCurrTaskEndDateLatest(currEnd, latestEnd) {
        var currentEndDate = new GlideDateTime(currEnd);
        var latestEndDate = new GlideDateTime(latestEnd);

        return currentEndDate.onOrAfter(latestEndDate);

    }

    function _isCurrTaskStartDateEarliest(currStart, earliestStart) {
        var currentStartDate = new GlideDateTime(currStart);
        var earliestStartDate = new GlideDateTime(earliestStart);
        return currentStartDate.onOrBefore(earliestStartDate);
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:27</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9afbec5583701210c6695855eeaad3f8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Parent Percent Complete</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9afbec5583701210c6695855eeaad3f8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:27</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9afbec5583701210c6695855eeaad3f8"/>
</record_update>
