<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>122e0f66730320108ef62d2b04f6a7bc</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SLAAdvancedConditionUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SLAAdvancedConditionUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SLAAdvancedConditionUtilSNC = Class.create();
SLAAdvancedConditionUtilSNC.prototype = {

	ADV_CONDITION_TYPE: "adv_condition_type",
	VALCHANGES: "VALCHANGES",
	CHANGESFROM: "CHANGESFROM",
	CHANGESTO: "CHANGESTO",
	COLLECTION: "collection",
	CONTAINS: "CONTAINS",
	CONTRACT_SLA: "contract_sla",

	initialize: function() {
		this._slaUtil = new SLAUtil();
		this._conditionFields = this._slaUtil.getSLAConditionFields();
	},

	updateAllAdvanced: function() {
		var advCondOperators = [this.VALCHANGES, this.CHANGESFROM, this.CHANGESTO];
		var slasWithExtendedGr = new GlideMultipleUpdate(this.CONTRACT_SLA);
		slasWithExtendedGr.addNullQuery(this.ADV_CONDITION_TYPE);
		var cond;
		for (var i = 0; i &lt; this._conditionFields.length; i++) {
			var conditionField = this._conditionFields[i];
			for (var j = 0; j &lt; advCondOperators.length; j++) {
				var operator = advCondOperators[j];
				if (i === 0 &amp;&amp; j === 0)
					cond = slasWithExtendedGr.addQuery(conditionField, this.CONTAINS, operator);
				else
					cond.addOrCondition(conditionField, this.CONTAINS, operator);
			}
		}
		slasWithExtendedGr.setValue(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_ONLY);
		slasWithExtendedGr.execute();
		return this;
	},

	updateAllAdvancedIfJournal: function() {
		var slaTablesGr = new GlideAggregate(this.CONTRACT_SLA);
		slaTablesGr.addQuery(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_ONLY);
		slaTablesGr.groupBy(this.COLLECTION);
		slaTablesGr.setWorkflow(false);
		slaTablesGr.query();
		while (slaTablesGr.next()) {
			var tableName = slaTablesGr.getValue(this.COLLECTION);
			var journalFields = this._slaUtil.getJournalFields(tableName);
			if (!journalFields || journalFields.length === 0)
				continue;
			var cond;
			var slasWithExtendedGr = new GlideMultipleUpdate(this.CONTRACT_SLA);
			slasWithExtendedGr.addQuery(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_ONLY);
			for (var i = 0; i &lt; this._conditionFields.length; i++) {
				var conditionField = this._conditionFields[i];
				for (var j = 0; j &lt; journalFields.length; j++) {
					var condValue = journalFields[j] + this.VALCHANGES;
					if (i === 0 &amp;&amp; j === 0)
						cond = slasWithExtendedGr.addQuery(conditionField, this.CONTAINS, condValue);
					else
						cond.addOrCondition(conditionField, this.CONTAINS, condValue);
				}
			}
			slasWithExtendedGr.setValue(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_WITH_JOURNAL);
			slasWithExtendedGr.execute();
		}
		return this;
	},

	updateAllAdvancedIfSystem: function() {
		var slaTablesGr = new GlideAggregate(this.CONTRACT_SLA);
		slaTablesGr.addQuery(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_ONLY);
		slaTablesGr.groupBy(this.COLLECTION);
		slaTablesGr.setWorkflow(false);
		slaTablesGr.query();
		while (slaTablesGr.next()) {
			var tableName = slaTablesGr.getValue(this.COLLECTION);
			var systemFields = this._slaUtil.getSystemFields();
			if (!systemFields || systemFields.length === 0)
				continue;
			var cond;
			var slasWithExtendedGr = new GlideMultipleUpdate(this.CONTRACT_SLA);
			slasWithExtendedGr.addQuery(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_ONLY);
			for (var i = 0; i &lt; this._conditionFields.length; i++) {
				var conditionField = this._conditionFields[i];
				for (var j = 0; j &lt; systemFields.length; j++) {
					if (i === 0 &amp;&amp; j === 0)
						cond = slasWithExtendedGr.addQuery(conditionField, this.CONTAINS, systemFields[j] + this.VALCHANGES);
					else
						cond.addOrCondition(conditionField, this.CONTAINS, systemFields[j] + this.VALCHANGES);
					cond.addOrCondition(conditionField, this.CONTAINS, systemFields[j] + this.CHANGESFROM);
					cond.addOrCondition(conditionField, this.CONTAINS, systemFields[j] + this.CHANGESTO);
				}
			}
			slasWithExtendedGr.setValue(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_WITH_SYSTEM);
			slasWithExtendedGr.execute();
		}
		return this;
	},

	updateAllAdvancedIfJournalAndSystem: function() {
		var slaTablesGr = new GlideAggregate(this.CONTRACT_SLA);
		var condition = slaTablesGr.addQuery(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_WITH_JOURNAL);
		condition.addOrCondition(this.ADV_CONDITION_TYPE, "=", this._slaUtil.SLA_ADV_COND_ADV_WITH_SYSTEM);
		slaTablesGr.groupBy(this.COLLECTION);
		slaTablesGr.setWorkflow(false);
		slaTablesGr.query();
		while (slaTablesGr.next()) {
			var tableName = slaTablesGr.getValue(this.COLLECTION);
			var systemFields = this._slaUtil.getSystemFields();
			var journalFields = this._slaUtil.getJournalFields(tableName);
			if ((!journalFields || journalFields.length === 0) &amp;&amp; (!systemFields || systemFields.length === 0))
				continue;
			var journalCond;
			var slasWithExtendedGr = new GlideMultipleUpdate(this.CONTRACT_SLA);
			var advCondition = slasWithExtendedGr.addQuery(this.ADV_CONDITION_TYPE, "=", this._slaUtil.SLA_ADV_COND_ADV_WITH_JOURNAL);
			advCondition.addOrCondition(this.ADV_CONDITION_TYPE, "=", this._slaUtil.SLA_ADV_COND_ADV_WITH_SYSTEM);
			for (var i = 0; i &lt; this._conditionFields.length; i++) {
				var conditionField = this._conditionFields[i];
				// Add conditions for journal fields
				for (var j = 0; j &lt; journalFields.length; j++) {
					var condValue = journalFields[j] + this.VALCHANGES;
					if (i === 0 &amp;&amp; j === 0)
						journalCond = slasWithExtendedGr.addQuery(conditionField, this.CONTAINS, condValue);
					else
						journalCond.addOrCondition(conditionField, this.CONTAINS, condValue);
				}
			}
			var systemCond;
			for (var l = 0; l &lt; this._conditionFields.length; l++) {
				conditionField = this._conditionFields[l];
				// Add conditions for system fields
				for (var m = 0; m &lt; systemFields.length; m++) {
					if (l === 0 &amp;&amp; m === 0)
						systemCond = slasWithExtendedGr.addQuery(conditionField, this.CONTAINS, systemFields[m] + this.VALCHANGES);
					else
						systemCond.addOrCondition(conditionField, this.CONTAINS, systemFields[m] + this.VALCHANGES);
					systemCond.addOrCondition(conditionField, this.CONTAINS, systemFields[m] + this.CHANGESFROM);
					systemCond.addOrCondition(conditionField, this.CONTAINS, systemFields[m] + this.CHANGESTO);
				}
			}
			slasWithExtendedGr.setValue(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_ADV_WITH_JOURNAL_AND_SYSTEM);
			slasWithExtendedGr.execute();
		}
		return this;
	},

	updateAllNull: function() {
		var slasWithExtendedGr = new GlideMultipleUpdate(this.CONTRACT_SLA);
		slasWithExtendedGr.addNullQuery(this.ADV_CONDITION_TYPE);
		slasWithExtendedGr.setValue(this.ADV_CONDITION_TYPE, this._slaUtil.SLA_ADV_COND_NONE);
		slasWithExtendedGr.execute();
		return this;
	},

	type: 'SLAAdvancedConditionUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-25 15:55:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;122e0f66730320108ef62d2b04f6a7bc&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SLAAdvancedConditionUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Service level management" source="com.snc.sla"&gt;e2d7bc6c3cb1311068bcf327dfe37f1f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_122e0f66730320108ef62d2b04f6a7bc&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-07 10:34:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:25</sys_created_on>
        <sys_id>fa80b0d583b01210c6695855eeaad3b8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SLAAdvancedConditionUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_fa80b0d583b01210c6695855eeaad3b8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:25</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
