<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>154d34889f031200d9011977677fcffd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_hr_core.hr_CaseHierarchyUtils&lt;/api_name&gt;
        &lt;caller_access&gt;2&lt;/caller_access&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;hr_CaseHierarchyUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var hr_CaseHierarchyUtils = Class.create();
hr_CaseHierarchyUtils.prototype = {
	initialize: function() {
	},

	/* Get encoded query describing which HR Services are available for a given record
	 * @param record GlideRecord The case record to get available services for
	 * @return string Encoded query describing available services
	 */
	getQueryToLimitServices: function(record) {
		var hrServiceIds = [];
		var grHrServices = new GlideRecord('sn_hr_core_service');
		grHrServices.addActiveQuery();
		grHrServices.addQuery("value", "!=", hr.BULK_PARENT_CASE_SERVICE);
		grHrServices.addQuery('topic_detail.topic_category.coe', record.getRecordClassName());
		if (record.topic_detail)
			grHrServices.addQuery("topic_detail", record.topic_detail.toString());
		if (record.topic_category)
			grHrServices.addQuery("topic_detail.topic_category", record.topic_category.toString());
		if (gs.nil(record.subject_person)) // Cannot evaluate HR Criteria without a user
			grHrServices.addNullQuery("hr_criteria");
		grHrServices.query();
		while (grHrServices.next()) {
			if (gs.nil(grHrServices.hr_criteria))
				hrServiceIds.push(grHrServices.getUniqueValue());
			else {
				var hrCriteria = grHrServices.hr_criteria.split(',');

				for (var i = 0; i &lt; hrCriteria.length; i++) {
					var isValidCriteria = new hr_Criteria().evaluateById(hrCriteria[i], record.subject_person.toString());
					if (isValidCriteria) {
						hrServiceIds.push(grHrServices.getUniqueValue());
						break;
					} 
				}
			}
		}

		return 'sys_idIN' + hrServiceIds.toString();
	},

	/* Get encoded query describing which approval options are available for a given record
	 * @param record GlideRecord The service activity record to get available approval options for
	 * @return string Encoded query describing available approval options
	 */
	getApprovalAssignmentOptionsForHrServiceActivity: function(record) {
		var grHrService = new GlideRecord('sn_hr_core_service');
		if (record &amp;&amp; record.parent_service &amp;&amp; grHrService.get(record.parent_service))
			return this.getApprovalAssignmentOptions(grHrService);

		return "sys_id=null";
	},
	
	/* Get encoded query describing which approval options are available for a given record
	 * @param record GlideRecord The service record to get available approval options for
	 * @return string Encoded query describing available approval options
	 */
	getApprovalAssignmentOptions: function(record) {
		if (!record || !record.service_table)
			return "sys_id=null";
		
		return this.getApprovalAssignmentOptionsForCOE(record.service_table.toString());
	},
	
	/* Get encoded query describing which approval options are available for a given case table
	 * @param table string The case table to get available approval options for
	 * @return string Encoded query describing available approval options
	 */
	getApprovalAssignmentOptionsForCOE: function(table) {
		if (!table)
			return "sys_id=null";
		
		var approvalOptionSysIds = [];
		
		var grApprovalOptions = new GlideRecord('sn_hr_core_service_approval_option');
		grApprovalOptions.addActiveQuery();
		grApprovalOptions.addQuery('case_table', 'IN', new GlideTableHierarchy(table).getTables());
		grApprovalOptions.query();

		while (grApprovalOptions.next())
			approvalOptionSysIds.push(grApprovalOptions.getUniqueValue());

		return "sys_idIN" + approvalOptionSysIds.toString();
	},

	/* Get encoded query describing which case writer role applies to a record
	 * @param record GlideRecord The record to determine the case writer role for
	 * @return string Encoded query describing which case writer role applies to a record
	 */
	getQueryToLimitUsersWithCaseWriterRole: function(record) {
		var hrTables = new GlideTableHierarchy(record.getRecordClassName()).getTables();

		if (hrTables.indexOf('sn_hr_le_case') &gt; -1) 
			return 'roles=sn_hr_le.case_writer';
		else if (hrTables.indexOf('sn_hr_er_case') &gt; -1)
			return 'roles=sn_hr_er.case_writer';
		
		return 'roles=sn_hr_core.case_writer';
	},

	type: 'hr_CaseHierarchyUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-04-22 21:17:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;154d34889f031200d9011977677fcffd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;23&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;hr_CaseHierarchyUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Human Resources: Core" source="sn_hr_core"&gt;d4ac3fff5b311200a4656ede91f91af2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Human Resources: Core"&gt;d4ac3fff5b311200a4656ede91f91af2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_154d34889f031200d9011977677fcffd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-03-10 17:23:57&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:43</sys_created_on>
        <sys_id>c79078d583b01210c6695855eeaad389</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>hr_CaseHierarchyUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c79078d583b01210c6695855eeaad389</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:43</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
