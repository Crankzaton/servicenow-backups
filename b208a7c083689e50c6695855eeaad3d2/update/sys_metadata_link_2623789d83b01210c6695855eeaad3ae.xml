<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7095ab0943639110c9606eb7eab8f283</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;The purpose of the script is to revert the details screen to use ui parameters instead of input form , if any customizations present on old function instance.&lt;/description&gt;
        &lt;name&gt;Revert Fix Script For Function Instances&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var output = {};
output.msg = "";
addMsg("Start process FSM Mobile upgrade fix to avoid overriding customized records at " + getCurrentTimestamp());
var gcd = new global.CollisionDetectorDelegate();

output.customizedRecordStrList = [];
output.deactivateFuncInstStrList = [];
output.deleteRecordList = [];

var FUNCTION_INSTANCE_TABLE = "sys_sg_button_instance";
var UI_PARAMETERS_TABLE = "sys_sg_ui_parameter";
var ITEM_PARAMETERS_TABLE = "sys_sg_item_parameter";
var ACTION_PARAM_MAP_TABLE = "sys_sg_action_param_map";


addMsg("Process function instances...");

/*
Parameters description:
screenName : name of screen object
screen_sys_id : sys id of screen object
old_function_instance_id : id of ui parameter based function instance
old_function_id : id of ui parameter based function
old_function_ui_params : id of ui parameters used in above function instance
old_sys_sg_action_param_map : id of action parameters used in above function instance
old_function_item_params : id of item parameters used in above function 
new_function_instance_id : id of item-form input based function instance
*/



var functionDetailsObject = [{
    "screenName": "DetailsScreen",
    "screen_sys_id": "841657d27301230032ba56f77bf6a790",
    "old_function_instance_id": "34fe80e141314910f8774a9eaaf4a612",
    "old_function_id": "14e0dc2541314910f8774a9eaaf4a6f9",
    "old_function_ui_params": ["f711946541314910f8774a9eaaf4a680", "4001506541314910f8774a9eaaf4a69d", "9e11546541314910f8774a9eaaf4a63e"],
    "old_sys_sg_action_param_map": ["7a611c6541314910f8774a9eaaf4a6db", "1181946541314910f8774a9eaaf4a641", "7491546541314910f8774a9eaaf4a647"],
    "old_function_item_params": ["b8a0182541314910f8774a9eaaf4a6f1", "8180942541314910f8774a9eaaf4a6a7", "4e20142541314910f8774a9eaaf4a6ef"],
    "old_write_back_action_id": "fbef04e141314910f8774a9eaaf4a62c",
    "new_function_instance_id": "eb23d1ec43635110c9606eb7eab8f2fa"
}];

isCusomizationPresentInFunctionInstance(functionDetailsObject);

printStringsFromList(output.deactivateFuncInstStrList, "deactivated function instances");


// utils
function addMsg(msg) {
    output.msg += msg + "\n";
}

function printMsg(msg) {
    gs.info("FSM Mobile upgrade fix output at " + getCurrentTimestamp() + "\n" + (msg ? msg : output.msg));
    output.msg = "";
}

function getRecInfoStr(gr) {
    var res = [
        gr.sys_class_name,
        gr.sys_id,
        gr.sys_created_by,
        gr.sys_updated_by,
        gr.name
    ];
    return res.join("|");
}

function getCurrentTimestamp() {
    var d = new GlideDateTime();
    var ms = d.getNumericValue();
    return (d + '(' + ms + ')');
}

function isCustomized(gr) {
    var updateName = gr.sys_update_name + "";
    if (gcd.containsKey(updateName)) {
        addMsg("!Detected customization in " + updateName);
        output.customizedRecordStrList.push(updateName);
        return true;
    }
    return false;
}


function printStringsFromList(arry, recordName) {
    printList(arry, recordName, true);
}

function printList(arry, recordName, isStringType) {
    addMsg("Total number of " + recordName + ": " + arry.length);
    for (var i = 0; i &lt; arry.length; i++) {
        var msg = isStringType ? arry[i] : getRecInfoStr(arry[i]);
        addMsg(msg);
    }
}

function isCusomizationPresentInFunctionInstance(functionDetailsObjectList) {
    if (global.FSMUtil.isZboot())
        return;

    for (var i = 0; i &lt; functionDetailsObjectList.length; i++) {

        var functionDetailsObject = functionDetailsObjectList[i];
        var old_function_instance_id = functionDetailsObject["old_function_instance_id"];
        var old_function_ui_params = functionDetailsObject["old_function_ui_params"];
        var old_function_item_params = functionDetailsObject["old_function_item_params"];
        var new_function_instance_id = functionDetailsObject["new_function_instance_id"];
        var old_sys_sg_action_param_map = functionDetailsObject["old_sys_sg_action_param_map"];
        var old_function_id = functionDetailsObject["old_function_id"];
        var old_write_back_action_id = functionDetailsObject["old_write_back_action_id"];

        var hasCustomization = false;
        try {
            hasCustomization = processFunctionInstance(old_function_instance_id) || isAttributeCustomized(old_function_ui_params, old_function_item_params, old_sys_sg_action_param_map) ||
                verifyAttributeCount(old_function_ui_params, old_function_item_params, old_sys_sg_action_param_map, old_function_id, old_write_back_action_id);
        } catch (err) {
            hasCustomization = false; //if any error while running collison script , we are giving priority to new screen.
        }

        if (hasCustomization) {
            //deactivate new function instance id activate old
            deactivateFunctionInstanceUtil(new_function_instance_id);
			activateFunctionInstanceUtil(old_function_instance_id);

        } else {
            //deactivate old function instance id activate new 
            deactivateFunctionInstanceUtil(old_function_instance_id);
			activateFunctionInstanceUtil(new_function_instance_id);

        }
    }

    addMsg("!All Cards processing completed");
    printStringsFromList(output.customizedRecordStrList, "customized records");
    addMsg("End process FSM Mobile upgrade fix to avoid overriding customized records at " + getCurrentTimestamp());
    printMsg(output.msg);

}


function activateFunctionInstanceUtil(functionInstanceId){
	 var functionInstanceGr = new GlideRecord(FUNCTION_INSTANCE_TABLE);
    functionInstanceGr.addQuery("sys_id", functionInstanceId);
    //functionInstanceGr.addQuery("active", true);
    functionInstanceGr.query();
    if (functionInstanceGr.next()) {
		output.deactivateFuncInstStrList.push(getRecInfoStr(functionInstanceGr));
        addMsg("Activating " + getRecInfoStr(functionInstanceGr));
        functionInstanceGr.active = true;
        functionInstanceGr.update();
    }
}

function deactivateFunctionInstanceUtil(functionInstanceId) {
    var functionInstanceGr = new GlideRecord(FUNCTION_INSTANCE_TABLE);
    functionInstanceGr.addQuery("sys_id", functionInstanceId);
    //functionInstanceGr.addQuery("active", true);
    functionInstanceGr.query();
    if (functionInstanceGr.next()) {
        deactivateFunctionInstances(functionInstanceGr);
    }
}



/** check all the existing function instances
 * deactivate all the new function instances once one of the existing function
 * instance is found as customized.
 */
function processFunctionInstance(oldFunctionInstanceSysId) {
    var hasCustomization = false;

    var oldFunctionInstanceGr = new GlideRecord(FUNCTION_INSTANCE_TABLE);
    oldFunctionInstanceGr.addQuery("active", true); // only consider the active ones
    oldFunctionInstanceGr.addQuery("sys_id", oldFunctionInstanceSysId);
    oldFunctionInstanceGr.query();
    if (oldFunctionInstanceGr.next() &amp;&amp; isFuncInstCustomized(oldFunctionInstanceGr)) {
        hasCustomization = true;
    }

    return hasCustomization;
}

function isFuncInstCustomized(funcInstGr) {
    addMsg("&gt; " + getRecInfoStr(funcInstGr));
    if (isCustomized(funcInstGr)) {
        return true;
    }
    // check function
    var functionGr = funcInstGr.button.getRefRecord();

    addMsg("&gt;&gt; " + getRecInfoStr(functionGr));
    if (!gs.nil(functionGr) &amp;&amp; isFunctionCustomized(functionGr)) {
        return true;
    }
    return false;
}

function isFunctionCustomized(functionGr) {
    if (isCustomized(functionGr)) {
        return true;
    }
    // check action item
    var actionItemGr = functionGr.write_back_action_item.getRefRecord();

    if (!gs.nil(actionItemGr)) {
        addMsg("&gt;&gt;&gt; " + getRecInfoStr(actionItemGr));
        if (isCustomized(actionItemGr)) {
            return true;
        }
    }
    return false;
}

function deactivateFunctionInstances(gr) {
    output.deactivateFuncInstStrList.push(getRecInfoStr(gr));
    addMsg("Deactivating " + getRecInfoStr(gr));

    gr.active = false;
    gr.update();
}



function isAttributeCustomized(old_function_ui_params, old_function_item_params, old_sys_sg_action_param_map) {
    return isAttributeParamsCustomized(old_function_ui_params, UI_PARAMETERS_TABLE) || isAttributeParamsCustomized(old_function_item_params, ITEM_PARAMETERS_TABLE) || isAttributeParamsCustomized(old_sys_sg_action_param_map, ACTION_PARAM_MAP_TABLE);
}

function isAttributeParamsCustomized(paramsIdForOldButton, tableName) {

    for (var i = 0; i &lt; paramsIdForOldButton.length; i++) {
        var paramGr = new GlideRecord(tableName);
        //uiParameGr.addQuery("active", true); // only consider the active ones
        paramGr.addQuery("sys_id", paramsIdForOldButton[i]);
        paramGr.query();
        if (paramGr.next()) {
            addMsg("&gt;&gt;&gt; " + getRecInfoStr(paramGr));
            if (isCustomized(paramGr))
                return true;
        }
    }

    return false;
}


function verifyAttributeCount(old_function_ui_params, old_function_item_params, old_sys_sg_action_param_map, old_function_id, old_write_back_action_id) {
    return isAttributeCountChanged(old_function_ui_params, old_function_id, UI_PARAMETERS_TABLE) ||
        isAttributeCountChanged(old_sys_sg_action_param_map, old_function_id, ACTION_PARAM_MAP_TABLE) ||
        isAttributeCountChanged(old_function_item_params, old_write_back_action_id, ITEM_PARAMETERS_TABLE);

}

function isAttributeCountChanged(paramsIdForOldButton, old_parent_attribute_id, tableName) {
    var countOrignal = paramsIdForOldButton.length;
    var attributeItemGr = new GlideRecord(tableName);
    if (tableName == UI_PARAMETERS_TABLE || tableName == ACTION_PARAM_MAP_TABLE)
        attributeItemGr.addQuery("button", old_parent_attribute_id); //function id for ui and action param
    else if (tableName == ITEM_PARAMETERS_TABLE)
        attributeItemGr.addQuery("parent", old_parent_attribute_id); //write back action id for 

    attributeItemGr.query();

    return CheckIfAttributesAddedOrRemoved(attributeItemGr, countOrignal, paramsIdForOldButton);
    
}


//Checks if count of attribute parameters changed or any similar modificaitons
function CheckIfAttributesAddedOrRemoved(attributeGR, countOrignal, orignalIdList) {
    var arrayUtil = new global.ArrayUtil();
    var updatedIdList = [];
    var countModified = attributeGR.getRowCount();
	if(countModified == 0){
		addMsg("&gt;&gt;&gt; " + " tablename " + attributeGR.getTableName() + " &gt; " + " countModified " + countModified);
		return false; 
	}
    if (countOrignal == countModified) {
        while (attributeGR.next()) {
            updatedIdList.push(attributeGR.getValue("sys_id"));
        }
        var sysIdDiffArray = arrayUtil.diff(orignalIdList, updatedIdList);
        if (sysIdDiffArray.length != 0) {
            return true; // customization present
        } else {
            return false; // no customization
        }

    } else
        return true;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-12-02 10:52:03&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7095ab0943639110c9606eb7eab8f283&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Revert Fix Script For Function Instances&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Mobile" source="sn_fsm_mobile"&gt;5d66b0fbe770230003cd6188d2f6a976&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Field Service Mobile"&gt;5d66b0fbe770230003cd6188d2f6a976&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_7095ab0943639110c9606eb7eab8f283&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-10 11:36:30&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:52</sys_created_on>
        <sys_id>2623789d83b01210c6695855eeaad3ae</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Revert Fix Script For Function Instances</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2623789d83b01210c6695855eeaad3ae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:52</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
