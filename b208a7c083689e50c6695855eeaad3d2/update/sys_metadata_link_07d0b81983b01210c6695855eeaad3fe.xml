<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1fdd840553021010b37cddeeff7b12d9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_contributor.ContributorUserPortalAJAX&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Helper functions for contributor user record producer&lt;/description&gt;
        &lt;name&gt;ContributorUserPortalAJAX&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ContributorUserPortalAJAX = Class.create();
ContributorUserPortalAJAX.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	getUserOrgs: function() {
		var serviceOrgs = new global.ServiceOrganizationUtil().getUserServiceOrgIds(gs.getUserID());
		var result = this.newItem('serviceOrgs');
		result.setAttribute('arr', serviceOrgs);
	},
	
	getMyServiceOrganisations: function(){
		var withHierarchy = this.getParameter('sysparm_withHierarchy') || false;
		var accessLevel = this.getParameter('sysparm_accessLevel') || global.CSMRelationshipConstants.ACCESS.CREATE;
		var targetEntity = this.getParameter('sysparm_targetEntity') || global.CSMBaseConstants.CASE_TABLE;
		var serviceOrgs = new sn_cs_queryrules.SOQueryRuleUtils().getMyServiceOrganisations(withHierarchy, accessLevel, targetEntity);
		var result = this.newItem('serviceOrgs');
		result.setAttribute('arr', serviceOrgs);
	},
	
	getSoldProductArr: function(install_base_item, account) {
		var arr = [];
		if (gs.nil(account) &amp;&amp; gs.nil(install_base_item)) 
			return arr;
		
		if (gs.nil(install_base_item)) {
			var gr = new GlideRecord('sn_install_base_sold_product');
			gr.addQuery('account', account);
			gr.query();
			while (gr.next()) {
				if (gr.canRead())
					arr.push(gr.getUniqueValue());
			}
			
		} else {
			var installProductGr = new GlideRecord("sn_install_base_m2m_installed_product");
			installProductGr.addQuery('install_base_item', install_base_item);
			installProductGr.query();
			while (installProductGr.next()) {
				if (installProductGr.canRead())
					arr.push(installProductGr.getValue('sold_product'));
			}
		}
		
		return arr;
	},
	
	getInstallItemArr: function(sold_product, account) {
		var arr = [];
		if (gs.nil(sold_product) &amp;&amp; gs.nil(account))
			return arr;
		
		if (gs.nil(sold_product)) {
			var gr = new GlideRecord('sn_install_base_item');
			gr.addQuery('account', account);
			gr.query();
			while (gr.next()) {
				if (gr.canRead())
					arr.push(gr.getUniqueValue());
			}
		} else {
			var installProductGr = new GlideRecord('sn_install_base_m2m_installed_product');
			installProductGr.addQuery('sold_product', sold_product);
			installProductGr.query();
			while (installProductGr.next()) {
				if (installProductGr.canRead())
					arr.push(installProductGr.getValue('install_base_item'));
			}
		}

		return arr;
	},
	
	getContactsForAccount: function() {
		var account = this.getParameter('sysparm_account');
		var contactArr = new global.CSManagementUtils().getCaseContactsSysIDs(account);
		
		var result = this.newItem('fields');
		result.setAttribute('contact_arr', contactArr);
	},
	
	getInstallBaseFieldsForAccount: function() {
		var account = this.getParameter('sysparm_account');
		var install_base_item = this.getParameter('sysparm_installbaseitem');
		var sold_product = this.getParameter('sysparm_soldproduct');
		
		var soldProductArr = this.getSoldProductArr(install_base_item, account);
		var installBaseItemArr = this.getInstallItemArr(sold_product, account);
		
		var result = this.newItem('fields');
		result.setAttribute('sold_arr', soldProductArr);
		result.setAttribute('install_arr', installBaseItemArr);
	},
	
	getCaseAccountForContactArr: function (contact) {
		var arr = [];
		var gr =  new GlideRecord('customer_contact');
		gr.addQuery('sys_id', contact);
		gr.query();
		while(gr.next()) {
			if(gr.canRead())
				arr.push(gr.getValue('account'));
		}
		return arr;
	},
	
	getAccountsForContact: function() {
		var contact = this.getParameter('sysparm_contact');
		var accountArr = this.getCaseAccountForContactArr(contact);
		var result = this.newItem('result');
		result.setAttribute('arr', accountArr);
	},
	
	getAccountForSoldProduct: function() {
		var sold_product = this.getParameter('sysparm_soldproduct');
		var gr = new GlideRecord('sn_install_base_sold_product');
		gr.get(sold_product);
		var account = gr.canRead() ? gr.getValue('account') : '';
		var result = this.newItem('result');
		result.setAttribute('account', account);
	},
	
	getAccountForInstallBaseItem: function() {
		var install = this.getParameter('sysparm_installbaseitem');
		var gr = new GlideRecord('sn_install_base_item');
		gr.get(install);
		var account = gr.canRead() ? gr.getValue('account') : '';
		var result = this.newItem('result');
		result.setAttribute('account', account);
	},
	
	getInstallBaseFieldsForConsumer: function() {
		var consumer = this.getParameter('sysparm_consumer');
		var install_base_item = this.getParameter('sysparm_installbaseitem');
		var sold_product = this.getParameter('sysparm_soldproduct');
		
		var soldProductArr = this.getConsumerSoldProductArr(install_base_item, consumer);
		var installBaseItemArr = this.getConsumerInstallBaseArr(sold_product, consumer);
		
		var result = this.newItem('fields');
		result.setAttribute('sold_arr', soldProductArr);
		result.setAttribute('install_arr', installBaseItemArr);
	},
	
	getConsumerSoldProductArr: function(install_base_item, consumer) {
		var arr = [];
		if (gs.nil(consumer) &amp;&amp; gs.nil(install_base_item)) 
			return arr;
		
		if (gs.nil(install_base_item)) {
			var gr = new GlideRecord('sn_install_base_sold_product');
			gr.addQuery('consumer', consumer);
			gr.query();
			while (gr.next()) {
				if(gr.canRead())
					arr.push(gr.getUniqueValue());
			}
		} else {
			var installProductGr = new GlideRecord("sn_install_base_m2m_installed_product");
            installProductGr.addQuery('install_base_item', install_base_item);
			installProductGr.query();
			while (installProductGr.next()) {
				if(gr.canRead())
					arr.push(installProductGr.getValue('sold_product'));
			}
		}
		
		return arr;
	},
	
	getConsumerInstallBaseArr: function(sold_product, consumer) {
		var arr = [];
		if (gs.nil(sold_product) &amp;&amp; gs.nil(consumer))
			return arr;
		
		if (gs.nil(sold_product)) {
			var gr = new GlideRecord('sn_install_base_item');
			gr.addQuery('consumer', consumer);
			gr.query();
			while (gr.next()) {
				if(gr.canRead())
					arr.push(gr.getUniqueValue());
			}
		} else {
			var installProductGr = new GlideRecord('sn_install_base_m2m_installed_product');
			installProductGr.addQuery('sold_product', sold_product);
			installProductGr.query();
			while (installProductGr.next()) {
				if(installProductGr.canRead())
					arr.push(installProductGr.getValue('install_base_item'));
			}
		}

		return arr;
	},
	
	getConsumerForSoldProduct: function() {
		var sold_product = this.getParameter('sysparm_soldproduct');
		var gr = new GlideRecord('sn_install_base_sold_product');
		gr.get(sold_product);
		var consumer;
		if (gr.canRead())
			consumer = gr.getValue('consumer');
		
		var result = this.newItem('result');
		result.setAttribute('consumer', consumer);
	},
	
	getConsumerForInstallBase: function() {
		var install = this.getParameter('sysparm_installbaseitem');
		var gr = new GlideRecord('sn_install_base_item');
		gr.get(install);
		var consumer;
		if (gr.canRead())
			consumer = gr.getValue('consumer');
		
		var result = this.newItem('result');
		result.setAttribute('consumer', consumer);
	},
	
	getServiceOrg: function() {
		var service_organization = "";
		var tableName = this.getParameter('sysparm_table');
		var sysId = this.getParameter('sysparm_sys_id');
		var result = this.newItem('entities');
		var gr = new GlideRecordSecure(tableName);
		if (gr.get(sysId)){
			service_organization = gr.getValue('service_organization');
			result.setAttribute('fieldVal', sysId);
			result.setAttribute('service_organization', service_organization);
		}

		return result;
	},
	
	isValidEntityForServiceOrganization: function() {
		var so = this.getParameter('sysparm_so');
		var relationship = this.getParameter('sysparm_relationship');
		var entity = this.getParameter('sysparm_entity');
		var result = this.newItem('result');
		var gr = new GlideRecordSecure(relationship);
		gr.addQuery('sys_id', entity);
		gr.addQuery('service_organization', so);
		gr.query();
		result.setAttribute('isValid', gr.hasNext());
	},
	
    type: 'ContributorUserPortalAJAX'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-07-14 20:50:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1fdd840553021010b37cddeeff7b12d9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ContributorUserPortalAJAX&lt;/sys_name&gt;
        &lt;sys_package display_value="Contributor User" source="sn_contributor"&gt;204773b4b3865010a9dce6e316a8dc26&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Contributor User"&gt;204773b4b3865010a9dce6e316a8dc26&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1fdd840553021010b37cddeeff7b12d9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-06-23 10:53:35&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:48</sys_created_on>
        <sys_id>07d0b81983b01210c6695855eeaad3fe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ContributorUserPortalAJAX</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_07d0b81983b01210c6695855eeaad3fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:48</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
