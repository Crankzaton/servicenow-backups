<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Service Management Group Types</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var previousTypes = previous.type.toString();
var newTypes = current.type.toString();
var previousDispatchApps = getMatchingApps(previousTypes, 'dispatch');
var currentDispatchApps = getMatchingApps(newTypes, 'dispatch');
var previousWorkApps = getMatchingApps(previousTypes, 'work');
var currentWorkApps = getMatchingApps(newTypes, 'work');
var vendorType = "12345fb137032000158bbfc8bcbe5d66";
var isContractorPluginActive = GlidePluginManager.isActive("com.snc.fsm_contractor_management");

if (current.operation() == 'update')
 processUpdate(current);
else if (current.operation() == 'insert')
 processInsert();
 
function processInsert() {
 if (!isEmptySet(intersection(currentDispatchApps, currentWorkApps)))
  m2mCreate();
}

function processUpdate(current) {
 removeMismatches('dispatch');
 
 var typeArr = '';
 
 if(!gs.nil(current.type))
  typeArr = (current.type.toString()).split(",");
 
 if(isContractorPluginActive && !gs.nil(typeArr) && (typeArr.indexOf(vendorType) >= 0))
  removeMismatches('vendor');
 else
 removeMismatches('work');
 
 if (!isEmptySet(intersection(currentDispatchApps, currentWorkApps)))
  m2mCreate();
}

function getMatchingApps(typeList, typeName) {
 var config = new GlideRecord('sm_config');
 config.addQuery(typeName + '_group_type', 'IN', typeList);
 config.query(); 
 
 var matchingApps = {};
 while(config.next())
  matchingApps[config.app_name] = true;
 return matchingApps;
}

function m2mCreate() {
 var m2mRecord = new GlideRecord('sm_m2m_group_dependency');
 m2mRecord.dispatch_group = current.sys_id;
 m2mRecord.assignment_group = current.sys_id;
 m2mRecord.insert();
}

function removeMismatches(currentAsType) {
 var currentAsGroupField;
 var otherAsGroupField;
 var otherAsType;
 var otherAsTypeVendor='';
 if(currentAsType == 'work' || currentAsType == 'vendor'){
  currentAsGroupField = 'assignment_group';
  otherAsGroupField = 'dispatch_group';
  otherAsType = 'dispatch';
  
 }
 else if(currentAsType == 'dispatch'){
  currentAsGroupField = 'dispatch_group';
  otherAsGroupField = 'assignment_group';
  otherAsType = 'work';
  otherAsTypeVendor = 'vendor';
 }
 
 
 var dependencies = new GlideRecord('sm_m2m_group_dependency');
 dependencies.addQuery(currentAsGroupField, current.sys_id);
 dependencies.query();
 
 while(dependencies.next()) {
  var otherGroupTypes = dependencies[otherAsGroupField].type.toString();
  
  var typeArr = '';

  if(!gs.nil(otherGroupTypes))
   typeArr = otherGroupTypes.split(",");
  
  var config = new GlideRecord('sm_config');
  config.addActiveQuery();
  config.addQuery(currentAsType + '_group_type', 'IN', current.type.toString());
  
  
  if(isContractorPluginActive && !gs.nil(otherAsTypeVendor) && !gs.nil(typeArr) && (typeArr.indexOf(vendorType) >= 0))
   config.addQuery(otherAsTypeVendor + '_group_type', 'IN', otherGroupTypes);
  else
  config.addQuery(otherAsType + '_group_type', 'IN', otherGroupTypes);
  
  config.query();
  if (!config.hasNext())
   dependencies.deleteRecord();
 }
}

function isEmptySet(s) {
 for(var e in s)
  if (e)
   return false;
 return true;
}

function intersection(set1, set2) {
 var iset = {};
 for(var e in set1)
  if (e && (e in set2))
   iset[e] = true;
 return iset;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>57eb2c5583701210c6695855eeaad311</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Service Management Group Types</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_57eb2c5583701210c6695855eeaad311</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:15</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=57eb2c5583701210c6695855eeaad311"/>
</record_update>
