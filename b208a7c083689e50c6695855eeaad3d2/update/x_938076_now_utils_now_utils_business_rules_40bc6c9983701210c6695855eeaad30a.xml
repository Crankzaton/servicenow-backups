<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.getRecordClassName() != 'sys_cb_decision' &amp;&amp; current.getRecordClassName() != 'sys_cb_outcome'</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Node deleted - reparent children</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 
 //for most node types, the simple parent-replacement works fine
 //but collectors are slightly different
 if (current.getRecordClassName() == "sys_cb_collector")
  updateChildrenOfCollector(current);
 else
  updateChildren(current);

 
 function updateChildren(deletedNode) {
  gs.debug("Reparenting child of {0} ({1})", deletedNode.getValue("name"), deletedNode.getValue("sys_id"));
  var newParent = deletedNode.getValue("parent");
  var oldParent = deletedNode.getValue("sys_id");
  var foundChild = false;
  
  var childNode = new GlideRecord("sys_cb_node");
  childNode.addQuery("parent", oldParent);
  childNode.query();
  
  while (childNode.next()) {
   gs.debug("Reparenting {0} to {1}", childNode.getValue("name"), newParent || "NULL");
   foundChild = true;
   if (newParent)
    childNode.setValue("parent", newParent);
   else
    childNode.setValue("parent", "NULL");
   
   childNode.update();
  }
  
  if (!foundChild) {
   gs.debug("No children of {0} found, searching for collectors.", deletedNode.getValue("name"));
   //might be a collector node
   var childCollector = new GlideRecord("sys_cb_collector");
   childCollector.addQuery("parent_nodes", "CONTAINS", oldParent);
   childCollector.query();
   
   while (childCollector.next()) {
    gs.debug("Collector {0} found, replacing parent {1} with {2}", childCollector.getValue("name"), oldParent, newParent);
    var parents = childCollector.getValue("parent_nodes").split(",");
    if (parents.length < 2)
     parents = [newParent];
    else
     for (var i = 0; i < parents.length; i++)
      if (parents[i] == oldParent)
       parents[i] = newParent;
    
    childCollector.setValue("parent_nodes", parents.join(","));
    childCollector.update();
   }
  }
 }
 
 function updateChildrenOfCollector(deletedCollector) {
  gs.debug("Updating children of collector {0} ({1})", deletedCollector.getValue("name"), deletedCollector.getValue("sys_id"));
  
  var oldParent = deletedCollector.getValue("sys_id");
  var parents = [];
  var foundChild = false;

  if (!deletedCollector.parent_nodes.nil())
   parents = deletedCollector.getValue("parent_nodes").split(",");
  
  if (parents.length == 1) {
   //child might be a regular node per earlier "can delete" BR
   var childNode = new GlideRecord("sys_cb_node");
   childNode.addQuery("parent", oldParent);
   childNode.query();
   
   while (childNode.next()) {
    gs.debug("Reparenting {0} ({1}) to {2}", childNode.getValue("name"), childNode.getValue("sys_id"), parents[0]);
    childNode.setValue("parent", parents[0]);
    childNode.update();
    foundChild = true;
   }
  }
  if (!foundChild) {
   gs.debug("Searching for a collector which may be a child of {0}", deletedCollector.getValue("name"));
   //child might be a collector per earlier "can delete" BR
   var collectors = new GlideRecord("sys_cb_collector");
   collectors.addQuery("parent_nodes", "CONTAINS", oldParent);
   collectors.query();
   
   while (collectors.next()) {
    gs.debug("Collector {0} found, removing parent {1}", collectors.getValue("name"), oldParent);
    var childParents = collectors.getValue("parent_nodes").split(",");
    var newParents = [];
    for (var i = 0; i < childParents.length; i++) {
     if (childParents[i] != oldParent)
      newParents.push(childParents[i]);
    }
    
    for (i = 0; i < parents.length; i++) {
     newParents.push(parents[i]);
    }
    
    collectors.setValue("parent_nodes", newParents.join(","));
    collectors.update();
   }
  }
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:34</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>40bc6c9983701210c6695855eeaad30a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Node deleted - reparent children</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_40bc6c9983701210c6695855eeaad30a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:34</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=40bc6c9983701210c6695855eeaad30a"/>
</record_update>
