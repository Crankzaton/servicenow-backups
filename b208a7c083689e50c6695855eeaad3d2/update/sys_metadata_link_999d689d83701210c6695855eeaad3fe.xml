<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1d59de3677911110797c6909be5a997e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;false&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection/&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Regenerate the asym keys&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function() {

    // Perform some prechecks on the instance before regeneration. 
    // 1. Check if it is an on-prem instance. If yes, skip the regeneration. 
    var onPremInstance = gs.getProperty('glide.installation.self_hosted');
    if (onPremInstance == 'true') {
        gs.info('Regeneration of asym keys: It is an on-prem instance. Hence skipping regeneration asym keys');
        return;
    }

    // 2. Check if it EJBCA enabled instance, If yes skip the re-generation since we will not generate the EJBCA keys locally.
    var ejbcaEnabled = gs.getProperty('com.glide.kmf.ejbca.enabled');
    if (ejbcaEnabled == 'true') {
        gs.info('Regeneration of asym keys: EJBCA is enabled, and we cannot generate the EJBCA keys locally, hence skipping the re-generation of asym key');
        return;
    }

    var instanceId = gs.getProperty('instance_id');

    // 3. Process the KMF health, and check if the vault is reachable. If not rechable, skip the re-generation.
    if (!isVaultHealthy(instanceId))
        return;

    //4. Deactivate the asym instance keys
    var success = true;

    gs.info('Regeneration of asym keys: Deactivating the asym keys');
    success = deactivateAsymKeys();
    if (!success) {
        gs.info('Regeneration of asym keys: Failed to deactivate the asym keys');
        return;
    }
    gs.info('Regeneration of asym keys: Successfully deactivated the asym keys');


    //5. Deactivate the public key wrap, public key sigver key pairs
    gs.info('Regeneration of asym keys: Deactivating the key pairs');
    success = deactivateInstanceCertificates(instanceId);
    if (!success) {
        gs.info('Regeneration of asym keys: Failed to deactivate the asym key pairs');
        return;
    }
    gs.info('Regeneration of asym keys: Successfully deactivated the asym key pairs');

    //6. Run ensure all to make sure we have generated the asym keys with right padding
    gs.info('Regeneration of asym keys: Executing ensureAllInstanceInitialKeysExist');
    success = new sn_kmf.KMFInstanceKeyAPI().ensureAllInstanceInitialKeysExist();
    if (!success) {
        gs.info('Regeneration of asym keys: Failed to execute ensureAllInstanceInitialKeysExist, manual intervention is needed');
        return;
    }
    gs.info('Regeneration of asym keys: Successfully executed ensureAllInstanceInitialKeysExist');

    function deactivateAsymKeys() {
        var dbu = new GlideDBUpdate('sys_kmf_instance_key');
        var dbq = new GlideDBQuery('sys_kmf_instance_key');

        try {
            dbq.addQuery('key_type.sibling_key_type', '!=', 'NULL');
            dbq.addQuery('key_alias', 'instancePublicKeyWrap').addOrCondition('key_alias', 'instancePrivateSigVer');
            dbq.addQuery('origin', 'servicenow');
            dbq.addQuery('key_lifecycle_state', 'active');
            dbu.setQuery(dbq);
            dbu.setMultiple(true);
            dbu.setValue('key_lifecycle_state', 'deactivated');
            dbu.setValue('last_rotated_date', new GlideDate());
            dbu.setValue('deactivation_date', new GlideDate());

            dbu.executeAndReturnException();
        } catch (ex) {
            gs.error('Exception while updating the instance key: ' + ex);
            return false;
        } finally {
            dbu.close();
            dbq.close();
        }

        return true;
    }

    function deactivateInstanceCertificates(instanceId) {
        var gr = new GlideRecord('sys_certificate');
        gr.addEncodedQuery('name=' + instanceId + 'publickeywrap^ORname=' + instanceId + 'publicsigver');
        gr.query();

        while (gr.next()) {
            gr.setValue('active', 'false');
            var result = gr.update('deactivating asym key pair using fix script');
            if (!result)
                return false;
        }

        return true;
    }

    function isVaultHealthy(instanceId) {
        var kmfAutomationInterface = new SNC.KMFAutomationInterface();

        var hasProperValidAsymKeys = kmfAutomationInterface.isInstancePublicKeysPresentOnVault(instanceId);
        if (hasProperValidAsymKeys) {
            gs.info('Regeneration of asym keys: Vault keys are healthy, hence skipping the re-generation of asym key');
            return false;
        }
		
		var canCommunicateWithVault = kmfAutomationInterface.canCommunicateWithVault();
        if (!canCommunicateWithVault) {
            gs.info('Regeneration of asym keys: Vault is not reachable, hence skipping the re-generation of asym key');
            return false;
        }

        return true;
    }

})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-17 19:26:57&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;1d59de3677911110797c6909be5a997e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;32&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Regenerate the asym keys&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Key Management Framework" source="com.glide.kmf.global"&gt;ee533ca03c31311068bcf327dfe37f79&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_1d59de3677911110797c6909be5a997e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-19 06:55:10&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=1d59de3677911110797c6909be5a997e"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:57:29</sys_created_on>
        <sys_id>999d689d83701210c6695855eeaad3fe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Regenerate the asym keys</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_999d689d83701210c6695855eeaad3fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:57:29</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
