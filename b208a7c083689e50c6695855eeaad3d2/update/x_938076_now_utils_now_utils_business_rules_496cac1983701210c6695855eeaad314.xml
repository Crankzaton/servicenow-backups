<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>true</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ScheduleTimeSpan update</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function onBefore(current, previous) {
 //This function will be automatically called when this rule is processed.
 // sets all_day true if and only if time goes from 00:00:00 to 23:59:59
 var startDateTime = getScheduleDateTime(current.start_date_time, current.schedule.time_zone);
 var endDateTime = getScheduleDateTime(current.end_date_time, current.schedule.time_zone);
 var startTime = timeToString(startDateTime);
 var endTime = timeToString(endDateTime);
 var timeFormat = gs.getProperty('glide.sys.time_format');
 var omitSecond = timeFormat.startsWith('HH:mm') && !(timeFormat.startsWith('HH:mm:ss'));

 if (startTime == '0:0:0' && endTime == '0:0:0' && startDateTime.getMS() < endDateTime.getMS()){
  // special treatment. When endDateTime is 00:00:00, it is converted to 23:59:59 of the previous day
  endDateTime.addSeconds(-1);
  current.setValue('end_date_time', endDateTime.getValueInternal());
  current.all_day = true;
 }else
  current.all_day = omitSecond ? (startTime == '0:0:0' && endTime == '23:59:0') : (startTime == '0:0:0' && endTime == '23:59:59');
}

function getScheduleDateTime(dateTimeValue, timezone) {
 var scheduleDateTime = new GlideScheduleDateTime();
 scheduleDateTime.setValue(dateTimeValue);
 if (!scheduleDateTime.isFloating())
  scheduleDateTime.convertTimeZone(gs.getSession().getTimeZone(), timezone);
 return scheduleDateTime;
}

function timeToString(date){
 var dateCal = date.getCal();
 return '' + dateCal.get(11 /* hours */) + ':' + dateCal.get(12 /* minutes */) + ':' + dateCal.get(13 /* seconds */);
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:17</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>496cac1983701210c6695855eeaad314</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ScheduleTimeSpan update</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_496cac1983701210c6695855eeaad314</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:17</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=496cac1983701210c6695855eeaad314"/>
</record_update>
