<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2cf1e5377f022200c57212f44efa9110</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FSMQuestionnaireHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;FSMQuestionnaireHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FSMQuestionnaireHelper = Class.create();
FSMQuestionnaireHelper.prototype = {
    initialize: function() {
    },
	
	process: function() {
		var tables = [];
		tables.push('');
		tables.push('wm_task');
		tables.push('wm_order');
		tables.push('wm_m2m_product_to_work_order');

    	return tables;
    },
	
	hasQuestionnaireForthisRecord: function (taskid) {
		var gr = this.getRecordQuestionnaire(taskid);
		return 	gr.hasNext();
	},
	
	getRecordQuestionnaire: function (taskid) {
		var gr = this.getUserQuestionnaire(taskid, false);
		return 	gr;
	},
	
	hasQuestionnaire: function (taskid) {
		var gr = this.getUserQuestionnaire(taskid, true);
		return 	gr.hasNext();
	},
	
	getUserQuestionnaireCount: function (taskid) {		
		var gr = new GlideAggregate("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		gr.addEncodedQuery("stateINready,wip,complete");
		gr.addQuery("user", "javascript:gs.getUserID()");
		gr.addQuery("task_id.sys_id", taskid);
		gr.addAggregate("COUNT");
		gr.setGroup(false);
		
		gr.query();
		
		var count = 0;
		if (gr.hasNext()){
			gr.next();
			count = Number(gr.getAggregate("COUNT"));
		}
		
		return count;
		
	},
	
	//getUserQuestionnaire is use in this file so far
	getUserQuestionnaire: function (taskid, checkOnUser) {
		var gr = new GlideRecord("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		gr.addEncodedQuery("stateINready,wip,complete");
		if(!gs.nil(checkOnUser) &amp;&amp; checkOnUser == true){
			gr.addQuery("user", "javascript:gs.getUserID()");
		}
		gr.addQuery("task_id.sys_id", taskid);
		gr.orderByDesc('state');
		gr.orderBy('due_date');
		gr.orderBy('sys_created_on');
		gr.query();
		return 	gr;
	},
	
	hasOpenQuestionnaire: function (taskid) {
		var count = this.getUserOpenQuestionnaire(taskid);
		return 	count &gt; 0;
	},
	
	getUserOpenQuestionnaireCount: function (taskid) {
		return this.getUserOpenQuestionnaire(taskid);
	},
	
	getUserOpenQuestionnaire: function (taskid) {
		var gr = new GlideAggregate("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		var sub = gr.addQuery('state', 'ready');
		sub.addOrCondition('state','wip');
		var sub1 = sub.addOrCondition('state','complete');
		sub1.addCondition("metric_type.allow_retake","true");
		sub1.addCondition("due_date", '&gt;=', new GlideDateTime().getLocalDate().getValue());
		gr.addQuery("user", "javascript:gs.getUserID()");
		gr.addQuery("task_id.sys_id", taskid);
		gr.addAggregate("COUNT");
		gr.setGroup(false);
		gr.orderByDesc('state');
		gr.orderBy('due_date');
		gr.orderBy('sys_created_on');
		gr.query();
		
		var count = 0;
		if (gr.hasNext()){
			gr.next();
			count = Number(gr.getAggregate("COUNT"));
		}
		return 	count;
	},
	
	pendingQuestionareExist: function(current) {
		var gr = this.getUserQuestionnaire(current.sys_id, true);
		var questionnaires = '';
		if(!gr.hasNext())
			return false;
		while(gr.next() &amp;&amp; gr.state != 'complete'){
			questionnaires += gr.metric_type.sys_id + ',';
		}
		//gs.log('questionnaires  ' + questionnaires);
		return this.isMandatoryQuestionnaire(questionnaires, current);
		
	},
	
	/*updateCompletedMandatoryQuesStatus: function(current) {
		var gr = this.getUserQuestionnaire(current.sys_id);
		while(gr.next()){
			if (gr.state == 'complete') {
				var flag = this.isMandatoryQuestionnaire(gr.metric_type.sys_id, current);
				if (flag) {
					var now = new GlideDateTime();
					now.addDays(-1);
					gr.due_date = now.getDate();
					gr.update();
				}
			}
		}
	},
		
	filterMandatoryQuestionnaires: function (questionnaires, tableGr) {
		var choiceGr = new GlideRecord("sys_choice"); 
		choiceGr.addQuery('name', tableGr.sys_class_name);
		choiceGr.addQuery('element', 'state');
		choiceGr.addQuery('value', tableGr.state);
		choiceGr.query();
		if (choiceGr.next()) {
			var gr = new GlideRecord("wm_questionnaire");
			gr.addQuery('questionnaire_definition','IN', questionnaires);
			gr.addQuery('mandatory',true);
			gr.addQuery('close_before', 'CONTAINS', choiceGr.sys_id);
			gr.query();
			var mandatoryQues = {};
			while (gr.next()) {
				mandatoryQues[gr.sys_id] = gr.name;
			}
			return mandatoryQues;
		}
	},*/
	
	isMandatoryQuestionnaire: function(questionnaires, tableGr) {
		
		var stateChoiceStr = "";
		var gr = new GlideRecord("wm_questionnaire");
		gr.addQuery('questionnaire_definition','IN', questionnaires);
		gr.addQuery('mandatory',true);
		gr.query();
			
		while (gr.next()){
			var closeBefore = String(gr.close_before);
			stateChoiceStr += closeBefore + ",";
		}
		
		var stateChoiceArr = stateChoiceStr.split(",");
		var stateChoiceArrOp = [];
		for (var i = 0 ; i &lt; stateChoiceArr.length; i ++ ) {
			var localStateChoice = stateChoiceArr[i];
			if (stateChoiceArrOp.indexOf(localStateChoice) &lt; 0 ) {
				stateChoiceArrOp.push(localStateChoice);
			}
		}
		
		var choiceGr = new GlideRecord("sys_choice");
		choiceGr.addQuery('name', tableGr.getTableName());
		choiceGr.addQuery('element', 'state');
		choiceGr.addQuery('value', tableGr.state);
		choiceGr.addQuery('sys_id', 'IN', stateChoiceArrOp);
		choiceGr.setLimit(1);
		choiceGr.query();
		
		if (choiceGr.next()){
			return true;
		}
		
		return false;
	},

	updateQuestionnairesToComplete: function(current) {
		var gr = new GlideRecord("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		gr.addEncodedQuery("stateINready,wip");
		gr.addQuery("task_id.sys_id", current.sys_id);
		gr.setValue('state', 'complete');
		gr.updateMultiple();
	},

	/** 
	 *Below Apis can be used when the questionnaire(QA) needs to be on
	 State flow entites which are related with task 
	*/	
	hasQAForthisRecord: function(current) {
		var gr = new GlideRecord("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		gr.addEncodedQuery("stateINready,wip,complete");
		gr.addQuery("trigger_id", current.sys_id);
		gr.addQuery("related_id_1", current.wm_task);
		gr.setLimit(1);
		gr.query();
		return 	gr.hasNext();
	},

	hasPendingMandatoryQA: function(current) {
		var gr = this.hasPendingQA(current.sys_id , current.wm_task);
		if(!gr.hasNext())
			return false;
		
		var questionnaires = '';
		while(gr.next()){
			questionnaires += gr.metric_type.sys_id + ',';
		}
		if(questionnaires.length &gt; 0)
			return this.isMandatoryQuestionnaire(questionnaires, current);
		return false;
	},

	hasPendingQA: function(triggerId , taskId) {
		var gr = new GlideRecord("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		gr.addEncodedQuery("stateINready,wip");
		gr.addQuery("trigger_id", triggerId);
		gr.addQuery("related_id_1", taskId);
		gr.query();
		return 	gr;
	},

	hasUnfinishedMandatoryQA: function(current){
		var gr = this.hasPendingQA(current.sys_id , current.wm_task);

		var metricIDs = '';
        while(gr.next()){
            metricIDs += "," + gr.getValue("metric_type");
        }

        var questionnaireGR = new GlideRecord("wm_questionnaire");
        questionnaireGR.addQuery("questionnaire_definitionIN" + metricIDs);
        questionnaireGR.addQuery("mandatory", true);
        questionnaireGR.setLimit(1);
        questionnaireGR.query();
        if(questionnaireGR.hasNext()){
            return true;
        }
        return false;
    },

	updateQAToComplete: function(current) {
		var gr = new GlideRecord("asmt_assessment_instance");
		gr.addQuery("metric_type.active", true);
		gr.addQuery("metric_type.publish_state", "published");
		gr.addQuery("preview", false);
		gr.addQuery("metric_type.evaluation_method", "!=", "attestation_v2");
		gr.addQuery("metric_type.evaluation_method", "!=", "risk_assessment");
		gr.addEncodedQuery("stateINready,wip");
		gr.addQuery("trigger_id", current.sys_id);
		gr.addQuery("related_id_1", current.wm_task);
		gr.setValue('state', 'complete');
		gr.updateMultiple();
	},

    type: 'FSMQuestionnaireHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-09-30 18:52:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2cf1e5377f022200c57212f44efa9110&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;81&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FSMQuestionnaireHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service - Questionnaire" source="com.snc.wm_questionnaire"&gt;cd9b523f4722c210cd4e1ce4316d4322&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2cf1e5377f022200c57212f44efa9110&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-09 03:57:33&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:13</sys_created_on>
        <sys_id>bb21349983b01210c6695855eeaad3f1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FSMQuestionnaireHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bb21349983b01210c6695855eeaad3f1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
