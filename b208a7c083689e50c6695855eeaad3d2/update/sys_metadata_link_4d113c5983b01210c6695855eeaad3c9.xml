<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>28efc646c0a80a6d03bd855f3cc8eb9f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.TimecardAjax&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Ajax processor for managing time cards from the my_timecards ui page&amp;#13;
&lt;/description&gt;
        &lt;name&gt;TimecardAjax&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**

 * Called from the my_timecard ui page to generate time cards for all my scheduled tasks
 */
var TimecardAjax = Class.create();
TimecardAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    TYPE: "TimecardAjax",
    
    ajaxFunction_generateTaskCards: function(){
        //get request info
		this.weekStart = this._getWeekStart();
        this.user = this.getParameter('sysparm_user');
        this.weekEnd = this._getWeekEnd();
		this.newCards = []; //list of cards created
        this.existingCards = this._getExistingCards();
		this.plannedTasks = this._getPlannedTasks();
        this._generateMissingCards(this.plannedTasks);

        this._buildResult();
    },
    
	getStartOfCurrentWeek: function(){
		return TimeCardUtil.getStartOfCurrentWeek();
	},
	
	getStartOfLastWeek: function(){
		return TimeCardUtil.getStartOfLastWeek();
	},
	
    _getWeekStart: function(){
		//convert to date
        var startDate = new GlideDate();
        startDate.setValue(this.getParameter('sysparm_cardstart'));
        return startDate;
    },

    _getWeekEnd: function(){
        var cardEnd = new GlideDate();
        cardEnd.setValue(this.weekStart);
        cardEnd.addDays(7);
        return cardEnd;
    },
    
    _getExistingCards: function(){
        var timecard = new GlideRecord("time_card");
        timecard.addQuery("week_starts_on", this.weekStart);
        timecard.addQuery("user", this.user);
        timecard.query();
        return timecard;
    },
    
    _getPlannedTasks: function(){
	if (this.user == "")
         	return;
			
        var tasks = new GlideRecord("planned_task");
        tasks.addQuery("assigned_to", this.user);
		tasks.addQuery("start_date", "&lt;=", this.weekEnd);
		tasks.addQuery("end_date", "&gt;=", this.weekStart);
        tasks.query();
        return tasks;
    },
    
    _generateMissingCards: function(tasks){
		var timecard = this.existingCards;
        while (tasks.next()) {
            if (timecard.find("task", tasks.getUniqueValue())) 
                continue;
            
            //no time card found, create one
            var tc = new GlideRecord("time_card");
            tc.user = this.user;
            tc.week_starts_on = this.weekStart;
            tc.task = tasks.getUniqueValue();
            var newCard = tc.insert();
	     this.newCards.push(newCard);
        }
    },
    
    
    /**
     * Format result payload
     */
    _buildResult: function(){
        var result = this.newItem("result");
		result.setAttribute("count", this.newCards.length);
		result.setAttribute("newCards", this.newCards.toString());
    },
	
	getUserandDelegators:  function(){
		var user = gs.getUserID();
		var validApproverList = [user];
		var delegateGr = new GlideRecord('sys_user_delegate');
		delegateGr.addQuery("delegate", user);
		delegateGr.addQuery("approvals", true);
		delegateGr.addQuery("starts", "&lt;=", gs.daysAgo(0));
		delegateGr.addQuery("ends", "&gt;=", gs.daysAgo(0));
		delegateGr.query();
		while( delegateGr.next() ) {
			validApproverList.push(delegateGr.getValue('user'));
		}
		return validApproverList;
	},

});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;john.roberts&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2010-12-27 17:45:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;28efc646c0a80a6d03bd855f3cc8eb9f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;30&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TimecardAjax&lt;/sys_name&gt;
        &lt;sys_package display_value="Time Card Management" source="com.snc.time_card"&gt;3bef86e747e64210cd4e1ce4316d4343&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_28efc646c0a80a6d03bd855f3cc8eb9f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-02-20 13:33:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:45</sys_created_on>
        <sys_id>4d113c5983b01210c6695855eeaad3c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TimecardAjax</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4d113c5983b01210c6695855eeaad3c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:45</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
