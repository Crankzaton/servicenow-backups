<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.state.changes()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Task Active State Management (Repeat)</name>
        <order>99999</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 /**
  This is a clone of the before business rule 'Task Active State Management' with order 50 on the 'task' table.
  This before business rule runs with order 99,999 to handle the case where a workflow updates the 'state' field of a case,
  but does not update the 'active' field.
 **/
 /**
  Service-now.com

  Description: Generic task closer/opener using table level state definitions
 **/

 processTaskStates();

 function processTaskStates() {

  //use TaskStateUtil logic
  var stateUtil = new global.TaskStateUtil(current);
  var closeStates = stateUtil.getInactiveStates();
  //see if we have at least the close state attribute
  if (closeStates == null)
   return;

  //determine previous and current state active status
  var previousStateInactive = stateUtil.isStateInactive(previous.state);
  var currentStateInactive = stateUtil.isStateInactive(current.state);

  //set record to inactive (close) if we move from an active state to an inactive state
  if (!previousStateInactive && currentStateInactive && current.active) {
   current.active = false;
   gs.info(current.getDisplayValue() + ": State changed (" + previous.state.getDisplayValue() + "->" + current.state.getDisplayValue() + "), setting task to inactive");
  }

  //set record to active (reopen) if we move from an inactive state to an active state
  if (previousStateInactive && !currentStateInactive && !current.active) {
   current.active = true;
   gs.info(current.getDisplayValue() + ": State changed (" + previous.state.getDisplayValue() + "->" + current.state.getDisplayValue() + "), setting task to active");
  }

 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:54</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0a8c2c5983701210c6695855eeaad3ae</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Task Active State Management (Repeat)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_0a8c2c5983701210c6695855eeaad3ae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:54</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=0a8c2c5983701210c6695855eeaad3ae"/>
</record_update>
