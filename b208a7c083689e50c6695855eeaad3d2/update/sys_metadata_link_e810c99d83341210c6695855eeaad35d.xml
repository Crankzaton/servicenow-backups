<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b2c179171b134650ff37eb14b24bcbeb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.getCustodyGroups&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;/*If user is GSC

	Manager = My groups + Associated markets groups
Checker = My groups
Maker = My groups

If user is Onshore

Manager = My groups + Associated markets groups + group location != GSC
Checker = My groups 
Maker = My groups
*/&lt;/description&gt;
        &lt;name&gt;getCustodyGroups&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var getCustodyGroups = Class.create();
getCustodyGroups.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    getAllowedGrps: function() {

        var logUser = gs.getUserID(); //Logged in User
        var grpType = []; // fetching owning business group the logged in user is part of
        var grpLocation = []; //fetching group location Onshor or GSC
        var arrayUtil = new global.ArrayUtil(); //calling Arrayutil to filter duplicate array elements for optimization
        var allowedGrps = []; //Final list of array
		var grpQuery = ''; // dynamic query

        //Logged in User Group Types and Group Location
        var myGroups = new GlideRecord('sys_user_grmember');
        myGroups.addEncodedQuery('user.sys_id=' + logUser);
        myGroups.query();
        while (myGroups.next()) {
            grpLocation.push(myGroups.group.u_group_location);
        }
        //Logged in User Group Types and Group Location

		//Unique User Group Location
        var uniqgrpLocation = grpLocation.toString().split(","); //converting the location array to string
        uniqgrpLocation = arrayUtil.unique(uniqgrpLocation); //unique group locations
        //Unique User Group Group Location

        //Logged in user Associated Markets
        var userMarket = new GlideRecord('sys_user');
        userMarket.get(logUser);
        var currUserMarket = userMarket.u_associated_business_markets.split(",");
        var userAssocMarket = new GlideRecord('sys_user_group_type');
        userAssocMarket.addEncodedQuery('nameIN' + currUserMarket);
        userAssocMarket.query();
        while (userAssocMarket.next()) {
            grpType.push(userAssocMarket.sys_id + '');
        }
        //Logged in user Associated Markets
    

        //Filter the groups based on persona

        if ((uniqgrpLocation.indexOf('GSC') &gt; -1) &amp;&amp; gs.getUser().getUserByID(logUser).hasRole('x_hsb11_mss_custod.custody_manager')) { //GSC Manager

            grpQuery = 'user.sys_id=' + logUser + '^NQgroup.typeIN' + grpType.toString();

            gs.info('User is a GSC Manager');
        } else if ((uniqgrpLocation.indexOf('Onshore') &gt; -1) &amp;&amp; gs.getUser().getUserByID(logUser).hasRole('x_hsb11_mss_custod.custody_manager')) { //Onshore Manager

            grpQuery = 'user.sys_id=' + logUser + '^NQgroup.typeIN' + grpType.toString() + '^group.u_group_location!=GSC';

            gs.info('User is a Onshore Manager');
        } else if ((gs.getUser().getUserByID(logUser).hasRole("x_hsb11_mss_custod.custody_checker")) || (gs.getUser().getUserByID(logUser).hasRole("x_hsb11_mss_custod.custody_maker"))) {

            grpQuery = 'user.sys_id=' + logUser;
            gs.info('User is a Maker or Checker');
        }

        var getAllowGrps = new GlideRecord('sys_user_grmember');
        getAllowGrps.addEncodedQuery(grpQuery);
        getAllowGrps.query();
        while (getAllowGrps.next()) {
            allowedGrps.push(getAllowGrps.group.name);
        }
        //Filter the groups based on persona

        return allowedGrps.toString();

    },

    type: 'getCustodyGroups'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;45381533@hsbc.com&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-07-15 04:36:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b2c179171b134650ff37eb14b24bcbeb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;getCustodyGroups&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b2c179171b134650ff37eb14b24bcbeb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;45381533@hsbc.com&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-07-16 05:50:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:15</sys_created_on>
        <sys_id>e810c99d83341210c6695855eeaad35d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>getCustodyGroups</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e810c99d83341210c6695855eeaad35d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
