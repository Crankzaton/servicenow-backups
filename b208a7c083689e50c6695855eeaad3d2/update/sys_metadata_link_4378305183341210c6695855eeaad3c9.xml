<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8bd6094ec7cba010c636edf4c1c26097</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FSMSkillUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Util class for skill related operations&lt;/description&gt;
        &lt;name&gt;FSMSkillUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FSMSkillUtil = Class.create();
FSMSkillUtil.prototype = {
    initialize: function() {
    },

    type: 'FSMSkillUtil'
};

FSMSkillUtil.getTasksSkills = getTasksSkills;
FSMSkillUtil.getAgentSkills = getAgentSkills;
FSMSkillUtil.useSkillsConfigure = useSkillsConfigure;

/**
* This function will query the skills for tasks
*
* @Param: taskIds - array of task sys_ids
* @Param: mandatory - true/false indicates the skill is a mandatory one or not
* 
* @Return: an object with tasks and skills:
* {
* 'skills': {'taskid':[{skill1: 0}, {skill2, 1}]},
* 'uniqueSkills': [skill1, skill2]
* }
* 
*/
function getTasksSkills(taskIds, mandatory){
    // copy over the original list of taskIds and modify the copied over list.
    // Otherwise it leads to incorrect results when a bundle task is part of the result set
    var taskIdsToQuery = [].concat(taskIds);
    var bundlePluginActive = GlidePluginManager.isActive('com.snc.fsm_task_bundle');
    if (bundlePluginActive) {
        var subtaskBundleMap = new sn_fsm_task_bundle.FSMTaskBundle().getSubtaskIdsWithBundleMappings(taskIds);
	taskIdsToQuery = taskIdsToQuery.concat(Object.keys(subtaskBundleMap));
	// filter out bundle task id as we dont want to consider skills associated with it for recommendation computation
	for (var taskId in taskIdsToQuery) {
	    var bundle = subtaskBundleMap[taskIdsToQuery[taskId]];
	    if (bundle != undefined) {
		var bundleIndex = taskIdsToQuery.indexOf(bundle);
		if (bundleIndex !== -1)
     		    taskIdsToQuery.splice(bundleIndex, 1);
	    }
	}
     }
	var tasksSkills = {};
	var taskSkillRecord = new GlideRecord('task_m2m_skill');
	taskSkillRecord.addQuery("task", "IN", taskIdsToQuery.join(","));
	//still allow people to query mandatory or non mandatory task
	if(!gs.nil(mandatory)){
		taskSkillRecord.addQuery("mandatory", mandatory);
	}
	
	taskSkillRecord.query();
	
	var returnSkills = {};
	var uniqueSkills = {};
	while (taskSkillRecord.next()){
		var taskId = taskSkillRecord.getValue("task");
		if (bundlePluginActive &amp;&amp; !gs.nil(subtaskBundleMap[taskId])) {
            	    // taskId is a subtask for a bundle . Associate skills from this subtask to the bundle task 
            	    taskId = subtaskBundleMap[taskId];
        	}
		var skill = taskSkillRecord.getValue('skill');
		var m = taskSkillRecord.getValue("mandatory");
		if(returnSkills.hasOwnProperty(taskId)){
			var aSkill = {};
			aSkill[skill] = m;
			returnSkills[taskId].push(aSkill);
		} else {
			returnSkills[taskId] = [];
			var aSkill = {};
			aSkill[skill] = m;
			returnSkills[taskId].push(aSkill);
		}
		
		uniqueSkills[skill] = {};
	}
	
	tasksSkills.skills = returnSkills;
	tasksSkills.uniqueSkills = Object.keys(uniqueSkills);
	
	return tasksSkills;
}

/**
* This function will query user skills.  if an array of unique skills pass in, it will return the matched skills.
* @Param: user - user sys_id
* @Param: uniqueSkills - an array of skills
*
* @Return: an array of match skills
*/
function getAgentSkills(agent, skillsToQuery){
	var skillRecord = new GlideRecord("sys_user_has_skill");
	skillRecord.addQuery("user", agent);
	if (!gs.nil(skillsToQuery) &amp;&amp; skillsToQuery.length &gt; 0){
		skillRecord.addQuery("skill", "IN", skillsToQuery);
	}
	skillRecord.query();
	
	var userUniqueSkills = {};
	while(skillRecord.next()){
		var skill = skillRecord.getValue("skill");
		userUniqueSkills[skill] = {};
	}
	return Object.keys(userUniqueSkills);
}

function useSkillsConfigure(){
	var smConfig = new sn_sm.SMConfiguration();
	var useSkill = j2js(smConfig.getConfigRecord(new GlideRecord("wm_task")).getValue("use_skill"));
	return useSkill.toLowerCase();

}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-23 16:46:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8bd6094ec7cba010c636edf4c1c26097&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FSMSkillUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8bd6094ec7cba010c636edf4c1c26097&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-19 05:38:21&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:07</sys_created_on>
        <sys_id>4378305183341210c6695855eeaad3c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FSMSkillUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4378305183341210c6695855eeaad3c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:07</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
