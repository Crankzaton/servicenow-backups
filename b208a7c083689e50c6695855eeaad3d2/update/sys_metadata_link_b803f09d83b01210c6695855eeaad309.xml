<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>58b15603c3003000bac1addbdfba8fa5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Update the sys_dictionary entries for internal_type and reference to both reference types.
		&lt;/description&gt;
        &lt;name&gt;Upgrade Dictionary Entries&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[// Reuse these gliderecords repeatedly below...
		var dict = new GlideRecord("sys_dictionary");
		var doc = new GlideRecord("sys_documentation");

		/*
		 sys_dictionary
		 &lt;element name="max_length" mandatory="false"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_dictionary");
		dict.addQuery("element", "max_length");
		dict.query();
		if (dict.next()) {
			dict.mandatory = false;
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_dictionary max_length element to mandatory = false")
			}
		}

		/*
		 sys_documentation
		 &lt;element name="label" max_length="50" display="true"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_documentation");
		dict.addQuery("element", "label");
		dict.query();
		if (dict.next()) {
			dict.display = true;
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_documentation label element to display = true")
			}
		}

		/*
		 sys_glide_object
		 &lt;element name="label" display="true" hint="The display name of this field type" type="translated_field"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_glide_object");
		dict.addQuery("element", "label");
		dict.query();
		if (dict.next()) {
			dict.display = true;
			dict.internal_type = "translated_field";
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_glide_object label element to display = true and internal_type = translated_field")
			}
		}

		/*
		 sys_dictionary
		 &lt;element name="element" display="false"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_dictionary");
		dict.addQuery("element", "element");
		dict.query();
		if (dict.next()) {
			dict.display = false;
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_dictionary element (column name) element to display = false")
			}
		}

		/*
		 sys_dictionary
		 &lt;element name="reference" type="reference" reference="sys_db_object" reference_key="name"
		 dynamic_creation="true" dynamic_creation_script="current.label = value; return current.insert();"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_dictionary");
		dict.addQuery("element", "reference");
		dict.query();
		if (dict.next()) {
			dict.internal_type = "reference";
			dict.reference = "sys_db_object";
			dict.reference_key = "name";
			dict.dynamic_creation = true;
			dict.dynamic_creation_script = "new TableUtils().createTableFromDynamicReference(current, value, parent, typeof grandparent != 'undefined' ? grandparent : null);";
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_dictionary reference element to reference sys_db_object with reference key " +
					"= name and dynamic_creation = true");
			}
		}

		/*
		 sys_dictionary
		 &lt;element name="reference_qual" max_length="255" hint="References may depend on another value, for example role=itil" /&gt;
		 */
		doc.initialize();
		doc.addQuery("name", "sys_dictionary");
		doc.addQuery("element", "reference_qual");
		doc.addQuery("language", "en");
		doc.query();
		if (doc.next()) {
			doc.hint = "References may depend on another value, for example role=itil";
			if (doc.changes() &amp;&amp; doc.update() != null) {
				gs.log("Updated sys_dictionary reference_qual element hint");
			}
		}

		/*
		 sys_dictionary
		 &lt;element name="internal_type" type="reference" reference="sys_glide_object" reference_qual="javascript:gs.hasRole('maint')?'':'visible=true';" reference_key="name" label="Type" /&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_dictionary");
		dict.addQuery("element", "internal_type");
		dict.query();
		if (dict.next()) {
			dict.internal_type = "reference";
			dict.reference = "sys_glide_object";
			dict.reference_qual = "javascript:gs.hasRole('maint')?'':'visible=true';";
			dict.reference_key = "name";
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_dictionary internal_type element to reference sys_glide_object");
			}
		}

		/*
		 sys_db_object
		 &lt;element name="name" table_reference="true" label="Name" mandatory="true" hint="The internal name of the table that cannot later be changed"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_db_object");
		dict.addQuery("element", "name");
		dict.query();
		if (dict.next()) {
			dict.mandatory = true;
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_db_object name to mandatory = true");
			}
		}
		doc.initialize();
		doc.addQuery("name", "sys_db_object");
		doc.addQuery("element", "name");
		doc.addQuery("language", "en");
		doc.query();
		if (doc.next()) {
			doc.label = "Name";
			doc.plural = "Name";
			doc.hint = "The internal name of the table that cannot later be changed";
			if (doc.changes() &amp;&amp; doc.update() != null) {
				gs.log("Updated sys_db_object name element label, plural and hint");
			}
		}
		/*
		 sys_db_object
		 &lt;element name="super_class" type="reference" label="Extends table" reference="sys_db_object" reference_qual="is_extendable=true" hint="Table this table inherits fields from"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_db_object");
		dict.addQuery("element", "super_class");
		dict.query();
		if (dict.next()) {
			dict.reference_qual = "is_extendable=true";
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_db_object super_class reference_qual='is_extendable=true'");
			}
		}
		doc.initialize();
		doc.addQuery("name", "sys_db_object");
		doc.addQuery("element", "super_class");
		doc.addQuery("language", "en");
		doc.query();
		if (doc.next()) {
			doc.label = "Extends table";
			doc.plural = "Extends table";
			doc.hint = "Table this table inherits fields from";
			if (doc.changes() &amp;&amp; doc.update() != null) {
				gs.log("Updated sys_db_object super_class element label, plural and hint");
			}
		}
		/*
		 sys_number
		 &lt;element name="prefix" hint="Characters added to the beginning of the number to differentiate tables" display="true"/&gt;
		 */
		dict.initialize();
		dict.addQuery("name", "sys_number");
		dict.addQuery("element", "prefix");
		dict.query();
		if (dict.next()) {
			dict.display = true;
			dict.setWorkflow(false);
			if (dict.changes() &amp;&amp; dict.update()) {
				gs.log("Updated sys_number prefix display = true");
			}
		}
		/*
		 sys_number
		 &lt;element name="category" type="reference" reference="sys_db_object" reference_key="name" label="Table" table_reference="true" hint="Table the number is associated with"/&gt;
		 */
		doc.initialize();
		doc.addQuery("name", "sys_number");
		doc.addQuery("element", "category");
		doc.addQuery("language", "en");
		doc.query();
		if (doc.next()) {
			doc.hint = "Table the number is associated with";
			if (doc.changes() &amp;&amp; doc.update() != null) {
				gs.log("Updated sys_number category element hint");
			}
		}
		/*
		 sys_number
		 &lt;element name="maximum_digits" type="integer" hint="Number of digits for the number, zero (0) padded from the left.  Set value to zero (0) for no padding." default="7" label="Number of digits"/&gt;
		 */
		doc.initialize();
		doc.addQuery("name", "sys_number");
		doc.addQuery("element", "maximum_digits");
		doc.addQuery("language", "en");
		doc.query();
		if (doc.next()) {
			doc.hint = "Number of digits for the number, zero (0) padded from the left.  Set value to zero (0) for no padding.";
			if (doc.changes() &amp;&amp; doc.update() != null) {
				gs.log("Updated sys_number maximum_digits element hint");
			}
		}

		/*
		 sys_app_module:
		 &lt;element name="application" label="Application menu" hint="The navigation menu where this module should reside"/&gt;
		 */
		doc.initialize();
		doc.addQuery("name", "sys_app_module");
		doc.addQuery("element", "application");
		doc.addQuery("language", "en");
		doc.query();
		if (doc.next()) {
			doc.hint = "The navigation menu where this module should reside";
			doc.plural = "Application menu";
			if (doc.changes() &amp;&amp; doc.update() != null) {
				gs.log("Updated sys_db_object super_class element label, plural and hint");
			}
		}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2012-08-29 06:53:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;58b15603c3003000bac1addbdfba8fa5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Upgrade Dictionary Entries&lt;/sys_name&gt;
        &lt;sys_package display_value="System Applications Core" source="com.snc.apps"&gt;b5a334643c31311068bcf327dfe37f63&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_58b15603c3003000bac1addbdfba8fa5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2012-10-08 17:53:53&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:12</sys_created_on>
        <sys_id>b803f09d83b01210c6695855eeaad309</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Upgrade Dictionary Entries</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b803f09d83b01210c6695855eeaad309</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:12</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
