<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Decision Inputs</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var decisionTable = new GlideRecord("sys_decision_input");
    decisionTable.initialize();
    decisionTable.setValue('model', current.policy.decision_table);
    decisionTable.setValue('model_table', 'sys_decision');
    decisionTable.setValue('name', 'var__m_sys_decision_input_' + current.policy.decision_table);

    if (current.sys_auth_filter_criteria.sys_class_name == 'sys_generic_user_filter_criteria')
        setTypeForGenericUserFilterCriteria();
    else {
        //For Boolean True/False
        decisionTable.setValue('internal_type', 'boolean'); //reference type
        decisionTable.setDisplayValue('internal_type', 'True/False'); //reference type
    }

    decisionTable.setValue('label', current.sys_auth_filter_criteria.name);
    decisionTable.setValue('element', current.sys_auth_filter_criteria.element_name);
    decisionTable.insert();

    function setTypeForGenericUserFilterCriteria() {

        var filterType = current.sys_auth_filter_criteria.type;
        if (filterType == 'identity_provider') {
            //For Refernce type
            decisionTable.setValue('internal_type', 'reference');
            decisionTable.setValue('reference', 'sso_properties');

        } else if (filterType == 'auth_scheme') {
            //For Choice type
            createAuthSchemeChoiceRecords();
            decisionTable.setValue('internal_type', 'choice');
            decisionTable.setValue('choice', '3'); //show dropdown without None

        } else if (filterType == 'idp_attribute') {
            var type = getIDPAttributeType();
            createIDPAttributeRecord(type);

        } else {
            //For Boolean True/False
            decisionTable.setValue('internal_type', 'boolean');
            decisionTable.setDisplayValue('internal_type', 'True/False');
        }
    }


    function createAuthSchemeChoiceRecords() {
        //Provide inputs for choice records
        createChoiceRecord('Username and Password' , 'local', '1');
        createChoiceRecord('Single Sign-On' , 'multisso', '2');
    }

 function createChoiceRecord(label, value, sequence) {
        //create choice record with given inputs
        choiceTable = new GlideRecord("sys_choice");
        choiceTable.setValue('name', 'var__m_sys_decision_input_' + current.policy.decision_table);
        choiceTable.setValue('element', current.sys_auth_filter_criteria.element_name);
        choiceTable.setValue('label', label);
        choiceTable.setValue('value', value);
        choiceTable.setValue('sequence', sequence);
        choiceTable.insert();
    }

    function getIDPAttributeType() {
        var idpAttrGR = new GlideRecord("idp_attribute");
        if (idpAttrGR.isValid()) {
            idpAttrGR.addQuery("friendly_name", current.sys_auth_filter_criteria.name);
            idpAttrGR.query();
            if (idpAttrGR.next())
                return idpAttrGR.type;
        }
    }

    function createIDPAttributeRecord(type) {
        if (type == "integer") {
            decisionTable.setValue('internal_type', 'integer');
            decisionTable.setDisplayValue('internal_type', 'Integer');
        } else if (type == "boolean") {
            decisionTable.setValue('internal_type', 'boolean');
            decisionTable.setDisplayValue('internal_type', 'True/False');
        } else {
            decisionTable.setValue('internal_type', 'string');
            decisionTable.setDisplayValue('internal_type', 'String');
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:47</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b19be4d183701210c6695855eeaad3c1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Decision Inputs</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_b19be4d183701210c6695855eeaad3c1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:47</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=b19be4d183701210c6695855eeaad3c1"/>
</record_update>
