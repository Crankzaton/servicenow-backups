<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0942e7560bcb10102b0bed3ab4673a05</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RMMultiCurrencyUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;RMMultiCurrencyUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RMMultiCurrencyUtil = Class.create();
RMMultiCurrencyUtil.isMultiCurrencyEnabled = function() {
    return GlidePluginManager.isActive('com.snc.ppm_multicurrency');
};

RMMultiCurrencyUtil.getTaskCurrField = function(taskGR){
	var taskCurrField = '';
	if(!taskGR || !taskGR.isValidRecord())
		return taskCurrField;
	if(taskGR.instanceOf('dmn_demand'))
		taskCurrField = 'demand_currency';
	else if(taskGR.instanceOf('pm_project') || taskGR.instanceOf('pm_project_task'))
		taskCurrField = 'project_currency';
	return taskCurrField;
};

RMMultiCurrencyUtil.setTaskCurrField = function(taskGR,resEntityGR){
	if(!RMMultiCurrencyUtil.isMultiCurrencyEnabled())
		return;
	var taskCurrField = RMMultiCurrencyUtil.getTaskCurrField(taskGR);
	if(taskCurrField){
		resEntityGR.setValue(taskCurrField,taskGR.getValue(taskCurrField));
	}
};

RMMultiCurrencyUtil.getTaskType = function(taskGR){
	var taskType = '';
	if(!taskGR || !taskGR.isValidRecord())
		return taskType;
	
	/**
	 * instanceOf method available on global GlideRecord object not on scoped GlideRecord.
	 * This api get invoked from the Project workspace apis where we get the scoped GlideRecord object so that we are handling through try catch block
	 */
	var instancOfExist = true;
	try {
		instancOfExist = typeof taskGR.instanceOf === "function";
	} catch(e) {
		instancOfExist = false;
	}

	if(!instancOfExist) {
		var gr = new GlideRecord(taskGR.getValue('sys_class_name'));
		gr.get('sys_id', taskGR.getValue('sys_id'));
		taskGR = gr;
	}

	if(taskGR.instanceOf('dmn_demand'))
		taskType = 'demand';
	else if(taskGR.instanceOf('pm_project') || taskGR.instanceOf('pm_project_task'))
		taskType = 'project';
	return taskType;
};

RMMultiCurrencyUtil.getTaskCurr = function(taskGR){
	var taskCurr = '';
	var taskType = RMMultiCurrencyUtil.getTaskType(taskGR);
	var taskCurrField = RMMultiCurrencyUtil.getTaskCurrField(taskGR);
	if(taskType &amp;&amp; taskCurrField)
		taskCurr = taskGR.getValue(taskCurrField);
	return taskCurr;
};

RMMultiCurrencyUtil.setPlannedCostInTaskCurr = function(taskGR,resEntityGR,costInFunCurr){
	if(!taskGR || !taskGR.isValidRecord() || !RMMultiCurrencyUtil.isMultiCurrencyEnabled())
		return;
	
	var taskType = RMMultiCurrencyUtil.getTaskType(taskGR);
	var plannedCostInTaskCurr = 0;
	if(taskType){
		var funCurr = new SNC.FMCurrency().getGlobalCurrencyCode();
		var taskCurr =  taskGR.getValue(taskType+'_currency');
		var exchangeRatesInfo = new FinancialsForPPM().getExchangeRateOnDate(resEntityGR.getValue('start_date'), funCurr, taskCurr);
		plannedCostInTaskCurr = exchangeRatesInfo.exchangeRate * costInFunCurr;
		resEntityGR['planned_cost_'+taskType+'_currency']['amount'] = plannedCostInTaskCurr;
		resEntityGR['planned_cost_'+taskType+'_currency']['currency'] = taskGR[taskType+'_currency']['code'];
		resEntityGR.setValue('exchange_rate_'+taskType+'_currency', exchangeRatesInfo.exchangeRate);
		resEntityGR.setValue('exchange_rate_'+taskType+'_currency_date', exchangeRatesInfo.exchangeRateDate);
	}
	return plannedCostInTaskCurr;
};

RMMultiCurrencyUtil.setAllocatedCostInTaskCurr = function(taskGR,resEntityGR,costInFunCurr){
	if(!taskGR || !taskGR.isValidRecord() || !RMMultiCurrencyUtil.isMultiCurrencyEnabled())
		return;
	
	var taskType = RMMultiCurrencyUtil.getTaskType(taskGR);
	if(taskType){
		var funCurr = new SNC.FMCurrency().getGlobalCurrencyCode();
		var taskCurr =  taskGR.getValue(taskType+'_currency');
		var exchangeRatesInfo = new FinancialsForPPM().getExchangeRateOnDate(resEntityGR.getValue('start_date'), funCurr, taskCurr);
		resEntityGR['allocated_cost_'+taskType+'_currency']['amount'] = exchangeRatesInfo.exchangeRate * costInFunCurr;
		resEntityGR['allocated_cost_'+taskType+'_currency']['currency'] = taskGR[taskType+'_currency']['code'];
		resEntityGR.setValue('exchange_rate_'+taskType+'_currency', exchangeRatesInfo.exchangeRate);
		resEntityGR.setValue('exchange_rate_'+taskType+'_currency_date', exchangeRatesInfo.exchangeRateDate);
	}
};

RMMultiCurrencyUtil.setRequestedCostInTaskCurr = function(taskGR,resEntityGR,costInFunCurr){
	if(!taskGR || !taskGR.isValidRecord() || !RMMultiCurrencyUtil.isMultiCurrencyEnabled())
		return;
	
	var taskType = RMMultiCurrencyUtil.getTaskType(taskGR);
	if(taskType){
		var funCurr = new SNC.FMCurrency().getGlobalCurrencyCode();
		var taskCurr =  taskGR.getValue(taskType+'_currency');
		var exchangeRatesInfo = new FinancialsForPPM().getExchangeRateOnDate(resEntityGR.getValue('start_date'), funCurr, taskCurr);
		resEntityGR['requested_cost_'+taskType+'_currency']['amount'] = exchangeRatesInfo.exchangeRate * costInFunCurr;
		resEntityGR['requested_cost_'+taskType+'_currency']['currency'] = taskGR[taskType+'_currency']['code'];
	}
};

RMMultiCurrencyUtil.setActualCostInTaskCurr = function(taskGR,resEntityGR,costInFunCurr){
	if(!taskGR || !taskGR.isValidRecord() || !RMMultiCurrencyUtil.isMultiCurrencyEnabled())
		return;
	
	var taskType = RMMultiCurrencyUtil.getTaskType(taskGR);
	if(taskType){
		var funCurr = new SNC.FMCurrency().getGlobalCurrencyCode();
		var taskCurr =  taskGR.getValue(taskType+'_currency');
		var costInTaskCurr = MultiCurrencyUtil.convertCurrencyUsingFxRate(costInFunCurr,funCurr, taskCurr);
		resEntityGR['actual_cost_'+taskType+'_currency']['amount'] = costInTaskCurr;
		resEntityGR['actual_cost_'+taskType+'_currency']['currency'] = taskGR[taskType+'_currency']['code'];
	}

};

RMMultiCurrencyUtil.clearFields = function(resEntityGR,fieldsToClear){ // fieldsToClear will be an array
	fieldsToClear.forEach(function(field){
		resEntityGR.setValue(field,'');
	});
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-09-07 02:33:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0942e7560bcb10102b0bed3ab4673a05&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;30&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RMMultiCurrencyUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Resource Management" source="com.snc.resource_management"&gt;7200da2b47e64210cd4e1ce4316d438e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0942e7560bcb10102b0bed3ab4673a05&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-03-18 10:59:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:36</sys_created_on>
        <sys_id>7e50349583b01210c6695855eeaad399</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RMMultiCurrencyUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7e50349583b01210c6695855eeaad399</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
