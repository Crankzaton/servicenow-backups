<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>92b36d81530330107234ddeeff7b121c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFSimilarityWithTrendEvaluator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Evaluation script for 'Similarity with trend' Evalution type&lt;/description&gt;
        &lt;name&gt;RFSimilarityWithTrendEvaluator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFSimilarityWithTrendEvaluator = Class.create();
RFSimilarityWithTrendEvaluator.prototype = Object.extendsObject(sn_rf.RFEvaluatorSNC, {
    category: 'rf_evaluation_script', // DO NOT REMOVE THIS LINE!

    getEvaluationOutputSchema: function(param) {
        var rfLogger = new RFLogger('RFSimilarityWithTrendEvaluator - getEvaluationOutputSchema');
        var inputs = param.inputs;
        var similarity = new RFSimilarityService(inputs.similarity_definition);
        if (!similarity.isSolutionDefValid()) {
            var errorDetails = new RFExceptionManager('INVALID_SIMILARITY_SOLUTION_DEFINITION');
            rfLogger.logError('Solution definition ' + inputs.similarity_definition + ' is invalid');
            return {
                'status': RFConstants.ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorDetails.getMessage()
            };
        }
        var trendDefinition = new RFTrendDefinitionService(inputs.trend_definition);
        if (!trendDefinition.hasValidRecord()) {
            errorDetails = new RFExceptionManager('INVALID_TREND_DEFINITION');
            rfLogger.logError('Trend definition ' + inputs.trend_definition + ' is invalid');
            return {
                'status': RFConstants.ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorDetails.getMessage()
            };
        }

        var trendType = trendDefinition.getTrendType();
        var schema = [];
        RFUtils.addToSchema(schema,
            RFConstants.evaluationOutputNames.OLDEST_CREATED_AT,
            RFConstants.evaluationOutputLabels.OLDEST_CREATED_AT,
            RFConstants.evaluationOutputTypes.STRING);
        RFUtils.addToSchema(schema,
            RFConstants.evaluationOutputNames.COUNT,
            RFConstants.evaluationOutputLabels.COUNT,
            RFConstants.evaluationOutputTypes.STRING);
        RFUtils.addToSchema(schema,
            RFConstants.evaluationOutputNames.HIGHEST_CONFIDENCE_RECORD,
            RFConstants.evaluationOutputLabels.HIGHEST_CONFIDENCE_RECORD,
            RFConstants.evaluationOutputTypes.REFERENCE,
            trendDefinition.getTable());
        RFUtils.addToSchema(schema,
            RFConstants.evaluationOutputNames.QUALIFIED_RECORD_IDS,
            RFConstants.evaluationOutputLabels.QUALIFIED_RECORD_IDS,
            RFConstants.evaluationOutputTypes.STRING);
        if (trendType == RFConstants.trendTypes.COMMON_VALUE) {
            RFUtils.addToSchema(schema,
                RFConstants.evaluationOutputNames.DISPLAY_VALUE,
                RFConstants.evaluationOutputLabels.DISPLAY_VALUE,
                RFConstants.evaluationOutputTypes.STRING);
            RFUtils.addToSchema(schema,
                RFConstants.evaluationOutputNames.VALUE,
                RFConstants.evaluationOutputLabels.VALUE,
                RFConstants.evaluationOutputTypes.STRING);
        }
        if (trendType == RFConstants.trendTypes.COMMON_REFERENCE) {
            RFUtils.addToSchema(schema,
                RFConstants.evaluationOutputNames.TREND_RECORD,
                RFConstants.evaluationOutputLabels.TREND_RECORD,
                RFConstants.evaluationOutputTypes.REFERENCE,
                trendDefinition.getSourceTable());
        }
        if (trendType == RFConstants.trendTypes.COMMON_CONDITION) {
            RFUtils.addToSchema(schema,
                RFConstants.evaluationOutputNames.SIMILARITY_DEFINITION_ID,
                RFConstants.evaluationOutputLabels.SIMILARITY_DEFINITION_ID,
                RFConstants.evaluationOutputTypes.STRING);
            RFUtils.addToSchema(schema,
                RFConstants.evaluationOutputNames.TREND_DEFINITION_ID,
                RFConstants.evaluationOutputLabels.TREND_DEFINITION_ID,
                RFConstants.evaluationOutputTypes.STRING);
        }

        var metaData = {};
        metaData['hidden'] = [RFConstants.evaluationOutputNames.QUALIFIED_RECORD_IDS];
        if (trendType == RFConstants.trendTypes.COMMON_VALUE) {
            metaData['uniqueKey'] = [RFConstants.evaluationOutputNames.VALUE];
        } else if (trendType == RFConstants.trendTypes.COMMON_REFERENCE) {
            metaData['uniqueKey'] = [RFConstants.evaluationOutputNames.TREND_RECORD];
        } else if (trendType == RFConstants.trendTypes.COMMON_CONDITION) {
            metaData['uniqueKey'] = [RFConstants.evaluationOutputNames.SIMILARITY_DEFINITION_ID,
                RFConstants.evaluationOutputNames.TREND_DEFINITION_ID
            ];
            metaData['hidden'].push(RFConstants.evaluationOutputNames.SIMILARITY_DEFINITION_ID);
            metaData['hidden'].push(RFConstants.evaluationOutputNames.TREND_DEFINITION_ID);
        }

        return {
            'status': RFConstants.SUCCESS,
            'schema': schema,
            'metaData': metaData
        };
    },

    getEvaluationOutputs: function(param) {
        var rfLogger = new RFLogger('RFSimilarityWithTrendEvaluator - getEvaluationOutputs');
        var inputs = param.inputs;
        var contextRecord = param.contextRecord;
        var evaluationOutputs = [];
        var similarity = new RFSimilarityService(inputs.similarity_definition);
        var trendDefinition = new RFTrendDefinitionService(inputs.trend_definition);

        if (!similarity.isSolutionDefValid()) {
            var errorDetails = new RFExceptionManager('INVALID_SIMILARITY_SOLUTION_DEFINITION');
            rfLogger.logError('Solution definition ' + inputs.similarity_definition + ' is invalid');
            return {
                'status': RFConstants.ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorDetails.getMessage()
            };
        }
        if (!trendDefinition.hasValidRecord()) {
            errorDetails = new RFExceptionManager('INVALID_TREND_DEFINITION');
            rfLogger.logError('Trend definition ' + inputs.trend_definition + ' is invalid');
            return {
                'status': RFConstants.ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorDetails.getMessage()
            };
        }

        var predictions = similarity.getPredictions(contextRecord);
        rfLogger.logDebug('Similarity solution ' + inputs.similarity_definition + ' returned ' + predictions.length + ' predictions');
        var similarRecordSysIds = [];
        for (var predictionIdx = 0; predictionIdx &lt; predictions.length; predictionIdx++) {
            var similarRecordSysId = predictions[predictionIdx].predictedValueSysId();
            if (similarRecordSysId != contextRecord.sys_id) {
                similarRecordSysIds.push(similarRecordSysId);
            }
        }
        var trendResult = trendDefinition.getTrendResult(similarRecordSysIds);
        if (trendResult.status == RFConstants.ERROR) {
            return trendResult;
        }
        var trendData = trendResult.trendData;
        rfLogger.logDebug('Trend definition ' + inputs.trend_definition + ' returned ' + trendData.length + ' trends');
        if (trendDefinition.getTrendType() == RFConstants.trendTypes.COMMON_CONDITION) {
            //List trendData will always be of length 1 for 'Common condition' type of trend
            for (var trendDataIdx = 0; trendDataIdx &lt; trendData.length; trendDataIdx++) {
                trendData[trendDataIdx][RFConstants.evaluationOutputNames.SIMILARITY_DEFINITION_ID] = similarity.getSimilarityDefinitionId();
            }
        }
        return {
            'status': RFConstants.SUCCESS,
            'evaluationOutputs': trendData
        };
    },

    type: 'RFSimilarityWithTrendEvaluator'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-05 12:30:23&lt;/sys_created_on&gt;
        &lt;sys_id&gt;92b36d81530330107234ddeeff7b121c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFSimilarityWithTrendEvaluator&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_92b36d81530330107234ddeeff7b121c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-08 11:47:08&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:38</sys_created_on>
        <sys_id>2e98785183341210c6695855eeaad3e9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFSimilarityWithTrendEvaluator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2e98785183341210c6695855eeaad3e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:38</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
