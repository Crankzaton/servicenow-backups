<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>396a40d153722010c440ddeeff7b12e5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAAISearchMetricCollector&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The base class for all AI Search Result metrics collectors. &lt;/description&gt;
        &lt;name&gt;VAAISearchMetricCollector&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAAISearchMetricCollector = Class.create();

VAAISearchMetricCollector.prototype = {
	
	payload: null,
	isAllowed:false,
	searchResultMetadata:null,
	
	conversationId:null,
	conversationTaskId:null,
	
	paramBag: {}, // parameter bags for GideSignals' tracking event
	
	initialize: function(searchMetadata, vaSystem, vaInputs, vaVars) {
		
		this.payload = {};
		this.payload.metadata = {};
		
		this.payload.metadata.glide_signals_event_type = this.getGlideSignalsEventType();
		this.payload.metadata.is_logged_in = vaVars.is_logged_in;
		
		this.payload.metadata.search_id = searchMetadata.search_id;
		this.payload.metadata.search_result_count = searchMetadata.search_result_count+'';
		
		
		this.payload.glide_signals = {};
		this.payload.click_metrics = {};
		
		this.isAllowed = global.VAClickMetrics.isAISearchClickMetricsAllowed();
		
		//if signal collection is not allowed, just return.
		if (!this.isAllowed)
			return;
		
		//VA click metrics attributes
		var ts = vaVars.time;
		
		if(gs.nil(ts)) // if the start timestamp is not found, create one now.
			ts = global.VAClickMetrics.getCurrentTime();
		
		this.setClickMetricsValue(global.VAClickMetricsConstants.KEY_TIME, ts);
		
		this.conversationId = vaSystem.getConversationId();
		this.setClickMetricsValue(global.VAClickMetricsConstants.CONVERSATION_ID, this.conversationId);
		
		this.conversationTaskId = vaSystem.getConversationTaskId();
		this.setClickMetricsValue(global.VAClickMetricsConstants.CONVERSATION_TASK_ID, this.conversationTaskId);
		
		this.setClickMetricsValue(global.VAClickMetricsConstants.KEY_SEARCH_TYPE, global.VAClickMetricsConstants.VALUE_AI_SEARCH);
		
		this.setParamBagForGlideSignalsEvent(global.AISearchConstants.USER_ID, this._getUserId(searchMetadata));
		this.setParamBagForGlideSignalsEvent(global.AISearchConstants.SESSION_ID, searchMetadata.session_id);
		
		// sets the search profile Id.
		var searchProfileId = vaSystem.getContextProfileId();
		this.setParamBagForGlideSignalsEvent(global.AISearchConstants.SEARCH_PROFILE, searchProfileId);

		// if searchContextId is not provided by the caller, 
		// need to look up the right one with the provided search profile Id.
		var searchContextId =  vaInputs.search_application_configuration.toString();

		if (gs.nil(searchContextId))
			searchContextId 
				= global.VAAISearchHelper.getSearchApplicationConfigurationIdBySearchProfileId(searchProfileId);

		this.setParamBagForGlideSignalsEvent(global.AISearchConstants.SEARCH_CONTEXT_CONFIG_ID, searchContextId);
		this._setSearchResultMetadata(searchMetadata);
		
		// Query term.
		var queryTerm = this.getQueryTerm(vaInputs);
		this.setParamBagForGlideSignalsEvent(global.AISearchConstants.QUERY_TERM, queryTerm);
	},
	
	isOperationAllowed:function() {
		return this.isAllowed;
	},
	
	getQueryTerm : function(vaInputs) {
		
		if (gs.nil(this.searchResultMetadata))
			return vaInputs.search_term.toString();
	
		return !gs.nil(this.searchResultMetadata.correctedSearchTerm)? 
					this.searchResultMetadata.correctedSearchTerm : 
						this.searchResultMetadata.searchTerm;
	},
	
	getGlideSignalsEventType: function() {
		throw 'Need to implement';
	},
	
	_setSearchResultMetadata: function(searchMetadata) {
		
		if (gs.nil(searchMetadata))
			return;
		
		var searchResultMetadata = searchMetadata.glide_signals.searchResultMetadata;
		
		if (gs.nil(searchResultMetadata))
			return;
		
		this.searchResultMetadata = searchResultMetadata;
		
		this.postSearchResultMetadata(searchResultMetadata);
	},
	
	postSearchResultMetadata:function(searchResultMetadata) {
		// do nothing. Need to be overridden by a subclass
	},
	
	getSearchResultMetadata: function() {
		return this.searchResultMetadata;
	},
	
	sendOutMetrics: function() {
		
		if (!this.isAllowed)
			return; 
		
		var payload = JSON.stringify(this.getPayload());
		return global.VAClickMetrics.queueAISearchEvent(this.conversationId, this.conversationTaskId, payload);
	},
    
	getConversationId: function() {
		return this.conversationId;
	},
	
	getConversationTaskId: function() {
		return this.conversationTaskId;
	},
	
	getParamBagForGlideSignalsEvent: function() {
		return this.paramBag;
	},
	
	getPayload: function() {
		var payload = this.payload;
		
		// merge the glide signals payload in to the main payload.
		payload.glide_signals = this.getGlideSignalsPayload();
		
		return payload;
	},
	
	getGlideSignalsPayload: function() {
		throw 'Need to be implemented';
	},
	setParamBagForGlideSignalsEvent: function(name, val) {
		this.setValue(this.paramBag, name, val);
	},
	setGlideSignalsValue: function(name, val) {
		this.setValue(this.payload.glide_signals, name, val);
	},
	
	setClickMetricsValue: function(name, val) {
		this.setValue(this.payload.click_metrics, name, val);
	},
	
	setValue: function(obj, name ,val) {
		obj[name] = gs.nil(val)? '': val+''; 
	},
	
	_getUserId:function(searchMetadata) {
		return searchMetadata.is_logged_in? searchMetadata.user_id: '';
	},
	
	type: 'VAAISearchMetricCollector'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-08 18:11:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;396a40d153722010c440ddeeff7b12e5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;121&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAAISearchMetricCollector&lt;/sys_name&gt;
        &lt;sys_package display_value="Virtual Agent Platform Topic Blocks" source="com.glide.cs.topic_blocks"&gt;289d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_396a40d153722010c440ddeeff7b12e5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-29 08:01:56&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:55</sys_created_on>
        <sys_id>d0667c9983f01210c6695855eeaad324</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAAISearchMetricCollector</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d0667c9983f01210c6695855eeaad324</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
