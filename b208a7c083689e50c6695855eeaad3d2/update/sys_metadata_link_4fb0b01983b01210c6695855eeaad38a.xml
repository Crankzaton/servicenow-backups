<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1b3da98f13a772000bc8bccf3244b011</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdVerificationSelectionHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This script include holds the login into verification selection for password reset&lt;/description&gt;
        &lt;name&gt;PwdVerificationSelectionHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdVerificationSelectionHelper = Class.create();

/*Main function with all the login for retrieving the relevant verification 
	  from the given rules:
	  1. If no verification selection was give return result {verification_selection :false , mandatory:{ids},optional:null}
	  2. If there is a verification selection but min &lt;  mandatory, result :
	  {verification_selection:false, mandatory:{ids},optional:null}
	  3. otherwise : {verification_selection:true, mandatory:{ids},optional:{ids}}
	*/
PwdVerificationSelectionHelper.getVerificationSelection =  function(pwdProcessId, userId, requestId) {	

	var processMgr = new SNC.PwdProcessManager();
	var result = { 
		verification_selection : false, 
		mandatory : null, 
		optional : null, 
		min_selections : 0, 
		email_password_reset_url : null
	};
	
	var processGr = new GlideRecord("pwd_process");
	processGr.get(pwdProcessId);

	var trackingMgr = new SNC.PwdTrackingManager();
	var isRequestInvalid = trackingMgr.isRequestInvalid(requestId);

	var allowVer = processGr.allow_verification_choice;
	var minSelection = processGr.min_verifications;
	result.min_selections = minSelection;
	result.email_password_reset_url = processGr.email_password_reset_url;
	
	var mandatoryVerifications = processMgr.getProcessVerificationIdsByMandatoryFlag(pwdProcessId, true);

	var mandatory = [];
	
	//need to change it from a java array to javascript
	for (var i = 0; i != mandatoryVerifications.size(); ++i)
		mandatory.push(mandatoryVerifications.get(i));
	result.mandatory = mandatory;
		
	if( minSelection &lt;=  mandatory.length){
		result.verification_selection = false;
		result.optional = null;
		return result;
	}

	var optionalVerifications = processMgr.getProcessVerificationIdsByMandatoryFlag(pwdProcessId, false);
	
	var enrollmentMgr = new SNC.PwdEnrollmentManager();
	
	var userRelevantVer = [];
	var verOptionalToAdd = allowVer ? optionalVerifications.size() : minSelection - mandatory.length;
	verOptionalToAdd = verOptionalToAdd &gt; optionalVerifications.size() ? optionalVerifications.size() : verOptionalToAdd;
	var verOptionalAdded = 0;
	
	for (i = 0; i &lt; optionalVerifications.size() &amp;&amp; verOptionalAdded &lt; verOptionalToAdd; ++i) {
		if (isRequestInvalid || enrollmentMgr.isUserEnrolledByVerificationId(userId, optionalVerifications.get(i))) {
			userRelevantVer.push(optionalVerifications.get(i));	
			++verOptionalAdded;
		}
	}
	
	if(userRelevantVer.length + mandatory.length &lt;= minSelection) {
		result.optional = userRelevantVer;
		result.verification_selection = false;
	}
	else {
		if(userRelevantVer.length + mandatory.length &gt; minSelection) {
			if(userRelevantVer.length &gt; 0) {
				result.optional = userRelevantVer;
				result.verification_selection = true;
			}
			else 
				result.verification_selection = false;
		}
		else { 
			throw 'To complete this process, you must enroll for additional verifications (methods to verify your identity)';
		}
	}

	return result;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-06-28 21:22:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1b3da98f13a772000bc8bccf3244b011&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;37&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdVerificationSelectionHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;1399f4e43cf1311068bcf327dfe37fe4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1b3da98f13a772000bc8bccf3244b011&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-07 16:55:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:15</sys_created_on>
        <sys_id>4fb0b01983b01210c6695855eeaad38a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PwdVerificationSelectionHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4fb0b01983b01210c6695855eeaad38a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
