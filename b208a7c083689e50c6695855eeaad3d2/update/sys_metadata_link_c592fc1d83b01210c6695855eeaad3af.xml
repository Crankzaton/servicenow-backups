<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>14dba8fd73330010e37d71ef64f6a7b3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Creates Activities for the last N days data&lt;/description&gt;
        &lt;name&gt;Create Activities for last N days data&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[this.days = gs.getProperty("sn_customercentral.data.scope.days_limit", 30);
/* If the data needs to be created for activity types other than the below mentioned OOB activity types, 
 * an entry needs to be added in this.activityTypeInfo with the condition, 
 * otherwise activities will be created for all the records of the Activity Source table that are created in the last this.days 
 */
this.activityTypeInfo = {
    "baf0aace73530010e37d71ef64f6a748": "contactISNOTEMPTY", //Contact case created 

    "663e5b6e73970010e37d71ef64f6a7a3": "consumerISNOTEMPTY", //Consumer case created

    "63f7a6c273930010e37d71ef64f6a7e7": "type=phone^contactISNOTEMPTY^active=false", //Contact called

    "e4c7f3a5737f4010e37d71ef64f6a7dd": "type=phone^consumerISNOTEMPTY^active=false", //Consumer called

    "663af19e73530010e37d71ef64f6a759": "type=chat^contactISNOTEMPTY^active=false", //Contact chatted

    "94787ba5737f4010e37d71ef64f6a775": "type=chat^consumerISNOTEMPTY^active=false", //Consumer chatted

    "328e72d273d30010e37d71ef64f6a726": "accountISNOTEMPTY", //Contact bought contract

    "d281ebee73970010e37d71ef64f6a7ec": "consumerISNOTEMPTY", //Consumer bought contract

    "fd2ff6d273d30010e37d71ef64f6a7be": "accountISNOTEMPTY", //Contact purchased entitlement

    "8be1afee73970010e37d71ef64f6a76d": "consumerISNOTEMPTY", //Consumer purchased entitlement
};

//If the Conversational Messaging(com.glide.messaging.awa) plugin is installed, activities are generated for the following activity types
if (pm.isActive("com.glide.messaging.awa")) {
    this.activityTypeInfo["73b6956873f21010e37d71ef64f6a7a6"] = "type=messaging^contactISNOTEMPTY^active=false"; //Contact messaging

    this.activityTypeInfo["b27955a873f21010e37d71ef64f6a78a"] = "type=messaging^consumerISNOTEMPTY^active=false"; //Consumer messaging
}

//If the Walk-Up for CSM(com.snc.walkup_for_csm) plugin is installed, activities are generated for the following activity types
if (pm.isActive("com.snc.walkup_for_csm")) {
    this.activityTypeInfo["4333a2c073af1010d43171ef64f6a773"] = "type=walkup^contactISNOTEMPTY^active=false"; //Contact walkup

    this.activityTypeInfo["9a97668073231010d43171ef64f6a784"] = "type=walkup^consumerISNOTEMPTY^active=false"; //Consumer walkup
}

//If the Customer Service Install Base Management(com.snc.install_base) plugin is installed, activities are generated for the following activity types
if (pm.isActive("com.snc.install_base")) {
    this.activityTypeInfo["1a33e1e073361010e37d71ef64f6a7ac"] = "accountISNOTEMPTY"; //Contact purchased product

    this.activityTypeInfo["f2a6516873f21010e37d71ef64f6a7c3"] = "consumerISNOTEMPTY"; //Consumer purchased product

    this.activityTypeInfo["9366506073b21010e37d71ef64f6a7dc"] = "accountISNOTEMPTY"; //Contact purchased install base item

    this.activityTypeInfo["9ad2ada073361010e37d71ef64f6a7ef"] = "consumerISNOTEMPTY"; //Consumer purchased install base item

    this.activityTypeInfo["c34480b473761010e37d71ef64f6a73e"] = "install_base_item.accountISNOTEMPTY"; //Contact installed product

    this.activityTypeInfo["c5eba930733a1010e37d71ef64f6a71f"] = "install_base_item.consumerISNOTEMPTY"; //Consumer installed product
}

//If the Customer Service with Field Service Management(com.snc.csm_fsm_integration) plugin is installed, activities are generated for the following activity types
if (pm.isActive("com.snc.csm_fsm_integration")) {
    this.activityTypeInfo["014c5b4d73321010e37d71ef64f6a704"] = "contactISNOTEMPTY"; //Contact work order 

    this.activityTypeInfo["170d5f4d73321010e37d71ef64f6a75f"] = "consumerISNOTEMPTY"; //Consumer work order
}

//If the Customer Service Household(com.snc.household) plugin is installed, activities are generated for the following activity types
if (pm.isActive("com.snc.household")) {
    this.activityTypeInfo["29c56d8373171010d43171ef64f6a78d"] = "consumerISNOTEMPTY"; //Consumer household
}

this.CUSTOMER_CENTRAL_MODULE = "066e03da73d30010e37d71ef64f6a7dc";
this.actSubCtx = global.ActivitySubscriptionContext.getContext();
this.activityDao = actSubCtx.getActivityDAO();
this.activityContextDao = actSubCtx.getActivityContextDao();
this.isActivitiesPresent = _isActivityPresent();
generateActivities();

//Generates Activities for the activity types that have the "Fetech From Activities" flag set to true in Activity Source Context Mapping table
function generateActivities() {
    var isActivitiesofThisTypePresent;
    var tableInfo = _getActivityTypeInfo();
    for (var key in tableInfo) {
        var tableObj = tableInfo[key];
        var gr = new GlideRecord(tableObj["table"]);
        if (tableObj["query"]) gr.addEncodedQuery(tableObj["query"]);
        gr.addQuery("sys_created_on", "&gt;=", gs.daysAgo(this.days));
        gr.query();
        if (this.isActivitiesPresent &amp;&amp; gr.hasNext())
            isActivitiesofThisTypePresent = _isActivityPresent(key);
        while (gr.next()) {
            if (!this.isActivitiesPresent || !isActivitiesofThisTypePresent || !_isActivityPresent(key, gr.sys_id + ""))
                this.activityDao.createActivityWithoutRunningEngines(gr, tableObj["verb"], this.CUSTOMER_CENTRAL_MODULE);
        }
    }
}

function _isActivityPresent(activityTypeId, sysId) {
    var gr = new GlideRecord(ActivityConstants.TABLE_ACTIVITY);
    if (activityTypeId) gr.addQuery("activity_type_id", activityTypeId);
    if (sysId) gr.addQuery("object_id", sysId);
    gr.query();
    return gr.hasNext();
}

function _getActivityTypeInfo() {
    var result = {};
    var contexts = this.activityContextDao.getActivityContexts({
        "activityModule": this.CUSTOMER_CENTRAL_MODULE
    });
    for (var i = 0, len = contexts.length; i &lt; len; i++) {
        var contextId = contexts[i]["sys_id"];
        if (contextId) {
            var groupIds = _getActivityGroups(contextId);
            var groupActivityTypes = _getGroupActivityTypes(groupIds);
            _setContextActivityTypes(groupActivityTypes, contextId, result);
        }
    }
    return result;
}


function _getActivityGroups(contextId) {
    var facet = new GlideRecord(ActivityConstants.TABLE_ACTIVITY_FACET);
    facet.addActiveQuery();
    facet.addQuery("subobject.activity_context", contextId);
    facet.addQuery("module", this.CUSTOMER_CENTRAL_MODULE);
    facet.query();
    var result = [];
    while (facet.next()) {
        result.push(facet.subobject.subobject + "");
    }
    return result;
}

function _getGroupActivityTypes(groupIds) {
    var activityType = new GlideRecord(ActivityConstants.TABLE_M2M_SUBOBJECT_ACTIVITY_TYPE);
    activityType.addQuery("subobject", "IN", groupIds);
    activityType.addQuery("activity_type.active", true);
    activityType.addQuery("activity_type.module", this.CUSTOMER_CENTRAL_MODULE);
    activityType.query();
    var result = [];
    while (activityType.next()) {
        result.push(activityType.activity_type + "");
    }
    return result;
}

function _setContextActivityTypes(activityTypes, contextId, result) {
    var mapping = new GlideRecord(ActivityConstants.TABLE_SOURCE_CONTEXT_MAPPING);
    mapping.addQuery("activity_context", contextId);
    mapping.addQuery("activity_type", "IN", activityTypes);
    mapping.addQuery("fetch_from_activities", true);
    mapping.addQuery("module", this.CUSTOMER_CENTRAL_MODULE);
    mapping.query();
    while (mapping.next()) {
        var actTypeGr = mapping.activity_type;
        var typeId = actTypeGr.sys_id + "";
        if (!result[typeId]) result[typeId] = {};
        result[typeId]["table"] = actTypeGr.activity_source_table + "";
        result[typeId]["verb"] = actTypeGr.verb + "";
        if (this.activityTypeInfo[typeId]) {
            result[typeId]["query"] = this.activityTypeInfo[typeId];
        }
    }
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-03-27 10:40:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;14dba8fd73330010e37d71ef64f6a7b3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Create Activities for last N days data&lt;/sys_name&gt;
        &lt;sys_package display_value="Subscriptions and Activity Feed Framework" source="com.snc.activity_subscriptions"&gt;9f8df8203c75311068bcf327dfe37fbe&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_14dba8fd73330010e37d71ef64f6a7b3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-07 14:01:48&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:19:19</sys_created_on>
        <sys_id>c592fc1d83b01210c6695855eeaad3af</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Activities for last N days data</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c592fc1d83b01210c6695855eeaad3af</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:19:19</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
