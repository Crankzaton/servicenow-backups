<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1c497b7e73012300a010ef6bcaf6a7c7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PPMActualBenefitFunctionCurrencyUpgrade&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PPMActualBenefitFunctionCurrencyUpgrade&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PPMActualBenefitFunctionCurrencyUpgrade = Class.create();
PPMActualBenefitFunctionCurrencyUpgrade.prototype = {
    initialize: function () {
        this.GLOBAL_CURRENCY = new SNC.FMCurrency().getGlobalCurrencyCode();
        this.fpService = new FinancialsForPPM();
        this.referenceRateMap = {};
        /*
                               
               referenceRateMap = {
              
                               'FY15' : {
                                                                'USD' : exrateobj1,
                                                                'CHF' : exrateobj2
                               }
                               'FY16' : {
                                                                'USD' : exrateobj1,
                                                                'CHF' : exrateobj2
                               }
                               'FY17' : {
                                                                'USD' : exrateobj1,
                                                                'CHF' : exrateobj2
                               }
               }
                               
                               
                               
                               
        */
    },
    prependGlobalCurrency: function (currencyValue) {
        return this.GLOBAL_CURRENCY + ';' + currencyValue;
    },
    upgrade: function () {
        var startTime = new GlideDateTime();
        gs.info('Actual Benefit Funcational Currency Upgrade Started at: ' + startTime);
        this._upgradeProject();
        this._upgradeProgram();
        var endTime = new GlideDateTime();
        gs.info('Actual Benefit Funcational Currency Upgrade Completed at:' + endTime);
 
    },
    _upgradeProgram: function () {
        var pgm = new GlideRecord('pm_program');
        pgm.addQuery('active', true);
        pgm.query();
        var bpBd;
        while (pgm.next()) {
            bpBd = new GlideAggregate('benefit_plan_breakdown');
            bpBd.addQuery('breakdown_type', 'program');
            bpBd.addQuery('program', pgm.getUniqueValue());
            bpBd.addAggregate('SUM', 'actual_benefit');
            bpBd.groupBy('program');
            bpBd.query();
            while (bpBd.next()) {
                pgm.setWorkflow(false);
                pgm.setUseEngine(false);
                pgm.setValue('actual_benefits', this.prependGlobalCurrency(bpBd.getAggregate('SUM', 'actual_benefit')));
            }
            pgm.update();
        }
 
    },
    _upgradeProject: function () {
        var prj = new GlideRecord('pm_project');
        prj.addQuery('active', true);
        prj.query();
        var bpBd;
        while (prj.next()) {
            bpBd = new GlideAggregate('benefit_plan_breakdown');
            bpBd.addQuery('breakdown_type', 'task');
            bpBd.addQuery('task', prj.getUniqueValue());
            bpBd.addAggregate('SUM', 'actual_benefit');
            bpBd.groupBy('task');                                   
            bpBd.query();
            while (bpBd.next()) {
                prj.setWorkflow(false);
                prj.setUseEngine(false);
                prj.setValue('actual_benefits', this.prependGlobalCurrency(bpBd.getAggregate('SUM', 'actual_benefit')));
            }
            prj.update();
        }
 
    },
                type: 'PPMActualBenefitFunctionCurrencyUpgrade'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-10-13 18:52:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1c497b7e73012300a010ef6bcaf6a7c7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PPMActualBenefitFunctionCurrencyUpgrade&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1c497b7e73012300a010ef6bcaf6a7c7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-12-06 23:38:24&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:24</sys_created_on>
        <sys_id>c9c0f01983b01210c6695855eeaad398</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PPMActualBenefitFunctionCurrencyUpgrade</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c9c0f01983b01210c6695855eeaad398</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:24</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
