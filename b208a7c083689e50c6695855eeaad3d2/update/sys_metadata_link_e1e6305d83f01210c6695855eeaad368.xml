<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>694a5a80471bbd5066b81ac4f16d43a0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WF_AllocationSFCalculation&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This is for calculating the sum of Allocated SF By AU on Allocations table of neighborhood.&lt;/description&gt;
        &lt;name&gt;WF_AllocationSFCalculation&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WF_AllocationSFCalculation = Class.create();
WF_AllocationSFCalculation.prototype = {
    initialize: function() {

        this.jsUtil = global.JSUtil;
        this.arrayUtil = new global.ArrayUtil();

    },
    /*
        calculateAllocateAU: function(sysId) {
            var list = [];
            var neighborhoodName;

            var grneigborhoodm2mcostcenter = new GlideRecord('sn_wsd_core_neighborhood_m2m_cmn_cost_center');
            grneigborhoodm2mcostcenter.addQuery('sys_id', sysId);
            grneigborhoodm2mcostcenter.query();
            if (grneigborhoodm2mcostcenter.next()) {
                neighborhoodName = grneigborhoodm2mcostcenter.u_sn_wsd_spcmgmt_neighborhood;
            }
            var calculte = 0;
            var gr = new GlideRecord('sn_wsd_spcmgmt_neighborhood_m2m_space');
            gr.addQuery('neighborhood', neighborhoodName);
            gr.query();
            while (gr.next()) {
                var tempSpace = gr.space;
                var grSpace = new GlideRecord('sn_wsd_core_space');
                grSpace.addQuery('sys_id', tempSpace);
                grSpace.query();
                if (grSpace.next()) {
                    var tempSpcaeValue = grSpace.getValue('u_allocated_square_feet');
                    calculte = parseFloat(calculte) + parseFloat(tempSpcaeValue);
                }
            }

            var grm2m = new GlideRecord('sn_wsd_core_neighborhood_m2m_cmn_cost_center');
            grm2m.addQuery('sys_id', sysId);
            grm2m.query();
            if (grm2m.next()) {
                var final = calculte * (grm2m.getValue('u_percentage') / 100);
                grm2m.setValue('u_allocated_sf', final);
                grm2m.update();
            }
            // var finalCal =

            gs.info("RK test allocated" + calculte);
            // for (var i = 0; i &lt; list.length; i++) {
            //     var getSpace = list[i];
            //     var getSpaceName = getSpace.name;

            //     var grSpace = new GlideRecord('sn_wsd_core_space');
            //     grSpace.addQuery('name', getSpaceName);
            //     grSpace.query();
            //     if (grSpace.next()) {
            //         calculte = parseFloat(calculte) + parseFloat(grSpace.u_allocated_square_feet);
            //     }
            //     gs.info("RK test allocated" + calculte);
            //     gs.info("RK test" + list);
            // }
        },

    */
    /*
    	calculates the aggregate allocated SF on the Allocations (cost center) table

    */
    aggrAllocatedSF: function(neighborhoodId, percentAllocation) {


        var arrSpaces = [];
        var _aggregateSF = 0;

        try {
 
            var listNeighSpaces = new GlideRecord('sn_wsd_spcmgmt_neighborhood_m2m_space');
            listNeighSpaces.addQuery('neighborhood.sys_id', neighborhoodId);
            listNeighSpaces.query();
            // gs.info('--&gt; listNeighSpaceQuery :' + listNeighSpaces.getEncodedQuery());
            if (listNeighSpaces.hasNext()) {
                while (listNeighSpaces.next()) {
                    arrSpaces.push(listNeighSpaces.getValue('space'));
                }
            }
			else{
				gs.info('No spaces assigned to the neighborhood :'+neighborhoodId);
			}

            // max query length
            var glidePerQuery = 500;
            var arrSpacesLen = Math.ceil(arrSpaces.length / glidePerQuery);

            for (var i = 1; i &lt;= arrSpacesLen; i++) {

                var _slicedArr = arrSpaces.slice((i - 1) * glidePerQuery, i * glidePerQuery);
                var ga = new GlideAggregate('sn_wsd_core_space');
                ga.addEncodedQuery('sys_idIN' + _slicedArr.join(','));
                ga.addAggregate('SUM', 'u_allocated_square_feet');
                ga.query();
                while (ga.next()) {

                    _aggregateSF = _aggregateSF + parseFloat(ga.getAggregate('SUM', 'u_allocated_square_feet') * 1);
                }

                gs.info('--&gt; final aggregateSF {0}', [_aggregateSF]);
            }
            // Allocated SF By AU calculation
            // Total SF x (percentage allocated)
            var _allocatedSFByAu = _aggregateSF * (percentAllocation / 100);

            return _allocatedSFByAu;

        } catch (e) {

        }


    },


    type: 'WF_AllocationSFCalculation'
};
action.setRedirectURL(current);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;K095291&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-12-19 08:56:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;694a5a80471bbd5066b81ac4f16d43a0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WF_AllocationSFCalculation&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;a208b07253201010b10bddeeff7b1281&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;a208b07253201010b10bddeeff7b1281&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_694a5a80471bbd5066b81ac4f16d43a0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:24:56&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:11</sys_created_on>
        <sys_id>e1e6305d83f01210c6695855eeaad368</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WF_AllocationSFCalculation</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e1e6305d83f01210c6695855eeaad368</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
