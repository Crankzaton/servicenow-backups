<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5d481f1cb74101100290b5208e11a945</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_app_intake.ValidateIntakeStatus&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Validates that a user from a request item can be given access to AES on selected instance&lt;/description&gt;
        &lt;name&gt;ValidateIntakeStatus&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ValidateIntakeStatus = Class.create();
ValidateIntakeStatus.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    validate: function() {
        var response = {
            hasWarning: false,
            warningMessage: ''
        };

        gs.info('Checking Environment Intake Status...');

        var devEnvironmentSysId = this.getParameter('sysparm_dev_environment_sys_id');
		var requestedForUserName = this.getParameter('sysparm_requested_for_user_name');
        
		if (!devEnvironmentSysId) {
            response.hasWarning = true;
            response.warningMessage = gs.getMessage('A development environment was not found. Configure one in sn_pipeline_environment table or select another instance before approving this request.');
            gs.error(response.warningMessage);
            return JSON.stringify(response);
        }

        // Get the selected development environment
        var environmentGr = new GlideRecord('sn_pipeline_environment');
        environmentGr.get(devEnvironmentSysId);
        if (!environmentGr.isValidRecord() || !environmentGr.canRead()) {
			response.hasWarning = true;
            response.warningMessage = gs.getMessage('Selected development instance is unreadable. Select another instance before approving this request.');
            gs.error(response.warningMessage);
            return JSON.stringify(response);
        }


        var outputs = {};
        try {
            // Set up and run the subflow to verify user and AES exist
            var inputs = {};
            inputs['environment'] = environmentGr;
			inputs['user_name'] = requestedForUserName;

            gs.info('************ starting subflow ' + JSON.stringify(inputs));

            var result = sn_fd.FlowAPI.getRunner()
                .subflow('sn_app_intake.check_intake_status_on_instance_for_user')
                .inForeground()
                .withInputs(inputs)
                .run();

            outputs = result.getOutputs();
            gs.info('Results from check_intake_status_on_instance_for_user: ' + JSON.stringify(outputs));
        } catch (ex) {
            var message = ex.message || ex;
            response.warningMessage = gs.getMessage('Unable to verify intake status for this request: [{0}] Select another instance or manually provision the user to this instance before approving this request.', message);
            response.hasWarning = true;
            gs.error(response.warningMessage);
            return JSON.stringify(response);
        }

        if (!outputs.user_exists) {
            response.hasWarning = true;

            if (outputs.error_code === 0) {
                response.warningMessage = gs.getMessage('The user on the request was not found on this instance. Select another instance or manually provision the user to this instance before approving the request.');
            } else {
				response.warningMessage = gs.getMessage('Unable to verify user on this instance: [{0}] Select another instance or manually provision the user to this instance before approving this request.', outputs.error_message);
            }

            gs.error(response.warningMessage);
            return JSON.stringify(response);
        }

        if (!outputs.is_aes_available) {
            response.hasWarning = true;

            if (outputs.error_type === 'error') {
				response.warningMessage = gs.getMessage('Unable to verify App Engine Studio plugin version on this instance: [{0}] Select another instance or manually provision the user to this instance before approving this request.', outputs.error_message);
            } else {
				response.warningMessage = gs.getMessage("The latest App Engine Studio plugin isn't installed on this instance. Select another instance or manually provision the user to this instance before approving this request.");
            }

            gs.error(response.warningMessage);
            return JSON.stringify(response);
        }

        return JSON.stringify(response);
    },

    type: 'ValidateIntakeStatus'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-01-10 23:11:21&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5d481f1cb74101100290b5208e11a945&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;48&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ValidateIntakeStatus&lt;/sys_name&gt;
        &lt;sys_package display_value="Application Intake" source="sn_app_intake"&gt;3d3c2505c3e22010b83971e54440dd75&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Application Intake"&gt;3d3c2505c3e22010b83971e54440dd75&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5d481f1cb74101100290b5208e11a945&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-03 17:59:44&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:34</sys_created_on>
        <sys_id>54c6741d83f01210c6695855eeaad394</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ValidateIntakeStatus</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_54c6741d83f01210c6695855eeaad394</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:34</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
