<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>807c91b047720210cd4e1ce4316d4335</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;//working&amp;#13;
&amp;#13;
var providedTime = new GlideDateTime("2024-06-14 22:01:04"); // Converting to HKT by adding 8 hrs to UTC&amp;#13;
gs.info("Time in UTC " + providedTime);&amp;#13;
providedTime.addSeconds(28800);&amp;#13;
gs.info("Time in HKT " + providedTime);&amp;#13;
providedTime.addSeconds(7200); //adding 2hrs in seconds&amp;#13;
gs.info("Time in HKT with added 2Hrs " + providedTime);&amp;#13;
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000;&amp;#13;
gs.info("seconds of HKT Time with added 2 HRs " + providedTimeinSeconds);&amp;#13;
&amp;#13;
var diff = 61200 - providedTimeinSeconds;&amp;#13;
gs.info(diff);&amp;#13;
var dur = new GlideDuration((diff*1000));&amp;#13;
gs.info("Balance Minutes to reach 5 PM " + dur.getDurationValue());&amp;#13;
&amp;#13;
var cutOffPeriod = new GlideDateTime();&amp;#13;
cutOffPeriod.setValue(providedTime.getDate() + " "+ dur.getDurationValue());&amp;#13;
&amp;#13;
gs.info("CutOff date " + cutOffPeriod);&amp;#13;
&amp;#13;
&amp;#13;
&amp;#13;
//Working&lt;/description&gt;
        &lt;name&gt;more than 5PM&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[// If field is GlideDateTime
/*
var providedTime = new GlideDateTime("2024-06-08 17:00:00"); // Assuming you have already set the provided time
var providedTimeinSeconds = (providedTime.getTime().getNumericValue())/1000; // received time in seconds
gs.info(providedTimeinSeconds);
var add2Hrs = providedTimeinSeconds + 7200; //adding 2hrs in seconds
gs.info(add2Hrs);
var fivePMSinceMidnight = (17 * 3600); // 5 PM in seconds 61200 sec
if (add2Hrs &gt;= fivePMSinceMidnight){
    gs.info(true);
}
else 
     gs.info(false);

*/

// If field is GlideTime
//HKt onversion
// next day - hold


var providedTime = new GlideTime(); // Assuming you have already set the provided time
providedTime.setValue('15:00:00');
providedTime.addSeconds(28800);
var providedTimeinSeconds = (providedTime.getNumericValue())/1000; // received time in seconds
gs.info("Current time in seconds inm HKT " + providedTimeinSeconds);
var add2Hrs = providedTimeinSeconds + 7200; //adding 2hrs in seconds
gs.info(add2Hrs);
var fivePMSinceMidnight = (9 * 3600); // 5 PM in seconds 61200 sec
if (add2Hrs &lt; fivePMSinceMidnight){
    gs.info(true);
}
else 
     gs.info(false);

//converted HKT

var providedTime = new GlideDateTime("2024-06-14 06:34:32"); // Converting to HKT by adding 8 hrs to UTC
gs.info("Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("Time in HKT " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000; // received time in seconds
gs.info('providedTimeinSeconds' + providedTimeinSeconds);
var add2Hrs = providedTimeinSeconds + 7200; //adding 2hrs in seconds
gs.info(add2Hrs);
var fivePMSinceMidnight = (17 * 3600); // 5 PM in seconds 61200 sec
if (add2Hrs &lt; fivePMSinceMidnight) {
    gs.info(true);
} else
    gs.info(false);

//converted HKT


//Balance Time

var providedTime = new GlideDateTime(); // Converting to HKT by adding 8 hrs to UTC
gs.info("Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("Time in HKT " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000; // received time in seconds
gs.info('providedTimeinSeconds' + providedTimeinSeconds);
var add2Hrs = providedTimeinSeconds + 7200; //adding 2hrs in seconds
gs.info("Added two hrs to HKT" + add2Hrs);

var diff = 68400 - add2Hrs;
var dur = new GlideDuration(diff);
gs.info(dur.getDurationValue());


//Balance Time
var providedTime = new GlideDateTime("2024-06-14 16:10:49"); // Converting to HKT by adding 8 hrs to UTC
gs.info("Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("Time in HKT " + providedTime);
providedTime.addSeconds(7200); //adding 2hrs in seconds
gs.info("Time in HKT with added 2Hrs " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue())/1000;
gs.info("secondsSinceMidnight " + providedTimeinSeconds);

var diff = 61200 - providedTimeinSeconds;
gs.info("remainingseconds  " + diff);
//balance time


//
var providedTime = new GlideDateTime(); // Converting to HKT by adding 8 hrs to UTC
gs.info("Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("Time in HKT " + providedTime);
providedTime.addSeconds(7200); //adding 2hrs in seconds
gs.info("Time in HKT with added 2Hrs " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000;
gs.info("seconds of HKT Time with added 2 HRs " + providedTimeinSeconds);

var diff = 61200 - providedTimeinSeconds;
var dur = new GlideDuration(diff);
gs.info("Balance Minutes to reach 5 PM " + dur.getDurationValue());

//


//var providedTime = new GlideDateTime(); // Converting to HKT by adding 8 hrs to UTC
gs.info("Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("Time in HKT " + providedTime);
providedTime.addSeconds(7200); //adding 2hrs in seconds
gs.info("Time in HKT with added 2Hrs " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000;
gs.info("seconds of HKT Time with added 2 HRs " + providedTimeinSeconds);

var diff = 61200 - providedTimeinSeconds;
var dur = new GlideDuration(diff);
gs.info("Balance Minutes to reach 5 PM " + dur.getDurationValue());

var cutOffPeriod = new GlideDateTime();
cutOffPeriod.setValue(providedTime.getDate() + " "+ dur.getDurationValue());

gs.info("CutOff date " + cutOffPeriod);
//

//Last script
var providedTime = new GlideDateTime("2024-06-15 14:26:49"); // Converting to HKT by adding 8 hrs to UTC
gs.info("Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("Time in HKT " + providedTime);
providedTime.addSeconds(7200); //adding 2hrs in seconds
gs.info("Time in HKT with added 2Hrs " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000;
gs.info("seconds of HKT Time with added 2 HRs " + providedTimeinSeconds);

var diff = 61200 - providedTimeinSeconds;
gs.info(diff);
var dur = new GlideDuration((diff * 1000));
gs.info("Balance Minutes to reach 5 PM " + dur.getDurationValue());

var cutOffPeriod = new GlideDateTime();

//Check if next Day
var currUTC = new GlideDateTime().getDate();
var addHrsHKT = new GlideDateTime(providedTime).getDate();
var chkNxtDay = addHrsHKT.compareTo(currUTC);
gs.info(chkNxtDay);
//Check if next Day

if (chkNxtDay == 1) {
    cutOffPeriod.setValue(providedTime.getDate() + " " + "09:00:00");
} else
    cutOffPeriod.setValue(providedTime.getDate() + " " + dur.getDurationValue());

gs.info("CutOff date " + cutOffPeriod);
//Last script


//17th June
var providedTime = new GlideDateTime(); // Converting to HKT by adding 8 hrs to UTC
gs.info("HKT Logic Time in UTC " + providedTime);
providedTime.addSeconds(28800);
gs.info("HKT Logic Time in HKT " + providedTime);
var chkDate = providedTime;
providedTime.addSeconds(7200); //adding 2hrs in seconds
gs.info("HKT Logic Time in HKT with added 2Hrs " + providedTime);
var providedTimeinSeconds = (providedTime.getTime().getNumericValue()) / 1000;
gs.info("HKT Logic seconds of HKT Time with added 2 HRs " + providedTimeinSeconds);

var diff = 61200 - providedTimeinSeconds;
gs.info(diff);
var dur = new GlideDuration((diff * 1000));
gs.info("HKT Logic Balance Minutes to reach 5 PM " + dur.getDurationValue());

var cutOffPeriod = new GlideDateTime(chkDate);

//Check if next Day
if(providedTimeinSeconds &gt; 61200){
	gs.info('Within Loop Unaltered cutOffPeriod' + cutOffPeriod);
    cutOffPeriod.addDays(1);
    cutOffPeriod.setValue(cutOffPeriod.getDate() + " " + "09:00:00");
}
else
    cutOffPeriod.setValue(cutOffPeriod.getDate() + " " + dur.getDurationValue());
gs.info("HKT Logic CutOff date " + cutOffPeriod);
gs.info(cutOffPeriod);

//17th June]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-06-12 12:11:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;807c91b047720210cd4e1ce4316d4335&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;27&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;more than 5PM&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_807c91b047720210cd4e1ce4316d4335&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-06-17 08:40:24&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:22:16</sys_created_on>
        <sys_id>dc43bc9d83b01210c6695855eeaad3b5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>more than 5PM</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_dc43bc9d83b01210c6695855eeaad3b5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:22:16</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
