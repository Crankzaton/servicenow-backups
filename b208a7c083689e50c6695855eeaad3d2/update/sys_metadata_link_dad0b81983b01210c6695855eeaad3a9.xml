<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1f6982a0674322004792adab9485ef61</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ChangeTaskSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Base Change Task API when State Model plugin is installed. Use the "ChgMgmtChangeTaskAPI" script include to override functionality in this script if required&lt;/description&gt;
        &lt;name&gt;ChangeTaskSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ChangeTaskSNC = Class.create();

ChangeTaskSNC.ENFORCE_DATA_REQ_PROP = "com.snc.change_management.enforce_data_requirements";

ChangeTaskSNC.prototype = {
    initialize: function (changeTaskGr) {
        this._log = new GSLog(ChangeCommon.LOG_PROPERTY, this.type);
        this._gr = changeTaskGr;

        this.plugin = {
            "change_management": pm.isActive("com.snc.change_management")
        };

        this.api = (this.plugin.change_management) ? this.api = new ChangeTaskChgManagementAPI(changeTaskGr) : new ChangeTaskChgRequestAPI(changeTaskGr);
    },

    // Returns the appropriate API to use for the given change task
    _getAPI: function () {
        return this.api;
    },

    /**
     * Checks whether a change task state is Pending
     */
    isPending: function () {
        return this._getAPI().isPending();
    },

    /**
     * Checks whether the field in the record has changed to the Pending state
     */
    changesToPending: function () {
        return this._getAPI().changesToPending();
    },

    /**
     * Set the record's state to Pending but the record is not saved.
     */
    setPending: function () {
        this._getAPI().setPending();
    },

    /**
     * Change the state of the change task to Pending (the record is saved)
     */
    pending: function () {
        return this._getAPI().pending();
    },

    /**
     * Checks whether a change task state is Open
     */
    isOpen: function () {
        return this._getAPI().isOpen();
    },

    /**
     * Checks whether the field in the record has changed to the Open state
     */
    changesToOpen: function () {
        return this._getAPI().changesToOpen();
    },

    /**
     * Set the record's state to Open but the record is not saved.
     */
    setOpen: function () {
        this._getAPI().setOpen();
    },

    /**
     * Change the state of the change task to Open (the record is saved)
     */
    open: function () {
        return this._getAPI().open();
    },

    /**
     * Checks whether a change task is in progress
     */
    isInProgress: function () {
        return this._getAPI().isInProgress();
    },

    /**
     * Checks whether the field in the record has changed to the In Progress state
     */
    changesToInProgress: function () {
        return this._getAPI().changesToInProgress();
    },

    /**
     * Set the record's state to In Progress but the record is not saved.
     */
    setInProgress: function () {
        this._getAPI().setInProgress();
    },

    /**
     * Change the state of the change task to In Progress (the record is saved)
     */
    inProgress: function () {
        return this._getAPI().inProgress();
    },

    /**
     * Checks whether a change task has been closed
     */
    isClosed: function () {
        return this._getAPI().isClosed();
    },

    /**
     * Checks whether the change task has been set to Closed + Successful state
     */
    isClosedSuccessful: function () {
        return this._getAPI().isClosedSuccessful();
    },

    /**
     * Checks whether the change task has been set to Closed + Successful with issues state
     */
    isClosedSuccessfulWithIssues: function () {
        return this._getAPI().isClosedSuccessfulWithIssues();
    },

    /**
     * Checks whether the change task has been set to Closed + Unsuccessful state
     */
    isClosedUnsuccessful: function () {
        return this._getAPI().isClosedUnsuccessful();
    },

    /**
     * Checks whether the field in the record has changed to the Closed state
     */
    changesToClosed: function () {
        return this._getAPI().changesToClosed();
    },

    /**
     * Set the record's state to closed according to the close code, but the record is not saved.
     */
    setClose: function (closeCode, closeNotes) {
        return this._getAPI().setClose(closeCode, closeNotes);
    },

    /**
     * Set close notes for the change task, but not save the record
     */
    setCloseNotes: function (closeNotes) {
        this._getAPI().setCloseNotes(closeNotes);
    },

    /**
     * Change the state of the change task to Closed (the record is saved) with the specified close code and close notes
     */
    close: function (closeCode, closeNotes) {
        return this._getAPI().close(closeCode, closeNotes);
    },

    /**
     * Change the state of the change task to Closed + Successful with the specified close notes without saving the record
     */
    setCloseSuccessful: function (closeNotes) {
        this._getAPI().setCloseSuccessful();
    },

    /**
     * Change the state of the change task to Closed + Successful (the record is saved) with the specified close notes
     */
    closeSuccessful: function (closeNotes) {
        return this._getAPI().closeSuccessful(closeNotes);
    },

    /**
     * Change the state of the change task to Closed + Successful with issues and the specified close notes without saving the record
     */
    setCloseSuccessfulWithIssues: function (closeNotes) {
        this._getAPI().setCloseSuccessfulWithIssues(closeNotes);
    },

    /**
     * Change the state of the change task to Closed + Successful with issues (the record is saved) with the specified close notes
     */
    closeSuccessfulWithIssues: function (closeNotes) {
        return this._getAPI().closeSuccessfulWithIssues(closeNotes);
    },

    /**
     * Change the state of the change task to Closed + Unsuccessful with the specified close notes without saving the record
     */
    setCloseUnsuccessful: function (closeNotes) {
        return this._getAPI().setCloseUnsuccessful(closeNotes);
    },

    /**
     * Change the state of the change task to Closed + Unsuccessful (the record is saved) with the specified close notes
     */
    closeUnsuccessful: function (closeNotes) {
        return this._getAPI().closeUnsuccessful(closeNotes);
    },

    /**
     * Checks whether a change task is canceled
     */
    isCanceled: function () {
        return this._getAPI().isCanceled();
    },

    /**
     * Checks whether the field in the record has changed to the Canceled state
     */
    changesToCanceled: function () {
        return this._getAPI().changesToCanceled();
    },

    /**
     * Set the record's state to cancelled but the record is not saved.
     */
    setCancel: function (closeNotes) {
        return this._getAPI().setCancel(closeNotes);
    },

    /**
     * Change the state of the change task to Canceled (the record is saved)
     */
    cancel: function (closeNotes) {
        return this._getAPI().cancel(closeNotes);
    },

    _insertUpdate: function () {
        return this._getAPI()._insertUpdate();
    },

    getValue: function (name) {
        return this._getAPI().getValue(name);
    },

    isOnHold: function () {
        return this._getAPI().isOnHold();
    },

    setOnHoldReason: function (holdReason) {
        this._getAPI().setOnHoldReason(holdReason);
    },

    setOnHold: function (holdValue) {
        this._getAPI().setOnHold(holdValue);
    },

    onHold: function (holdValue, holdReason) {
        return this._getAPI().onHold(holdValue, holdReason);
    },

    onHoldReason: function (newValue) {
        return this._getAPI().onHoldReason(newValue);
    },

    clearOnHold: function () {
        return this._getAPI().clearOnHold();
    },

    toString: function () {
        return JSON.stringify(this.toJS());
    },

    toJS: function () {
        return ChangeCommon.toJS(this._gr);
    },

    insert: ChangeCommon.methods.insert,

    update: ChangeCommon.methods.update,

    deleteRecord: ChangeCommon.methods.deleteRecord,

    refreshGlideRecord: ChangeCommon.methods.refreshGlideRecord,

    getGlideRecord: ChangeCommon.methods.getGlideRecord,

    setValue: ChangeCommon.methods.setValue,

    setValues: ChangeCommon.methods.setValues,

    canWriteTo: ChangeCommon.methods.canWriteTo,

    resolveChoice: ChangeCommon.methods.resolveChoice,

    resolveReference: ChangeCommon.methods.resolveReference,

    isReferenceField: ChangeCommon.methods.isReferenceField,

    type: 'ChangeTaskSNC'
};

ChangeTaskSNC.newChangeTask = function(nameValuePairs) {
	var changeTaskGr = new GlideRecord(ChangeTask.CHANGE_TASK);
	changeTaskGr.initialize();
	changeTaskGr.setValue("state", ChangeTask.DEFAULT_STATE);
	var changeTask = new ChangeTask(changeTaskGr);
	if (nameValuePairs) {
		if (!nameValuePairs.hasOwnProperty("change_request"))
			return null;
		changeTask.setValues(nameValuePairs);
		if (!changeTask.insert())
			return null;
	}
	return changeTask;
};
ChangeTaskSNC.bySysId = function(sysId) {
	if (!sysId)
		return null;
	var changeTaskGr = new GlideRecord(ChangeTask.CHANGE_TASK);
	changeTaskGr.addQuery("sys_id", sysId);
	changeTaskGr.query();
	if (!changeTaskGr.next())
		return null;
	return new ChangeTask(changeTaskGr);
};
ChangeTaskSNC.hasOnHoldField = function() {
	return GlideTableDescriptor.get('change_task').isValidField('on_hold');
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-11-09 12:17:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1f6982a0674322004792adab9485ef61&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;50&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ChangeTaskSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Change Request" source="com.snc.change_request"&gt;3996f0643cb1311068bcf327dfe37f46&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1f6982a0674322004792adab9485ef61&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-12-08 11:27:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:45</sys_created_on>
        <sys_id>dad0b81983b01210c6695855eeaad3a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ChangeTaskSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_dad0b81983b01210c6695855eeaad3a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:45</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
