<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8ef618a0ff43211001b9ffffffffff71</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_inc.NonMLRecommendationsHelperSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NonMLRecommendationsHelperSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NonMLRecommendationsHelperSNC = Class.create();
NonMLRecommendationsHelperSNC.prototype = {
    initialize: function() {},

    getSimilarOpenPRBsWithFilters: function(incidentGR) {
        var similarPRBsSysIds = [];
        if (incidentGR) {
            var configItem = incidentGR.cmdb_ci;
            var service = incidentGR.business_service;

            // Execute script only if CI or service has value
            if (!gs.nil(configItem) || !gs.nil(service)) {
                // Find similar problem records with the same configItem and service
                var similarPRBsGR = new GlideRecord('problem');
                similarPRBsGR.addQuery('state', 'NOT IN', '106,107'); // Query for Problems that are not in Resolved or Closed State
                similarPRBsGR.addQuery('cmdb_ci', configItem);
                similarPRBsGR.addQuery('business_service', service);
                similarPRBsGR.addQuery('sys_created_on', '&gt;=', gs.daysAgoStart(7)); // Query for problem records created in the last 7 days
                similarPRBsGR.orderByDesc('sys_created_on'); // Order the result by the latest created on top
                similarPRBsGR.setLimit(5); // Limit the result to top 5 records
                similarPRBsGR.query();

                while (similarPRBsGR.next()) {
                    similarPRBsSysIds.push(similarPRBsGR.getUniqueValue());
                }

                // If fewer than 5 records are found, find additional records with matching configItem or service
                if (similarPRBsSysIds.length &lt; 5) {
                    var additionalSimilarPRBsGR = new GlideRecord('problem');
                    additionalSimilarPRBsGR.addQuery('state', 'NOT IN', '106,107');
                    additionalSimilarPRBsGR.addQuery('sys_created_on', '&gt;=', gs.daysAgoStart(7));
                    additionalSimilarPRBsGR.addQuery('sys_id', 'NOT IN', similarPRBsSysIds.join(','));
                    if (!gs.nil(configItem) &amp;&amp; !gs.nil(service)) {
                        additionalSimilarPRBsGR.addQuery('cmdb_ci', configItem).addOrCondition('business_service', service);
                    } else if (!gs.nil(configItem)) {
                        additionalSimilarPRBsGR.addQuery('cmdb_ci', configItem)
                    } else if (!gs.nil(service)) {
                        additionalSimilarPRBsGR.addQuery('business_service', service)
                    }
                    additionalSimilarPRBsGR.orderByDesc('sys_created_on');
                    additionalSimilarPRBsGR.setLimit(5 - similarPRBsSysIds.length);
                    additionalSimilarPRBsGR.query();

                    while (additionalSimilarPRBsGR.next()) {
                        similarPRBsSysIds.push(additionalSimilarPRBsGR.getUniqueValue());
                    }
                }

                return similarPRBsSysIds;
            }
        }

        return null;
    },

    getSimilarResolvedIncidentsWithFilters: function(incidentGR) {
        var similarIncidentsSysIds = [];
        if (incidentGR) {
            var configItem = incidentGR.cmdb_ci;
            var service = incidentGR.business_service;

            // Execute script only if CI or service has value
            if (!gs.nil(configItem) || !gs.nil(service)) {
                // Find similar incident records with the same configItem and service
                var similarIncidentsGR = new GlideRecord('incident');
                similarIncidentsGR.addQuery('cmdb_ci', configItem);
                similarIncidentsGR.addQuery('business_service', service);
                similarIncidentsGR.addQuery('sys_created_on', '&gt;=', gs.monthsAgo(6)); // Query for past 6 months
                similarIncidentsGR.addQuery('state', 'IN', '6,7'); // Query for resolved or closed incidents
                similarIncidentsGR.addNullQuery('parent_incident'); // Query for incidents that are not a child incident
                similarIncidentsGR.orderByDesc('sys_created_on'); // Order by latest on top
                similarIncidentsGR.setLimit(5); // Return top 5 results
                similarIncidentsGR.query();

                while (similarIncidentsGR.next()) {
                    similarIncidentsSysIds.push(similarIncidentsGR.getUniqueValue());
                }

                // If fewer than 5 records are found, find additional records with matching configItem or service
                if (similarIncidentsSysIds.length &lt; 5) {
                    var additionalSimilarIncidentsGR = new GlideRecord('incident');
                    additionalSimilarIncidentsGR.addQuery('sys_id', 'NOT IN', similarIncidentsSysIds.join(','));
                    additionalSimilarIncidentsGR.addQuery('sys_created_on', '&gt;=', gs.monthsAgo(6));
                    additionalSimilarIncidentsGR.addQuery('state', 'IN', '6,7');
                    additionalSimilarIncidentsGR.addNullQuery('parent_incident');
                    if (!gs.nil(configItem) &amp;&amp; !gs.nil(service)) {
                        additionalSimilarIncidentsGR.addQuery('cmdb_ci', configItem).addOrCondition('business_service', service);
                    } else if (!gs.nil(configItem)) {
                        additionalSimilarIncidentsGR.addQuery('cmdb_ci', configItem)
                    } else if (!gs.nil(service)) {
                        additionalSimilarIncidentsGR.addQuery('business_service', service)
                    }
                    additionalSimilarIncidentsGR.orderByDesc('sys_created_on');
                    additionalSimilarIncidentsGR.setLimit(5 - similarIncidentsSysIds.length);
                    additionalSimilarIncidentsGR.query();

                    while (additionalSimilarIncidentsGR.next()) {
                        similarIncidentsSysIds.push(additionalSimilarIncidentsGR.getUniqueValue());
                    }
                }

                return similarIncidentsSysIds;
            }
        }

        return null;
    },

    getSimilarOpenIncidentsWithFilters: function(incidentGR) {
        var similarIncidentsSysIds = [];
        if (incidentGR) {
            var configItem = incidentGR.cmdb_ci;
            var service = incidentGR.business_service;

            // Execute script only if CI or service has value
            if (!gs.nil(configItem) || !gs.nil(service)) {
                // Find similar incidents with the same configItem and service
                var similarIncidentsGR = new GlideRecord('incident');
                similarIncidentsGR.addQuery('state', 'IN', '1,2,3'); // Query for New, In Progress, and On Hold incidents
                similarIncidentsGR.addQuery('cmdb_ci', configItem);
                similarIncidentsGR.addQuery('business_service', service);
                similarIncidentsGR.addQuery('sys_created_on', '&gt;=', gs.monthsAgo(6)); // Query for past 6 months
                similarIncidentsGR.addNullQuery('parent_incident'); // Query for incidents that are not a child incident
                similarIncidentsGR.addQuery('sys_id', '!=', incidentGR.getUniqueValue()); // Exclude the current incident
                similarIncidentsGR.orderByDesc('sys_created_on'); // Order by latest on top
                similarIncidentsGR.setLimit(5); // Return top 5 results
                similarIncidentsGR.query();

                while (similarIncidentsGR.next()) {
                    similarIncidentsSysIds.push(similarIncidentsGR.getUniqueValue());
                }

                // If fewer than 5 records are found, find additional records with matching configItem or service
                if (similarIncidentsSysIds.length &lt; 5) {
                    var additionalSimilarIncidentsGR = new GlideRecord('incident');
                    additionalSimilarIncidentsGR.addQuery('state', 'IN', '1,2,3');
                    additionalSimilarIncidentsGR.addQuery('sys_created_on', '&gt;=', gs.monthsAgo(6));
                    additionalSimilarIncidentsGR.addNullQuery('parent_incident');
                    additionalSimilarIncidentsGR.addQuery('sys_id', 'NOT IN', similarIncidentsSysIds.join(',') + ',' + incidentGR.getUniqueValue());
                    if (!gs.nil(configItem) &amp;&amp; !gs.nil(service)) {
                        additionalSimilarIncidentsGR.addQuery('cmdb_ci', configItem).addOrCondition('business_service', service);
                    } else if (!gs.nil(configItem)) {
                        additionalSimilarIncidentsGR.addQuery('cmdb_ci', configItem)
                    } else if (!gs.nil(service)) {
                        additionalSimilarIncidentsGR.addQuery('business_service', service)
                    }
                    additionalSimilarIncidentsGR.orderByDesc('sys_created_on');
                    additionalSimilarIncidentsGR.setLimit(5 - similarIncidentsSysIds.length);
                    additionalSimilarIncidentsGR.query();

                    while (additionalSimilarIncidentsGR.next()) {
                        similarIncidentsSysIds.push(additionalSimilarIncidentsGR.getUniqueValue());
                    }
                }

                return similarIncidentsSysIds;
            }
        }

        return null;
    },

    type: 'NonMLRecommendationsHelperSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-05-23 06:11:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8ef618a0ff43211001b9ffffffffff71&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NonMLRecommendationsHelperSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Incident Management for Service Operations Workspace" source="sn_sow_inc"&gt;49aff4bb733320103e366238edf6a70f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Incident Management for Service Operations Workspace"&gt;49aff4bb733320103e366238edf6a70f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8ef618a0ff43211001b9ffffffffff71&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-16 15:26:21&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:23</sys_created_on>
        <sys_id>4b88345183341210c6695855eeaad322</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NonMLRecommendationsHelperSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4b88345183341210c6695855eeaad322</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:23</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
