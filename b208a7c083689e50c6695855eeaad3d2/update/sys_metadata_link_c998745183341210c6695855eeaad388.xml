<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>911962ea874aa910d3230e19dabb358b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_install_base.AssetIBSynchronizer&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AssetIBSynchronizer&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AssetIBSynchronizer = Class.create();
AssetIBSynchronizer.prototype = {
    initialize: function() {},

    syncRecord: function(source, sourceBaseTable, fieldMap) {
        var assetIBIntegrationUtils = new AssetIBIntegrationUtils();
        if (!assetIBIntegrationUtils.canPerformSync(source, sourceBaseTable))
            return;
        var syncField = this._getSyncField(sourceBaseTable);
        var destinationSysId = source.getValue(syncField);
        if (!destinationSysId)
            return;
        var destinationBaseTable = this._getDestinationBase(sourceBaseTable);
        var destBaseGr = new GlideRecord(destinationBaseTable);
        destBaseGr.get(destinationSysId);
        var destination = new GlideRecord(destBaseGr.sys_class_name);
        destination.get(destinationSysId);
        var update = false;
        if (gs.nil(fieldMap))
            fieldMap = assetIBIntegrationUtils.getFieldMap(sourceBaseTable, destinationBaseTable);
        var ibProdInstanceUtil = new sn_install_base.IBProductInstanceUtil();
        var modelCategory = source.getValue('model_category');
        if (!gs.nil(modelCategory) &amp;&amp; ibProdInstanceUtil.isProductInstance(modelCategory)) {
            var destClass = this._getDestinationClass(sourceBaseTable, source.model_category.getRefRecord());
            var pidParameters = ibProdInstanceUtil.getPIDParameterMapping(modelCategory, source.sys_class_name + '', destClass, source);
            this.addPIDParamters(fieldMap, pidParameters, destClass, source);
        }
        for (var sourceField in fieldMap) {
            var destinationField = fieldMap[sourceField];
            if (!source.isValid(sourceField) || !destination.isValid(destinationField))
                continue;
            var sourceValue = source.getValue(sourceField);
            var destinationValue = destination.getValue(destinationField);
            if (sourceValue != destinationValue) {
                if (gs.nil(sourceValue)) {
                    destination.setValue(destinationField, '');
                } else {
                    destination.setValue(destinationField, sourceValue);
                }
                update = true;
            }
        }
        if (update) {
            this._setSkipSyncVariable(destination, destinationBaseTable);
            try {
                var result = destination.update();
                if (result &lt; 0) {
                    gs.error('AssetIBSynchronizer: Unable to sync fields for install base record with sys_id ' + destination.getUniqueValue());
                }
            } catch (e) {
                gs.error('AssetIBSynchronizer: Exception while performing sync for install base record with sys_id ' + destination.getUniqueValue() + ' ' + e);
            }
        }
    },

    _getSyncField: function(baseTable) {
        if (baseTable == AssetIBIntegrationConstants.INSTALL_BASE_TABLE)
            return AssetIBIntegrationConstants.ASSET_FIELD_ON_IB;
        if (baseTable == AssetIBIntegrationConstants.ASSET_TABLE)
            return AssetIBIntegrationConstants.IB_FIELD_ON_ASSET;
    },

    _setSkipSyncVariable: function(destination, destinationBaseTable) {
        if (destinationBaseTable == AssetIBIntegrationConstants.INSTALL_BASE_TABLE)
            destination.skip_sync = true;
        if (destinationBaseTable == AssetIBIntegrationConstants.ASSET_TABLE)
            destination.skip_sync_to_ib = true;
    },

    _getDestinationBase: function(sourceBaseTable) {
        if (sourceBaseTable == AssetIBIntegrationConstants.INSTALL_BASE_TABLE)
            return AssetIBIntegrationConstants.ASSET_TABLE;
        if (sourceBaseTable == AssetIBIntegrationConstants.ASSET_TABLE)
            return AssetIBIntegrationConstants.INSTALL_BASE_TABLE;
    },

    _getDestinationClass: function(sourceBaseTable, modelCategoryGr) {
        if (sourceBaseTable == AssetIBIntegrationConstants.INSTALL_BASE_TABLE)
            return modelCategoryGr.getValue(AssetIBIntegrationConstants.ASSETCLASS_FIELD_ON_MODELCATEGORY);
        if (sourceBaseTable == AssetIBIntegrationConstants.ASSET_TABLE)
            return modelCategoryGr.getValue(AssetIBIntegrationConstants.IBCLASS_FIELD_ON_MODELCATEGORY);
    },

    addPIDParamters: function(fieldMap, pidParameters, destClass, source) {
        if (this.isLifeCycleCombinationValid(destClass, source)) {
            fieldMap['life_cycle_stage'] = 'life_cycle_stage';
            fieldMap['life_cycle_stage_status'] = 'life_cycle_stage_status';
        }
        fieldMap['product_instance_id'] = 'product_instance_id';
        if (!gs.nil(pidParameters)) {
            for (var pidParam in pidParameters) {
                fieldMap[pidParam] = pidParameters[pidParam];
            }
        }
    },

    isLifeCycleCombinationValid: function(destClass, source) {
        var tempDest = new GlideRecord(destClass);
        tempDest.life_cycle_stage = source.getValue('life_cycle_stage');
        tempDest.life_cycle_stage_status = source.getValue('life_cycle_stage_status');
        new global.LifeCycleUtil().validateUI(null, tempDest);
        if (!tempDest.isActionAborted()) {
            return true;
        }
        return false;
    },

    type: 'AssetIBSynchronizer'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-04-10 04:56:33&lt;/sys_created_on&gt;
        &lt;sys_id&gt;911962ea874aa910d3230e19dabb358b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AssetIBSynchronizer&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Install Base Management" source="sn_install_base"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Service Install Base Management"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_911962ea874aa910d3230e19dabb358b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-31 03:18:35&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:31</sys_created_on>
        <sys_id>c998745183341210c6695855eeaad388</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AssetIBSynchronizer</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c998745183341210c6695855eeaad388</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:31</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
