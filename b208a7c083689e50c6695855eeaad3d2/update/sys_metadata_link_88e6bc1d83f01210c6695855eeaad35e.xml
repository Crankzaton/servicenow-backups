<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>670e30c3430121105f919cd82ab8f26c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.FamilyEntitlementProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Processes entitlement requests for family artifacts&lt;/description&gt;
        &lt;name&gt;FamilyEntitlementProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FamilyEntitlementProcessor = Class.create();
FamilyEntitlementProcessor.prototype = {
    initialize: function() {
        this.logger = new LoggingUtil();
        this.subscriptionHasFamilyDAO = new SubscriptionHasFamilyDAO();
    },

    // returns true if license check required attribute for the given family_id is set to true, else returns false
    isLicenseCheckRequired: function(familyId) {
        try {
            return new UAAppFamilyDAO().isLicenseCheckRequiredForFamily(familyId);
        } catch (error) {
            const errorMsg = LicensingEngineConstants.LICENSING_ERROR_CODES[LicensingEngineConstants.ENTITLEMENT_API_CODE.LICENSE_CHECK_REQUIRED_FAILED] + familyId + error + " \n " + error.stack;
            this.logger.logError(LicensingEngineConstants.FAMILY_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_LICENSE_CHECK_REQUIRED, errorMsg, LicensingEngineConstants.ENTITLEMENT_API_CODE.LICENSE_CHECK_REQUIRED_FAILED, LicensingEngineConstants.LICENSING_ERROR_TYPES.ENTITLEMENT_API);

            return false;
        }
    },

    // returns true if the instance is entitled to the given family_id, else returns false
    isEntitled: function(familyId) {
        try {
            if (!this.doesFamilyExist(familyId)) {
                // if the given lineage_id doesn't have a record in ua_app_family,
                // then it is not a valid lineage_id for performing entitlement checks
                this.logger.logInfo(LicensingEngineConstants.FAMILY_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED,
                    LicensingEngineConstants.FAMILY_DOES_NOT_EXIST.concat(LicensingEngineConstants.COLON).concat(familyId));

                return LicensingEngineConstants.UNABLE_TO_DETERMINE_ENTITLEMENT;
            }
            if (!this.isLicenseCheckRequired(familyId))
                return true;

            // Check explicit entitlement for family
            if (!this.subscriptionHasFamilyDAO.getLicensableStateForFamily(familyId))
                return false;

            var activeSubscriptionsByFamily = this.getActiveSubscriptions(familyId);
            if (activeSubscriptionsByFamily.length == 0) {
                var errorMsg = LicensingEngineConstants.LICENSING_ERROR_CODES[LicensingEngineConstants.ENTITLEMENT_API_CODE.NO_FAMILY_ENTITLEMENT] + familyId;
                this.logger.logError(LicensingEngineConstants.FAMILY_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, errorMsg, LicensingEngineConstants.ENTITLEMENT_API_CODE.NO_FAMILY_ENTITLEMENT, LicensingEngineConstants.LICENSING_ERROR_TYPES.ENTITLEMENT_API);
            }
            return activeSubscriptionsByFamily.length &gt; 0;
        } catch (error) {
            errorMsg = LicensingEngineConstants.LICENSING_ERROR_CODES[LicensingEngineConstants.ENTITLEMENT_API_CODE.NO_FAMILY_ENTITLEMENT] + familyId + error + " \n " + error.stack;
            this.logger.logError(LicensingEngineConstants.FAMILY_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, errorMsg, LicensingEngineConstants.ENTITLEMENT_API_CODE.NO_FAMILY_ENTITLEMENT, LicensingEngineConstants.LICENSING_ERROR_TYPES.ENTITLEMENT_API);
            return LicensingEngineConstants.UNABLE_TO_DETERMINE_ENTITLEMENT;
        }
    },

    // returns all the entitlement ids of the subscriptions that are active and associated with the given family
    getActiveSubscriptions: function(familyId) {
        return new SubscriptionHasFamilyDAO().getActiveSubscriptionsForFamily(familyId);
    },

    doesFamilyExist: function(familyId) {
        return new UAAppFamilyDAO().doesFamExists(familyId);
    },

    getActiveSubscriptionSysIds: function(familyId) {
        return new SubscriptionHasFamilyDAO().getActiveSubscriptionSysIdsForFamily(familyId);
    },

    type: 'FamilyEntitlementProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-20 17:22:52&lt;/sys_created_on&gt;
        &lt;sys_id&gt;670e30c3430121105f919cd82ab8f26c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FamilyEntitlementProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_670e30c3430121105f919cd82ab8f26c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-08 18:20:44&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:05</sys_created_on>
        <sys_id>88e6bc1d83f01210c6695855eeaad35e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FamilyEntitlementProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_88e6bc1d83f01210c6695855eeaad35e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
