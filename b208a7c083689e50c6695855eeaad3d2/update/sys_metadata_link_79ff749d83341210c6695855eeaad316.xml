<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>acf3b530eb43011074de8075385228d1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AffectedProductUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AffectedProductUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AffectedProductUtil = Class.create();
AffectedProductUtil.prototype = {
    initialize: function() {},

    determineProductName: function(affectedProductGr) {
        var displayName = '';
        if (!gs.nil(affectedProductGr.asset.getDisplayValue())) {
            displayName = affectedProductGr.asset.getDisplayValue();
        } else if (!gs.nil(affectedProductGr.install_base_item.getDisplayValue())) {
            displayName = affectedProductGr.install_base_item.getDisplayValue();
        } else if (!gs.nil(affectedProductGr.affected_ci.getDisplayValue())) {
            displayName = affectedProductGr.affected_ci.getDisplayValue();
        }

        return displayName;
    },
	
	getAffectedCIRefQualifier: function(affectedProductGr){
		var refQualifier = "";
		if(gs.nil(affectedProductGr)) return "";
		if(!gs.nil(affectedProductGr.wm_order))
			refQualifier = "company=" + affectedProductGr.wm_order.company;
		else if(!gs.nil(affectedProductGr.wm_task))
			refQualifier = "company=" + affectedProductGr.wm_task.parent.company;

		return refQualifier;		
	},

    /**
     * Creates primary Affected Product and updates related records for WO/WOT
     * @param {GlideRecord} record - GlideRecord for wm_order/wm_task
     */
     addWOProduct: function (record) {
        // Create new Affected Product
        var affectedProduct = new GlideRecord('wm_m2m_product_to_work_order');
        affectedProduct.initialize();

        if (!record.asset.nil()) {
            affectedProduct.asset = record.asset;
        } else {
            affectedProduct.install_base_item = record.install_base_item;
        }

        if (record.sys_class_name == 'wm_task') {
            affectedProduct.wm_task = record.sys_id;
        } else {
            affectedProduct.wm_order = record.sys_id;
        }
        affectedProduct.primary = true;
        var ap_sys_id = affectedProduct.insert();

        // Update Part Requirement and Asset Usage references if record is wm_task
        if (record.sys_class_name == 'wm_task') {
            var partRequirement = new GlideRecord('sm_part_requirement');
            partRequirement.addQuery('service_order_task', record.sys_id);
            partRequirement.addNullQuery('affected_product');
            partRequirement.query();
            while (partRequirement.next()) {
                partRequirement.affected_product = ap_sys_id;
                partRequirement.update();
            }

            var assetUsage = new GlideRecord('sm_asset_usage');
            assetUsage.addQuery('service_order_task', record.sys_id);
            assetUsage.addNullQuery('affected_product');
            assetUsage.query();
            while (assetUsage.next()) {
                assetUsage.affected_product = ap_sys_id;
                assetUsage.update();
            }
        }
    },

    /**
     * Removes primary Affected Product and updates related records for WO/WOT
     * @param {GlideRecord} record - GlideRecord for wm_order/wm_task
     */
    removeWOProduct: function (record) {
        var affectedProduct = this.getPrimaryAffectedProduct(record);

        // Update Part Requirement and Asset Usage references if record is wm_task
        if (record.sys_class_name == 'wm_task') {
            var partRequirement = new GlideRecord('sm_part_requirement');
            partRequirement.addQuery('service_order_task', record.sys_id);
            partRequirement.addQuery('affected_product', affectedProduct.sys_id);
            partRequirement.query();
            while (partRequirement.next()) {
                partRequirement.affected_product = "NULL";
                partRequirement.update();
            }

            var assetUsage = new GlideRecord('sm_asset_usage');
            assetUsage.addQuery('service_order_task', record.sys_id);
            assetUsage.addQuery('affected_product', affectedProduct.sys_id);
            assetUsage.query();
            while (assetUsage.next()) {
                assetUsage.affected_product = "NULL";
                assetUsage.update();
            }
        }

        // Remove Affected Product
        affectedProduct.deleteRecord();
    },

    /**
     * Updates primary Affected Product and updates related records for WO/WOT
     * @param {GlideRecord} record - GlideRecord for wm_order/wm_task
     */
    updateWOProduct: function (record) {
        // Query for primary Affected Product on WO or WOT
        var affectedProduct = new GlideRecord('wm_m2m_product_to_work_order');
        if (record.sys_class_name == 'wm_task') {
            affectedProduct.addQuery('wm_task', record.sys_id);
        } else {
            affectedProduct.addQuery('wm_order', record.sys_id);
        }
        affectedProduct.addQuery('primary', true);
        affectedProduct.query();

        // Update fields on primary Affected Product
        while (affectedProduct.next()) {
            if (!record.asset.nil()) {
                if (affectedProduct.asset != record.asset) {
                    affectedProduct.install_base_item = "";
                    affectedProduct.asset = record.asset;
                    affectedProduct.update();
                }
            } else {
                if (affectedProduct.install_base_item != record.install_base_item) {
                    affectedProduct.asset = "";
                    affectedProduct.install_base_item = record.install_base_item;
                    affectedProduct.update();
                }
            }
        }
    },

    /**
     * Returns the primary Affected Product for a given WO/WOT
     * @param {GlideRecord} record - GlideRecord for wm_order/wm_task
     */
    getPrimaryAffectedProduct: function (record) {
        var affectedProduct = new GlideRecord('wm_m2m_product_to_work_order');
        if (record.sys_class_name == 'wm_task') {
            affectedProduct.addQuery('wm_task', record.sys_id);
        } else {
            affectedProduct.addQuery('wm_order', record.sys_id);
        }
        affectedProduct.addQuery('primary', true);
        affectedProduct.query();
        if (affectedProduct.next()) {
            return affectedProduct;
        }
    },

    /**
     * Updates the Asset/Install Base fields on WO/WOT given the primary Affected Product
     * @param {GlideRecord} record - GlideRecord for wm_m2m_product_to_work_order
     */
    setPrimaryAffectedProduct: function (record) {
        // Set all other Affected Products "primary" field to false
        var affectedProduct = new GlideRecord('wm_m2m_product_to_work_order');
        if (!record.wm_task.nil()) {
            affectedProduct.addQuery('wm_task', record.wm_task);
        } else {
            affectedProduct.addQuery('wm_order', record.wm_order);
        }
        affectedProduct.addQuery('primary', true);
        affectedProduct.addQuery('sys_id', '!=', record.sys_id);
        affectedProduct.query();
        while (affectedProduct.next()) {
            affectedProduct.primary = false;
            affectedProduct.update();
        }

        // Update the WO/WOT fields as necessary
        if (!record.wm_task.nil()) {
            var wmTask = new GlideRecord('wm_task');
            if (wmTask.get(record.wm_task)) {
                if (!record.asset.nil()) {
                    if (wmTask.asset != record.asset) {
                        wmTask.install_base_item = "NULL";
                        wmTask.asset = record.asset;
                    }
                } else {
                    if (wmTask.install_base_item != record.install_base_item) {
                        wmTask.asset = "NULL";
                        wmTask.install_base_item = record.install_base_item;
                    }
                }
                wmTask.update();
            }
        } else {
            var wmOrder = new GlideRecord('wm_order');
            if (wmOrder.get(record.wm_order)) {
                if (!record.asset.nil()) {
                    if (wmOrder.asset != record.asset) {
                        wmOrder.install_base_item = "NULL";
                        wmOrder.asset = record.asset;
                    }
                } else {
                    if (wmOrder.install_base_item != record.install_base_item) {
                        wmOrder.asset = "NULL";
                        wmOrder.install_base_item = record.install_base_item;
                    }
                }
                wmOrder.update();
            }
        }
    },

    /**
     * Removes Asset/Install Base from WO/WOT
     * @param {GlideRecord} record - GlideRecord for wm_m2m_product_to_work_order
     */
    deletePrimaryAffectedProduct: function (record) {
        if (!record.wm_task.nil()) {
            var wmTask = new GlideRecord('wm_task');
            wmTask.addQuery('sys_id', record.wm_task);
            wmTask.query();
            if (wmTask.next()) {
                wmTask.install_base_item = "NULL";
                wmTask.asset = "NULL";
                wmTask.update();
            }
        } else {
            var wmOrder = new GlideRecord('wm_order');
            wmOrder.addQuery('sys_id', record.wm_order);
            wmOrder.query();
            if (wmOrder.next()) {
                wmOrder.install_base_item = "NULL";
                wmOrder.asset = "NULL";
                wmOrder.update();
            }
        }
    },

    /**
        * Returns the Affected Product for a given WO/WOT
        * @param {GlideRecord} record - GlideRecord for wm_order/wm_task
    */
     checkIfRelatedTasksClosed: function(wm_task_id){
		if(gs.getProperty("sn_fsm.track_work_at_affected_products")=="false")
			return true;
		var m2m_gr = new GlideRecord("wm_m2m_product_to_work_order");
		m2m_gr.addQuery('wm_task',wm_task_id);
		m2m_gr.addQuery('primary',false);
		m2m_gr.query();
		while (m2m_gr.next()){
			var aff_gr_status = m2m_gr.getValue('state');
			if(aff_gr_status=="work_in_progress"){
				return false;
			}
		}
		return true;
		
	},

    type: 'AffectedProductUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-21 15:15:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;acf3b530eb43011074de8075385228d1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AffectedProductUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_acf3b530eb43011074de8075385228d1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-26 15:07:44&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:47</sys_created_on>
        <sys_id>79ff749d83341210c6695855eeaad316</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AffectedProductUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_79ff749d83341210c6695855eeaad316</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
