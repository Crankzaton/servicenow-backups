<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2e3aa1203723300054b6a3549dbe5d4f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;item_option_new&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition table="item_option_new"&gt;typeNOT IN12,20,24,19^EQ&lt;item display_value="12,20,24,19" endquery="false" field="type" goto="false" newquery="false" operator="NOT IN" or="false" value="12,20,24,19"/&gt;
            &lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;
        &lt;/filter_condition&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Check for same name variables&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {
	if (shouldSkipExecution(current))
		return;
	
    if (current.cat_item != "") {
        var gr = new GlideRecord("io_set_item");
        gr.addQuery("sc_cat_item", current.cat_item);
        gr.query();
        while (gr.next())
            if (gr.variable_set.internal_name == current.name || gr.variable_set.title == current.name) {
                gs.addErrorMessage(gs.getMessage("The variable set {0} has the same name or title as a variable associated with the same catalog item '{1}'. Keep the names of variables and variable set internal name and title associated with a catalog item unique.", [gr.variable_set.internal_name + "", current.cat_item.name]));
                current.setAbortAction(true);
            }

        checkItem(current.cat_item.sys_id, current.cat_item.name, current.sys_id, current.name, null, null);
    }

    if (current.variable_set != "") {
        if (current.variable_set.internal_name == current.name || current.variable_set.title == current.name) {
            gs.addErrorMessage(gs.getMessage("This variable has the same name as the variable set '{0}' internal name or title. Keep the variable set internal name and title and the names of the variables associated with it unique.", [current.variable_set.internal_name]));
            current.setAbortAction(true);
        }

        var matchingVariableCount = 0;
        var gr = new GlideRecord("item_option_new");
        gr.addQuery("name", current.name);
        gr.addQuery("variable_set", current.variable_set);
        gr.query();
        while (gr.next())
            if (gr.sys_id != current.sys_id)
                matchingVariableCount++;
        if (matchingVariableCount &gt; 0) {
            gs.addErrorMessage(gs.getMessage("The variable set {1} has {0} other variable(s) with the same name associated with it. Keep the names of variables associated with a variable set unique.", [parseInt(matchingVariableCount) + "", current.variable_set.internal_name]));
            current.setAbortAction(true);
        }

        gr = new GlideRecord("io_set_item");
        gr.addQuery("variable_set", current.variable_set);
        gr.query();
        while (gr.next()) {
            checkItem(gr.sc_cat_item.sys_id, gr.sc_cat_item.name, current.sys_id, current.name, current.variable_set.sys_id, current.variable_set.internal_name);
        }
    }

    function checkItem(item_id, item_name, var_id, var_name, exclude_set_id, exclude_set_name) {
        var matchingVariableCount = 0;
        var gr = new GlideRecord("item_option_new");
        gr.addQuery("name", var_name);
        gr.addQuery("cat_item", item_id);
        gr.query();
        while (gr.next())
            if (gr.sys_id != var_id)
                matchingVariableCount++;
        if (matchingVariableCount &gt; 0) {
            gs.addErrorMessage(gs.getMessage("The catalog item {1} has {0} other variable(s) with the same name associated with it. Keep the names of variables associated with a catalog item unique.", [parseInt(matchingVariableCount) + "", item_name]));
            current.setAbortAction(true);
        }

        var gr = new GlideRecord("io_set_item");
        gr.addQuery("sc_cat_item", item_id);
        gr.query();
        while (gr.next()) {
            if (exclude_set_id == gr.variable_set)
                continue;
            var setVariableCount = 0;
            var vr = new GlideRecord("item_option_new");
            vr.addQuery("name", var_name);
            vr.addQuery("variable_set", gr.variable_set);
            vr.query();
            while (vr.next())
                if (vr.sys_id != var_id)
                    setVariableCount++;
            if (setVariableCount &gt; 0) {
                gs.addErrorMessage(gs.getMessage("There are {0} other variable(s) with the same name associated with the variable set '{1}', which is linked to the catalog item '{2}'. Keep the names of variables and variable set internal name and title associated with a catalog item unique.", [parseInt(setVariableCount) + "", gr.variable_set.internal_name + "", item_name]));
                current.setAbortAction(true);
            }
        }
    }
	function shouldSkipExecution(current) {
		
		return shouldSkipByProcess(current) || ((current.operation() != 'insert') &amp;&amp; !(current.name.changes() || (current.cat_item.changes() || current.variable_set.changes() || current.active.changesTo(true))));

	}
	function shouldSkipByProcess(current) {
		return JSUtil.has(new global.SNCCatalogUtil().isProcessBuilder) &amp;&amp; new global.SNCCatalogUtil().isProcessBuilder(current, ['checkout','publish']);
	}
})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-02-11 09:19:40&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;2e3aa1203723300054b6a3549dbe5d4f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Check for same name variables&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;3607b4283cb1311068bcf327dfe37fee&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_2e3aa1203723300054b6a3549dbe5d4f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-25 06:57:28&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=2e3aa1203723300054b6a3549dbe5d4f"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:59:07</sys_created_on>
        <sys_id>51fd241183b01210c6695855eeaad37b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check for same name variables</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_51fd241183b01210c6695855eeaad37b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:59:07</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
