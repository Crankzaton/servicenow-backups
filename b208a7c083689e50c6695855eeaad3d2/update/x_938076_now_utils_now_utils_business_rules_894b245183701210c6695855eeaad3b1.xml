<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check for same name variables</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
 if (shouldSkipExecution(current))
  return;
 
    if (current.cat_item != "") {
        var gr = new GlideRecord("io_set_item");
        gr.addQuery("sc_cat_item", current.cat_item);
        gr.query();
        while (gr.next())
            if (gr.variable_set.internal_name == current.name || gr.variable_set.title == current.name) {
                gs.addErrorMessage(gs.getMessage("The variable set {0} has the same name or title as a variable associated with the same catalog item '{1}'. Keep the names of variables and variable set internal name and title associated with a catalog item unique.", [gr.variable_set.internal_name + "", current.cat_item.name]));
                current.setAbortAction(true);
            }

        checkItem(current.cat_item.sys_id, current.cat_item.name, current.sys_id, current.name, null, null);
    }

    if (current.variable_set != "") {
        if (current.variable_set.internal_name == current.name || current.variable_set.title == current.name) {
            gs.addErrorMessage(gs.getMessage("This variable has the same name as the variable set '{0}' internal name or title. Keep the variable set internal name and title and the names of the variables associated with it unique.", [current.variable_set.internal_name]));
            current.setAbortAction(true);
        }

        var matchingVariableCount = 0;
        var gr = new GlideRecord("item_option_new");
        gr.addQuery("name", current.name);
        gr.addQuery("variable_set", current.variable_set);
        gr.query();
        while (gr.next())
            if (gr.sys_id != current.sys_id)
                matchingVariableCount++;
        if (matchingVariableCount > 0) {
            gs.addErrorMessage(gs.getMessage("The variable set {1} has {0} other variable(s) with the same name associated with it. Keep the names of variables associated with a variable set unique.", [parseInt(matchingVariableCount) + "", current.variable_set.internal_name]));
            current.setAbortAction(true);
        }

        gr = new GlideRecord("io_set_item");
        gr.addQuery("variable_set", current.variable_set);
        gr.query();
        while (gr.next()) {
            checkItem(gr.sc_cat_item.sys_id, gr.sc_cat_item.name, current.sys_id, current.name, current.variable_set.sys_id, current.variable_set.internal_name);
        }
    }

    function checkItem(item_id, item_name, var_id, var_name, exclude_set_id, exclude_set_name) {
        var matchingVariableCount = 0;
        var gr = new GlideRecord("item_option_new");
        gr.addQuery("name", var_name);
        gr.addQuery("cat_item", item_id);
        gr.query();
        while (gr.next())
            if (gr.sys_id != var_id)
                matchingVariableCount++;
        if (matchingVariableCount > 0) {
            gs.addErrorMessage(gs.getMessage("The catalog item {1} has {0} other variable(s) with the same name associated with it. Keep the names of variables associated with a catalog item unique.", [parseInt(matchingVariableCount) + "", item_name]));
            current.setAbortAction(true);
        }

        var gr = new GlideRecord("io_set_item");
        gr.addQuery("sc_cat_item", item_id);
        gr.query();
        while (gr.next()) {
            if (exclude_set_id == gr.variable_set)
                continue;
            var setVariableCount = 0;
            var vr = new GlideRecord("item_option_new");
            vr.addQuery("name", var_name);
            vr.addQuery("variable_set", gr.variable_set);
            vr.query();
            while (vr.next())
                if (vr.sys_id != var_id)
                    setVariableCount++;
            if (setVariableCount > 0) {
                gs.addErrorMessage(gs.getMessage("There are {0} other variable(s) with the same name associated with the variable set '{1}', which is linked to the catalog item '{2}'. Keep the names of variables and variable set internal name and title associated with a catalog item unique.", [parseInt(setVariableCount) + "", gr.variable_set.internal_name + "", item_name]));
                current.setAbortAction(true);
            }
        }
    }
 function shouldSkipExecution(current) {
  
  return shouldSkipByProcess(current) || ((current.operation() != 'insert') && !(current.name.changes() || (current.cat_item.changes() || current.variable_set.changes() || current.active.changesTo(true))));

 }
 function shouldSkipByProcess(current) {
  return JSUtil.has(new global.SNCCatalogUtil().isProcessBuilder) && new global.SNCCatalogUtil().isProcessBuilder(current, ['checkout','publish']);
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:21</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>894b245183701210c6695855eeaad3b1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check for same name variables</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_894b245183701210c6695855eeaad3b1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:21</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=894b245183701210c6695855eeaad3b1"/>
</record_update>
