<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Composite Criticality Feedback</name>
        <order>50</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
 var feedbackValue = current.getValue('feedback_value');
    if (feedbackValue) {
        var services = ['HR Criticality Intent', 'criticalityDetection'];
        var feedback = {
            'customerCriticalityFeedback': feedbackValue
        };
        var sourceSysId = current.getElement('prediction.ar_context.task').toString();
        var sourceTable = current.getElement('prediction.task_table').toString();
        var predictionTable = "ml_language_x_prediction_result";
        for (var i = 0; i < services.length; i++) {
            var grp = new GlideRecord(predictionTable);
            grp.addEncodedQuery("source_sys_id=" + sourceSysId + "^source_table=" + sourceTable + "^language_x_service=" + services[i]);
            grp.orderByDesc('sys_updated_on');
            grp.setLimit(1);
            grp.query();
            if (grp.hasNext()) {
                grp.next();
                var g = new MLFeedbackAPI().saveFeedback(feedback, grp.getValue('language_x_solution'), sourceTable.toString(), sourceSysId, grp.getValue('sys_id'), null, predictionTable);
                gs.info("SaveFeedback Response: " + g);
            }
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:56</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c0abe8d183701210c6695855eeaad34e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Composite Criticality Feedback</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_c0abe8d183701210c6695855eeaad34e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:56</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=c0abe8d183701210c6695855eeaad34e"/>
</record_update>
