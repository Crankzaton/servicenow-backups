<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>507cb71653e930103913ddeeff7b1218</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_gf.GFTarget&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GFTarget&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GFTarget = Class.create();
GFTarget.prototype = {
    initialize: function(targetId, targetGR) {
        this.targetId = targetId;
        this.targetGR = targetGR;
    },

    getTargetGR: function(targetId) {
        if (!this.targetGR) {
            if (!targetId)
                this.targetId = targetId;
            this.targetGR = new GlideRecord(GoalFrameworkConstants.GOAL_TARGET_TABLE);
            this.targetGR.get(this.targetId);
        }
        return this.targetGR;
    },

    getGoalGR: function(encodedQuery) {
        var goalGR = new GlideRecord(GoalFrameworkConstants.GOAL_CORE_TABLE);
        goalGR.addQuery("sys_id", this.getTargetGR().getValue('goal'));
        if (encodedQuery)
            goalGR.addEncodedQuery(encodedQuery);
        goalGR.query();
        return goalGR;
    },

    doesGoalExist: function() {
        var goalGR = new GlideRecord(GoalFrameworkConstants.GOAL_CORE_TABLE);
        return goalGR.get(this.getTargetGR().getValue('goal'));
    },

    canDelete: function() {
        var result = {};
        if (!this.doesGoalExist()) { //Goal is already deleted
            result.canDelete = true;
            return result;
        }
        result.canDelete = sn_gf.GoalConfigUtil.isTargetDeletionAllowed();
        if (!result.canDelete) {
            var targetsLabel = sn_gf.GFUtil.getTablePluralLabel(GoalFrameworkConstants.GOAL_TARGET_TABLE).toLowerCase();
            result.message = gs.getMessage("Deletion of {0} is not enabled. Please reach out to your admin for changing the settings to allow deletion.", targetsLabel);
        }
        return result;
    },

    validateDates: function() {
        var goalLabel = sn_gf.GFUtil.getTableLabel(GoalFrameworkConstants.GOAL_TABLE).toLowerCase();
        var goalGr = this.getGoalGR();
        goalGr.next();
        var errorMsg = gs.getMessage("The start and end dates must be within the dates ({0} and {1}) of the {2}.", [GlideStringUtil.escapeHTML(goalGr.getDisplayValue('start_date')), GlideStringUtil.escapeHTML(goalGr.getDisplayValue('end_date')), goalLabel]);
        var targetGr = this.getTargetGR();
        var targetStartDate = targetGr.start_date;
        var targetEndDate = targetGr.end_date;
        if (global.JSUtil.notNil(targetStartDate) &amp;&amp; global.JSUtil.notNil(targetEndDate) &amp;&amp; targetStartDate &gt; targetEndDate) {
            errorMsg = gs.getMessage("Start date cannot be later than the end date.");
            return errorMsg;
        }
        var goalStartDate = goalGr.start_date;
        var goalEndDate = goalGr.end_date;
        if (global.JSUtil.notNil(targetStartDate)) {
            if ((global.JSUtil.notNil(goalStartDate) &amp;&amp; goalStartDate &gt; targetStartDate) || (global.JSUtil.notNil(goalEndDate) &amp;&amp; goalEndDate &lt; targetStartDate)) {
                return errorMsg;
            }
        }
        if (global.JSUtil.notNil(targetEndDate)) {
            if ((global.JSUtil.notNil(goalStartDate) &amp;&amp; goalStartDate &gt; targetEndDate) || (global.JSUtil.notNil(goalEndDate) &amp;&amp; goalEndDate &lt; targetEndDate)) {
                return errorMsg;
            }
        }
        if (GlidePluginManager.isActive("com.snc.advanced_goal_framework") &amp;&amp; global.JSUtil.notNil(this.targetGR.getValue("breakdown_interval"))) {
            var clearedFields = [];
            if (global.JSUtil.nil(this.targetGR.getValue("start_date")))
                clearedFields.push("Start date");
            if (global.JSUtil.nil(this.targetGR.getValue("end_date")))
                clearedFields.push("End date");
            if (clearedFields.length &gt; 0)
                return gs.getMessage("{0} cannot be empty when the target value breakdown interval is set.", clearedFields.join(" and "));
        }
        return "";
    },

    getNextReviewDate: function(review_due_date, checkinFreq) {
        return this._getReviewDate(review_due_date, checkinFreq, 1);
    },

    _getReviewDate: function(review_due_date, checkinFreq, offset) {
        var reviewDate = new GlideDateTime(review_due_date);
        var now = new GlideDateTime();
        var diff;
        var days;
        var weeks;
        var month;
        var year;
        switch (checkinFreq) {
            case "daily": {
                if (now &gt; review_due_date) {
                    now.addDaysUTC(1 * offset);
                    reviewDate.setGlideDateTime(now);
                } else
                    reviewDate.addDaysUTC(1 * offset);

                break;
            }
            case "weekly": {
                weeks = 1 * offset;
                if (now &gt; review_due_date) {
                    diff = GlideDateTime.subtract(reviewDate, now);
                    days = diff.getRoundedDayPart();
                    weeks = weeks + Math.floor(days / 7);
                }
                reviewDate.addWeeksUTC(weeks);
                break;
            }
            case "fortnightly": {
                weeks = 1 * offset;
                if (now &gt; review_due_date) {
                    diff = GlideDateTime.subtract(reviewDate, now);
                    days = diff.getRoundedDayPart();
                    weeks = weeks + Math.floor(days / 14);
                }
                reviewDate.addWeeksUTC(weeks * 2);
                break;
            }
            case "monthly": {
                month = 1 * offset;
                if (now &gt; review_due_date) {
                    var nowDayLess = now.getDayOfMonthUTC() &lt; reviewDate.getDayOfMonthUTC() ? 1 : 0;
                    month = month + (now.getMonthUTC() - reviewDate.getMonthUTC()) + ((now.getYearUTC() - reviewDate.getYearUTC()) * 12) - nowDayLess;
                }
                reviewDate.addMonthsUTC(month);
                break;
            }
            case "quarterly": {
                month = offset * 3;
                if (now &gt; review_due_date)
                    month = month + (Math.floor((now.getMonthUTC() - reviewDate.getMonthUTC()) / 3) * 3) + ((now.getYearUTC() - reviewDate.getYearUTC()) * 12);
                reviewDate.addMonthsUTC(month);
                break;
            }
            case "yearly": {
                year = 1 * offset;
                if (now &gt; review_due_date)
                    year = year + (now.getYearUTC() - reviewDate.getYearUTC());
                reviewDate.addYearsUTC(year);
                break;
            }
        }
        return reviewDate.getDate();

    },

    logTargetProgress: function() {
        new sn_gf.TargetProgressUtil(this.getTargetGR()).logTargetProgress();
    },

    addToTarget: function(target, valueDiff, fieldToUpdate) {
        var initialValue = target.getValue(fieldToUpdate);
        var newValue = Number(initialValue) + valueDiff;
        target.setValue(fieldToUpdate, newValue);
        target.update();
    },

    type: 'GFTarget'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-27 07:21:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;507cb71653e930103913ddeeff7b1218&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GFTarget&lt;/sys_name&gt;
        &lt;sys_package display_value="Goal Framework" source="sn_gf"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Goal Framework"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_507cb71653e930103913ddeeff7b1218&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-14 13:34:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:01</sys_created_on>
        <sys_id>d0a67cd983f01210c6695855eeaad302</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GFTarget</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d0a67cd983f01210c6695855eeaad302</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:01</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
