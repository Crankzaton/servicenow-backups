<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>true</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Role Delegation Functions</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
 Service-now.com

 Description: Functions called by role delegation Record Producers and Workflows
**/ 

function getDelegatableRoles(group) {
   answer = "";

   if (gs.hasRole("admin")) {  // admin can grant any grantable role in any group
      var role = new GlideRecord("sys_user_role");
      role.addQuery("grantable", true);
      role.addQuery("can_delegate", true);
      role.query();
      var i = 0;
      while (role.next()) {
         if (i > 0)
            answer += ",";
         answer += role.sys_id;
         i++;
      }
   } else {  // non-admin role delegator can delegate roles they have
      var roles = new GlideRecord("sys_user_has_role");
      roles.addQuery("user", gs.getUserID());
      roles.addQuery("role.can_delegate", true);
      roles.addQuery("role.grantable", true);
      roles.query();
      var i = 0;
      while (roles.next()) {
         if (i > 0)
            answer += ",";
         answer += roles.role;
         i++;
      }
   }
   return answer;
}

function getMyRoleDelegationGroups() {
  // admin can delegate to all groups
  if (gs.hasRole("admin"))
    return "";

  // find groups where user has the role_delegator role in that group
  var hasRoles = new GlideRecord("sys_user_has_role");
  hasRoles.addQuery("user", gs.getUserID());
  hasRoles.addQuery("role.name", "role_delegator");
  hasRoles.query();
  var al = new Packages.java.util.ArrayList();
  while (hasRoles.next()) {
    if (!al.contains(hasRoles.sys_id))
      al.add(hasRoles.granted_by.sys_id);
  }

  var answer = "sys_idIN";
  for (var i = 0; i < al.size(); i++) {
    if (i > 0)
      answer += ",";
    answer += al.get(i);
  }
  return answer;
}

function getRoleDelegatorOptions() {
  if (current.variables.role_delegator_group == "")
    return '';

  var userIDs = [];
  var userGR = new GlideRecord('sys_user_grmember');
  userGR.addQuery("group", current.variables.role_delegator_group);
  userGR.query();
  while (userGR.next())
    userIDs.push(userGR.user.toString());
  
  return 'sys_idIN' + userIDs.join(',');
}

function getRoleDelegatorGroupOptions() {
  if (current.variables.role_delegator_user == "")
    return '';

  var groupIDs = [];
  var userGR = new GlideRecord('sys_user_grmember');
  userGR.addQuery("user", current.variables.role_delegator_user);
  userGR.query();
  while (userGR.next())
    groupIDs.push(userGR.group.toString());
  
  return 'sys_idIN' + groupIDs.join(',');
}

function getUsersForRoleDelegation() {
  if (current.variables.delegate_roles_group == "")
    return '';

  var userIDs = [];
  var userGR = new GlideRecord('sys_user_grmember');
  userGR.addQuery("group", current.variables.delegate_roles_group);
  if (!gs.hasRole("admin"))
    userGR.addQuery("user", "!=", gs.getUserID());
  userGR.query();
  while (userGR.next())
    userIDs.push(userGR.user.toString());
  
  return 'sys_idIN' + userIDs.join(',');
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:44</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5abc60d983701210c6695855eeaad3c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Role Delegation Functions</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_5abc60d983701210c6695855eeaad3c4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:44</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=5abc60d983701210c6695855eeaad3c4"/>
</record_update>
