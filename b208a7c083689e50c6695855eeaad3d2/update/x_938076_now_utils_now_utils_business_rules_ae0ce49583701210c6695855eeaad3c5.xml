<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.operation() != "update" || ( current.start_fiscal_period.changes() || current.end_fiscal_period.changes())</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Breakdowns</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[if ((typeof origCostPlanId === 'undefined') || JSUtil.nil(origCostPlanId))
    var origCostPlanId = current.sys_id;
if ((typeof pmCostPlanExtended === 'undefined') || JSUtil.nil(pmCostPlanExtended))
    var pmCostPlanExtended = false;

(function executeRule(current, previous) {
    try {
        var isDataSeparationSkippedFromNowOnwards = typeof DataSeparatorGlobalUtil !== "undefined" ? DataSeparatorGlobalUtil.skipDataSeparation() : false;
        if (pmCostPlanExtended) {
            origCostPlanId = null;
            pmCostPlanExtended = false;
            return;
        }
        var isCostPlanBatch = (typeof costPlanBatch !== 'undefined') && JSUtil.notNil(costPlanBatch);
        if (isCostPlanBatch && costPlanBatch)
            return;

        var costPlan = new CostPlan(current);
        costPlan.createBreakDowns();

        var isOriginatingFromCostPlan = (typeof origCostPlanId !== 'undefined') && JSUtil.notNil(origCostPlanId);
        if (isOriginatingFromCostPlan && origCostPlanId == current.sys_id) {
            origCostPlanId = null;

            var costPlanGr = new GlideRecord(current.getTableName());
            costPlanGr.get(current.sys_id);

            var rollupCostPlan = new CostPlan(costPlanGr);
            var updatedTotalPlannedCost = rollupCostPlan.updateTotalPlannedCost();
            var updatedTotalActualCost = rollupCostPlan.updateTotalActualCost();

            if (JSUtil.notNil(costPlanGr.program)) {
                var ppmTaskEntityUpdater = new PPMTaskEntityUpdater();
                ppmTaskEntityUpdater.updateProgramEstimatedCost(costPlanGr);
            }
            var updated = updatedTotalPlannedCost || updatedTotalActualCost;
            if (updated)
                rollupCostPlan.update();

            // Find or create Task breakdowns
            var taskRef = current.top_task.getRefRecord();
            var gr = new GlideRecord("cost_plan_breakdown");
            gr.addQuery("breakdown_type", 'requirement');
            gr.addQuery("cost_plan", current.getValue("sys_id"));
            gr.query();
            while (gr.next()) {
                var util = new PPMCostRollupManager(gr.getValue('fiscal_period'), gr.getValue('expense_type'));
                if (taskRef.instanceOf('pm_project') || taskRef.instanceOf('pm_project_task')) {
                    util.updateProjectEstimatedCostByFiscalPeriod(taskRef.getValue('top_task'));
                } else if (taskRef.instanceOf('dmn_demand')) {
                    util.updateDemandEstimatedCostByFiscalPeriod(gr.getValue('task'));
                }
            }

            (new PPMTaskEntityUpdater()).updateBudgetCost(taskRef);
        }
    } finally {
        if (isDataSeparationSkippedFromNowOnwards)
            DataSeparatorGlobalUtil.honourDataSeparation();
    }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:44</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ae0ce49583701210c6695855eeaad3c5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Breakdowns</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_ae0ce49583701210c6695855eeaad3c5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:44</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=ae0ce49583701210c6695855eeaad3c5"/>
</record_update>
