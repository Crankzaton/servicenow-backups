<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>21be21887ff222009b5b91679ffa91be</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.BenefitPlanBreakdown&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;BenefitPlanBreakdown&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var BenefitPlanBreakdown = Class.create();
BenefitPlanBreakdown.prototype = {
    initialize: function(gr) {
        this.gr = gr;
        this.CONSTS = PmFieldConstants;
        this.isProjectCurrencyPresent = new ProjectCurrencyUtil().isProjectCurrencyPresent(this.gr.task.getRefRecord());
        this.isDemandCurrencyPresent = new DemandCurrencyUtil().isDemandCurrencyPresent(this.gr.task.getRefRecord());
    },

    sysId: function(gr) {
        return this.gr.getValue('sys_id');
    },

    nullToZero: function(val) {
        if (val == null || !val)
            return 0;
        return val;
    },

    createBreakdownsByRollupType: function(rollupSysId, rollupType, fiscalPeriodSysId, propertyValueMap) {
        var property = '';
        var breakdown = new GlideRecord('benefit_plan_breakdown');
        breakdown.setValue('breakdown_type', rollupType);
        breakdown.setValue('fiscal_period', fiscalPeriodSysId);
        breakdown.setValue(rollupType, rollupSysId);
        for (property in propertyValueMap) {
            breakdown.setValue(property, propertyValueMap[property]);
        }
        breakdown.insert();
    },

    getBreakdownsByRollupType: function(fiscalPeriodSysId, rollupSysId, rollupType) {
        var breakdown = new GlideRecord('benefit_plan_breakdown');
        breakdown.addQuery('breakdown_type', rollupType);
        breakdown.addQuery(rollupType, rollupSysId);
        breakdown.addQuery('fiscal_period', fiscalPeriodSysId);
        breakdown.query();
        return breakdown;
    },

    updateCostRelatedBreakdowns: function(sysId, estimate, baseEstimate, actual, fiscalPeriodSysId, breakdownType, taskCurrencyBenefit, actualBenefitTaskCurrency) {
        var breakdown = null;
        if (!sysId) return;
        if (baseEstimate == 0 &amp;&amp; estimate == 0 &amp;&amp; actual == 0 &amp;&amp; taskCurrencyBenefit == 0 &amp;&amp; actualBenefitTaskCurrency == 0) return;

        breakdown = this.getBreakdownsByRollupType(fiscalPeriodSysId, sysId, breakdownType);
        var currentProjectCurrency = this.gr.project_currency;
        if (breakdown.getRowCount() == 1) {
            while (breakdown.next()) {
                estimate = this.nullToZero(parseFloat(breakdown.getValue('estimated_benefit'))) + estimate;
                baseEstimate = this.nullToZero(parseFloat(breakdown.getValue('base_estimated_benefit'))) + baseEstimate;
                actual = this.nullToZero(parseFloat(breakdown.getValue('actual_benefit'))) + actual;
                breakdown.setValue('estimated_benefit', estimate);
                breakdown.setValue('base_estimated_benefit', baseEstimate);
                breakdown.setValue('actual_benefit', actual);
                if (this.isProjectCurrencyPresent) {

                    var topTaskProjectCurrency = breakdown.project_currency;
                    if (breakdownType == "task" &amp;&amp; currentProjectCurrency != topTaskProjectCurrency &amp;&amp; taskCurrencyBenefit != 0)
                        taskCurrencyBenefit = parseFloat(this._doConvert(taskCurrencyBenefit, currentProjectCurrency, topTaskProjectCurrency, fiscalPeriodSysId));
                    breakdown.setValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)) + taskCurrencyBenefit);

                    if (breakdownType == "task" &amp;&amp; currentProjectCurrency != topTaskProjectCurrency &amp;&amp; actualBenefitTaskCurrency != 0)
                        actualBenefitTaskCurrency = parseFloat(this._doConvert(actualBenefitTaskCurrency, currentProjectCurrency, topTaskProjectCurrency, fiscalPeriodSysId));
                    breakdown.setValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)) + actualBenefitTaskCurrency);

                } else if (this.isDemandCurrencyPresent) {

                    breakdown.setValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY)) + taskCurrencyBenefit);
                    breakdown.setValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY)) + actualBenefitTaskCurrency);
					
                }
                breakdown.update();
            }
        } else {
            var valueMap = {
                'estimated_benefit': estimate,
                'base_estimated_benefit': baseEstimate,
                'actual_benefit': actual
            };
            var topProjectCurrency = this.gr.task.project_currency;
            if ((this.isProjectCurrencyPresent)) {

                if (breakdownType == "task" &amp;&amp; topProjectCurrency != currentProjectCurrency &amp;&amp; taskCurrencyBenefit != 0)
                    taskCurrencyBenefit = this._doConvert(taskCurrencyBenefit, currentProjectCurrency, topProjectCurrency, fiscalPeriodSysId);
                valueMap[this.CONSTS.BENEFIT_PROJECT_CURRENCY] = taskCurrencyBenefit;
                if (breakdownType == "task" &amp;&amp; topProjectCurrency != currentProjectCurrency &amp;&amp; actualBenefitTaskCurrency != 0)
                    actualBenefitTaskCurrency = this._doConvert(actualBenefitTaskCurrency, currentProjectCurrency, topProjectCurrency, fiscalPeriodSysId);
                valueMap[this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY] = actualBenefitTaskCurrency;
                valueMap[this.CONSTS.PROJECT_CURRENCY] = topProjectCurrency;
				
            } else if (this.isDemandCurrencyPresent) {
				
                valueMap[this.CONSTS.BENEFIT_DEMAND_CURRENCY] = taskCurrencyBenefit;
                valueMap[this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY] = actualBenefitTaskCurrency;
                valueMap[this.CONSTS.DEMAND_CURRENCY] = this.gr.task.demand_currency;
			}
            this.createBreakdownsByRollupType(sysId, breakdownType, fiscalPeriodSysId, valueMap);
        }
    },

    updateCostRelatedRollupBreakdowns: function(previous) {
        var fiscalPeriodSysId = (JSUtil.notNil(this.gr.fiscal_period)) ? this.gr.fiscal_period : '';
        var previousEstimate = this.nullToZero(parseFloat(previous.getValue('estimated_benefit')));
        var currentEstimate = this.nullToZero(parseFloat(this.gr.getValue('estimated_benefit')));
        var previousBaseEstimate = this.nullToZero(parseFloat(previous.getValue('base_estimated_benefit')));
        var currentBaseEstimate = this.nullToZero(parseFloat(this.gr.getValue('base_estimated_benefit')));
        var previousActual = this.nullToZero(parseFloat(previous.getValue('actual_benefit')));
        var currentActual = this.nullToZero(parseFloat(this.gr.getValue('actual_benefit')));
		var taskSysId = (JSUtil.notNil(this.gr.task)) ? this.gr.task : '';
        var programSysId = (JSUtil.notNil(this.gr.program)) ? this.gr.program : '';
        if (this.isProjectCurrencyPresent) {
			
            var previousProjectBenefit = this.nullToZero(parseFloat(previous.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
            var currentProjectBenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
            var previousActualBenefitProjectCurrency = this.nullToZero(parseFloat(previous.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));
            var currentActualBenefitProjectCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));

           
            this.updateCostRelatedBreakdowns(taskSysId, (currentEstimate - previousEstimate), (currentBaseEstimate - previousBaseEstimate), (currentActual - previousActual), fiscalPeriodSysId, 'task', (currentProjectBenefit - previousProjectBenefit), (currentActualBenefitProjectCurrency - previousActualBenefitProjectCurrency));

        } else{ 
			
			var previousDemandBenefit = this.nullToZero(parseFloat(previous.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY)));
            var currentDemandBenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY)));
            var previousActualBenefitDemandCurrency = this.nullToZero(parseFloat(previous.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY)));
            var currentActualBenefitDemandCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY)));

            this.updateCostRelatedBreakdowns(taskSysId, (currentEstimate - previousEstimate), (currentBaseEstimate - previousBaseEstimate), (currentActual - previousActual), fiscalPeriodSysId, 'task', (currentDemandBenefit - previousDemandBenefit), (currentActualBenefitDemandCurrency - previousActualBenefitDemandCurrency));
					
		}

        this.updateCostRelatedBreakdowns(programSysId, (currentEstimate - previousEstimate), (currentBaseEstimate - previousBaseEstimate), (currentActual - previousActual), fiscalPeriodSysId, 'program');
    },

    updateTaskRelatedBreakdowns: function(newSysId, oldSysId, fiscalPeriodSysId, deltaEstimated, deltaBaseEstimated, deltaActual, breakdownType, deltProjectBenefit, deltaActualBenefitProjectCurrency, oldTaskGr) {
        var oldGr = null;
        var newGr = null;
        var tempGr = null;
        var estimated = 0;
        var baseEstimated = 0;
        var actual = 0;
        var projectCurrencyBenefit = 0;
        var actualBenefitProjectCurrency = 0;

        if (newSysId) {
            tempGr = this.getBreakdownsByRollupType(fiscalPeriodSysId, newSysId, breakdownType);
        }

        if (oldSysId) {
            oldGr = this.getBreakdownsByRollupType(fiscalPeriodSysId, oldSysId, breakdownType);

            if (oldGr.getRowCount() == 1) {
                while (oldGr.next()) {
                    // if(tempGr.getRowCount() == 1) {
                    //     oldGr.deleteRecord();
                    // } else {
                    estimated = this.nullToZero(parseFloat(oldGr.getValue('estimated_benefit')));
                    baseEstimated = this.nullToZero(parseFloat(oldGr.getValue('base_estimated_benefit')));
                    actual = this.nullToZero(parseFloat(oldGr.getValue('actual_benefit')));

                    oldGr.setValue('estimated_benefit', (estimated - deltaEstimated));
                    oldGr.setValue('base_estimated_benefit', (baseEstimated - deltaBaseEstimated));
                    oldGr.setValue('actual_benefit', (actual - deltaActual));
                    if (this.isProjectCurrencyPresent) {
                        var currentProjectCurrency = this.gr.project_currency;
                        var taskProjectCurrency = oldGr.project_currency;
                        projectCurrencyBenefit = this.nullToZero(parseFloat(oldGr.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
                        actualBenefitProjectCurrency = this.nullToZero(parseFloat(oldGr.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));
                        if (breakdownType == "task" &amp;&amp; currentProjectCurrency != taskProjectCurrency &amp;&amp; deltProjectBenefit != 0)
                            deltProjectBenefit = parseFloat(this._doConvert(deltProjectBenefit, currentProjectCurrency, taskProjectCurrency, fiscalPeriodSysId));
                        oldGr.setValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY, projectCurrencyBenefit - deltProjectBenefit);

                        if (breakdownType == "task" &amp;&amp; currentProjectCurrency != taskProjectCurrency &amp;&amp; deltaActualBenefitProjectCurrency != 0)
                            deltaActualBenefitProjectCurrency = parseFloat(this._doConvert(deltaActualBenefitProjectCurrency, currentProjectCurrency, taskProjectCurrency, fiscalPeriodSysId));
                        oldGr.setValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY, actualBenefitProjectCurrency - deltaActualBenefitProjectCurrency);

                    }
                    // oldGr.setValue(breakdownType, newSysId);

                    oldGr.update();
                    // }
                }
            }
        }

        if (newSysId) {
            var parentProjectCurrency = this.gr.task.project_currency;
            var oldProjectCurrency = oldTaskGr.project_currency;
            if (tempGr.getRowCount() == 0) {

                var valueMap = {
                    'estimated_benefit': deltaEstimated,
                    'base_estimated_benefit': deltaBaseEstimated,
                    'actual_benefit': deltaActual
                };
                if (this.isProjectCurrencyPresent) {
                    if (breakdownType == "task" &amp;&amp; parentProjectCurrency != oldProjectCurrency &amp;&amp; deltProjectBenefit != 0)
                        deltProjectBenefit = this._doConvert(deltProjectBenefit, oldProjectCurrency, parentProjectCurrency, fiscalPeriodSysId);
                    valueMap[this.CONSTS.BENEFIT_PROJECT_CURRENCY] = deltProjectBenefit;
                    if (breakdownType == "task" &amp;&amp; parentProjectCurrency != oldProjectCurrency &amp;&amp; deltaActualBenefitProjectCurrency != 0)
                        deltaActualBenefitProjectCurrency = this._doConvert(deltaActualBenefitProjectCurrency, oldProjectCurrency, parentProjectCurrency, fiscalPeriodSysId);
                    valueMap[this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY] = deltaActualBenefitProjectCurrency;
                    valueMap[this.CONSTS.PROJECT_CURRENCY] = parentProjectCurrency;
                }

                this.createBreakdownsByRollupType(newSysId, breakdownType, fiscalPeriodSysId, valueMap);
            } else if (tempGr.getRowCount() == 1) {
                while (tempGr.next()) {
                    estimated = this.nullToZero(parseFloat(tempGr.getValue('estimated_benefit')));
                    baseEstimated = this.nullToZero(parseFloat(tempGr.getValue('base_estimated_benefit')));
                    actual = this.nullToZero(parseFloat(tempGr.getValue('actual_benefit')));

                    tempGr.setValue('estimated_benefit', (estimated + deltaEstimated));
                    tempGr.setValue('base_estimated_benefit', (baseEstimated + deltaBaseEstimated));
                    tempGr.setValue('actual_benefit', (actual + deltaActual));
                    if (this.isProjectCurrencyPresent) {
                        projectCurrencyBenefit = this.nullToZero(parseFloat(tempGr.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
                        actualBenefitProjectCurrency = this.nullToZero(parseFloat(tempGr.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));
                        if (breakdownType == "task" &amp;&amp; parentProjectCurrency != oldProjectCurrency &amp;&amp; deltProjectBenefit != 0)
                            deltProjectBenefit = parseFloat(this._doConvert(deltProjectBenefit, oldProjectCurrency, parentProjectCurrency, fiscalPeriodSysId));
                        tempGr.setValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY, projectCurrencyBenefit + deltProjectBenefit);

                        if (breakdownType == "task" &amp;&amp; parentProjectCurrency != oldProjectCurrency &amp;&amp; deltaActualBenefitProjectCurrency != 0)
                            deltaActualBenefitProjectCurrency = parseFloat(this._doConvert(deltaActualBenefitProjectCurrency, oldProjectCurrency, parentProjectCurrency, fiscalPeriodSysId));
                        tempGr.setValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY, actualBenefitProjectCurrency + deltaActualBenefitProjectCurrency);

                    }

                    tempGr.update();
                }
            }
        }
    },

    updateTaskRelatedRollupBreakdowns: function(previous) {
        var previousProgramSysId = (JSUtil.notNil(previous.program)) ? previous.program : '';
        var currentProgramSysId = (JSUtil.notNil(this.gr.program)) ? this.gr.program : '';
        var fiscalPeriodSysId = (JSUtil.notNil(this.gr.fiscal_period)) ? this.gr.fiscal_period : '';
        var estimated = this.nullToZero(parseFloat(this.gr.getValue('estimated_benefit')));
        var actual = this.nullToZero(parseFloat(this.gr.getValue('actual_benefit')));
        var previousTaskSysId = (JSUtil.notNil(previous.task)) ? previous.task : '';
        var currentTaskSysId = (JSUtil.notNil(this.gr.task)) ? this.gr.task : '';
        var baseEstimated = this.nullToZero(parseFloat(this.gr.getValue('base_estimated_benefit')));
        var projectCurrencyBenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
        var actualBenefitProjectCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));

        if (currentTaskSysId != previousTaskSysId) {
            this.updateTaskRelatedBreakdowns(currentTaskSysId, previousTaskSysId, fiscalPeriodSysId, estimated, baseEstimated, actual, 'task', projectCurrencyBenefit, actualBenefitProjectCurrency, previous.task.getRefRecord());
        }
        if (currentProgramSysId != previousProgramSysId) {
            this.updateTaskRelatedBreakdowns(currentProgramSysId, previousProgramSysId, fiscalPeriodSysId, estimated, baseEstimated, actual, 'program');
        }
    },

    createTaskRelatedBreakdowns: function(sysId, fiscalPeriodSysId, amount, baseEstimated, breakdownType, taskCurrencyBenefit, actualBenefitTaskCurrency, taskCurrency) {
        var breakdown = null;
        var newBreakdown = null;

        if (sysId) {
            breakdown = this.getBreakdownsByRollupType(fiscalPeriodSysId, sysId, breakdownType);

            if (breakdown.getRowCount() &gt; 0) {
                if (breakdown.getRowCount() == 1) {
                    while (breakdown.next()) {
                        breakdown.setValue('estimated_benefit', (this.nullToZero(parseFloat(breakdown.estimated_benefit)) + amount));
                        breakdown.setValue('base_estimated_benefit', (this.nullToZero(parseFloat(breakdown.base_estimated_benefit)) + baseEstimated));
                        if (this.isProjectCurrencyPresent) {
                            if (breakdownType == "task" &amp;&amp; breakdown.project_currency != taskCurrency &amp;&amp; taskCurrencyBenefit != 0)
                                taskCurrencyBenefit = parseFloat(this._doConvert(taskCurrencyBenefit, taskCurrency, breakdown.project_currency, fiscalPeriodSysId));
                            breakdown.setValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY, (parseFloat(breakdown.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY))) + taskCurrencyBenefit);

                            if (breakdownType == "task" &amp;&amp; breakdown.project_currency != taskCurrency &amp;&amp; actualBenefitTaskCurrency != 0)
                                actualBenefitTaskCurrency = parseFloat(this._doConvert(actualBenefitTaskCurrency, taskCurrency, breakdown.project_currency, fiscalPeriodSysId));
                            breakdown.setValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY, (parseFloat(breakdown.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY))) + actualBenefitTaskCurrency);

                        } else if (this.isDemandCurrencyPresent) {
   
                            breakdown.setValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY, (parseFloat(breakdown.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY))) + taskCurrencyBenefit);
                            breakdown.setValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY, (parseFloat(breakdown.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY))) + actualBenefitTaskCurrency);
							
                        }
                        breakdown.update();
                    }
                }
            } else {
                var valueMap = {
                    'estimated_benefit': amount,
                    'base_estimated_benefit': baseEstimated
                };
                var topProjectCurrency = this.gr.task.project_currency;

                if (this.isProjectCurrencyPresent) {
                    if (breakdownType == "task" &amp;&amp; topProjectCurrency != taskCurrency &amp;&amp; taskCurrencyBenefit != 0)
                        taskCurrencyBenefit = this._doConvert(taskCurrencyBenefit, taskCurrency, topProjectCurrency, fiscalPeriodSysId);
                    valueMap[this.CONSTS.BENEFIT_PROJECT_CURRENCY] = taskCurrencyBenefit;
                    if (breakdownType == "task" &amp;&amp; topProjectCurrency != taskCurrency &amp;&amp; actualBenefitTaskCurrency != 0)
                        actualBenefitTaskCurrency = this._doConvert(actualBenefitTaskCurrency, taskCurrency, topProjectCurrency, fiscalPeriodSysId);
                    valueMap[this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY] = actualBenefitTaskCurrency;
                    valueMap[this.CONSTS.PROJECT_CURRENCY] = topProjectCurrency;
					
                } else if (this.isDemandCurrencyPresent) {
					
                    valueMap[this.CONSTS.BENEFIT_DEMAND_CURRENCY] = taskCurrencyBenefit;
                    valueMap[this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY] = actualBenefitTaskCurrency;
                    valueMap[this.CONSTS.DEMAND_CURRENCY] = taskCurrency;
                }
                this.createBreakdownsByRollupType(sysId, breakdownType, fiscalPeriodSysId, valueMap);
            }
        }
    },
    createTaskRelatedRollupBreakdowns: function() {
        var taskSysId = (JSUtil.notNil(this.gr.task)) ? this.gr.task : '';
        var programSysId = (JSUtil.notNil(this.gr.program)) ? this.gr.program : '';
        var fiscalPeriodSysId = (JSUtil.notNil(this.gr.fiscal_period)) ? this.gr.fiscal_period : '';
        var estimated = this.nullToZero(parseFloat(this.gr.getValue('estimated_benefit')));
        var baseEstimated = this.nullToZero(parseFloat(this.gr.getValue('base_estimated_benefit')));
        if (this.isProjectCurrencyPresent) {
            var projectCurrencyBenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
            var actualBenefitProjectCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));
            var projectCurrency = this.gr.getValue(this.CONSTS.PROJECT_CURRENCY);
            this.createTaskRelatedBreakdowns(taskSysId, fiscalPeriodSysId, estimated, baseEstimated, 'task', projectCurrencyBenefit, actualBenefitProjectCurrency, projectCurrency);
        } else {
            var demandCurrencyBenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY)));
            var actualBenefitDemandCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY)));
            var demandCurrency = this.gr.getValue(this.CONSTS.DEMAND_CURRENCY);
            this.createTaskRelatedBreakdowns(taskSysId, fiscalPeriodSysId, estimated, baseEstimated, 'task', demandCurrencyBenefit, actualBenefitDemandCurrency, demandCurrency);
        }
        this.createTaskRelatedBreakdowns(programSysId, fiscalPeriodSysId, estimated, baseEstimated, 'program');
    },

    syncTaskRelatedBreakdowns: function(sysId, fiscalPeriodSysId, estimate, baseEstimated, actual, breakdownType, taskCurrencyBenefit, taskBenefitProjectCurrency) {
        var breakdown = null;

        if (sysId) {
            breakdown = this.getBreakdownsByRollupType(fiscalPeriodSysId, sysId, breakdownType);

            if (breakdown.getRowCount() &gt; 0) {
                if (breakdown.getRowCount() == 1) {
                    if (breakdown.next()) {
                        var estimatedBenefit = (parseFloat(breakdown.estimated_benefit) - estimate);
                        var actualBenefit = (parseFloat(breakdown.actual_benefit) - actual);
                        var baseEstimatedBenefit = (parseFloat(breakdown.base_estimated_benefit) - baseEstimated);

                        breakdown.setValue('estimated_benefit', estimatedBenefit);
                        breakdown.setValue('base_estimated_benefit', baseEstimatedBenefit);
                        breakdown.setValue('actual_benefit', actualBenefit);
                        if (this.isProjectCurrencyPresent) {
                            var currentProjectCurrency = this.gr.project_currency;
                            var topTaskProjectCurrency = breakdown.project_currency;

                            if (breakdownType == "task" &amp;&amp; currentProjectCurrency != topTaskProjectCurrency &amp;&amp; taskCurrencyBenefit != 0)
                                taskCurrencyBenefit = parseFloat(this._doConvert(taskCurrencyBenefit, currentProjectCurrency, topTaskProjectCurrency, fiscalPeriodSysId));
                            breakdown.setValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)) - taskCurrencyBenefit);

                            if (breakdownType == "task" &amp;&amp; currentProjectCurrency != topTaskProjectCurrency &amp;&amp; taskBenefitProjectCurrency != 0)
                                taskBenefitProjectCurrency = parseFloat(this._doConvert(taskBenefitProjectCurrency, currentProjectCurrency, topTaskProjectCurrency, fiscalPeriodSysId));
                            breakdown.setValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)) - taskBenefitProjectCurrency);

                        } else if(this.isDemandCurrencyPresent){
							 breakdown.setValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY)) - taskCurrencyBenefit);
							breakdown.setValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY, parseFloat(breakdown.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY)) - taskBenefitProjectCurrency);
						}

                        if (baseEstimatedBenefit == 0 &amp;&amp; estimatedBenefit == 0 &amp;&amp; actualBenefit == 0)
                            breakdown.deleteRecord();
                        else
                            breakdown.update();
                    }
                }
            }
        }
    },

    syncTaskRelatedRollupBreakdowns: function() {
        var taskSysId = (JSUtil.notNil(this.gr.task)) ? this.gr.task : '';
        var programSysId = (JSUtil.notNil(this.gr.program)) ? this.gr.program : '';
        var fiscalPeriodSysId = (JSUtil.notNil(this.gr.fiscal_period)) ? this.gr.fiscal_period : '';
        var estimated = this.nullToZero(parseFloat(this.gr.getValue('estimated_benefit')));
        var baseEstimatedBenefit = this.nullToZero(parseFloat(this.gr.getValue('base_estimated_benefit')));
        var actual = this.nullToZero(parseFloat(this.gr.getValue('actual_benefit')));
		
		if (this.isProjectCurrencyPresent) {
			var projectCurrencybenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_PROJECT_CURRENCY)));
			var actualBenefitProjectCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_PROJECT_CURRENCY)));
			this.syncTaskRelatedBreakdowns(taskSysId, fiscalPeriodSysId, estimated, baseEstimatedBenefit, actual, 'task', projectCurrencybenefit, actualBenefitProjectCurrency);
		} else {
			var demandCurrencybenefit = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.BENEFIT_DEMAND_CURRENCY)));
			var actualBenefitDemandCurrency = this.nullToZero(parseFloat(this.gr.getValue(this.CONSTS.ACTUAL_BENEFIT_DEMAND_CURRENCY)));
			this.syncTaskRelatedBreakdowns(taskSysId, fiscalPeriodSysId, estimated, baseEstimatedBenefit, actual, 'task', demandCurrencybenefit, actualBenefitDemandCurrency);
		}
        this.syncTaskRelatedBreakdowns(programSysId, fiscalPeriodSysId, estimated, baseEstimatedBenefit, actual, 'program');
    },

    _doConvert: function(fromAmount, fromCurrency, toCurrency, fiscalPeriodID) {
        return new SNC.FMCurrency().convertAmountToNewCurrency(fromAmount, fiscalPeriodID, fromCurrency, toCurrency);
    },

    type: 'BenefitPlanBreakdown'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-10-26 10:48:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;21be21887ff222009b5b91679ffa91be&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;92&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;BenefitPlanBreakdown&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_21be21887ff222009b5b91679ffa91be&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-08-11 16:07:31&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:00</sys_created_on>
        <sys_id>42e03c1983b01210c6695855eeaad3de</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>BenefitPlanBreakdown</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_42e03c1983b01210c6695855eeaad3de</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
