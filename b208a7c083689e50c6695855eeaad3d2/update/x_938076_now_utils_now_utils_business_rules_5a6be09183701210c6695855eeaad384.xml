<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Account Check</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
 if (new GlidePluginManager().isActive('com.sn_pss_core')) {     
        var errMsg = new sn_pss_core.ServiceContract().validateCustomerInformation(current);     
        if (errMsg) {          
            gs.addErrorMessage(gs.getMessage(errMsg));     
            current.setAbortAction(true);     
        }     
  return;    
    }   
    var contractObj = current.contract,
        contractCoveredObj = !gs.nil(current.sold_product) ? current.sold_product : current.install_base;
    //consumer check
    var consumer = contractCoveredObj.consumer;
    if (!gs.nil(consumer)) {
        //compare consumer
        if (contractObj.consumer != consumer) {
            errorMessage(contractObj.getDisplayValue(), consumer.getDisplayValue(), 'consumer');
        }
    } else {
        //account check
        var list = [],
            contractAccountSysId = current.contract.account + '',
            account = contractCoveredObj.account + '';
        if (!gs.nil(contractAccountSysId)) {
            if (!gs.nil(account)) {
                list = new global.CSManagementUtils().getAllParentsOfAccount(account);
            }
        } else
            contractAccountSysId = '-1';
        //compare account
        if (new global.ArrayUtil().indexOf(list, contractAccountSysId) == -1) {
            errorMessage(contractObj.getDisplayValue(), contractCoveredObj.account.getDisplayValue(), 'account');
        }
    }
    //display error message
    function errorMessage(contract, ownerDisplayValue, owner) {
        var arr = [];
        arr.push(contract, ownerDisplayValue, owner);
        gs.addErrorMessage(gs.getMessage("The {0} contract does not belong to the {1} {2}.", arr));
        current.setAbortAction(true);
    }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:00</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5a6be09183701210c6695855eeaad384</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Account Check</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_5a6be09183701210c6695855eeaad384</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:00</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=5a6be09183701210c6695855eeaad384"/>
</record_update>
