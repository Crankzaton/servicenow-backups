<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0387b9b9738610101001fcf2c4f6a7f7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DemandCurrencyUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DemandCurrencyUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DemandCurrencyUtil = Class.create();
DemandCurrencyUtil.prototype = {
    initialize: function() {
	},
	
    isDemandCurrencyPresent: function(task) {
        if (gs.nil(task))
            return false;
        return (task.instanceOf('dmn_demand') &amp;&amp; JSUtil.notNil(task.demand_currency));
    },
	
	calculateDemandCurrencyFields: function(currencyChanged, capexChanged, opexChanged, benefitsChanged, actualChanged, demandCurrencyCode, demandGr) {
        if (currencyChanged || capexChanged) {
            demandGr.capital_expense_demand_currency.amount =
                MultiCurrencyUtil.convertCurrencyUsingFxRate(demandGr.capital_outlay.getCurrencyValue(), demandGr.capital_outlay.getCurrencyCode(), demandCurrencyCode);
            demandGr.capital_expense_demand_currency.currency = demandCurrencyCode;
        }
        if (currencyChanged || opexChanged) {
            demandGr.operating_expense_demand_currency.amount =
                MultiCurrencyUtil.convertCurrencyUsingFxRate(demandGr.operational_outlay.getCurrencyValue(), demandGr.operational_outlay.getCurrencyCode(), demandCurrencyCode);
            demandGr.operating_expense_demand_currency.currency = demandCurrencyCode;
        }
        if (currencyChanged || benefitsChanged) {
            demandGr.financial_benefit_demand_currency.amount =
                MultiCurrencyUtil.convertCurrencyUsingFxRate(demandGr.financial_benefit.getCurrencyValue(), demandGr.financial_benefit.getCurrencyCode(), demandCurrencyCode);
            demandGr.financial_benefit_demand_currency.currency = demandCurrencyCode;
        }
        if (currencyChanged || actualChanged)
			this.updateActualCostInDemandCurrencyOnDemand(demandGr,demandCurrencyCode);
    },
	
	updateActualCostInDemandCurrencyOnDemand: function(demandGr,demandCurrencyCode){
		demandGr.actual_cost_demand_currency.amount =
                MultiCurrencyUtil.convertCurrencyUsingFxRate(demandGr.demand_actual_cost.getCurrencyValue(), demandGr.demand_actual_cost.getCurrencyCode(), demandCurrencyCode);
        demandGr.actual_cost_demand_currency.currency = demandCurrencyCode;
	},
	
	updateActualCostInDemandCurrencyOnDemandTask: function(demandTaskGr,demandCurrencyCode){
		demandTaskGr.actual_cost_demand_currency.amount =
                MultiCurrencyUtil.convertCurrencyUsingFxRate(demandTaskGr.work_cost.getCurrencyValue(), demandTaskGr.work_cost.getCurrencyCode(), demandCurrencyCode);
        demandTaskGr.actual_cost_demand_currency.currency = demandCurrencyCode;
	},
    
    hasCostEntities: function(task) {
		
        var bPlan = new GlideAggregate("benefit_plan");
        bPlan.addQuery("task", task);
        bPlan.addAggregate("COUNT");
        bPlan.query();
        if (bPlan.next() &amp;&amp; bPlan.getAggregate("COUNT") != 0)
            return true;
		bPlan = new GlideAggregate("benefit_plan");
        bPlan.addQuery('task.parent', task);
		bPlan.addAggregate("COUNT");
        bPlan.query();
        if (bPlan.next() &amp;&amp; bPlan.getAggregate("COUNT") != 0)
            return true;
		
		
        var cPlan = new GlideAggregate("cost_plan");
        cPlan.addQuery("task", task);
        cPlan.addAggregate("COUNT");
        cPlan.query();
        if (cPlan.next() &amp;&amp; cPlan.getAggregate("COUNT") != 0)
            return true;
		cPlan = new GlideAggregate("cost_plan");
        cPlan.addQuery("task.parent", task);
        cPlan.addAggregate("COUNT");
        cPlan.query();
        if (cPlan.next() &amp;&amp; cPlan.getAggregate("COUNT") != 0)
            return true;
		
        return false;
    },
	
	isSimpleFinancials: function(task){
		return !this.hasCostEntities(task);
	},
	
	shouldUpdateForSimpleFin: function(currenDmnGR){
		return (currenDmnGR.demand_currency.changes() || currenDmnGR.capital_outlay.changes() || currenDmnGR.operational_outlay.changes() || currenDmnGR.financial_benefit.changes() || currenDmnGR.demand_actual_cost.changes()) &amp;&amp; this.isSimpleFinancials(currenDmnGR.getValue('sys_id'));
	},
	
	resetDemandAndProjectCurrencies: function(demandGR){
		var setUpPref = MultiCurrencyUtil.getDemandCurrencySetupValue();
		if(gs.nil(setUpPref) || setUpPref === "flexi_option")
			return;
		
		var functionalCurrency = MultiCurrencyUtil.getFunctionalCurrency();
		var isDmnCurrNeedToReset = demandGR.demand_currency.changes() &amp;&amp; setUpPref == 'follow_functional_currency' &amp;&amp; demandGR.getDisplayValue("demand_currency") !=  functionalCurrency;
		var infoMsg = '';
		if(isDmnCurrNeedToReset){
			infoMsg = gs.getMessage("Updated Demand currency to functional currency as per the Demand currency setup property.");
			gs.addInfoMessage(infoMsg);
			demandGR.setValue("demand_currency",functionalCurrency);
		}
		
		var isProjCurrNeedToReset = setUpPref == 'drive_project_currency' &amp;&amp; demandGR.getValue("project_currency") !=  demandGR.getValue("demand_currency");
		if(isProjCurrNeedToReset){
			infoMsg = gs.getMessage("Updated Project currency to Demand currency as per the Demand currency setup property.");
			gs.addInfoMessage(infoMsg);
			demandGR.setValue("project_currency",demandGR.getValue("demand_currency"));
		}
	},
	
    type: 'DemandCurrencyUtil'
};

DemandCurrencyUtil.FIELDS_ON_COST_PLAN = ['demand_currency','cost_demand_currency','actual_cost_demand_currency'];
DemandCurrencyUtil.FIELDS_ON_COST_PLAN_BREAKDOWN = ['cost_demand_currency','demand_currency','exchange_rate_demand_currency','exchange_rate_demand_currency_date','fx_rate_demand_currency','budget_cost_demand_currency','actual_cost_demand_currency'];
DemandCurrencyUtil.FIELDS_ON_BENEFIT_PLAN = ['demand_currency','benefit_demand_currency','actual_benefit_demand_currency'];
DemandCurrencyUtil.FIELDS_ON_BENEFIT_PLAN_BREAKDOWN = ['demand_currency','benefit_demand_currency','demand_currency_exchange_rate','demand_currency_exchange_rate_date','actual_benefit_demand_currency','fx_rate_demand_currency'];
DemandCurrencyUtil.FIELDS_ON_BUDGET = ['capex_budget_demand_currency','opex_budget_demand_currency','budget_cost_demand_currency','demand_currency','demand_currency_exchange_rate','demand_currency_exchange_rate_date','exchange_refernce'];
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-07-17 12:27:03&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0387b9b9738610101001fcf2c4f6a7f7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DemandCurrencyUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0387b9b9738610101001fcf2c4f6a7f7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-01-11 07:23:33&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:05</sys_created_on>
        <sys_id>07307c5583b01210c6695855eeaad37b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DemandCurrencyUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_07307c5583b01210c6695855eeaad37b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
