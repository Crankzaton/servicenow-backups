<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>70352f4087d41010fb4b3a0548cb0bab</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description/&gt;
        &lt;name&gt;IMIdeaMigrationScript&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * Please use the below information before running the fix script.
 
 * Please make sure that fix script is active.
 * If you want to update a single set of ideas with categories. use 'myIdeasMigrationList' variable in below way

 var myIdeasMigrationList = [{
    encodedQuery: 'active=true',
    categoriesSysIdList: ['category_sys_id_1', 'category_sys_id_2']
}]

* If you want to update a multiple set of ideas with categories. use 'myIdeasMigrationList' variable in below way

var myIdeasMigrationList = [{
    encodedQuery: 'encoded_query_1',
    categoriesSysIdList: ['category_sys_id_3']
}, {
    encodedQuery: 'encoded_query_2',
    categoriesSysIdList: ['category_sys_id_4', 'category_sys_id_5']
}, {
    encodedQuery: 'encoded_query_2',
    categoriesSysIdList: ['category_sys_id_6', 'category_sys_id_7', 'category_sys_id_8']
}]
**/

var myIdeasMigrationList = []; //Modify this variable before running the script. Please see the information provided above
var ideaTable = 'idea';
var categoryTable = 'im_category';
var moduleSysId = '232e371453b033004e77ddeeff7b1237'; //internal module sys_id

function hasAlreadyIdeaExistingWithSameCategory(ideaSysId, categoryId, categoryTable) {
	var ideaCategoryGr = new GlideRecord(IMConstants.IM_IDEA_M2M_TABLE);
	ideaCategoryGr.addQuery('idea', ideaSysId);
	ideaCategoryGr.addQuery('category_id', categoryId);
	ideaCategoryGr.addQuery('category_table', categoryTable);
	ideaCategoryGr.setLimit(1);
	ideaCategoryGr.query();
	return ideaCategoryGr.hasNext();
}

function createM2MReferencesForIdeaAndCategories(categoryInfo, ideaSysId) {
	var gr = new GlideRecord(categoryInfo.categoryTable);
	gr.addQuery('sys_id', 'IN', categoryInfo.categoryList);
	gr.query();
	while(gr.next()) {
		var categoryId = gr.getValue('sys_id');
		if(!hasAlreadyIdeaExistingWithSameCategory(ideaSysId, categoryId, categoryInfo.categoryTable)) {
			var ideaCategoryGr = new GlideRecord(IMConstants.IM_IDEA_M2M_TABLE);
			ideaCategoryGr.initialize();
			ideaCategoryGr.setValue('idea', ideaSysId);
			ideaCategoryGr.setValue('category_id', categoryId);
			ideaCategoryGr.setValue('category_table', categoryInfo.categoryTable);
			ideaCategoryGr.insert();
		}
	}
}

function migrateIdeas(ideasToBeMigratedList) {
    ideasToBeMigratedList.forEach(function(listInfo) {
        var record = new GlideRecord(ideaTable);
        record.addEncodedQuery(listInfo.encodedQuery);
        record.query();
        while(record.next()){
            record.setValue('module', moduleSysId);
            record.update();
            if(listInfo.categoriesSysIdList &amp;&amp; listInfo.categoriesSysIdList.length &gt; 0)
                createM2MReferencesForIdeaAndCategories({
                    'categoryTable': categoryTable,
                    'categoryList': listInfo.categoriesSysIdList
                }, record.getValue('sys_id'));
            else
                gs.info("categoriesSysIdList is empty or undefined");
        }
    });
}
migrateIdeas(myIdeasMigrationList);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-04-16 10:20:18&lt;/sys_created_on&gt;
        &lt;sys_id&gt;70352f4087d41010fb4b3a0548cb0bab&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;IMIdeaMigrationScript&lt;/sys_name&gt;
        &lt;sys_package display_value="Innovation Management" source="com.snc.innovation_management"&gt;cf2056ab47e64210cd4e1ce4316d4313&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_70352f4087d41010fb4b3a0548cb0bab&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-04-21 16:04:55&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:52</sys_created_on>
        <sys_id>a623789d83b01210c6695855eeaad378</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>IMIdeaMigrationScript</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a623789d83b01210c6695855eeaad378</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:52</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
