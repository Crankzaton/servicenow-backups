<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Cascade-delete Nodes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var nodes, goal_ids = [], delayed_deletes = [];
 
 // Get the Goals and Nodes
 var goals = new GlideRecord("sys_cb_goal");
 goals.addQuery("topic", current.getValue("sys_id"));
 goals.query();
 
 gs.debug("There are {0} goals for this Topic which must be deleted.", goals.getRowCount());
 
 while (goals.next())
  goal_ids.push(goals.getValue("sys_id"));
 
 if (goal_ids.length > 0) {
  nodes = new GlideRecord("sys_cb_node");
  nodes.addQuery("topic_goal", "IN", goal_ids.join(","));
  nodes.query();
  
  gs.debug("There are {0} nodes for this Topic which must be deleted.", nodes.getRowCount());
  
  gs.debug("Deleting nodes.");
  while(nodes.next()) {
   var realRecord = new GlideRecord(nodes.getRecordClassName());
   realRecord.get(nodes.getValue("sys_id"));
   
   if (realRecord) {
    realRecord.setWorkflow(false);
    realRecord.deleteRecord();
    
    gs.debug("Node {0} ({1}) deleted with workflow off.", realRecord.getDisplayValue(), realRecord.getRecordClassName());
    delayed_deletes.push(cacheForDelete(realRecord));
   } else {
    gs.error("Unable to load goal node {0} ({1})", node.getValue("name"), node.getValue("sys_id"));
   }
  }
 } else {
  gs.debug("No nodes to delete because no goals were found.");
 }
 
 deleteDelayedDeletes(delayed_deletes);
 
 if (nodes) {
  nodes.query();
  gs.debug("There are {0} nodes left for this Topic after delete.", nodes.getRowCount());
 }
 
 
 function writeDelete(realRecord) {
  var type = realRecord.getRecordClassName();
  var id = realRecord.getUniqueValue();
  var name = realRecord.getDisplayValue();
  var name_field = realRecord.getDisplayName();
  
  var tempRecord = new GlideRecord(type);
  tempRecord.setValue(name_field, name);
  tempRecord.setNewGuidValue(id);
  tempRecord.setWorkflow(false);
  tempRecord.insert();
  
  tempRecord.initialize();
  tempRecord.get(id);
  tempRecord.deleteRecord();
 }
 
 function deleteDelayedDeletes(delayed_deletes) {
  gs.debug("Deleting delayed deletes {0}", global.JSON.stringify(delayed_deletes));
  for (var i=0; i<delayed_deletes.length; i++) {
   var recordObj = delayed_deletes[i];
   
   var record = new GlideRecord(recordObj.type);
   record.newRecord();
   record.setValue(recordObj.name_field, recordObj.name);
   if (recordObj.hasOwnProperty("condition"))
    record.setValue("condition", recordObj.condition);
   
   record.setNewGuidValue(recordObj.sys_id);
   record.setWorkflow(false);
   record.insert();
   
   record.initialize();
   record.get(recordObj.sys_id);
   record.deleteRecord();
  }
 }
 
 function cacheForDelete(record) {
  var obj = {
   type : record.getRecordClassName(),
   sys_id : record.getUniqueValue(),
   name : record.getDisplayValue(),
   name_field : record.getDisplayName()
  };
  
  if (record.isValidField("condition"))
   obj.condition = record.getValue("condition");
  
  return obj;
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>36aca89983701210c6695855eeaad393</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Cascade-delete Nodes</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_36aca89983701210c6695855eeaad393</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:29</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=36aca89983701210c6695855eeaad393"/>
</record_update>
