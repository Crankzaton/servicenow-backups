<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>88c2b79377e8b1100afba4aa8e5a99d8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.ExplicitEntitlementBuilder&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ExplicitEntitlementBuilder&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExplicitEntitlementBuilder = Class.create();
ExplicitEntitlementBuilder.prototype = {
    initialize: function() {
        this.arrayUtil = new global.ArrayUtil();
        this.INSTALLATION_STATUS = {
            0: false,
            1: true
        };
    },

    getExplicitEntitlements: function(explicitEntitlement, entitlementModelName) {
        var explicitEntitlementsMap = {};
        if (global.JSUtil.nil(explicitEntitlement) || global.JSUtil.isEmpty(explicitEntitlement) || global.JSUtil.nil(entitlementModelName))
            return explicitEntitlementsMap;

        if (this.arrayUtil.contains(LicensingEngineConstants.SUBSCRIPTION_TYPE_MODEL_NAMES, entitlementModelName))
            explicitEntitlementsMap = this.getExplicitEntitlementsFromSubscription(explicitEntitlement);

        return explicitEntitlementsMap;
    },

    /**
     * retrieves explicit entitlement details from transformed subscription product data
     */
    getExplicitEntitlementsFromSubscription: function(explicitEntitlement) {
        let explicitEntitlementsMap = {};
        if (global.JSUtil.nil(explicitEntitlement) || global.JSUtil.isEmpty(explicitEntitlement))
            return explicitEntitlementsMap;

        explicitEntitlement = this._extractChildFamily(explicitEntitlement);

        for (var i = 0; i &lt; explicitEntitlement.length; i++) {
            const explicitEntitlementFamilyObj = explicitEntitlement[i];
            const key = explicitEntitlementFamilyObj[LicensingEngineDBConstants.UNIQUE_KEY];

            if (global.JSUtil.nil(key))
                continue;

            const product_code = explicitEntitlementFamilyObj[LicensingEngineDBConstants.PRODUCT_CODE];
			const installable = this._extractInstallableState(explicitEntitlementFamilyObj[LicensingEngineDBConstants.INSTALLABLE]);
            const roleTypes = explicitEntitlementFamilyObj[LicensingEngineDBConstants.ROLE_TYPE];
            const entitled_role_types = this._getRoleTypeList(roleTypes, LicensingEngineConstants.LICENSED);
            const unrestricted_role_types = this._getRoleTypeList(roleTypes, LicensingEngineConstants.UNRESTRICTED);

            explicitEntitlementsMap[key] = {
                [LicensingEngineDBConstants.PRODUCT_CODE]: product_code,
                [LicensingEngineDBConstants.ENTITLED_ROLE_TYPES]: entitled_role_types,
                [LicensingEngineDBConstants.UNRESTRICTED_ROLE_TYPES]: unrestricted_role_types,
                [LicensingEngineDBConstants.INSTALLABLE]: installable
            };
        }

        return explicitEntitlementsMap;
    },

    /*
     * extract the child family details and create a flattened array.
     * currently expecting to have nesting upto 2 level.
     * this can be enhanced to support n-tier parent-child hierarchy in the future.
     */
    _extractChildFamily: function(data, result = []) {
        data.forEach(item =&gt; {
            if (item[LicensingEngineDBConstants.CHILD])
                this._extractChildFamily(item[LicensingEngineDBConstants.CHILD], result);

            result.push(item);
        });
        return result;
    },

    _getRoleTypeList: function(roleTypes, expectedRoleCategory) {
        if (global.JSUtil.nil(roleTypes) || global.JSUtil.nil(expectedRoleCategory))
            return [];

        let roleTypeList = [];
        roleTypes.forEach(roleType =&gt; {
            Object.entries(roleType).forEach(([key, value]) =&gt; {
                if (value.toLowerCase() == expectedRoleCategory.toLowerCase() &amp;&amp; roleTypeList.indexOf(key) &lt; 0)
                    roleTypeList.push(key);

            });
        });
        return roleTypeList;
    },

    _extractInstallableState: function(installableString) {
        let install = "";
        try {
            //we are expecting this in json.stringify format from transformer
            install = JSON.parse(installableString);
        } catch (error) {}

        return this.getInstallableStatus(this.INSTALLATION_STATUS[install]);
    },
    /**
     * default value for installable is true (can install)
     * Truth Table
     * -----------------------------------
     * 0                        =   false
     * 1                        =   true
     * false                    =   false
     * true                     =   true
     * undefined                =   true
     * -----------------------------------
     * true         undefined   =   true
     * undefined    true        =   true
     * false        undefined   =   true
     * undefined    false       =   true
     * undefined    undefined   =   true
     * -----------------------------------
     * true         true        =   true
     * true         false       =   true
     * false        true        =   true
     * false        false       =   false
     *
     * @param {array} a list of arguments each representing installation status
     *
     * @returns {boolean} installation status calculated based on the above truth table
     */
    getInstallableStatus: function() {
        if (!arguments.length)
            return false;

        let installable = false;
        for (let i = 0; i &lt; arguments.length; i++) {
            if (global.JSUtil.nil(arguments[i]) || global.JSUtil.toBoolean(arguments[i])) {
                installable = true;
                break;
            }
        }

        return installable;
    },
    /**
     * Maintain a list of unique role types
     * @param {array&lt;array&gt;} a list of arguments each representing a list of role types
     *
     * @returns {array} unique list og consolidated role types
     */
    getUniqueRoleTypes: function() {
        if (!arguments.length)
            return [];

        let roleTypes = [];
        for (let i = 0; i &lt; arguments.length; i++) {
            if (global.JSUtil.notNil(arguments[i]) &amp;&amp; !global.JSUtil.isEmpty(arguments[i]))
                roleTypes = this.arrayUtil.union(roleTypes, arguments[i]);

        }

        return roleTypes;
    },

    type: 'ExplicitEntitlementBuilder'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-08-15 00:48:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;88c2b79377e8b1100afba4aa8e5a99d8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;22&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExplicitEntitlementBuilder&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_88c2b79377e8b1100afba4aa8e5a99d8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-21 23:02:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:56</sys_created_on>
        <sys_id>d0787c1183341210c6695855eeaad3b2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExplicitEntitlementBuilder</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d0787c1183341210c6695855eeaad3b2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:56</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
