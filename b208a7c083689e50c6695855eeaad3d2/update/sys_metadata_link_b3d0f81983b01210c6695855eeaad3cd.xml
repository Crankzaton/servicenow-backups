<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>205ef03e872a21100c92bb38dabb35d5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_collab.CollaborateDropdownOptionsNotifyCallSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CollaborateDropdownOptionsNotifyCallSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CollaborateDropdownOptionsNotifyCallSNC = Class.create();
CollaborateDropdownOptionsNotifyCallSNC.prototype = {
    initialize: function() {
        this.notifyUtil = new global.NotifyUtil();
        this.notifyUXFConferenceUtil = new sn_uib_notify.NotifyUXFConferenceUtil();
        this.NOTIFY_NUMBER = "notify_number";
        this.OWNER = "owner";
    },
    _getSupportedServiceProviders: function() {
        return {
            "Microsoft Teams": {
                id: 'start-ms-teams-meeting',
                label: gs.getMessage('Start MS Teams meeting'),
                icon: 'microsoft-teams-fill',
                route: 'notify-conference-dialog-snc',
                serviceProvider: 'Microsoft Teams',
                sectionId: 'call',
                sectionLabel: gs.getMessage('Call')
            },
            "Zoom": {
                id: 'start-zoom-meeting',
                label: gs.getMessage('Start Zoom meeting'),
                icon: 'zoom-outline',
                route: 'notify-conference-dialog-snc',
                serviceProvider: 'Zoom',
                sectionId: 'call',
                sectionLabel: gs.getMessage('Call')
            },
            "TwilioDirect": {
                id: 'start-twiliodirect-meeting',
                label: gs.getMessage('Start Twilio meeting'),
                icon: 'twilio-outline',
                route: 'notify-conference-dialog-snc',
                serviceProvider: 'Telephony',
                sectionId: 'call',
                sectionLabel: gs.getMessage('Call')
            },
            "Cisco Webex": {
                id: 'start-webex-meeting',
                label: gs.getMessage('Start Webex meeting'),
                icon: 'user-group-outline',
                route: 'notify-conference-dialog-snc',
                serviceProvider: 'Cisco Webex',
                sectionId: 'call',
                sectionLabel: gs.getMessage('Call')
            }
        };
    },
    getDropDownChoices: function(table, sysID) {
        if (!this.notifyUXFConferenceUtil.canViewCalls(table, sysID)) {
            return {};
        }

        var sourceGr = new GlideRecord(table);
        if (!sourceGr.get(sysID) || !this.notifyUtil.isConferenceLeader(sourceGr))
            return {};

        var telephonyDriver = {};
        var telephonyProvider = {};
        var configuredServiceProviders = [];
        var telephonyPayload = {};
        var defaultTelephonyPayload = {};
        var sectionPayload = {
            sectionId: 'call',
            sectionLabel: gs.getMessage('Call')
        };
        var notifyNumbersAndProviders = this.notifyUtil.getOrderedListOfNotifyNumbersAndProviders(table, sysID);
        var orderedNumbersAndProviders = notifyNumbersAndProviders.orderedNumbersAndProviders;
        var supportedServiceProviders = this._getSupportedServiceProviders();
        var self = this;

        orderedNumbersAndProviders.forEach(function(provider) {
            if (supportedServiceProviders[provider.name]) {
                configuredServiceProviders.push(supportedServiceProviders[provider.name]);
            } else if (provider.type === 'number') {
                telephonyDriver = self.notifyUtil.getTelephonyDriverFromNotifyNumber(provider.number);
                var telephonyDriverName = telephonyDriver.getName();
                if (supportedServiceProviders[telephonyDriverName]) {
                    telephonyPayload = supportedServiceProviders[telephonyDriverName];
                    telephonyPayload.number = provider.number;
                    if (provider.defaultFlag) {
                        telephonyPayload.name = telephonyDriverName;
                        defaultTelephonyPayload = JSON.parse(JSON.stringify(telephonyPayload));
                    }
                } else {
                    telephonyPayload.id = "start-" + telephonyDriverName.toLowerCase() + "-meeting";
                    telephonyPayload.label = gs.getMessage("Start {0} meeting", telephonyDriverName);
                    telephonyPayload.number = provider.number;
                    telephonyPayload.icon = 'phone-outline';
                    telephonyPayload.route = 'notify-conference-dialog-snc';
                    telephonyPayload.serviceProvider = 'Telephony';
                    telephonyPayload.sectionId = 'call';
                    telephonyPayload.sectionLabel = gs.getMessage('Call');
                }
                telephonyProvider[telephonyDriverName] = JSON.parse(JSON.stringify(telephonyPayload));
            }
        });

        if (defaultTelephonyPayload.id) {
            telephonyProvider[defaultTelephonyPayload.name] = JSON.parse(JSON.stringify(defaultTelephonyPayload));
        }

        for (var key in telephonyProvider) {
            configuredServiceProviders.push(telephonyProvider[key]);
        }

        configuredServiceProviders.sort(function(a, b) {
            if (a.serviceProvider &gt; b.serviceProvider) {
                return 1;
            }
            return -1;
        });
        sectionPayload.children = configuredServiceProviders;
        if (configuredServiceProviders.length == 0) {
            return {};
        }
        return sectionPayload;
    },
    type: 'CollaborateDropdownOptionsNotifyCallSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-05-05 12:42:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;205ef03e872a21100c92bb38dabb35d5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;55&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CollaborateDropdownOptionsNotifyCallSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Collaboration Services for Service Operations Workspace" source="sn_sow_collab"&gt;fa27a0dd53423010bf68ddeeff7b12ac&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Collaboration Services for Service Operations Workspace"&gt;fa27a0dd53423010bf68ddeeff7b12ac&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_205ef03e872a21100c92bb38dabb35d5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-03 14:00:19&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:51</sys_created_on>
        <sys_id>b3d0f81983b01210c6695855eeaad3cd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CollaborateDropdownOptionsNotifyCallSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b3d0f81983b01210c6695855eeaad3cd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
