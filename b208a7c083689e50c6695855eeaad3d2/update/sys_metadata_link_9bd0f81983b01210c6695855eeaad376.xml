<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>201afbb00ba20300acc30e7363673abd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ResourcePlanSchedule&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ResourcePlanSchedule&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ResourcePlanSchedule = Class.create();
ResourcePlanSchedule.prototype = {
    initialize: function(gr, startDate, endDate, hours, usersCapacityDetails, inputType, inputPercentValue) { //input type and inputValue are sent from resourcePlanExtension flow when an operational resource plan is extended
		this.gr = gr;
		if(JSUtil.notNil(startDate) &amp;&amp; JSUtil.notNil(hours)) {
			this._setStartDate(startDate);
			this._setEndDate(endDate);
			this._setHours(hours);
		}
		this._populateStartAndEndDates();
		this._setUsersCapacityDetails(usersCapacityDetails);
		this.inputType = inputType;
		this.inputPercentValue = inputPercentValue;
		this._init();
    },
	_setStartDate : function(startDate) {
		this.startDate = new GlideDate();
		this.startDate.setValue(startDate);
	},
	
	_setEndDate : function(endDate) {
		this.endDate = new GlideDate();
		this.endDate.setValue(endDate);
	},
	
	_populateStartAndEndDates : function() {
		if(typeof this.startDate == 'undefined') {
			var rpStartDate = this.gr.getValue('start_date');
			this.startDate = new GlideDate();
			this.startDate.setValue(rpStartDate);
		}
		if(typeof this.endDate == 'undefined') {
			var rpEndDate = this.gr.getValue('end_date');
			this.endDate = new GlideDate();
			this.endDate.setValue(rpEndDate);
		}
	},
	
	_setHours : function(hours) {
		this.plannedHours = hours;
	},
	
	_populateHours : function() {
		if(typeof this.plannedHours == 'undefined')
			this.plannedHours = ResourceManagementUtils.roundOffBasedOnCalendarEventProperty(this.gr.planned_hours);
	},
	
	_setUsersCapacityDetails: function(usersCapacityDetails) {
		if(this.gr.getValue('plan_type') === 'operational_work') {
			if(typeof usersCapacityDetails != 'undefined' &amp;&amp; Object.keys(usersCapacityDetails).length != 0)
				this.usersCapacityDetails = usersCapacityDetails;
			else {
				var capacityObj = ResourceManagementUtils.getUsersCapacityForOperationalPlan(this.gr, this.startDate, this.endDate);
				if(this.gr.getValue('request_type') == 'percent_capacity')
 					ResourceManagementUtils.fetchUserBasedPercentageCapacity(capacityObj.capacityDetails,this.gr.getValue('percent_capacity'));
				this.usersCapacityDetails = capacityObj.capacityDetails;
			}	
		}
	},
	
	_init: function() {
		var rmAggregator = new RMHoursAggregator();
		this.scheduledHours = [];
		this._populateHours();
		if((this.gr.getValue('request_type') === 'percent_capacity' &amp;&amp; JSUtil.nil(this.inputType)) || (this.inputType == 'percent_capacity')) {
			rmAggregator.setUsersCapacityDetails(this.usersCapacityDetails);
		}
		this.allocationDateRanges = ResourceManagementUtils.findDateRanges(this.gr.distribution, this.startDate, this.endDate);
		if ( this.gr.resource_type == 'user') 
			this.scheduledHours = ResourceManagementUtils.getScheduledHoursForUser(this.gr.getValue('user_resource'), this.startDate, this.endDate);
		else
			this.scheduledHours = ResourceManagementUtils.getScheduledHoursAsPerRelevantSchedule(this.gr, this.startDate.getValue(), this.endDate.getValue());
		this.workingDaysByDateRange = rmAggregator.calculateWorkingDaysByDateRange(this.allocationDateRanges, this.scheduledHours);
		this.hoursToAllocateByDateRange = rmAggregator.calculateHoursToAllocateByDateRange(this.workingDaysByDateRange, this.plannedHours, this.gr, this.inputType, this.inputPercentValue);
		this.scheduleInDateRange = rmAggregator.findWorkingDaysInDateRange(this.allocationDateRanges, this.scheduledHours);
		this.workingDaysCount = rmAggregator.findWorkingDaysCountInDateRange(this.allocationDateRanges, this.scheduledHours);
	},
	
	getAllocationDateRanges: function() {
		return this.allocationDateRanges;
	},
	
	getScheduledHours: function() {
		return this.scheduledHours;
	},
	
	getWorkingDaysByDateRange: function() {
		return this.workingDaysByDateRange;
	},
	
	getHoursToAllocatedByDateRange: function() {
		return this.hoursToAllocateByDateRange;
	},
	
	getWorkingScheduleByDate: function() {
		return this.scheduleInDateRange;
	},
	
	getWorkingDaysCount: function() {
		return this.workingDaysCount;
	},

    type: 'ResourcePlanSchedule'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-11-18 10:59:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;201afbb00ba20300acc30e7363673abd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;70&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ResourcePlanSchedule&lt;/sys_name&gt;
        &lt;sys_package display_value="Resource Management" source="com.snc.resource_management"&gt;7200da2b47e64210cd4e1ce4316d438e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_201afbb00ba20300acc30e7363673abd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-22 04:14:57&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:50</sys_created_on>
        <sys_id>9bd0f81983b01210c6695855eeaad376</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ResourcePlanSchedule</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9bd0f81983b01210c6695855eeaad376</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:50</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
