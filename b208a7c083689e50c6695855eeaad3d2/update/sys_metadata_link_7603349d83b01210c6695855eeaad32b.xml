<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5c6e94b953943110ad7cddeeff7b12f4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Populate core_rsv_opened_by - parent column, for upgrade customers from opened_by(deprecated) child column&lt;/description&gt;
        &lt;name&gt;Populate core_rsv_opened_by for upgrade&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[//First get the total count to enable chunking
var rsvAggrGr = new GlideAggregate('sn_wsd_rsv_reservation');
rsvAggrGr.addAggregate('COUNT');
rsvAggrGr.query();
rsvAggrGr.next();
gs.info('Total Reservations :: ' + rsvAggrGr.getAggregate('COUNT'));


//Calculate window(chunk size) from the total Count
var totalCount = rsvAggrGr.getAggregate('COUNT');
var window = Math.ceil(totalCount/5);
var created_times = [];

var index = 0;
var count = 0;
var rsvGr = new GlideRecord('sn_wsd_rsv_reservation');
rsvGr.orderBy('sys_created_on');//order by sys_created_on to get the window of time to use
rsvGr.query();
while(rsvGr.next()){
	if(index * window == count){//Push the start_time for the beginning of each chunk to use as the start, end window
		created_times.push(rsvGr.getValue('sys_created_on'));
		index++;
	}
	count++;
}
gs.info('Created Times :: ' + created_times);

for(var i = 1; i &lt;= 5; i++){
	var start = created_times[i - 1];
	var end = created_times[i] ? created_times[i] : null;
	var inputs = {
        start: start,
        end: end
    };
	//Trigger flows with the start &amp; end to update reservations between sys_created_on &gt;= start &amp;&amp; sys_created_on &lt; end
    sn_fd.FlowAPI.getRunner().subflow('sn_wsd_rsv.populate_core_opened_by_for_upgrade').inBackground().withInputs(inputs).run();
}

]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-07-28 07:22:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5c6e94b953943110ad7cddeeff7b12f4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Populate core_rsv_opened_by for upgrade&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;e9b477e9c3161010cc7060bf4b40dded&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;e9b477e9c3161010cc7060bf4b40dded&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_5c6e94b953943110ad7cddeeff7b12f4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-28 08:24:39&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:20</sys_created_on>
        <sys_id>7603349d83b01210c6695855eeaad32b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Populate core_rsv_opened_by for upgrade</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7603349d83b01210c6695855eeaad32b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:20</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
