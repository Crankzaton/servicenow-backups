<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1a88fc67531330107234ddeeff7b125c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFScriptingEvaluator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Evaluation script for 'Scripting' Evaluation type&lt;/description&gt;
        &lt;name&gt;RFScriptingEvaluator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFScriptingEvaluator = Class.create();
RFScriptingEvaluator.prototype = Object.extendsObject(sn_rf.RFEvaluatorSNC, {
    category: 'rf_evaluation_script', // DO NOT REMOVE THIS LINE!

    getEvaluationOutputSchema: function(param) {
        var rfLogger = new RFLogger('RFScriptingEvaluator - getEvaluationOutputSchema');
        var scriptIncludeSysId = param.inputs.script_include;
        var scriptGr = new GlideRecord(RFConstants.tables.SYS_SCRIPT_INCLUDE);
        if (scriptGr.get(scriptIncludeSysId)) {
            var apiName = scriptGr.getValue(RFConstants.fields.SYS_SCRIPT_INCLUDE_API_NAME);
            var funcName = RFConstants.evaluatorFunction.GET_EVALUATION_OUTPUT_SCHEMA;

            var script = RFConstants.evaluatorVariable.RESULT +
                ' = new ' + apiName + '().' + funcName + '();';

            var inputs = {};
            var res = RFUtils.evaluateScript(script, inputs, RFConstants.evaluatorVariable.RESULT);
            if (res.status == RFConstants.EXCEPTION) {
                var errorMessage = res.error.message;
                rfLogger.logError('Error executing script ' + script + '. Error: ' + errorMessage);
                return {
                    'status': RFConstants.ERROR,
                    'errorCode': 40001,
                    'errorMessage': errorMessage
                };
            }
            return res;
        }
        var errorDetails = new RFExceptionManager('INVALID_SCRIPT_INCLUDE');
        rfLogger.logError('Script include ' + scriptIncludeSysId + ' is invalid');
        return {
            'status': RFConstants.ERROR,
            'errorCode': errorDetails.getCode(),
            'errorMessage': errorDetails.getMessage()
        };
    },

    getEvaluationOutputs: function(param) {
        var rfLogger = new RFLogger('RFScriptingEvaluator - getEvaluationOutputs');
        var scriptIncludeSysId = param.inputs.script_include;
        var scriptGr = new GlideRecord(RFConstants.tables.SYS_SCRIPT_INCLUDE);
        if (scriptGr.get(scriptIncludeSysId)) {
            var apiName = scriptGr.getValue(RFConstants.fields.SYS_SCRIPT_INCLUDE_API_NAME);
            var funcName = RFConstants.evaluatorFunction.GET_EVALUATION_OUTPUTS;

            var script = RFConstants.evaluatorVariable.RESULT +
                ' = new ' + apiName + '().' + funcName +
                '(' + RFConstants.evaluatorVariable.PARAM + ');';

            var inputs = {};
            var trimmedParam = {
                contextRecord: param.contextRecord
            };
            inputs[RFConstants.evaluatorVariable.PARAM] = trimmedParam;
            var res = RFUtils.evaluateScript(script, inputs, RFConstants.evaluatorVariable.RESULT);
            if (res.status == RFConstants.EXCEPTION) {
                var errorMessage = res.error.message;
                rfLogger.logError('Error executing script ' + script + '. Error: ' + errorMessage);
                return {
                    'status': RFConstants.ERROR,
                    'errorCode': 40001,
                    'errorMessage': errorMessage
                };
            }
            return res;
        }
        var errorDetails = new RFExceptionManager('INVALID_SCRIPT_INCLUDE');
        rfLogger.logError('Script include ' + scriptIncludeSysId + ' is invalid');
        return {
            'status': RFConstants.ERROR,
            'errorCode': errorDetails.getCode(),
            'errorMessage': errorDetails.getMessage()
        };
    },

    type: 'RFScriptingEvaluator'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-25 14:02:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1a88fc67531330107234ddeeff7b125c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFScriptingEvaluator&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1a88fc67531330107234ddeeff7b125c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-03 19:15:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:11</sys_created_on>
        <sys_id>02b0701983b01210c6695855eeaad3fe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFScriptingEvaluator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_02b0701983b01210c6695855eeaad3fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
