<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2912e6820b842300ea4446c863673a98</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ExpenseLineBreakdown&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;update Expense Line Breakdown&lt;/description&gt;
        &lt;name&gt;ExpenseLineBreakdown&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExpenseLineBreakdown = Class.create();
ExpenseLineBreakdown.prototype = {
	initialize: function(task,timecard,expenseline) {
		this.taskID = task;
		this.timecard = timecard;
		this.expenseLine = expenseline;
		this.LABOR_RATE_CARD = "fm_labor_rate_card";
	},
	
	createExpenseDetailsForTimeCard:function(startDate,endDate,dailyRates){
		
		var totalExpense = 0,dailyExpense =0;
		var currentDate = new GlideDate();
		currentDate.setValue(startDate);
		var endDateTime = new GlideDate();
		endDateTime.setValue(endDate);
		var dayNames = ["", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];
		var rateCard,rateType;
		var rateInfo,userRate;
		
		while (currentDate.onOrBefore(endDateTime)) {
			rateInfo = dailyRates.getRateForDay(currentDate.getValue());
			if(!rateCard){
				rateCard = rateInfo.rate_card;
			}
			if(!rateType){
				if(rateInfo.rate_type)
					rateType = rateInfo.rate_type;
				else if(rateInfo.rate_line){
					var rateLine = new RateLine(rateInfo.rate_line);
					rateType = rateLine.rateType();
				}
				
			}
			userRate = rateInfo.rate;
			var currentDay = dayNames[currentDate.getDayOfWeekUTC()];
			var currentHours = parseFloat(this.timecard.getValue(currentDay));
			
			dailyExpense = currentHours * userRate;
			if(dailyExpense != 0){
				this._createExpenseDaily(dailyExpense,currentDate,rateInfo.rate_line);
				totalExpense += dailyExpense;
			}
			currentDate.addDaysUTC(1);
		}
		return {
			'expense': totalExpense,
			'rateCard': rateCard,
			'rateType': rateType
		};
	},
	_createExpenseDaily:function(rate,date,rateLine, recalledExpenseLine){
		var dailies = new GlideRecord("fm_expense_line_breakdown");
		dailies.initialize();
		dailies.setValue("amount",0);
		if (recalledExpenseLine){
			dailies.setValue("expense_line",recalledExpenseLine);
		}
		else{
			dailies.setValue("expense_line",this.expenseLine);
		}
		dailies.setValue("date",date.getDate());
		if(rateLine)
			dailies.setValue("rate_line",rateLine);
		dailies.setWorkflow(false);
		dailies.insert();
		dailies.setValue("amount",dailies.amount.getReferenceCurrencyCode()+";"+rate);
		dailies.update();
	},
	recallExpenseDetailForTimeCard: function(recalledExpenseLine) {
		var dailies = new GlideRecord("fm_expense_line_breakdown");
		dailies.addQuery("expense_line", this.expenseLine);
		dailies.query();
		while (dailies.next()) {
			this._createExpenseDaily(dailies.amount.getCurrencyValue()*(-1), dailies.date.getGlideObject(), dailies.getValue('rate_line'), recalledExpenseLine);
		}
	},	
	
	type: 'ExpenseLineBreakdown'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-08-22 11:32:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2912e6820b842300ea4446c863673a98&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;99&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExpenseLineBreakdown&lt;/sys_name&gt;
        &lt;sys_package display_value="Cost Management" source="com.snc.cost_management"&gt;bfef86e747e64210cd4e1ce4316d4343&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2912e6820b842300ea4446c863673a98&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-26 06:44:27&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:47</sys_created_on>
        <sys_id>a9117c5983b01210c6695855eeaad333</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExpenseLineBreakdown</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a9117c5983b01210c6695855eeaad333</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
