<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>72251e710beb011082422fa5c5673ac7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PDActivityAppObjectRepository&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PDActivityAppObjectRepository&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PDActivityAppObjectRepository = Class.create();
PDActivityAppObjectRepository.prototype = {
    initialize: function(tableName) {
        this.table = tableName || PDConstants.TABLES.PD_DIAGRAM_ACTIVITY_APP_OBJECT;
    },

    getByActivities: function(activitySysIds) {
        if (!Array.isArray(activitySysIds)) return null;

        var gr = new GlideRecord(this.table);
        gr.addQuery(PDConstants.FIELDS.ACTIVITY, 'IN', activitySysIds.join(','));
        gr.query();

        var result = [];
        while (gr.next()) {
            result.push(PDUtils.grToObject(gr, this.RECORD_FIELDS));
        }
        return result;
    },
	
	insertActivityAppObject: function(activityAppObject) {
		var activityId = (activityAppObject || {}).activityId;
		var targetTable = (activityAppObject || {}).targetTable;
		var targetRecord = (activityAppObject || {}).targetRecord;
		var sysId = (activityAppObject || {}).sysId;
		if (!activityId || !targetTable || !targetRecord)
			throw (gs.getMessage(
				'Missing one or more of required fields: activityId, targetTable, targetRecord'));
		
		var FIELDS = PDConstants.FIELDS;
		var gr = new GlideRecord(this.table);
		gr.setValue(FIELDS.ACTIVITY, activityId);
		gr.setValue(FIELDS.TARGET_TABLE, targetTable);
		gr.setValue(FIELDS.TARGET_RECORD, targetRecord);
		if (sysId)
			gr.setNewGuidValue(sysId);
		if (!gr.insert())
			throw (gs.getMessage('Unable to insert record in {0}', this.table));
		return PDUtils.grToObject(gr, this.RECORD_FIELDS);
	},
	
	deleteActivityAppObjects: function(activityAppObjects) {
		var noAppObjectsErrMsg = gs.getMessage('No activity app objects to delete');
		if (!Array.isArray(activityAppObjects) || !activityAppObjects.length)
			throw (noAppObjectsErrMsg);
		var activityId;
		var targetRecords = [];
		for (var i = 0; i &lt; activityAppObjects.length; i++) {
			var aao = activityAppObjects[i];
			if (!activityId)
				activityId = aao.activityId;
			if (aao.activityId !== activityId)
				throw (
					gs.getMessage('App objects for deletion must belong to the same Activity'));
			if (aao.targetRecord)
				targetRecords.push(aao.targetRecord);
		}		
		if (!targetRecords.length)
			throw (noAppObjectsErrMsg);

		var FIELDS = PDConstants.FIELDS;
		var m2mIds = [];
		var grM2M = new GlideRecord(this.table);
		grM2M.addQuery(FIELDS.ACTIVITY, activityId);
		grM2M.addQuery(FIELDS.TARGET_RECORD, 'IN', targetRecords.join(','));
		grM2M.query();
		while(grM2M.next())
			m2mIds.push(grM2M.getUniqueValue());
		grM2M = new GlideRecord(this.table);
		grM2M.addQuery(FIELDS.SYS_ID, 'IN', m2mIds.join(','));
		grM2M.query();
		grM2M.deleteMultiple();
	},

    RECORD_FIELDS: [{
            name: PDConstants.FIELDS.SYS_ID,
			hasDisplayValue:true
        },
        {
            name: PDConstants.FIELDS.ACTIVITY,
			hasDisplayValue:true
        },
        {
            name: PDConstants.FIELDS.TARGET_TABLE,
			hasDisplayValue:true
        },
        {
            name: PDConstants.FIELDS.TARGET_RECORD,
			hasDisplayValue:true
        }
    ],

    type: 'PDActivityAppObjectRepository'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-19 16:45:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;72251e710beb011082422fa5c5673ac7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PDActivityAppObjectRepository&lt;/sys_name&gt;
        &lt;sys_package display_value="Process Automation Designer Core - Model" source="com.glide.pad.core.model"&gt;0ae817db47220210cd4e1ce4316d431f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_72251e710beb011082422fa5c5673ac7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-02-28 00:48:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:38</sys_created_on>
        <sys_id>8c07f45d83f01210c6695855eeaad3f3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PDActivityAppObjectRepository</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8c07f45d83f01210c6695855eeaad3f3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:38</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
