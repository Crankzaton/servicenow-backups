<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>136e8d7a8767d5105045b9d8dabb3519</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_appclient.AppManagerFiltersUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AppManagerFiltersUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AppManagerFiltersUtil = Class.create();
AppManagerFiltersUtil.prototype = {
    initialize: function() {},
    getFilters: function() {
        var result = {
            filters: []
        };
        var filterList = [{
                name: gs.getMessage('Listings'),
                value: 'listings',
                data: [{
                        label: gs.getMessage('Applications'),
                        value: 'applications',
                    },
                    {
                        label: gs.getMessage('Plugins'),
                        value: 'plugins',
                    },
                    {
                        label: gs.getMessage('Free Trials'),
                        value: 'free_to_try',
                    },
                    {
                        label: gs.getMessage('Products'),
                        value: 'products',
                    },
                ],
            },
            {
                name: gs.getMessage('Offered By'),
                value: 'offeredBy',
                data: [{
                        label: gs.getMessage('Partners'),
                        value: 'partners',
                    },
                    {
                        label: gs.getMessage('ServiceNow'),
                        value: 'servicenow',
                    },
                ],
            },
        ];

        var products = {};
        var options = [];

        this.getLOBs(products, options);
        this.getProductFamily(products, options);

        var productFamilyFacet = {
            name: gs.getMessage('Product Family'),
            value: 'productFamily',
            data: options,
        };
        result.filters = filterList;
        result.filters.push(productFamilyFacet);
        try {
            var adoptionBlueprintFacet = this.getAdoptionBlueprint();
            result.filters.push(adoptionBlueprintFacet);
        } catch (error) {
            gs.debug("error while fetching adoption blueprint");
            return result;
        }
        return result;
    },
    getLOBs: function(products, options) {
        var lobCategories = new global.PluginsData().getLOBCategories();
        for (var i = 0; i &lt; lobCategories.length; i++) {
            var option = {
                label: lobCategories[i].lob_name,
                value: lobCategories[i].lob_name
            };
            if (!(lobCategories[i].lob_name in products)) {
                options.push(option);
                products[lobCategories[i].lob_name] = lobCategories[i].lob_name;
            }
        }
    },
    getProductFamily: function(products, options) {
        var gr = new GlideRecord('sn_appclient_product');
        gr.query();

        while (gr.next()) {
            var productFamily = gr.getValue('family');
            if (!(productFamily in products)) {
                var productOption = {
                    label: productFamily,
                    value: productFamily
                };
                options.push(productOption);
                products[productFamily] = productFamily;
            }
        }
    },
    getAdoptionBlueprint: function() {
        var options = [];
        var gr = new GlideRecord('sn_admin_center_business_objective');
        gr.query();
        while (gr.next()) {
            var adoptionBlueprintName = gr.getValue('name');
            var adoptionBlueprintSysId = gr.getValue('sys_id');
            var adoptionBlueprintOption = {
                label: adoptionBlueprintName,
                value: adoptionBlueprintSysId
            };
            options.push(adoptionBlueprintOption);
        }
        var adoptionBlueprintFacet = {
            name: gs.getMessage('Adoption Blueprint'),
            value: 'adoptionBlueprint',
            data: options,
        };
        return adoptionBlueprintFacet;
    },
    getFilteredIdsWithAdoptionBluePrint: function(adoptionBluePrintQuery) {
        var appNames = [];
        var solutionsGr = new GlideRecord('sn_admin_center_solution');
        solutionsGr.addEncodedQuery(adoptionBluePrintQuery);
        solutionsGr.query();
        while (solutionsGr.next()) {
            var appName = this.getApplicationName(this.getApplicationGlideRecord(solutionsGr.application));
            if (appName != null)
                appNames.push(appName);
        }
        return appNames;
    },
    getApplicationName: function(application) {
        return application.application_type.toString() === 'application' ? application.name : null;
    },
    getPluginId: function(application) {
        return application.application_type.toString() === 'plugin' ? application.plugin_id : null;
    },
    getApplicationGlideRecord: function(applicationId) {
        if (!applicationId)
            return null;

        var applicationGr = new GlideRecord('sn_admin_center_application');
        if (!applicationGr.get(applicationId))
            return null;

        return applicationGr;
    },
    getFilteredPluginIdsWithAdoptionBluePrint: function(adoptionBluePrintQuery) {
        var pluginIDs = [];
        var solutionsGr = new GlideRecord('sn_admin_center_solution');
        solutionsGr.addEncodedQuery(adoptionBluePrintQuery);
        solutionsGr.query();
        while (solutionsGr.next()) {
            var pluginID = this.getPluginId(this.getApplicationGlideRecord(solutionsGr.application));
            if (pluginID != null)
                pluginIDs.push(pluginID);
        }
        return pluginIDs;
    },
    type: 'AppManagerFiltersUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-12-07 10:22:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;136e8d7a8767d5105045b9d8dabb3519&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;79&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AppManagerFiltersUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Scoped App Client" source="sn_appclient"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Scoped App Client"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_136e8d7a8767d5105045b9d8dabb3519&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-21 19:09:22&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:32</sys_created_on>
        <sys_id>6c9034d583b01210c6695855eeaad3bb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AppManagerFiltersUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6c9034d583b01210c6695855eeaad3bb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:32</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
