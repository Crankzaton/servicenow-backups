<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a10a4f36770da1109c62f5f3cb5a99c1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UAAppFamilyDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO class to retrieve data related to ua_app_family table&lt;/description&gt;
        &lt;name&gt;UAAppFamilyDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UAAppFamilyDAO = Class.create();
UAAppFamilyDAO.prototype = {
    initialize: function() {
        this.logger = new LoggingUtil();
    },

    isLicenseCheckRequiredForApp: function(appId) {
        var appFamGR = new GlideRecord(LicensingEngineDBConstants.UA_APP_FAMILY);
        if (appFamGR.isValid() &amp;&amp; appFamGR.isValidField(LicensingEngineDBConstants.LICENSE_CHECK_REQUIRED) &amp;&amp;
            appFamGR.isValidField(LicensingEngineConstants.APP_ID)) {
            appFamGR.addQuery(LicensingEngineDBConstants.APP_ID, appId);
            appFamGR.query();
            if (appFamGR.next())
                return appFamGR.getValue(LicensingEngineDBConstants.LICENSE_CHECK_REQUIRED);

            if (this.logger.isEntitlementLoggingEnabled()) {
                const conditionsString = LicensingEngineDBConstants.APP_ID.concat(LicensingEngineConstants.COMMA).concat(appId);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.UA_APP_FAMILY_DAO, LicensingEngineDBConstants.UA_APP_FAMILY, conditionsString);
            }
        }
        if (this.logger.isEntitlementLoggingEnabled()) {
            this.logger.logCouldNotDetermine(LicensingEngineConstants.UA_APP_FAMILY_DAO, LicensingEngineConstants.IS_LICENSE_CHECK_REQUIRED_FOR_APP,
                LicensingEngineConstants.LICENSE_CHECK_REQUIRED_ATTRIBUTE + " appId : " + appId);
        }
        return null;
    },

    isLicenseCheckRequiredForFamily: function(familyId) {
        var appFamGR = new GlideRecord(LicensingEngineDBConstants.UA_APP_FAMILY);
        if (appFamGR.isValid() &amp;&amp; appFamGR.isValidField(LicensingEngineDBConstants.LICENSE_CHECK_REQUIRED) &amp;&amp;
            appFamGR.isValidField(LicensingEngineDBConstants.LINEAGE_ID)) {
            appFamGR.addQuery(LicensingEngineDBConstants.LINEAGE_ID, familyId);
            appFamGR.query();
            var found = false;
            while (appFamGR.next()) {
                found = true;
                var licenseCheckRequired = appFamGR.getValue(LicensingEngineDBConstants.LICENSE_CHECK_REQUIRED);
                if (LicensingEngineConstants.TRUE_ONE.equals(licenseCheckRequired) || LicensingEngineConstants.TRUE.equals(licenseCheckRequired)) {
                    return true;
                }
            }
            if (!found) {
                var conditionsString = LicensingEngineDBConstants.LINEAGE_ID.concat(LicensingEngineConstants.COMMA).concat(familyId);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.UA_APP_FAMILY_DAO, LicensingEngineDBConstants.UA_APP_FAMILY, conditionsString);
            }
            return false;
        }
        if (this.logger.isEntitlementLoggingEnabled()) {
            this.logger.logCouldNotDetermine(LicensingEngineConstants.UA_APP_FAMILY_DAO, LicensingEngineConstants.IS_LICENSE_CHECK_REQUIRED_FOR_FAMILY,
                LicensingEngineConstants.LICENSE_CHECK_REQUIRED_ATTRIBUTE + " familyId : " + familyId);
        }
        return false;
    },

    doesAppExist: function(appId) {
        var appFamGR = new GlideRecord(LicensingEngineDBConstants.UA_APP_FAMILY);
        if (appFamGR.isValid()) {
            appFamGR.addQuery(LicensingEngineDBConstants.APP_ID, appId);
            appFamGR.query();
            return appFamGR.hasNext();
        }
        return false;
    },

    doesFamExists: function(familyId) {
        var appFamGR = new GlideRecord(LicensingEngineDBConstants.UA_APP_FAMILY);
        if (appFamGR.isValid()) {
            appFamGR.addQuery(LicensingEngineDBConstants.LINEAGE_ID, familyId);
            appFamGR.query();
            return appFamGR.hasNext();
        }
        return false;
    },

    getAppToEntitlmentMap: function(appIdList, appEntitlementBOMap, appSubscriptionMap) {
        let licenseCheckAttr;
        let isLicenseCheckRequired = true;
        let entitlementBO = {};
        let ua_app_family_ids = [];
        try {
            let appFamGR = new GlideRecord(LicensingEngineDBConstants.UA_APP_FAMILY);
            appFamGR.addQuery(LicensingEngineDBConstants.APP_ID, LicensingEngineDBConstants.IN, appIdList);
            appFamGR.query();
            while (appFamGR.next()) {
                const appId = appFamGR.getValue(LicensingEngineDBConstants.APP_ID);
                ua_app_family_ids.push(appId);
                entitlementBO = appEntitlementBOMap[appId];
                // If there is no subscription attached to the app but record exist in ua_app_familly .
                if (entitlementBO === undefined) {
                    entitlementBO = Object.create(LicensingEngineConstants.entitlementBO);
                    appEntitlementBOMap[appId] = entitlementBO;
                }
                licenseCheckAttr = appFamGR.getValue(LicensingEngineDBConstants.LICENSE_CHECK_REQUIRED);
                isLicenseCheckRequired = LicensingEngineConstants.TRUE_ONE.equals(licenseCheckAttr) || LicensingEngineConstants.TRUE.equals(licenseCheckAttr);

                const isEntitled = !isLicenseCheckRequired ? true : !gs.nil(appSubscriptionMap[appId]);
                entitlementBO['isEntitled'] = isEntitled;
                entitlementBO['isPermitted'] = !new InstanceInfoUtil().isOpenInstance() ? isEntitled : true;
            }
            for (var appId in appEntitlementBOMap) {
                const logger = new LoggingUtil();
                if (ua_app_family_ids.indexOf(appId) == -1) {
                    var conditionsString = LicensingEngineDBConstants.APP_ID.concat(LicensingEngineConstants.COMMA).concat(appId);
                    logger.logRecordDoesNotExists(LicensingEngineConstants.UA_APP_FAMILY_DAO, LicensingEngineDBConstants.UA_APP_FAMILY, conditionsString);
                }
            }
        } catch (error) {
            this.logger.logError(LicensingEngineConstants.UA_APP_FAMILY_DAO, LicensingEngineConstants.GET_APP_ENTITLEMENT_MAP,
                error);
        }
        return appEntitlementBOMap;
    },

    getFamilyListOfApp: function(appId) {
        const familyIds = [];
        const appFamGR = new GlideRecord(LicensingEngineDBConstants.UA_APP_FAMILY);
        appFamGR.addQuery(LicensingEngineDBConstants.APP_ID, appId);
        appFamGR.query();
        // Handle the parent-child relationship of a family/
        while (appFamGR.next())
            familyIds.push(appFamGR.getValue(LicensingEngineDBConstants.LINEAGE_ID));
        return familyIds;

    },

    type: 'UAAppFamilyDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-20 08:54:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a10a4f36770da1109c62f5f3cb5a99c1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UAAppFamilyDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a10a4f36770da1109c62f5f3cb5a99c1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-17 16:53:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:23</sys_created_on>
        <sys_id>a5c8f09183341210c6695855eeaad3d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UAAppFamilyDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a5c8f09183341210c6695855eeaad3d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:23</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
