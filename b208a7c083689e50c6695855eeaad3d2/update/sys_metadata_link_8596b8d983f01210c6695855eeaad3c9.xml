<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4b764695c7023010408bc8d6f2c26051</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_pipeline.PipelineConfigChecks&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Some scripts that other scopes can run to check pipeline configuration&lt;/description&gt;
        &lt;name&gt;PipelineConfigChecks&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PipelineConfigChecks = Class.create();
PipelineConfigChecks.prototype = {
	/**
	 * Returns details about the current instance and its controller
	 * Accepts optional pipelineType string
	 * {
		 * instanceId: &lt;instance_id of current instance&gt;
		 * isController: &lt;true if no controller record exists or if one configured is pointing to itself&gt;,
		 * hasValidControllerRecord: &lt;true if controller record present is valid&gt;,
		 * controllerEnvironment: &lt;controller environment details, if existing&gt;,
		 * foundInEnvironmentsInController: &lt;true if current instance is found in environment table in controller&gt;,
		 * hasGivenPipelineTypeConfiguredInController: &lt;true if pipeline is configured with current instance and given pipeline type in controller&gt;,
	 * }
	 * @param {String} pipelineType
	 * @returns {Object}
	 */
	getCurrentInstanceInfo: function(pipelineType) {
		var pipelineUtils = new PipelineUtils();
		var currentInstanceId = gs.getProperty("instance_id");
		var isCurrentInstanceController = pipelineUtils.currentInstanceIsController();
		var controllerData = pipelineUtils.getControllerData();
		var controllerEnv = controllerData.environment;
		var result = {
			instanceId: currentInstanceId,
			isController: isCurrentInstanceController,
			hasValidControllerRecord: false,
			controllerEnvironment: {},
			foundInEnvironmentsInController: false,
			hasGivenPipelineTypeConfiguredInController: false,
		};
		
		if (controllerEnv) {
			var validateControllerOutputs = pipelineUtils.getValidateControllerResponse(
				controllerEnv.getValue('instance_url'),
				controllerEnv.instance_credential.getRefRecord(),
				currentInstanceId,
				pipelineType
			);
			
			var validateControllerResponse = validateControllerOutputs["response_body"] || {};
			var instanceInfo = validateControllerResponse["sourceInstance"] || {};
			
			result.controllerEnvironment = pipelineUtils.getObjectFromGlideRecord(controllerEnv, PipelineConstants.columns.ENVIRONMENT_COLUMNS);
			result.hasValidControllerRecord = validateControllerOutputs["status_code"] === 200 &amp;&amp; validateControllerResponse.isValid;
			result.foundInEnvironmentsInController = !!instanceInfo.foundInEnvironments;
			result.hasGivenPipelineTypeConfiguredInController = !!instanceInfo.hasGivenPipelineTypeConfigured;
		}
		
		if (isCurrentInstanceController) {
			var currentInstanceEnv = pipelineUtils.getEnvironmentByInstanceId(currentInstanceId);
			result.foundInEnvironmentsInController = !!currentInstanceEnv.sys_id;
			result.hasGivenPipelineTypeConfiguredInController = pipelineUtils.isSourceInstanceInPipeline(currentInstanceId, pipelineType);
		}
		
		return result;
	},
	
	getControllerRecord: function () {
		return (new PipelineUtils()).getEnvironmentControllerRecord();
	},

    type: 'PipelineConfigChecks'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-17 21:10:19&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4b764695c7023010408bc8d6f2c26051&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;32&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PipelineConfigChecks&lt;/sys_name&gt;
        &lt;sys_package display_value="Pipeline" source="sn_pipeline"&gt;e78853e9c3222010b83971e54440dd26&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Pipeline"&gt;e78853e9c3222010b83971e54440dd26&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4b764695c7023010408bc8d6f2c26051&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-08 21:14:45&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:47</sys_created_on>
        <sys_id>8596b8d983f01210c6695855eeaad3c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PipelineConfigChecks</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8596b8d983f01210c6695855eeaad3c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
