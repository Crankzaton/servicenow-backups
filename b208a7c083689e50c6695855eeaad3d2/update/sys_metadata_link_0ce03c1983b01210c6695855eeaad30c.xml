<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>207b6854eb010100c3346f5ca206fe07</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdAjaxVerifyIdentityServiceDesk&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Backend to support the create request ui for service desk module in the Password Reset plugin.&lt;/description&gt;
        &lt;name&gt;PwdAjaxVerifyIdentityServiceDesk&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdAjaxVerifyIdentityServiceDesk = Class.create();

PwdAjaxVerifyIdentityServiceDesk.prototype = Object.extendsObject(AbstractAjaxProcessor, {
	TYPE_INFO: "Info",
	TYPE_WARNING: "Warning",
	TYPE_ERROR: "Error",
	
	STAGE_IDENTIFICATION: "Identification",
	STAGE_VERIFICATION: "Verification",
	STAGE_RESET: "Reset",
	
	REQUEST_TYPE : 2, // request type for service desk process
	
	isPublic: function() {
		return false;
	},

	getProcessNamesAsync: function() {
		var userId = this.getParameter('sysparm_user');
        
		if (userId != null) {
        
            var procMgr = new SNC.PwdProcessManager();
			var processIds = procMgr.getProcessIdsByUserId(userId);
			
			for (var i = 0; i &lt; processIds.size(); i++) {
            
				var procId = processIds.get(i);
                var proc = new SNC.PwdProcess(procId); 
				
				// process needs to be reset password or unlock account process
                // we do not need to show public processes
                if (proc.isPublic() || !(proc.isResetPwd() || proc.isUnlockAccount())) {
					continue;
				}
				
				var name = proc.getLabel();
				// prefix with domain name if plugin is active
				if (GlidePluginManager.isRegistered("com.glide.domain.msp_extensions.installer")) 
					name = proc.getDomainDisplayName() + ": " + name;
				
				var process = this.newItem("process");
				process.setAttribute("name", name);
				process.setAttribute("procSysId", proc.getId());
			}
		}
	},

	/* eslint-disable consistent-return */ 
	saveAndProceed: function() {
		var userSysId = this.getParameter('sysparm_user_id');
		var processSysId = this.getParameter('sysparm_procSysId');
        var process = new SNC.PwdProcess(processSysId);
		
		if (process == undefined) {
			return;
		}
		var processName = process.getLabel();
		
		var status = "success";
		
		// Start logging the password reset request:
		// TODO: change request type to service type
        
        var trackingMgr = new SNC.PwdTrackingManager();
		var requestId = trackingMgr.createRequest(processSysId, userSysId, gs.getSessionID(), this.REQUEST_TYPE);
        
		var isEnrolled = new SNC.PwdEnrollmentManager().isUserEnrolledByProcessId(userSysId, processSysId, requestId);
        
		if (!isEnrolled) {
			trackingMgr.createActivity(PwdConstants.TYPE_ERROR, PwdConstants.STAGE_IDENTIFICATION, "User not Enrolled", requestId);
			status = gs.getMessage("User is eligible for the {0} Password Reset process, but must enroll for the process.", processName);
		} else {
			trackingMgr.createActivity(PwdConstants.TYPE_INFO, PwdConstants.STAGE_IDENTIFICATION, "User identified successfully", requestId);
			gs.getSession().putProperty('sysparm_request_id', requestId);
			gs.getSession().putProperty('sysparm_sys_user_id', userSysId);
			gs.getSession().putProperty('sysparm_directory', this.type);
			
			// Get user name and add it to the session in case the verification fails and we need to show the user name
			var userGr = new GlideRecord('sys_user');
			userGr.get(userSysId);
			gs.getSession().putProperty('sysparm_user_input', userGr.getValue('name'));
			
			// Reset lock_state to 'Unknown'
			var req = new GlideRecord('pwd_reset_request');
			if (req.get(requestId)) {
				if (req.lock_state != 0) {
					req.lock_state = 0;	// unknown
					req.update();
				}
			}
			
			// Start workflow to retrieve the user's lock state
			var lu = new PwdUserUnlockUtil();
			lu.startGetLockStateWorkflowNoVerification(requestId, userSysId);
			
			status = "success";
		}
		
		var result = this.newItem("result");
		result.setAttribute("status", status);
		
		return status;
	},
	/* eslint-enable consistent-return */
	
	clearUserEmail : function() {
		gs.getSession().putProperty('sysparm_user_email', '');
	},
	
	type: 'PwdAjaxVerifyIdentityServiceDesk'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-04-25 23:38:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;207b6854eb010100c3346f5ca206fe07&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;128&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdAjaxVerifyIdentityServiceDesk&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;1399f4e43cf1311068bcf327dfe37fe4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_207b6854eb010100c3346f5ca206fe07&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-13 08:02:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:53</sys_created_on>
        <sys_id>0ce03c1983b01210c6695855eeaad30c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PwdAjaxVerifyIdentityServiceDesk</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0ce03c1983b01210c6695855eeaad30c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
