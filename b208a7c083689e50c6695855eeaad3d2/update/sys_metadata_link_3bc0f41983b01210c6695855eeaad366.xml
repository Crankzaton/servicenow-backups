<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1dce1dbf7f0000016a46e8cd530b1cea</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SLACalculator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The SLA Calculator is used with the SLA and SLA contract plugins, and its older "2010" SLA Engine, to help calculate updates to task_sla records.&amp;#13;
&amp;#13;
The internal implementations are identical and compatible to SLACalculatorNG so this class and its methods now remain in order to support existing callers.&amp;#13;
(Any customised version of this class also continues to be called by the older "2010" SLA Engine implementation.)&amp;#13;
&amp;#13;
The bulk of the current implementation now lives in SLACalculatorNG.&amp;#13;
&amp;#13;
New callers should probably invoke the class methods of SLACalculatorNG instead (see its Description).&amp;#13;
&lt;/description&gt;
        &lt;name&gt;SLACalculator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SLACalculator = Class.create();
SLACalculator.prototype = Object.extendsObject(SLACalculatorNG, {

	// sys_properties
	SLA_DEBUG: 'com.snc.sla.debug',

	setNow: function(gdt) {
		this.nowMS = this._truncSeconds(gdt.dateNumericValue());
		this.nowGDT.setNumericValue(this.nowMS);
	},

	// recalculate a specific task_sla record
	calcAnSLA: function(taskSLAgr, /* optional: boolean */ skipUpdate) {
		if (this.lu.atLevel(GSLog.INFO))
			this.lu.logInfo('SLACalculator.calcAnSLA: starting at ' + this.nowGDT.getDisplayValue());
		this.loadTaskSLA(taskSLAgr);
		this.calcTaskSLAs();
		this.updateTaskSLAs(taskSLAgr, skipUpdate);
		this.lu.logInfo('SLACalculator.calcAnSLA: finished');
	},

	calcAllSLAs: function() {
		if (this.lu.atLevel(GSLog.INFO))
			this.lu.logInfo('SLACalculator.calcAllSLAs: starting at ' + this.nowGDT.getDisplayValue());
		this.loadAllTaskSLAs();
		this.calcTaskSLAs();
		this.updateTaskSLAs();
		this.lu.logInfo('SLACalculator.calcAllSLAs: finished');
	},

	calcSomeSLAs: function(start,end) {
		if (this.lu.atLevel(GSLog.INFO))
			this.lu.logInfo('SLACalculator.calcSomeSLAs: starting at ' + this.nowGDT.getDisplayValue());
		this.loadSomeTaskSLAs(start,end);
		this.calcTaskSLAs();
		this.updateTaskSLAs();
		this.lu.logInfo('SLACalculator.calcSomeSLAs: finished');
	},

	// deprecated method: called by 2010 Engine Business Rule, "Run SLA calculation"
	//  pre-condition: !tslaGR.end_time.nil() &amp;&amp; tslaGR.stage != 'cancelled', load/calc/updateTaskSLAs have been executed for this tslaGR
	getTaskSLAStage: function(tslaGR) {
		// Calculate stage (after its completed) based on percentage complete
		var answer = '';
		var currentTaskSLA = this._getTaskSLA(tslaGR);
		if (!currentTaskSLA)
			return tslaGR.stage; // no change

		if ((currentTaskSLA.schedule) ? currentTaskSLA.business_percentage &gt;= 100 : currentTaskSLA.percentage &gt;= 100)
			answer = 'breached';
		else
			answer = 'achieved';
		return answer;
	},

	// setTimers(true) -- enable StopWatch timers in main routines
	setTimers: function(value) {
		this.timers = value;
	},

	setDebug: function(value) {
		this.lu.setLevel(value);
	},

	// update values in one single task_sla record
	_updateTaskSLArecord: function(gr, sla, /* optional: boolean */ skipUpdate) {
		// SLACalculator has always disabled business rules before calling gr.update(), SLACalculatorNG doesn't
		if (!skipUpdate)
			gr.setWorkflow(false);
		new SLACalculatorNG()._updateTaskSLArecord(gr, sla, skipUpdate);
	},

	SLA_API_2010: true,

	type: 'SLACalculator'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;jerrod.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2010-06-09 17:42:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1dce1dbf7f0000016a46e8cd530b1cea&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;308&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SLACalculator&lt;/sys_name&gt;
        &lt;sys_package display_value="Service level management" source="com.snc.sla"&gt;e2d7bc6c3cb1311068bcf327dfe37f1f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1dce1dbf7f0000016a46e8cd530b1cea&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-12-13 15:17:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:35</sys_created_on>
        <sys_id>3bc0f41983b01210c6695855eeaad366</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SLACalculator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3bc0f41983b01210c6695855eeaad366</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:35</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
