<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>new sn_ais.StatusApi().isAisQueueWritable()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>AIS trigger reindexing</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 // we ignore non trivial changes in sys updated
 if (previous && current.operation() != 'delete') {
  var changed = false;
  for (var k in current) {
   if (k != 'read' && k != 'sys_mod_count' && k != 'sys_updated_on' && k != 'sys_updated_by' && current[k] != previous[k])
    changed = true;
  }
  if (!changed)
   return;
 }

 // we index only shared tags, and only based on the table indexing parameters
 var aisConfig = new sn_ais.AisUtil();
 if (aisConfig.isTableIndexable(current.table)) {
  var tagIndexLevel = aisConfig.getTableLevelAttribute(current.table, 'index_tags', 'none');
  var triggerIndex = false;

  if (tagIndexLevel == 'all_shared' || tagIndexLevel == 'everyone_only') {
   var viewableBy = null;

   var recentDeletion = gs.getSession().getClientData('glide.ais.recent.label.deletion');
   if (recentDeletion) {
    var parts = recentDeletion.split(',', 2);
    if (parts.length == 2 && parts[0] == current.label)
     viewableBy = parts[1];
   }

   if (!viewableBy) {
    var label = new GlideRecord('label');
    if (label.get(current.label))
     viewableBy = label.viewable_by;
   }

   if (tagIndexLevel == 'all_shared' && viewableBy != 'me')
    triggerIndex = true;
   else if (tagIndexLevel == 'everyone_only' && viewableBy == 'everyone')
    triggerIndex = true;

  }

  if (triggerIndex)
   new sn_ais.IndexEvent().indexRecord(current.table, current.table_key, 'tags');
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:28</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c93c28d583701210c6695855eeaad3c1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AIS trigger reindexing</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_c93c28d583701210c6695855eeaad3c1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:28</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=c93c28d583701210c6695855eeaad3c1"/>
</record_update>
