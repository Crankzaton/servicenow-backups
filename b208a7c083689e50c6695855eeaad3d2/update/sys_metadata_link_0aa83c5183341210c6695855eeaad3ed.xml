<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>96a9e26cb7723010965e56bf7e11a9a8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_inc.SOWUpcomingLinkProvider_Incidents&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point sn_sow.UpcomingLinkProvider&lt;/description&gt;
        &lt;name&gt;SOWUpcomingLinkProvider_Incidents&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SOWUpcomingLinkProvider_Incidents = Class.create();
SOWUpcomingLinkProvider_Incidents.prototype = {
    type: 'SOWUpcomingLinkProvider_Incidents',
    initialize: function() {},
    _buildLink: function(gr, count, msg, listTitle, icon) {
        var route = {
            route: 'simplelist',
            fields: {
                table: gr.getTableName()
            },
            params: {
                listTitle: listTitle,
                query: gr.getEncodedQuery()
            }
        };
        if (1 == count) {
            route = {
                route: 'record',
                fields: {
                    table: gr.getTableName(),
                    sysId: gr.getUniqueValue()
                }
            };
        }
        var item = {
            label: msg,
            type: 'route',
            value: route,
            "startsWith": {
                "icon": icon,
                "align": "center"
            },
            "opensWindow": false,
            "configAria": {},
            "download": false
        };
        return item;
    },
    process: function(request, fromDateTime, toDateTime, assginToQuery) {
        // Return array of objects per the link set api
        // https://developer.servicenow.com/dev.do#!/reference/now-experience/quebec/shared-components/now-link-set/api
        var PREFIX_QUERY = 'active=true^' + assginToQuery;
        var SLA_AT_RISK_TODAY_QUERY = '^JOINincident.sys_id=task_sla.task!planned_end_timeONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()';
        var SLA_AT_RISK_TOMORROW_QUERY = '^JOINincident.sys_id=task_sla.task!planned_end_timeONTomorrow@javascript:gs.beginningOfTomorrow()@javascript:gs.endOfTomorrow()';
        var SLA_AT_RISK_SUFFIX_QUERY = '^JOINincident.sys_id=task_sla.task!has_breached=false';
        var SLA_BREACH_SUFFIX_QUERY = '^JOINincident.sys_id=task_sla.task!has_breached=true';
        var encodedSlaAtRiskQuery = null;
        var encodedSlaBreachQuery = null;
        var listTitle = gs.getMessage("Incident SLAs");
        if ('beginningOfToday' == request.from &amp;&amp; 'endOfToday' == request.to) {
            encodedSlaAtRiskQuery = PREFIX_QUERY + SLA_AT_RISK_TODAY_QUERY + SLA_AT_RISK_SUFFIX_QUERY;
            encodedSlaBreachQuery = PREFIX_QUERY + SLA_BREACH_SUFFIX_QUERY;
        } else if ('beginningOfTomorrow' == request.from &amp;&amp; 'endOfTomorrow' == request.to) {
            encodedSlaAtRiskQuery = PREFIX_QUERY + SLA_AT_RISK_TOMORROW_QUERY;
        } else {
            throw gs.getMessage("Unsupported date range");
        }
        var LIMIT = 10;
        var gr = new GlideRecordSecure('incident');
        gr.addEncodedQuery(encodedSlaAtRiskQuery);
        gr.setLimit(LIMIT + 1);
        gr.query();
        var count = gr.next() ? gr.getRowCount() : 0;
        var items = [];
        if (count &gt; 0) {
            var msg = null;
            if (1 == count) {
                msg = gs.getMessage("{0} incident with SLA at risk", [count]) + "";
            } else {
                if (count &gt; LIMIT) {
                    msg = gs.getMessage("More than {0} incidents with SLA at risk", [LIMIT.toString()]) + "";
                } else {
                    msg = gs.getMessage("{0} incidents with SLA at risk", [count]) + "";
                }
            }
            items.push(this._buildLink(gr, count, msg, listTitle, "clock-outline"));
        }
        if (false == gs.nil(encodedSlaBreachQuery)) {
            var breachGr = new GlideRecordSecure('incident');
            breachGr.addEncodedQuery(encodedSlaBreachQuery);
            gr.setLimit(LIMIT + 1);
            breachGr.query();
            var breachCount = breachGr.next() ? breachGr.getRowCount() : 0;
            if (breachCount &gt; 0) {
                var breachMsg = null;
                if (1 == breachCount) {
                    breachMsg = gs.getMessage("{0} incident with breached SLA", [breachCount]) + "";
                } else {
                    if (breachCount &gt; LIMIT) {
                        breachMsg = gs.getMessage("More than {0} incidents with breached SLA", [LIMIT.toString()]) + "";
                    } else {
                        breachMsg = gs.getMessage("{0} incidents with breached SLA", [breachCount]) + "";
                    }
                }
                items.push(this._buildLink(breachGr, breachCount, breachMsg, listTitle, "exclamation-triangle-outline"));
            }
        }
        return items;
    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-21 18:02:48&lt;/sys_created_on&gt;
        &lt;sys_id&gt;96a9e26cb7723010965e56bf7e11a9a8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SOWUpcomingLinkProvider_Incidents&lt;/sys_name&gt;
        &lt;sys_package display_value="Incident Management for Service Operations Workspace" source="sn_sow_inc"&gt;49aff4bb733320103e366238edf6a70f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Incident Management for Service Operations Workspace"&gt;49aff4bb733320103e366238edf6a70f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_96a9e26cb7723010965e56bf7e11a9a8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-24 07:52:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:52</sys_created_on>
        <sys_id>0aa83c5183341210c6695855eeaad3ed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SOWUpcomingLinkProvider_Incidents</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0aa83c5183341210c6695855eeaad3ed</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
