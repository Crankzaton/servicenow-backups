<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>true</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Field/Attachment based on type</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (current.isActionAborted())
        return;
    var KMFCleProp = gs.getProperty('glide_encryption.cle_replatforming_with_kmf');

    if (KMFCleProp == "opt_in" && current.type == 'Attachment') {
        // column should be empty
        if (!current.column.nil()) {
            current.column = '';
        }

        if (current.active == true) {
            // abort if attachments already encrypted for current table
            var gr = new GlideRecord('sys_platform_encryption_configuration');
            gr.addQuery('table', current.table);
            gr.addQuery('type', 'Attachment');
            gr.addQuery('active', true);
            gr.addQuery('sys_id', '!=', current.sys_id);
            gr.query();
            if (gr.next()) {
                gs.addErrorMessage(gs.getMessage('Attachments are already encrypted for table {0} ', gr.table));
                current.setAbortAction(true);
                return;
            }
        }
    } else if (KMFCleProp != "opt_in" || current.type == 'Column') {
        // column can't be empty
        if (current.column.nil()) {
            gs.addErrorMessage(gs.getMessage('Choose a field to encrypt'));
            current.setAbortAction(true);
            return;
        }

        var tableName = current.table;
        var fieldName = current.column;
        var gr = new GlideRecord(tableName);

        // abort if field is invalid
        if (!gr.isValidField(fieldName)) {
            gs.addErrorMessage(gs.getMessage('Invalid column {0} for table {1}', [fieldName, tableName]));
            current.setAbortAction(true);
            return;
        }

        var ge = gr.getElement(fieldName);
        var ed = ge.getED();
        // abort if selected field does not support encryption
        // abort if it is a sys field, choice field, virtual field or number field
        if (isFieldEncryptable(ed, ge, fieldName)) {
            gs.addErrorMessage(gs.getMessage('Field {0} in table {1} does not support encryption', [fieldName, tableName]));
            current.setAbortAction(true);
            return;
        }

        // Allow columns to be marked as false independent of encryptions in hierarchy
        if (current.active == true) {
            // abort if column is already encrypted for current table or any ancestor
            var configuration = new GlideRecord('sys_platform_encryption_configuration');
   if (gs.getCurrentScopeName() != 'rhino.global') {
    configuration.addQuery('table', 'IN', (new GlideTableHierarchy(tableName)).getHierarchy());
   } else {
    // convert to js Array, otherwise our 'IN' query will not process first and last items properly
    var relatedTableNames = j2js(GlideDBObjectManager.get().getHierarchy(tableName));
    configuration.addQuery('table', 'IN', relatedTableNames);
   }
            configuration.addQuery('column', fieldName);
            configuration.addQuery('sys_id', '!=', current.sys_id);
            configuration.addActiveQuery();
            configuration.query();
            if (configuration.next()) {
                gs.addErrorMessage(gs.getMessage('The selected field already has an encryption configuration for table {0} or its extensions', tableName));
                current.setAbortAction(true);
                return;
            }
        }
    } else {
        gs.addErrorMessage(gs.getMessage('Unknown type : {0}', current.type));
        current.setAbortAction(true);
        return;
    }
})(current, previous);

function isFieldEncryptable(ed, ge, fieldName) {
    if (fieldName == 'number' ||
        fieldName.startsWith('sys') ||
        ed.isVirtual() || ed.isChoiceTable() ||
        ge.getBooleanAttribute('glide_encrypted_excluded'))
        return true;
    else
        return false;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:20</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>24fb6c5583701210c6695855eeaad3cf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Field/Attachment based on type</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_24fb6c5583701210c6695855eeaad3cf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:20</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=24fb6c5583701210c6695855eeaad3cf"/>
</record_update>
