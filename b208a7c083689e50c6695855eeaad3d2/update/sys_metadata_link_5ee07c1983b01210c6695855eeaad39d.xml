<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>21eca065f1fa1110fa9bd36f7a84707b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_ex_emp_fd.eef_VTimezone&lt;/api_name&gt;
        &lt;caller_access&gt;2&lt;/caller_access&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;eef_VTimezone&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("eef_Moment");
gs.include("eef_MomentTimezoneWithData");

var eef_VTimezone = Class.create();
eef_VTimezone.prototype = {
    type: 'eef_VTimezone'
};

eef_VTimezone.generateDateTime = function(eventDateTime) {
        var timezoneName = gs.getSession().getTimeZoneName();
        var dateTime = this._getDate(eventDateTime) + this.formatTime(eventDateTime);
        return moment.utc(dateTime).format('YYYYMMDDTHHmmss') + 'Z';
},

eef_VTimezone.generateVTimezone = function(calStartTime, calEndTime) {
        var timezoneName = gs.getSession().getTimeZoneName(),
            tsRangeStart = moment.tz(calStartTime, timezoneName).unix() * 1000,
            tsRangeEnd = moment.tz(calEndTime, timezoneName).unix() * 1000;

        var zone = moment.tz.zone(timezoneName),
            untils = zone.untils,
            abbrs = zone.abbrs,
            offsets = zone.offsets,
            i,
            dtStart,
            utcOffsetBefore,
            utcOffsetDuring,
            periodType,
            vtz = ["X-WR-TIMEZONE:" + timezoneName, "BEGIN:VTIMEZONE", "TZID:" + timezoneName];

        tsRangeStart = tsRangeStart || 0;
        tsRangeEnd = tsRangeEnd || Math.pow(2, 31) - 1;

        // https://momentjs.com/timezone/docs/#/data-formats/unpacked-format/
        // &gt; between `untils[n-1]` and `untils[n]`, the `abbr` should be 
        // &gt; `abbrs[n]` and the `offset` should be `offsets[n]`
        for (i = 0; i &lt; untils.length - 1; i++) {
            // filter to intervals that include our start/end range timestamps
            if (untils[i + 1] &lt; tsRangeStart) continue; // interval ends before our start, skip
            if (i &gt; 0 &amp;&amp; untils[i - 1] &gt; tsRangeEnd) break; // interval starts after interval we end in, break

            utcOffsetBefore = this._formatUtcOffset(offsets[i]); // offset BEFORE dtStart
            dtStart = moment.tz(untils[i], timezoneName).format('YYYYMMDDTHHmmss');
            utcOffsetDuring = this._formatUtcOffset(offsets[i + 1]); // offset AFTER dtStart
            periodType = offsets[i + 1] &lt; offsets[i] ? 'DAYLIGHT' : 'STANDARD'; // spring-forward, DAYLIGHT, fall-back: STANDARD.

            vtz.push('BEGIN:' + periodType);
            vtz.push('DTSTART:' + dtStart); // local date-time when change
            vtz.push('TZOFFSETFROM:' + utcOffsetBefore); // utc offset BEFORE DTSTART
            vtz.push('TZOFFSETTO:' + utcOffsetDuring); // utc offset AFTER DTSTART
            vtz.push('TZNAME:' + abbrs[i + 1]);
            vtz.push('END:' + periodType);
        }
        vtz.push('END:VTIMEZONE\r\n');
        return vtz.join('\r\n'); // rfc5545 says CRLF
},

eef_VTimezone._formatUtcOffset = function(minutes) {
        var hours = Math.floor(Math.abs(minutes) / 60).toString(),
            mins = (Math.abs(minutes) % 60).toString(),
            sign = minutes &gt; 0 ? '-' : '+', // sign inverted, see https://momentjs.com/timezone/docs/#/zone-object/offset/
            output = [sign];

        // zero-padding
        if (hours.length &lt; 2) output.push('0');
        output.push(hours);
        if (mins.length &lt; 2) output.push('0');
        output.push(mins);

        return output.join('');
},

/**
* Return UTC date String from @param glideDateTime
* @param glideDateTime GlideDateTime
* @return String Example: 2018-01-10 18:26:19 -&gt; '2018:01:10'
**/
eef_VTimezone._getDate = function(glideDateTime) {
        return glideDateTime.getYearUTC() + this._prependZero(glideDateTime.getMonthUTC()) + this._prependZero(glideDateTime.getDayOfMonthUTC());
},

/**
* Return UTC time String from @param glideDateTime
* @param glideDateTime GlideDateTime
* @return String Example: 2018-01-10 18:26:19 -&gt; 'T182619'
**/
eef_VTimezone.formatTime = function(glideDateTime) {
        var gmtTime = glideDateTime.getTime().toString().split(/\s/g);

        if (!gmtTime || gmtTime.length &lt; 2)
            return '';

        return 'T' + gmtTime[1].replace(/:/g, '');
},

/**
* Prepends 0 to single digit numbers
* @param num number
* @return numStr String
* Example: 1 -&gt; '01'
**/
eef_VTimezone._prependZero = function(num) {
        var numStr = '' + num;

        if (numStr.length &lt; 2)
            numStr = '0' + numStr;

        return numStr;
};
    ]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-27 04:25:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;21eca065f1fa1110fa9bd36f7a84707b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;eef_VTimezone&lt;/sys_name&gt;
        &lt;sys_package display_value="Employee Experience Foundation" source="sn_ex_emp_fd"&gt;4f1782b511863010d3c9cf6239244623&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Employee Experience Foundation"&gt;4f1782b511863010d3c9cf6239244623&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_21eca065f1fa1110fa9bd36f7a84707b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-08 05:30:14&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:02</sys_created_on>
        <sys_id>5ee07c1983b01210c6695855eeaad39d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>eef_VTimezone</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5ee07c1983b01210c6695855eeaad39d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:02</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
