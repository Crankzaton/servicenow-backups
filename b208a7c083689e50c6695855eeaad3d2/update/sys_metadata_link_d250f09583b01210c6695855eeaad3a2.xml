<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>08f481067f231200068712f44efa919d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.GeneralWOForm&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GeneralWOForm&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * GeneralWOForm would be to generate PDFs
 *
 * @author SERVICE-NOW\sarath.ambati\ Sravani.Boggarapu \manjul.katare 
 */

var GeneralWOForm = Class.create();

/**
 * Utility to create a PDF for the form
 * @param table, table id, target table, target id
 */
GeneralWOForm.prototype = {
	initialize: function(targetTable, targetId, signeeName) {
		this.tableId = (targetId) ? targetId : null;
		this.tableName = targetTable;
		this.targetTable = targetTable;
		this.targetId = targetId;
		this.signeeName = signeeName;
		//Signature Image Height and Width
		this.signImageHeight = 40;
		this.signImageWidth = 100;
	},
	
	generate: function() {
		var propsmap = new Object({
			"HeaderImageAttachmentId" : this._getAttachmentId("Print-logo-workorder.jpg"),
			"HeaderImageAligment" : "left",
			"FooterText" : "Powered by ServiceNow Inc.",
			"FooterTextAlignment" : "BOTTOM_CENTER",
			"PageSize" : "A4",
			"GeneratePageNumber" : "false",
		});
		
		var content = this._getDocumentBody();
		var filename = this._setFileName();
		var pdfgen = new sn_pdfgeneratorutils.PDFGenerationAPI();
		var result = pdfgen.convertToPDFWithHeaderFooter(content, this.targetTable, this.targetId, filename, propsmap);
		gs.info("Result of PDF Generation: " + JSON.stringify(result));
	},
	
	_getAttachmentId: function(name) {
		var dbi = new GlideRecord("db_image");
		if(dbi.get("name", name)) {
			var att = new GlideRecord("sys_attachment");
			att.get("table_sys_id", dbi.sys_id);
			return att.sys_id;
		}
		return "";
	},
    
    _getWOGr : function() {
        var grwo = new GlideRecord("wm_order");
        grwo.get(this.targetId);
        return grwo;
    },
    
    _getWOTaskGr : function() {
        var gr = new GlideRecord("wm_task");
        gr.addQuery('parent.sys_id', this.targetId);
        gr.query();
        return gr;
    },
    
    _getWOTaskTimings: function(wotask) {
        var timingsArray = [];
        //var timingObj = {};
        var grtime = new GlideRecord("task_time_worked");
        grtime.addQuery('task.number', wotask);
        grtime.query();

        while(grtime.next()) {
            var timingObj = {};
            timingObj.user = grtime.user.getDisplayValue();
            timingObj.time_worked = grtime.time_worked.substring(12, 19);
            timingObj.comments = grtime.comments + '';
            timingObj.createdOn = grtime.sys_created_on + '';
            timingObj.task = wotask + '';
            timingObj.labels = {
                "user": grtime.user.getLabel(),
                "time_worked": grtime.time_worked.getLabel(),
                "comments": grtime.comments.getLabel(),
                "createdOn": grtime.sys_created_on.getLabel(),
                "task": grtime.task.getLabel()
            };
            
            timingsArray.push(timingObj);
        }
        return timingsArray;
    },
    _capitalize: function(s) {
        return s &amp;&amp; s[0].toUpperCase() + s.slice(1);
    },

    _getWOTaskAssets : function(wotask) {
        var assetArray = [];
        //var assetObj = {};
        var grparts = new GlideRecord("sm_asset_usage");
        grparts.addQuery('service_order_task.number',wotask);
        grparts.query();
        while(grparts.next()) {
            var assetObj = {};
            assetObj.model = grparts.model.getDisplayValue();
            assetObj.asset = grparts.asset.getDisplayValue();
            assetObj.quantity = grparts.quantity +'';
            assetObj.status = this._capitalize(grparts.status + '');
            assetObj.labels = {
                "model": grparts.model.getLabel(),
                "asset": grparts.asset.getLabel(),
                "quantity": grparts.quantity.getLabel(),
                "status": grparts.status.getLabel()
            };
                
            assetArray.push(assetObj);
        }
        return assetArray;
    },

    _predicatBy : function(prop){
        return function(a,b){
            if( a[prop] &gt; b[prop]){
                return 1;
            }else if( a[prop] &lt; b[prop] ){
                return -1;
            }
            return 0;
        };
    },

    _getWOTaskExpenses: function(wotask) {
        var expensesArray = [];
        //var expensesObj = {};
        var grexpense = new GlideRecord("sm_incidentals");
        grexpense.addQuery('parent_task.number',wotask);
        grexpense.query();
        while(grexpense.next()) {
            var expensesObj = {};
            expensesObj.number = grexpense.number + '';
            expensesObj.type = this._capitalize(grexpense.type + '');
            expensesObj.state = this._capitalize(grexpense.state + '');
            expensesObj.expense_line = grexpense.expense_line.getDisplayValue();
            expensesObj.cost = grexpense.cost.getReferenceDisplayValue();
            expensesObj.description = grexpense.description + '';
            expensesObj.createdOn = grexpense.sys_created_on + '';
            expensesObj.labels = {
                "number": grexpense.number.getLabel(),
                "type": grexpense.type.getLabel(),
                "state": grexpense.state.getLabel(),
                "expense_line": grexpense.expense_line.getLabel(),
                "cost": grexpense.cost.getLabel(),
                "description": grexpense.description.getLabel()
            };

            expensesArray.push(expensesObj);
        }
        return expensesArray;
    },

    _getDocumentBody : function(){
        var parsedBody = '';
        var colorMap = CSSPropertiesRepository.getSessionProperties();
        var colorSeperator = colorMap['nav.menu.border.color'];
        var grwo = this._getWOGr();
        var gr = this._getWOTaskGr();
        var expensesArray = [];
        var assetArray = [];
        var timingsArray = [];
        var expensesTable = new GlideRecord("sm_incidentals").getClassDisplayValue();
        var assetTable = new GlideRecord("sm_asset_usage").getClassDisplayValue();
        var timingsTable = new GlideRecord("task_time_worked").getClassDisplayValue();
        while (gr.next()) {
            var expensesObj = this._getWOTaskExpenses(gr.number);
            var assetObj = this._getWOTaskAssets(gr.number);
            var timingsObj = this._getWOTaskTimings(gr.number);
            expensesArray = expensesArray.concat(expensesObj);
            assetArray = assetArray.concat(assetObj);
            timingsArray = timingsArray.concat(timingsObj);
        }

        assetArray.sort(this._predicatBy('status'));
        expensesArray.sort(this._predicatBy('createdOn'));
        timingsArray.sort(this._predicatBy('createdOn'));
		var parsedStyle = '&lt;style&gt;table, tr {line-height: 2;}\n' 
		+ '.sign{line-height: 1;}&lt;/style&gt;';
		parsedBody += parsedStyle;
		parsedBody += '&lt;br/&gt;';
        parsedBody += '&lt;table width="100%" height="100%" style="font-family:Helvetica, sans-serif;"&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;';
        parsedBody += '&lt;table width="100%"&gt;&lt;tr&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.company.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.company.getDisplayValue() + '&lt;/font&gt;&lt;/td&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.location.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.location.getDisplayValue() + '&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';

        parsedBody += '&lt;tr&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.caller.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.caller.getDisplayValue() + '&lt;/font&gt;&lt;/td&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.cmdb_ci.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.cmdb_ci.getDisplayValue() + '&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';

        parsedBody += '&lt;tr&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.opened_at.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.opened_at.getDisplayValue() + '&lt;/font&gt;&lt;/td&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.number.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.number + '&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';

        parsedBody += '&lt;tr&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.closed_at.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' + grwo.closed_by.getDisplayValue() + '&lt;/font&gt;&lt;/td&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.closed_at.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="35%"&gt;&lt;font size="1"&gt;' +now() + '&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';

        parsedBody += '&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;';
        parsedBody += '&lt;table width="100%"&gt;&lt;tr&gt;&lt;td width="15%"&gt;&lt;font size="1"&gt;&lt;b&gt;' + grwo.short_description.getLabel() + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td width="85%"&gt;&lt;font size="1"&gt;' + grwo.short_description + '&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4" width="100%"&gt;';
        parsedBody += '&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td width="25%"&gt;&lt;/td&gt;&lt;td width="25%"&gt;&lt;/td&gt;&lt;td width="25%"&gt;&lt;/td&gt;&lt;td width="25%"&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="2" width="50%"&gt;&lt;/td&gt;&lt;td width="50%" colspan="2"&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;';
        //Parts
        parsedBody += '&lt;tr&gt;&lt;td valign="top" colspan="4" width="100%" bgcolor='+colorSeperator+'&gt;&lt;font size="1"&gt;&lt;b&gt;' + assetTable + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;&lt;table width="100%"&gt;';
        if (assetArray.length &gt; 0) {
            parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + assetArray[0].labels.model + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + assetArray[0].labels.asset + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + assetArray[0].labels.quantity + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + assetArray[0].labels.status + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
            for (var i = 0;  i &lt; assetArray.length; i++) {
                parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;'+ assetArray[i].model +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ assetArray[i].asset +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;' + assetArray[i].quantity + '&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ assetArray[i].status +'&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
            }
        } else {
            parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;'+ gs.getMessage("None") + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        }
        parsedBody += '&lt;/table&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;';

        //Expenses
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td valign="top" colspan="4" width="100%" bgcolor='+colorSeperator+'&gt;&lt;font size="1"&gt;&lt;b&gt;' + expensesTable + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;&lt;table width="100%"&gt;';
        if (expensesArray.length &gt; 0) {
            parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + expensesArray[0].labels.number + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + expensesArray[0].labels.type + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + expensesArray[0].labels.state + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + expensesArray[0].labels.cost + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
            for (var j = 0;  j &lt; expensesArray.length; j++) {
                parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;'+ expensesArray[j].number +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ expensesArray[j].type +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ expensesArray[j].state +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ expensesArray[j].cost +'&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
            }
        } else {
            parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + gs.getMessage("None") + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        }
        parsedBody += '&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td valign="top" colspan="4" width="100%" bgcolor='+colorSeperator+'&gt;&lt;font size="1"&gt;&lt;b&gt;' + timingsTable + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr&gt;&lt;td colspan="4"&gt;&lt;table width="100%"&gt;';
        //Time Worked
        if (timingsArray.length &gt; 0) {
            parsedBody += '&lt;tr&gt;&lt;td &gt;&lt;font size="1"&gt;&lt;b&gt;' + timingsArray[0].labels.task + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + timingsArray[0].labels.user + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + timingsArray[0].labels.time_worked + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td colspan="2"&gt;&lt;font size="1"&gt;&lt;b&gt;' + timingsArray[0].labels.comments + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
            for (var k = 0;  k &lt; timingsArray.length; k++) {
                parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;'+ timingsArray[k].task +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ timingsArray[k].user +'&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font size="1"&gt;'+ timingsArray[k].time_worked +'&lt;/font&gt;&lt;/td&gt;&lt;td colspan="2"&gt;&lt;font size="1"&gt;'+ timingsArray[k].comments +'&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
            }
        } else {
            parsedBody += '&lt;tr&gt;&lt;td&gt;&lt;font size="1"&gt;&lt;b&gt;' + gs.getMessage("None") + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        }
        parsedBody += '&lt;/table&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr class="sign"&gt;&lt;td colspan="3" width="75%"&gt;&lt;/td&gt;&lt;td width="25%"&gt;&lt;font size="2"&gt;' + gs.getMessage("Signature") + '&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';

        parsedBody += '&lt;tr class="sign"&gt;&lt;td colspan="3" width="75%"&gt;&lt;/td&gt;&lt;td width="25%"&gt;&lt;b&gt;' + gs.getMessage("SIGNIMG") + '&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;tr class="sign"&gt;&lt;td colspan="3" width="75%"&gt;&lt;/td&gt;&lt;td width="25%"&gt;&lt;font size="2"&gt;&lt;b&gt;' + gs.getMessage("SIGNNAME") + '&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;';
        parsedBody += '&lt;/table&gt;';
        
        // Attach Signature
        
        var signature = this._get_signature();
        if(signature){
            var translatedImg = gs.getMessage("SIGNIMG");
            var translatedName = gs.getMessage("SIGNNAME");
            parsedBody = parsedBody.replace(new RegExp(translatedImg, "gi"), signature);
            parsedBody = parsedBody.replace(new RegExp(translatedName, "gi"), this.signeeName);
        }
        return parsedBody;
    },
    
    _get_signature : function(){
        var gr = new GlideRecord('signature_image');
        gr.addQuery('user', gs.getUserID());
        gr.addQuery('table', this.tableName);
        gr.addQuery('document', this.tableId);
        gr.orderByDesc('sys_created_on');
        
        gr.addActiveQuery();
        gr.query();
        if (gr.next()){
            if (!gr.is_drawing) {
                var signedName = gr.signed_name;
                signedName = signedName.replace('size="7"', 'size="3"');
                return signedName;
            } else{
                var imageAttachment = this._get_attachment(gr.sys_id);
				var src = "sys_attachment.do?sys_id=" + imageAttachment.sys_id;
				if(!this.isInteger(this.signImageHeight)) this.signImageHeight = 60;
				if(!this.isInteger(this.signImageWidth)) this.signImageWidth = 100;
                if (!gs.nil(imageAttachment))
					return '&lt;img height="' + this.signImageHeight + '" width="' + this.signImageWidth + '" src="' + src + '" /&gt;';
            }
        }
        return '';
    },
	
	isInteger: function(x) {
		return Number.isInteger(x) &amp;&amp; (x &gt; 0);
	},
    
    
    _get_attachment : function(id){
        var gr = new GlideRecord('sys_attachment');
        gr.addQuery('table_name', 'signature_image');
        gr.addQuery('table_sys_id', id);
        gr.query();
        
        if (gr.next())
            return gr;
        else return '';
      },
    
    /**
     * This is the file name that will be used when creating the PDF file.
     *
     *
     */
    _setFileName : function() {
        var nowDT = nowDateTime();
        // The mobile app cannot recoginize date with '/' thus renders error when
        // opening the PDF. Convert the '/' to ':' in date to avoid errors.
        nowDT = nowDT.replace(/\//g, ':');
        var fileName =  'WorkOrder_' + this._getWOGr().number + '_' + nowDT;
		return fileName;
    },
    
    type : 'GeneralWOForm'
    };]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-05-23 23:30:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;08f481067f231200068712f44efa919d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GeneralWOForm&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service - Signature Pad" source="com.snc.wo_signature_pad"&gt;eb8bdafb4722c210cd4e1ce4316d436a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_08f481067f231200068712f44efa919d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-22 09:43:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:34</sys_created_on>
        <sys_id>d250f09583b01210c6695855eeaad3a2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GeneralWOForm</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d250f09583b01210c6695855eeaad3a2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:34</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
