<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1f5cc0039f3231003edb77a0942e70db</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;sys_user_role_contains&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;true&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Prevent admin from snc_read_only&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[
function onBefore(current, previous) {
	var grUserRole = new GlideRecord("sys_user_role");
	grUserRole.addQuery("name", "admin");
	grUserRole.query();
	grUserRole.next();
	var adminRoleId = grUserRole.getValue("sys_id");
		
	grUserRole = new GlideRecord("sys_user_role");
	grUserRole.addQuery("name", "snc_read_only");
	grUserRole.query();
	grUserRole.next();
	var readOnlyRoleId = grUserRole.getValue("sys_id");
	
	if (current.role != adminRoleId &amp;&amp; current.role != readOnlyRoleId &amp;&amp; 
		current.contains != adminRoleId &amp;&amp; current.contains != readOnlyRoleId) {
		return;
	}
	
	if ((current.role == adminRoleId &amp;&amp; current.contains == readOnlyRoleId) || 
		(current.role == readOnlyRoleId &amp;&amp; current.contains == adminRoleId)) {
		// case (direct): admin[-&gt;]snc_read_only OR: snc_read_only[-&gt;]admin
   		postError();
	} else if (current.role == adminRoleId &amp;&amp; roleContains(current.contains, readOnlyRoleId)) {
		// case (indirect): admin[-&gt;]ROLE-&gt;snc_read_only
   		postError();
	} else if (current.contains == readOnlyRoleId &amp;&amp; roleContains(adminRoleId, current.role)) {
		// case (indirect): admin-&gt;ROLE[-&gt;]snc_read_only
   		postError();
	} else if (current.role == readOnlyRoleId &amp;&amp; roleContains(current.contains, adminRoleId)) {
		// case (indirect): snc_read_only[-&gt;]ROLE-&gt;admin
   		postError();
	} else if (current.contains == adminRoleId &amp;&amp; roleContains(readOnlyRoleId, current.role)) {
		// case (indirect): snc_read_only-&gt;ROLE[-&gt;]admin
   		postError();
	}
}

function roleContains(roleId, containsId) {
	var grURC = new GlideRecord("sys_user_role_contains");
	grURC.addQuery("role", roleId);
	grURC.addQuery("contains", containsId);
	grURC.query();
	if (grURC.hasNext())
		return true;
	return false;
}

function postError() {
	current.setAbortAction(true);
	gs.addErrorMessage(gs.getMessage("The admin role is not allowed to contain, directly or indirectly, the snc_read_only role!"));
}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-03-18 22:57:40&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;1f5cc0039f3231003edb77a0942e70db&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Prevent admin from snc_read_only&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="System (glidesoft)" source="glidesoft"&gt;5113bc203c31311068bcf327dfe37f8c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_1f5cc0039f3231003edb77a0942e70db&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;system&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-10 23:01:56&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=1f5cc0039f3231003edb77a0942e70db"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:57:38</sys_created_on>
        <sys_id>e79d6c9d83701210c6695855eeaad3f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prevent admin from snc_read_only</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e79d6c9d83701210c6695855eeaad3f4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:57:38</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
