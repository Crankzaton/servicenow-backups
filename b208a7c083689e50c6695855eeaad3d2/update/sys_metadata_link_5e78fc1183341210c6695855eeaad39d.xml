<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8ac49905eb5f011054009861eb522818</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AutoResolutionLanguageXHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AutoResolutionLanguageXHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AutoResolutionLanguageXHelper = Class.create();

/**
* Returns an array of the outputs found by the passed service name
*
* @param languageXResult: the result from LanguageX
* @param serviceName : the service name to search with
* @param logger : logger
* @return An array of outputs
*/
AutoResolutionLanguageXHelper.getOutputsByServiceName = function(languageXResult, serviceName, logger) {

	if (gs.nil(languageXResult) || gs.nil(languageXResult.result) || gs.nil(languageXResult.result.length == 0)) {
		logger.error('Invalid languageXResult for the service:{0}  LanguageXResult:{1}', serviceName, JSON.stringify(languageXResult));
		return [];
	}

	var results = languageXResult.result;

	var rtnArr = [];

	for (var i=0; i&lt;results.length; i++) {

		var outputs = results[i].output;
		var found = findOutputByServiceName(outputs, serviceName);
		rtnArr.push(found);
	}

	return rtnArr;
};

/**
* Returns whether LanguageX Stage should execute, by checking if there exists an active language config
* that uses either the LanguageX or Composite capabilities.
* @param {string} configId	The sys_id of the auto resolution configuration
* @return {boolean} Whether LanguageX should execute
*/
AutoResolutionLanguageXHelper.shouldLanguageXExecute = function(configId) {
	var encodedQuery = 'active=true^' + AutoResolutionConstants.LX_ENCODED_QUERY + '^OR' + AutoResolutionConstants.COMPOSITE_ENCODED_QUERY;
	return AutoResolutionUtil.checkSolutionWithCapabilityExists(configId, encodedQuery);
};

/**
* Returns whether LanguageX Stage can execute, by checking if the task's session language is an active
* and supported language.
* @param {string} configId	The sys_id of the auto resolution configuration
* @param {string} taskLanguageCode	The task's session language, denoted by a two-letter language code
* @return {boolean} Whether LanguageX should execute
*/
AutoResolutionLanguageXHelper.canLanguageXExecute = function(configId, taskLanguageCode, capability) {
	// LanguageX cannot execute if the task's session language is not supported
	if (!AutoResolutionTaskHelper.taskCreatedInSupportedSessionLanguage(configId, taskLanguageCode, capability))
		return false;

	// A language config using the trained language must be active for LanguageX to be able to execute
	var trainedLanguageCodes = AutoResolutionLanguageHelper.getActiveLanguages(configId);
	if (!gs.nil(trainedLanguageCodes) &amp;&amp; trainedLanguageCodes.length &gt; 0)
		return trainedLanguageCodes.indexOf(taskLanguageCode) &gt;= 0;
};

/**
* Returns the output found by the serviceName
*/
function findOutputByServiceName (outputs, serviceName) {

	for (var i=0; i&lt;outputs.length; i++) {

		var output = outputs[i];
		if (output.service == serviceName)
			return output;
	}
	// if not found, return an empty block
	return {};
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-04 17:51:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8ac49905eb5f011054009861eb522818&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;38&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AutoResolutionLanguageXHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Issue Auto-Resolution" source="com.glide.cs.auto_resolution"&gt;81ddf4a03c75311068bcf327dfe37fa6&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8ac49905eb5f011054009861eb522818&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-12-30 04:09:27&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:04</sys_created_on>
        <sys_id>5e78fc1183341210c6695855eeaad39d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AutoResolutionLanguageXHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5e78fc1183341210c6695855eeaad39d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:04</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
