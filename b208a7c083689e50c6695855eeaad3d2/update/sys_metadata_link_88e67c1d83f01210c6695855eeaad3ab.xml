<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>67099b66533201101c1addeeff7b123d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_oe_sfs.VACommonProviderAppUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VACommonProviderAppUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VACommonProviderAppUtil = Class.create();
VACommonProviderAppUtil.prototype = {
    initialize: function(providerId) {
        this.providerId = providerId;
        this.PROVIDER_TABLE = sn_oe_sfs.VACommonAdapterConstants.TABLES.PROVIDER;
        this.PROVIDER_APP = sn_oe_sfs.VACommonAdapterConstants.TABLES.PROVIDER_APPLICATION;
        this.PROVIDER_APPLICATION_TABLE = this.PROVIDER_APP.TABLE_NAME;
        this.INBOUND_ID = this.PROVIDER_APP.COLUMNS.INBOUND_ID;
        this.NAME = this.PROVIDER_APP.COLUMNS.NAME;
        this.PROVIDER = this.PROVIDER_APP.COLUMNS.PROVIDER;
        this.MESSAGE_AUTH = this.PROVIDER_APP.COLUMNS.MESSAGE_AUTH;
        this.SHORT_DESCRIPTION = this.PROVIDER_APP.COLUMNS.SHORT_DESCRIPTION;
    },

    /**
     * Get the sys_id of the sys_cs_provider_application record
     * @param {string} tenantId - inbound id to search in sys_cs_provider_application
     */
    getProviderApplicationId: function(inboundId) {
        if (!inboundId) {
            return '';
        }

        // check if getProviderAppByInboundAndProviderId api with caching exists
        if (Object.getOwnPropertyNames(sn_cs.VASystemObject).indexOf("getProviderAppByInboundAndProviderId") &lt; 0) {
            return this.getProviderApplicationIdDeprecated(inboundId);
        }

        var providerApp = sn_cs.VASystemObject.getProviderAppByInboundAndProviderId(inboundId, '');
        var providerAppJSON = providerApp ? JSON.parse(providerApp) : null;
        return providerAppJSON &amp;&amp; providerAppJSON["sysId"] ? providerAppJSON["sysId"] : '';
    },

    getProviderApplicationIdDeprecated: function(inboundId) {
        var gr = new GlideRecord(this.PROVIDER_APPLICATION_TABLE);
        gr.addQuery(this.INBOUND_ID, inboundId);
        gr.addQuery(this.PROVIDER, this.providerId);
        gr.query();
        if (gr.next()) {
            return gr.getUniqueValue();
        }
        return '';
    },

    /**
     * Gets the sys_cs_provider_application record details corresponding to the tenantId
     * @param {string} tenantId 
     */
    getProviderApplicationDetails: function(inboundId) {
        if (!inboundId) {
            return {};
        }

        // check if getProviderAppByInboundAndProviderId api with caching exists
        if (Object.getOwnPropertyNames(sn_cs.VASystemObject).indexOf("getProviderAppByInboundAndProviderId") &lt; 0) {
            return this.getProviderApplicationDetailsDeprecated(inboundId);
        }

        var providerApp = {};
        var providerAppRecord = sn_cs.VASystemObject.getProviderAppByInboundAndProviderId(inboundId, '');
        var providerAppJSON = providerAppRecord ? JSON.parse(providerAppRecord) : '';
        providerApp[this.INBOUND_ID] = providerAppJSON["inboundId"] ? providerAppJSON["inboundId"] : '';
        providerApp[this.PROVIDER] = providerAppJSON["providerId"] ? providerAppJSON["providerId"] : '';
        providerApp[this.NAME] = providerAppJSON["name"] ? providerAppJSON["name"] : '';
        providerApp[this.MESSAGE_AUTH] = providerAppJSON["messageAuth"] ? providerAppJSON["messageAuth"] : '';
        providerApp[this.SHORT_DESCRIPTION] = providerAppJSON["shortDescription"] ? providerAppJSON["shortDescription"] : '';

        return providerApp;
    },

    getProviderApplicationDetailsDeprecated: function(inboundId) {
        var providerApp = {};
        if (inboundId) {
            var gr = new GlideRecord(this.PROVIDER_APPLICATION_TABLE);
            gr.addQuery(this.INBOUND_ID, inboundId);
            gr.addQuery(this.PROVIDER, this.providerId);
            gr.query();
            if (gr.next()) {
                providerApp[this.INBOUND_ID] = gr.getValue(this.INBOUND_ID);
                providerApp[this.PROVIDER] = gr.getValue(this.PROVIDER);
                providerApp[this.NAME] = gr.getValue(this.NAME);
                providerApp[this.MESSAGE_AUTH] = gr.getValue(this.MESSAGE_AUTH);
                providerApp[this.SHORT_DESCRIPTION] = gr.getValue(this.SHORT_DESCRIPTION);
            }
        }

        return providerApp;
    },

    /**
     * Insert a record in sys_cs_provider_application.
     * @param {object} providerApp - Key, value pairs matching the column names
     */
    insertProviderApplication: function(providerApp) {
        // if inbound_id or provider or message_auth is empty, then do not insert
        if (!providerApp[this.INBOUND_ID] || !providerApp[this.MESSAGE_AUTH]) {
            return '';
        }

        // insert a record in provider application
        var gr = new GlideRecordSecure(this.PROVIDER_APPLICATION_TABLE);
        gr.initialize();
        gr.setValue(this.INBOUND_ID, providerApp[this.INBOUND_ID]);
        gr.setValue(this.PROVIDER, this.providerId);
        gr.setValue(this.NAME, providerApp[this.NAME]);
        gr.setValue(this.MESSAGE_AUTH, providerApp[this.MESSAGE_AUTH]);
        if (providerApp[this.SHORT_DESCRIPTION]) {
            gr.setValue(this.SHORT_DESCRIPTION, providerApp[this.SHORT_DESCRIPTION]);
        }
        return gr.insert();
    },

    /**
     * Update a record in sys_cs_provider_application.
     * 
     * @param {string} providerApplicationId - sys_id of the record to update
     * @param {object} providerApp - Key, value pairs matching the column names
     */
    updateProviderApplication: function(providerApplicationId, providerApp) {
        if (!providerApplicationId || !providerApp['inbound_id'] || !providerApp['message_auth']) {
            return '';
        }

        var gr = new GlideRecordSecure(this.PROVIDER_APPLICATION_TABLE);
        if (providerApplicationId &amp;&amp; gr.get(providerApplicationId)) {
            // if a record is present, then update it
            gr.setValue(this.INBOUND_ID, providerApp[this.INBOUND_ID]);
            gr.setValue(this.PROVIDER, this.providerId);
            gr.setValue(this.NAME, providerApp[this.NAME]);
            gr.setValue(this.MESSAGE_AUTH, providerApp[this.MESSAGE_AUTH]);
            if (providerApp[this.SHORT_DESCRIPTION]) {
                gr.setValue(this.SHORT_DESCRIPTION, providerApp[this.SHORT_DESCRIPTION]);
            }
            return gr.update() ? gr.getUniqueValue() : '';
        }
    },

    /**
     * Deletes a record in sys_cs_provider_application with the sys_id
     * @param {string} providerAppId
     */
    deleteProviderApp: function(providerApplicationId) {
        var gr = new GlideRecordSecure(this.PROVIDER_APPLICATION_TABLE);
        if (providerApplicationId &amp;&amp; gr.get(providerApplicationId)) {
            // if a record is present, then delete it
            return gr.deleteRecord();
        }
        return false;
    },

    // check if a provider channel is present
    isProviderPresent: function() {
        // check if getProviderById api with caching exists
        if (Object.getOwnPropertyNames(sn_cs.VASystemObject).indexOf("getProviderById") &lt; 0) {
            return this.isProviderPresentDeprecated();
        }
        return sn_cs.VASystemObject.getProviderById(this.providerId);
    },

    isProviderPresentDeprecated: function() {
        return new GlideRecord(this.PROVIDER_TABLE).get(this.providerId);
    },

    type: 'VACommonProviderAppUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-14 22:52:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;67099b66533201101c1addeeff7b123d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VACommonProviderAppUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Omni-Experience Standard Feature Set" source="sn_oe_sfs"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Omni-Experience Standard Feature Set"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_67099b66533201101c1addeeff7b123d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-27 16:50:46&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:05</sys_created_on>
        <sys_id>88e67c1d83f01210c6695855eeaad3ab</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VACommonProviderAppUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_88e67c1d83f01210c6695855eeaad3ab</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
