<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2cbca28307101000be32a04ff1021e8b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.HAAPIs&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;High Availability APIs&lt;/description&gt;
        &lt;name&gt;HAAPIs&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var HAAPIs = Class.create();

HAAPIs.prototype = {
  initialize : function() {
  },

  getPrimaryDatabase: function() {
      var dbc = GlideDBUtil.getPrimaryDBConfigurationParms();

      var dbConfig = {
		"name": dbc.getDatabaseName(),
        	"prefix": dbc.getPropertyPrefix(),
		"url": dbc.getURL(),
		"type": dbc.getRDBMS(),
		"user": dbc.getUser(),
        	"primary": true
      };

      return dbConfig;
  },

  getNodesAll: function() {
      return this._getNodes();
  },

  getNodesOnline: function() {
      return this._getNodes('online');
  },

  getNodesOffline: function() {
      return this._getNodes('offline');
  },

  getNodeById: function(sysId) {
      var nodes = this.getNodesAll();

      for(var i = 0; i &lt; nodes.length; i++) {
          var node = nodes[i];

          if (node.sys_id == sysId)
              return node;
      }

      return null;
  },
 
  //
  // INTERNAL FUNCTIONS
  //

  _findLowLatency: function(checkGroup,skipFailures) {
      var gr = new GlideRecord('ha_connectivity_test');
      gr.addQuery('check_group', checkGroup);
      gr.addQuery('state', '3');
      gr.query();

      if (gr.next()) {
          // something failed, lets return null so things know we had an issue
          if (skipFailures)
            gs.print("Skipping failed connectivity tests, just looking for successful tests...");
          else
            return null;
      }

      gr = new GlideRecord('ha_connectivity_test');
      gr.addQuery('check_group', checkGroup);
      gr.addQuery('latency', '&gt;', '-1');
      gr.orderBy('latency');
      gr.query();

      if (!gr.hasNext())
          return null;

      var nodes = new Array();

      while(gr.next()) {
          nodes.push(this.getNodeById(gr.cluster_node.sys_id.toString()));
      }

      return nodes;
  },

  _isGreaterThanZero: function(n) {
      if (n == "") {
          return false;
      }

      var num = parseInt(n, 10);
      return num &gt; 0;
  },

  _getNodes: function(status) {
      var gr = new GlideRecord('sys_cluster_state');

      if (status)
          gr.addQuery('status', status);

      gr.orderByDesc('status');
      gr.query();

      var nodeList = new Array();

      while(gr.next()) {
          var lastDate = gr.most_recent_message.getGlideObject().getRaw();
          var lastDateSecs = (new Packages.java.util.Date().getTime() - lastDate.getTime()) / 1000;

          var nodeConfig = {
              sys_id: gr.sys_id.toString(),
              system_id: gr.system_id.toString(),
              status: gr.status.toString(),
              last_checkin: gr.most_recent_message.toString(),
              last_checkin_friendly: GlideDateUtil.getDateTimeString(lastDateSecs, true)
          };

          try {
              this._addNodeAdditionals(gr.node_stats.stats, nodeConfig);
          } catch(e) {
              gs.log("ERROR: getting additional node attributes: " + e);
          }

          nodeList.push(nodeConfig);
      }

      return nodeList;
  },

  _addNodeAdditionals: function(stats, nodeConfig) {
      var xd = new XMLDocument(stats);

      nodeConfig['url'] = 'http://' + xd.getNodeText('//servlet.hostname') + ':' + xd.getNodeText('//servlet.port');
      nodeConfig['version'] = xd.getNodeText('//instance_assigned_version');
      nodeConfig['primary'] = xd.getNodeText('//db.prefix');
  },

  type: "HAAPIs"
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2011-08-10 02:40:43&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2cbca28307101000be32a04ff1021e8b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;127&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;HAAPIs&lt;/sys_name&gt;
        &lt;sys_package display_value="High Availability Cloning" source="com.snc.ha"&gt;ba533ca03c31311068bcf327dfe37f7a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2cbca28307101000be32a04ff1021e8b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2014-02-15 23:26:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:12</sys_created_on>
        <sys_id>2b21349983b01210c6695855eeaad3cd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>HAAPIs</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2b21349983b01210c6695855eeaad3cd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:12</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
