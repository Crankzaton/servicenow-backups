<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7e2fa172430be11003ce83d62bb8f26e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UnlinkCMNLocationsUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnlinkCMNLocationsUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UnlinkCMNLocationsUtils = Class.create();
UnlinkCMNLocationsUtils.prototype = {
    initialize: function() {
    },

    type: 'UnlinkCMNLocationsUtils'
};

UnlinkCMNLocationsUtils.childTablesMapping = {
	sn_map_core_place: [],
	sn_map_core_floor: ['sn_map_core_place'],
	sn_map_core_building: ['sn_map_core_floor', 'sn_map_core_place'],
	sn_map_core_campus: [ 'sn_map_core_building', 'sn_map_core_floor', 'sn_map_core_place']
};

UnlinkCMNLocationsUtils.parentColumnMapping = {
	sn_map_core_place : 'floor', //outdoor places handled with a separate loop.
	sn_map_core_floor: 'building',
	sn_map_core_building: 'campus'
};


UnlinkCMNLocationsUtils.unlinkLocations = function(currentTableName, sysId, keepSource) {
	if(!currentTableName)
		return;
	
	var currentGR = new GlideRecord(currentTableName);
	if(currentGR.get(sysId)){
		
		var childTables = UnlinkCMNLocationsUtils.childTablesMapping[currentTableName];
		
		for(var tableInd = 0; tableInd &lt; childTables.length; tableInd++){
			var tableName = childTables[tableInd];
			var childTableGr = new GlideRecord(tableName);
			childTableGr.addQuery('active', true);
			childTableGr.addQuery('cmn_location', '!=', '');
			childTableGr.addQuery(UnlinkCMNLocationsUtils.parentColumnMapping[tableName], sysId);
			childTableGr.query();
			while(childTableGr.next()){
				var childSysId = childTableGr.getUniqueValue();
				UnlinkCMNLocationsUtils.unlinkLocations(tableName, childSysId, keepSource);
			}
		}

		//outdoor places need to be unlinked too
		if(currentTableName == "sn_map_core_campus"){
			var failures = 0;
			var placeGr = new GlideRecord("sn_map_core_place");
			placeGr.addQuery('campus', sysId);
			placeGr.query();
			if(placeGr.getRowCount() &gt;0 ){
				while(placeGr.next()){
					var cmnId = placeGr.getValue('cmn_location');
					if(cmnId){
						var cmnGr = new GlideRecord('cmn_location');
						cmnGr.get(cmnId);
						cmnGr.cmn_location_source =  'NULL';
						if(!cmnGr.update())
							failures+=1;
					}
					placeGr.cmn_location = '';
					if(!placeGr.update())
						failures+=1;
				}
			}
			if(failures &gt; 0)
				throw 'Failures encountered while unlinking outdoor places. No. of failures: ' + failures;
		}


		if(!keepSource){
			var cmnLocationId = currentGR.getValue('cmn_location');
			var cmnGR = new GlideRecord("cmn_location");
			if( cmnLocationId &amp;&amp; !cmnGR.get(cmnLocationId)){
				throw 'Could not find CMN location record with the id ' + cmnLocationId + '. Corresponding Indoor record is in table ' + currentTableName + ' with the id ' + sysId ;
			}		
			else{
				cmnGR.cmn_location_source =  'NULL';
				cmnGR.update();
				}
				
		}
		currentGR.cmn_location = '';
		
		if(!currentGR.update())
			throw 'Could not unlink: ' +  currentTableName;
	}
};

UnlinkCMNLocationsUtils.partialUnlinkLocations = function (indoorTableName, indoorSysId) {
	
	UnlinkCMNLocationsUtils.unlinkLocations(indoorTableName,indoorSysId, true);

};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-05-30 12:24:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7e2fa172430be11003ce83d62bb8f26e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnlinkCMNLocationsUtils&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;fa60558563b044509d2cba84af9c019c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;fa60558563b044509d2cba84af9c019c&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7e2fa172430be11003ce83d62bb8f26e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-06 06:12:58&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:19</sys_created_on>
        <sys_id>c627309d83f01210c6695855eeaad31c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnlinkCMNLocationsUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c627309d83f01210c6695855eeaad31c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
