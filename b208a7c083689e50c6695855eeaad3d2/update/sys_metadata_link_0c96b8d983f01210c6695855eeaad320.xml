<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>49b8adcb675102106947c98f06b42063</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBInstrumentationSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Handles instrumentation for Knowledge records. Customers should not change this class.&lt;/description&gt;
        &lt;name&gt;KBInstrumentationSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBInstrumentationSNC = Class.create();
KBInstrumentationSNC.prototype = {
	initialize: function() {
		this.operations = {
			PUBLISH: 'publish',
			INSERT: 'insert'
		};

		// Instrumentation fields
		this.FIELD_INSTRUMENTATION_METADATA = 'instrumentation_metadata';
		this.FIELD_GENERATED_WITH_NOW_ASSIST = 'generated_with_now_assist';

		// Session key prefix
		this.INSTRUMENTATION_SESSION_KEY_PREFIX = 'instrumentation_metadata_';
	},

	/*
	 * @param {String} sys_id
	 * 
	 * returns void
	 */
	initializeSessionInstrumentationValues: function(sys_id) {
		var defaultInstrumentationValues = {
			firstLoadTimestamp: Date.now(),
			isGenAiGenerated: false
		};

		this._setInstrumentationSessionMetadata(sys_id, defaultInstrumentationValues);
	},

	/*
	 * @param {String} sys_id
	 * @param {String} key
	 * @param {String} value
	 * 
	 * returns void
	 */
	udpateSessionInstrumentationValue: function(sys_id, key, value) {
		var instrumentationMetadata = this._getInstrumentationSessionMetadata(sys_id);

		instrumentationMetadata[key] = value;

		this._setInstrumentationSessionMetadata(sys_id, instrumentationMetadata);
	},

	/*
	 * @param {GlideRecord} gr
	 * @param {Object} operation
	 * 
	 * returns void
	 */
	recordGCFEvent: function(gr, operation) {
		var instrumentationMetadata = this._getInstrumentationMetadata(gr, operation);

		if (!instrumentationMetadata)
			return;
		
		if (operation === this.operations.PUBLISH)
			this._recordPublishEvent(gr, instrumentationMetadata);
		else if (operation === this.operations.INSERT)
			this._recordInsertEvent(gr, instrumentationMetadata);
	},

	/*
	 * @param {GlideRecord} gr
	 * @param {String} operation
	 * 
	 * returns {Object} instrumentationMetadata
	 */
	_getInstrumentationMetadata: function(gr, operation) {
		var instrumentationMetadataString;
		var instrumentationMetadata;

		if (operation === this.operations.PUBLISH) {
			// Fetch from the record field
			instrumentationMetadataString = gr.getValue(this.FIELD_INSTRUMENTATION_METADATA);
		} else if (operation === this.operations.INSERT) {
			// Fetch from the session
			var key = this.SESSION_KEY_PREFIX + current.sys_id;
			instrumentationMetadataString = gs.getSession().getClientData(key);
		}

		try {
			instrumentationMetadata = JSON.parse(instrumentationMetadataString);
		} catch (err) {
			gs.log('Error: Failed to parse instrumentation metadata for record: ' + gr.sys_id)
		}

		return instrumentationMetadata;
	},

	/*
	 * @param {String} sys_id
	 * 
	 * returns String instrumentation metadata
	 */
	_getInstrumentationSessionMetadata: function(sys_id) {
		var key = this.SESSION_KEY_PREFIX + sys_id;
		var instrumentationMetadata;

		try {
			instrumentationMetadata = JSON.parse(gs.getSession().getClientData(key));
		} catch (err) {
			gs.log('Error: Failed to parse instrumentation metadata for record: ' + sys_id);
		}

		return instrumentationMetadata;
	},

	/*
	 * @param {String} sys_id
	 * @param {Object} instrumentationMetadata
	 * 
	 * returns void
	 */
	_setInstrumentationSessionMetadata: function(sys_id, instrumentationMetadata) {
		var key = this.SESSION_KEY_PREFIX + sys_id;
		var value = JSON.stringify(instrumentationMetadata);
		gs.getSession().putClientData(key, value);
	},

	/*
	 * @param {GlideRecord} gr
	 * @param {Object} instrumentationMetadata
	 * 
	 * returns void
	 */
	_recordInsertEvent: function(gr, instrumentationMetadata) {
		instrumentationMetadata.timeTakenToFirstSave = Date.now() - instrumentationMetadata.firstLoadTimestamp;

		gr.setValue(this.FIELD_INSTRUMENTATION_METADATA, JSON.stringify(instrumentationMetadata));
		gr.setValue(this.FIELD_GENERATED_WITH_NOW_ASSIST, instrumentationMetadata.isGenAiGenerated);

		// Collect GCF usage
		var sm = new GCFSampleMap();
		var collectionEvent = instrumentationMetadata.isGenAiGenerated ? 'insert_with_gen_ai' : 'insert_without_gen_ai';
		sm.put('time_to_insert', instrumentationMetadata.timeTakenToFirstSave.toString());
		GCFCollector.recordUsageEvent('knowledge', 'knowledge_article_create', collectionEvent, sm);
	},

	/*
	 * @param {GlideRecord} gr
	 * @param {Object} instrumentationMetadata
	 * 
	 * returns void
	 */
	_recordPublishEvent: function(gr, instrumentationMetadata) {
		instrumentationMetadata.timeTakenToPublish = Date.now() - instrumentationMetadata.firstLoadTimestamp;

		gr.setValue(this.FIELD_INSTRUMENTATION_METADATA, JSON.stringify(instrumentationMetadata));
		gr.setValue(this.FIELD_GENERATED_WITH_NOW_ASSIST, instrumentationMetadata.isGenAiGenerated);

		// Collect GCF usage
		var sm = new GCFSampleMap();
		var collectionEvent = instrumentationMetadata.isGenAiGenerated ? 'publish_with_gen_ai' : 'publish_without_gen_ai';
		sm.put('time_to_publish', instrumentationMetadata.timeTakenToPublish.toString());
		GCFCollector.recordUsageEvent('knowledge', 'knowledge_article_create', collectionEvent, sm);
	},

	type: 'KBInstrumentationSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-04-05 23:06:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;49b8adcb675102106947c98f06b42063&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBInstrumentationSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;a8c6f4a43cb1311068bcf327dfe37f3e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_49b8adcb675102106947c98f06b42063&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-04-08 18:21:50&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:43</sys_created_on>
        <sys_id>0c96b8d983f01210c6695855eeaad320</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>KBInstrumentationSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0c96b8d983f01210c6695855eeaad320</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:43</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
