<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>05833b6273a02300d144234ffff6a790</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;false&lt;/active&gt;
        &lt;api_name&gt;global.cxs_RecommendationHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Used to get recommendation in agent assist&lt;/description&gt;
        &lt;name&gt;cxs_RecommendationHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var cxs_RecommendationHelper = Class.create();
cxs_RecommendationHelper.prototype = Object.extendsObject(cxs_BaseMLHelper, {
    DEFAULT_TOTAL_COUNT: '1000',
    DEFAULT_THRESHOLD: 1,
	RECOMMENDATION_COUNT: 1,
	RECOMMENDATION_TITLE: 'recommendationTitle',
	RECOMMENDATION_MESSAGE: 'recommendationMessage',
    RECOMMENDATION_TYPE: 'recommendationType',
    RECOMMENDATION_ACTION: 'recommendationAction',
    processSearch: function () {
        //gs.log('******* inputs' + arguments[0]);
        var inputs = JSON.parse(arguments[0]); 
		
		//Initialize 
        if (!inputs['tableName'] || !inputs['solutionDefinition'])
            return;
		
        this.threshold = this.DEFAULT_THRESHOLD;
		this.solutionName = this.getSolutionName(inputs['solutionDefinition'].toString());
        this.tableName = inputs['tableName'].toString();
		this.recommendationMessage = inputs['RecommendationMessage'];
		this.recommendationTitle = inputs['RecommendationTitle'];
		this.detectionTitle= inputs['DetectionTitle'];
		this.detectionQuery= inputs['DetectionQuery'].toString();
		this.proposeActionSysId = inputs['proposeActionSysId'].toString();
        
        //gs.log('******* this.threshold' + this.threshold + this.tableName + this.count + this.request.formId + this.request.formTable + this.request.uiType + this.solutionName);
        
        //Cannot do ML search if there are no form details
        if (!this.request.formId || !this.request.formTable)
            return;
        
        var formGr = this.getFormGr();

        //Invalid form details
        if (!formGr)
            formGr = new GlideRecord(this.request.formTable);

		//Incident table - No recommendations needed for the form that has a parent incident
		if (this.request.formTable === 'incident' &amp;&amp; !formGr.parent_incident.nil())
			return;
		
		//Call ML serivce
		var MLResults = this.callRecommendationService(formGr);

		//Return if no results
		if (!MLResults || MLResults.length &lt;= 0) 
			return; 

		//Process results from ML predictions
		this.processResults(MLResults, formGr);

        //gs.log('********* response *********' + JSON.stringify(this.response));
    },
    
    getFormGr: function () {
        var gr = new GlideRecord(this.request.formTable);
        if (gr.get(this.request.formId)) {
            return gr;
        }
        return null;
    },
    
    callRecommendationService: function (formGr) {
        var predictor = new MLPredictor();
        var info = "";
        var solution = predictor.findActiveSolution(this.solutionName);
        if (!solution) 
            return;
        var outcomeArray = predictor.getPredictions(formGr, solution); //Threshold is default which is 1
        return outcomeArray;
    },
    
    processResults: function (results, formGr) {
		var formatedResults = this.formatResults(results);
		var sysIdsInOrder = formatedResults.sysIdsInOrder;
		if (sysIdsInOrder &amp;&amp; sysIdsInOrder.length &gt; 0) 
			this.assimilateResults(sysIdsInOrder, formatedResults.resultsJson, formGr);
    },
        
    formatResults: function (results) {
		var resultsJson = {};
		var sysIdsInOrder = [];
		if (results) {
			for (var i=0; i&lt; results.length; i++) {
				if (results[i].hasPrediction()){
                    var predictionObj = {};
					var sysId = results[i].predictedValue().length === 32 ? results[i].predictedValue(): results[i].predictedValueSysId();
                    predictionObj['predictedValue'] = results[i].predictedValue(); 
                    predictionObj['predictedValueSysId'] = sysId; //sys_id for similarity
                    predictionObj['confidence'] = results[i].confidence(); //similarity score
                    resultsJson[sysId] = predictionObj;
					sysIdsInOrder.push(sysId);
				} 
			}
		}
        return {'sysIdsInOrder': sysIdsInOrder, 'resultsJson': resultsJson};
    },
    
    updateSearchText: function (formGr) {
		var searchText = this.getSearchText();

		if (searchText) {
			var fieldGr = this.getTableConfigDefaultField();
			var currentSearchField = this.getCurrentSearchField();
			//gs.log('******* fieldGr.field' + fieldGr.field);
			//gs.log('******* currentSearchField' + currentSearchField + formGr.isValidField(currentSearchField));
			if (currentSearchField &amp;&amp; formGr.isValidField(currentSearchField))
				formGr.setValue(currentSearchField, searchText);
			else if (fieldGr &amp;&amp; fieldGr.field &amp;&amp; formGr.isValidField(fieldGr.field))
				formGr.setValue(fieldGr.field, searchText);
		}
		return formGr;
	},
	
	getSearchText: function () {
		return this.request.query &amp;&amp; this.request.query.freetext ? this.request.query.freetext : null;
	},
	
	getTableConfigDefaultField: function () {
		var tableConfig = this.getTableConfig();
		if (tableConfig) {
			return this.getDefaultField(tableConfig.sys_id);
		}
		return '';
	},
	
	getCurrentSearchField: function () {
		return this.request.meta &amp;&amp; this.request.meta['sourceField'];
	},
	
    getMajorGr: function (sysIdsInorder) {
        var gr = new GlideRecordSecure(this.tableName);
        gr.addQuery('sys_id', 'IN', sysIdsInorder.join());
		gr.addEncodedQuery(this.detectionQuery);//eg: 'major_incident_state=accepted^ORparent_incident.major_incident_state=accepted');
        gr.query();

		if (gr.getRowCount() === 0) 
			return gr;
		else if (gr.getRowCount() === 1) {
			gr.next();
			return gr;
		}
		else {
			// More than 1 major incidents are found. So, find the one that has maximum confidence
			var majorSysIds = {};
			
			while (gr.next()) {
				majorSysIds[gr.getUniqueValue()] = 1; //Obj makes search faster which is done later in the code
			}

			for (var i = 0;  i &lt; sysIdsInorder.length; i++) {

				if (majorSysIds[sysIdsInorder[i]]) {

					var resultsGr = new GlideRecord(this.tableName);
			        resultsGr.get(sysIdsInorder[i].toString());
					return resultsGr;
				}
			}
		}
    },
	
	getSimilarGr: function (sysIds) {
        var gr = new GlideRecordSecure(this.tableName);
        gr.addQuery('sys_id', 'IN', sysIds);
		gr.orderBy('sys_created_on');
        gr.query();
        return gr;
    },
    
    assimilateResults: function (sysIds, formatedResults, formGr) {
		//Remove self if it is present in the ML results
		var found = sysIds.indexOf(this.request.formId);
		//gs.log('****** self found '+ found);

		if (found !== -1) {
			sysIds.splice(found,1);
		}
		// Get records that are readable by the user
		var resultsGr = this.getMajorGr(sysIds);
		var res = new SNC.SearchResult();
		var uiType = this.request.uiType;
		var basicInfo;
		var addFieldGr;

        if(resultsGr.isValidRecord()) {
            addFieldGr = this.getAddResourcesFieldsGr(uiType);
            
            //Basic details
            basicInfo = this.extractBasicInfo(addFieldGr, resultsGr);
            
            res.title = basicInfo[this.RESULT_TITLE];
            res.snippet = basicInfo[this.RESULT_TEXT];
            res.link = basicInfo[this.RESULT_LINK];
            res.id = basicInfo[this.ID];
            
            //Meta details
            var metaInfo = this.extractMetaInfo(addFieldGr, resultsGr, formatedResults[resultsGr.getUniqueValue()], uiType);

            res.meta[this.META_SCORE] = metaInfo[this.META_SCORE];
            res.meta[this.CONFIDENCE] = metaInfo[this.CONFIDENCE];
            res.meta[this.META_ADDITIONAL_FIELDS] = metaInfo[this.ADDITIONAL_FIELDS].toString();
			res.meta[this.RECOMMENDATION_TITLE] = this.detectionTitle ? this.detectionTitle: 'Major';
			res.meta[this.RECOMMENDATION_TYPE] = 'detection';
			this.response.results.push(res);
        } else {
			if (this.request.formTable === 'incident' &amp;&amp; !(new sn_major_inc_mgmt.MajorIncidentTriggerRules(formGr)).canProposeMIC())
				return;
			var similarGr = this.getSimilarGr(sysIds);
			if (similarGr.next()) {
				addFieldGr = this.getAddResourcesFieldsGr(uiType);
				
				//Basic details
				basicInfo = this.extractBasicInfo(addFieldGr, similarGr);
				
				res.title = basicInfo[this.RESULT_TITLE];
				res.snippet = basicInfo[this.RESULT_TEXT];
				res.link = basicInfo[this.RESULT_LINK];
				res.id = basicInfo[this.ID] + 'REC';
				res.meta[this.RECOMMENDATION_TITLE] = this.recommendationTitle ? this.recommendationTitle : 'Recommendation';
				res.meta[this.RECOMMENDATION_TYPE] = 'recommendation';
				res.meta[this.RECOMMENDATION_MESSAGE] = this.getRecommendationDetails(similarGr);
				res.meta[this.RECOMMENDATION_ACTION] = this.proposeActionSysId;
				this.response.results.push(res);
			}
		}
    },
	
	getRecommendationDetails: function(similarGr) {
		var similarCount = similarGr.getRowCount();
		var since = Math.floor(Math.abs(new GlideDateTime(String(similarGr.getValue('sys_created_on'))).getNumericValue() - new GlideDateTime().getNumericValue())/ (1000 * 3600));
		return gs.getMessage(this.recommendationMessage, [similarCount, since.toString()]);
	},
   
    type: 'cxs_RecommendationHelper'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-09-18 03:21:32&lt;/sys_created_on&gt;
        &lt;sys_id&gt;05833b6273a02300d144234ffff6a790&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;22&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;cxs_RecommendationHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Contextual Search" source="com.snc.contextual_search"&gt;67c7786c3cb1311068bcf327dfe37f57&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_05833b6273a02300d144234ffff6a790&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-01-25 19:22:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:17</sys_created_on>
        <sys_id>da40fc5583b01210c6695855eeaad316</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>cxs_RecommendationHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_da40fc5583b01210c6695855eeaad316</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:17</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
