<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>18c890a00b013200acc30e7363673a6e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PPMUserProfiles&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PPMUserProfiles&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PPMUserProfiles = Class.create();
PPMUserProfiles.prototype = {
    initialize: function() {
        this.appLiveProfile = new GlideappLiveProfile();
    },
	getSingleProfile: function(userId) {
		if(userId) {
			var profile = this.getProfiles([userId])[0];
			return profile;
		} else {
			return {};
		}
	},
	getGroupName: function(groupId){
		var gr=new GlideRecord('sys_user_group');
		gr.get(groupId);
		return gr.getDisplayValue();
	},
     getGroupProfiles : function(memberIds) {
        PPMDebug.log("Into PPMUserProfiles.getProfiles -&gt; " + memberIds.join(","));
        var self = this;
        var mems = [], missedMemberIds = [];
        for (var i = 0; i &lt; memberIds.length; i++) {
            var profile = {};
            var userId = memberIds[i];
            var profileId = this.appLiveProfile.getID(userId);
            if(JSUtil.notNil(profileId)) {
                var name = this.getGroupName(userId);
                profile = this.generateProfileFromCache(userId, profileId, name);
				if(profile.imgUrl &amp;&amp; profile.imgUrl.indexOf("default") &gt; 0) {
					profile.imgUrl = this.getAvatarFromDB(userId, 'sys_user_group');
				}
                mems.push(profile);
            } else {
                missedMemberIds.push(memberIds[i]);
            }
        }
        PPMDebug.log("Into PPMUserProfiles.getProfiles From Cache -&gt; " + (new JSON()).encode(mems));
        PPMDebug.log("Into PPMUserProfiles.getProfiles Missed Memebers -&gt; " + (new JSON()).encode(missedMemberIds));
        if(missedMemberIds.length &gt; 0) {
            for (var i = 0; i &lt; missedMemberIds.length; i++) {
                var grUser = new GlideRecord('sys_user_group');
                grUser.get(missedMemberIds[i]);
                var name = grUser.getValue("name");
                var profile = self.generateProfile(missedMemberIds[i], 'sys_user_group', missedMemberIds[i], name);
                mems.push(profile);
            }
        }
        return mems;
    },   
    getProfiles : function(memberIds) {
        PPMDebug.log("Into PPMUserProfiles.getProfiles -&gt; " + memberIds.join(","));
        var self = this;
        var mems = [], missedMemberIds = [];
        for (var i = 0; i &lt; memberIds.length; i++) {
            var profile = {};
            var userId = memberIds[i];
            var profileId = this.appLiveProfile.getID(userId);
            if(JSUtil.notNil(profileId)) {
                var name = this.appLiveProfile.getName(profileId);
                profile = this.generateProfileFromCache(userId, profileId, name);
				if(profile.imgUrl &amp;&amp; profile.imgUrl.indexOf("default") &gt; 0) {
					profile.imgUrl = this.getAvatarFromDB(userId, 'sys_user');
				}
                mems.push(profile);
            } else {
                missedMemberIds.push(memberIds[i]);
            }
        }
        PPMDebug.log("Into PPMUserProfiles.getProfiles From Cache -&gt; " + (new JSON()).encode(mems));
        PPMDebug.log("Into PPMUserProfiles.getProfiles Missed Memebers -&gt; " + (new JSON()).encode(missedMemberIds));
        if(missedMemberIds.length &gt; 0) {
            for (var i = 0; i &lt; missedMemberIds.length; i++) {
                var grUser = new GlideRecord('sys_user');
                grUser.get(missedMemberIds[i]);
                var name = grUser.getValue("name");
                var profile = self.generateProfile(missedMemberIds[i], 'sys_user', missedMemberIds[i], name);
                mems.push(profile);
            }
        }
        return mems;
    },

    getProfile: function (userId, userName) {
        PPMDebug.log("Into PPMUserProfiles.getProfile -&gt; " + userId + " - " + userName);
        var name = String(userName);
        var profile = {};
        profile.id = userId;
        profile.text = name;
        profile.imgUrl = '';

        name = name.replace(/[^\w\s\.]\w+[^\w\s\.]|[^\w\s\.]/, "");
        name = name.replace(/\s+/, ' ');
        var parts = name.split(' ');
		if(parts[0] &amp;&amp; parts[1]) {
			profile.initials = (parts[0].substring(0, 1) + parts[1].substring(0,1)).toUpperCase();
		} else {
			profile.initials = parts[0].substring(0, 1).toUpperCase();
		}
        
        return profile;
    },

    getAvatarFromDB: function (profileId, profileTable) {
        PPMDebug.log("Into PPMUserProfiles.getAvatarFromDB -&gt; " + profileId + " - " + profileTable);
        var gr = new GlideRecord('sys_attachment');
        gr.addQuery('table_sys_id', profileId);
        gr.addQuery('table_name', 'ZZ_YY' + profileTable);
        gr.query();
        if ( gr.next() )
            return (gr.sys_id + '.iix');
		
        return "";
    },
    
    generateProfile: function(userId, profileTable, profileId, name) {
        PPMDebug.log("Into PPMUserProfiles.generateProfile -&gt; " + userId + " - " + profileTable + " - " + profileId + " - " + name);
        var profile = this.getProfile(userId, name);
        profile.imgUrl = this.getAvatarFromDB(profileId, profileTable);
        return profile;
    },

    generateProfileFromCache: function (userId, profileId, name) {
        PPMDebug.log("Into PPMUserProfiles.generateProfileFromCache -&gt; " + userId + " - " + profileId + " - " + name);
        var profile = this.getProfile(userId, name);
        var avatar = this.appLiveProfile.getAvatar(profileId);
        profile.imgUrl = avatar;
        return profile;
    },
    
    type: 'PPMUserProfiles'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-02-16 14:49:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;18c890a00b013200acc30e7363673a6e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;28&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PPMUserProfiles&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;92ef82e747e64210cd4e1ce4316d43f1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_18c890a00b013200acc30e7363673a6e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-02-05 08:45:00&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:00</sys_created_on>
        <sys_id>9fa03cd583b01210c6695855eeaad33a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PPMUserProfiles</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9fa03cd583b01210c6695855eeaad33a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
