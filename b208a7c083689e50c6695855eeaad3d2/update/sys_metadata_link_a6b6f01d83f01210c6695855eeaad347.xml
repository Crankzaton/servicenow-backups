<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5ae8e3c05f172010d70fc133337313aa</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SNHelpAnalyticsController&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;log the data to GCF&amp;#13;
Usage:&amp;#13;
var controller = new SNHelpAnalyticsController();&amp;#13;
//code to create an object(data) with the data you want to log&amp;#13;
controller(controller, point, event, data);&lt;/description&gt;
        &lt;name&gt;SNHelpAnalyticsController&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SNHelpAnalyticsController = Class.create();
SNHelpAnalyticsController.prototype = {
    CATEGORY: 'custom_metric',
    ADS_CATEGORY: 'adoption_services',
    ADS_POINTS: {
        helpCentre: 'help_centre',
        helpModal: 'help_modal'
    },
    POINT: 'adoption_services',
    EVENTS: {
        setup: {
            newRecord: 'guidance_new_record',
            usageFrequency: 'setup_usage_frequency'
        },
        panel: {
            feedback: 'help_panel_feedback'
        },
        // Instrumentation event to capture payload when guidance type is embedded help.
        help_centre: {
            newRecord: 'new_record'
        },
        // Instrumentation event for modal completion event.
        modal: {
            complete: "modal_completion"
        }
    },
    logData: function(category, point, event, data) {
        if (!data) {
            gs.log("SNHelpAnalyticsController: Data has not been provided");
            return;
        }
        if (event === this.EVENTS.setup.newRecord) {
            var sm = new GCFSampleMap();
            sm.put('type', data.type || '');
            sm.put('name', data.name || '');
            sm.put('sys_package', data.sys_package || '');
            sm.put('sys_scope', data.sys_scope || '');
            sm.put('roles', data.roles || '');
            sm.put('status', data.status || '');
            GCFCollector.recordUsageEvent(category, point, event, sm);
        } else if (event === this.EVENTS.setup.usageFrequency) {
            var freqData = new GCFSampleMap();
            freqData.put('name', data.name || '');
            freqData.put('type', data.type || '');
            freqData.put('roles', data.roles || '');
            freqData.put('sys_scope', data.sys_scope || '');
            freqData.put('sys_package', data.sys_package || '');
            GCFCollector.recordUsageEvent(category, point, event, freqData);
        } else if (event === this.EVENTS.panel.feedback) {
            var feedbackData = new GCFSampleMap();
            feedbackData.put('feedback', data.feedback);
            feedbackData.put('topicId', data.topicId);
            GCFCollector.recordUsageEvent(category, point, event, feedbackData);
        } else if (event == this.EVENTS.help_centre.newRecord) {
            var sample = new GCFSampleMap();
            sample.put('name', data.name || '');
            sample.put('sys_package', data.sys_package || '');
            sample.put('sys_scope', data.sys_scope || '');
            sample.put('context', data.context || '');
            sample.put('application_route', data.application_route || '');
            sample.put('route_params', data.route_params || '');
            sample.put('snc_created', data.snc_created || '');
            GCFCollector.recordUsageEvent(category, point, event, sample);
        } else if (event === this.EVENTS.modal.complete) {
            var payload = new GCFSampleMap();
            payload.put('name', data.name || '');
            payload.put('snc_created', data.snc_created || '');
            payload.put('sys_scope', data.sys_scope || '');
            payload.put('sys_package', data.sys_package || '');
            GCFCollector.recordUsageEvent(category, point, event, payload);
        }
    },
    type: 'SNHelpAnalyticsController'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-30 11:31:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5ae8e3c05f172010d70fc133337313aa&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SNHelpAnalyticsController&lt;/sys_name&gt;
        &lt;sys_package display_value="ServiceNow Help and Guidance Backend" source="com.glide.sn_help"&gt;cab9f0283cf1311068bcf327dfe37f11&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5ae8e3c05f172010d70fc133337313aa&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-02 11:31:57&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:27</sys_created_on>
        <sys_id>a6b6f01d83f01210c6695855eeaad347</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SNHelpAnalyticsController</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a6b6f01d83f01210c6695855eeaad347</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:27</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
