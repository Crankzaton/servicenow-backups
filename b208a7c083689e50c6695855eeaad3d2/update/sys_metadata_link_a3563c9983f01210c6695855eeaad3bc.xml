<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3808cfd553362010c440ddeeff7b123e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAAISearchResultEventMetricCollector&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Collects the non-genius SEARCH_RESULT_EVENT / CLICK metrics of AI search. The collected metrics will be used for click-metrics and GlideSignals's event tracking&lt;/description&gt;
        &lt;name&gt;VAAISearchResultEventMetricCollector&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAAISearchResultEventMetricCollector = Class.create();
VAAISearchResultEventMetricCollector.EVENT_TYPE = global.AISearchConstants.RESULT_EVENT_TYPE_SEARCH ;
	
VAAISearchResultEventMetricCollector.prototype = Object.extendsObject(global.VAAISearchMetricCollector, {
	
	glideSignalsEvent: null,
	
	initialize: function(searchMetadata, vaSystem, vaInputs, vaVars) {
		// update the object for the timestamp of the execution.
		vaVars.time = global.VAClickMetrics.getCurrentTime();
		global.VAAISearchMetricCollector.prototype.initialize.call(this, searchMetadata, vaSystem, vaInputs, vaVars);
	},
	
	/**
	* This method will be called after the searchResultMetadata is set.
	*/
	postSearchResultMetadata: function(searchResultMetadata) {
		
		this.setClickMetricsValue(global.VAClickMetricsConstants.KEY_NAME, global.VAClickMetricsConstants.VALUE_SEARCH_RESULT_DISPLAYED);
		this.setClickMetricsValue(global.VAClickMetricsConstants.KEY_RESULT_TYPE, global.VAClickMetricsConstants.VALUE_AI_SEARCH_RESULT);
	},
	
	collect: function(data, itemIndex) {
		
		if (!this.isOperationAllowed() || gs.nil(data) || gs.nil(data.propValues))
			return;
		
		if (gs.nil(this.glideSignalsEvent)) {
			this.glideSignalsEvent 
				= new AISearchGlideSignalsSearchResultEvent(
					this.getSearchResultMetadata(), this.getParamBagForGlideSignalsEvent());
		}
		
		var model = data.propValues.model;
		
		if (gs.nil(model))
			return;
		
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_TITLE, global.AISearchHelper.getDocumentTitleFromModel(model));
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_DESCRIPTION, global.AISearchHelper.getDescriptionFromModel(model));
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_ORDER, itemIndex);
		
		var resultSysId = global.AISearchHelper.getResourceIdFromModel(model);
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_DOCUMENT_ID, resultSysId);
		
		var tableName = global.AISearchHelper.getResourceTableFromModel(model);
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_DOCUMENT_TABLE, tableName);
		
		var srcTable = global.AISearchHelper.getResourceTableFromModel(model);
		var dataSourceTitle = global.AISearchHelper.getDataSourceTitle(srcTable);
		
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_DATA_SOURCE_TITLE, dataSourceTitle);
		this.glideSignalsEvent.buildPayload(data, global.AISearchConstants.CLICK_ACTION_SIGNAL_TYPE, itemIndex + 1);
	},
	
	getGlideSignalsPayload: function() {
		if (gs.nil(this.glideSignalsEvent))
			return {};
		
		return this.glideSignalsEvent.getPayload();
	},
	
	getGlideSignalsEventType : function() {
		return global.VAAISearchResultEventMetricCollector.EVENT_TYPE;
	},
	
	sendOutMetrics: function() {
		
		// Note that this payload does not include GlideSignal's payload.
		// This payload only contains click_metrics playload. GlideSignals' payload will be sent to GlideSignals API via click_metrics' URL
		// we're sending this payload for DISPLAY event purpose.
		if (!this.isOperationAllowed() || gs.nil(this.getPayload()))
			return; 
		
		var payload = this.getPayload();
		payload.glide_signals = {};
		
		var payloadStr = JSON.stringify(payload);
		global.VAClickMetrics.queueAISearchEvent(this.getConversationId(), this.getConversationTaskId(), payloadStr);
	},
	
	type: 'VAAISearchResultEventMetricCollector'
});														   ]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-09 07:59:43&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3808cfd553362010c440ddeeff7b123e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;43&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAAISearchResultEventMetricCollector&lt;/sys_name&gt;
        &lt;sys_package display_value="Virtual Agent Platform Topic Blocks" source="com.glide.cs.topic_blocks"&gt;289d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3808cfd553362010c440ddeeff7b123e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-29 08:33:47&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:52</sys_created_on>
        <sys_id>a3563c9983f01210c6695855eeaad3bc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAAISearchResultEventMetricCollector</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a3563c9983f01210c6695855eeaad3bc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
