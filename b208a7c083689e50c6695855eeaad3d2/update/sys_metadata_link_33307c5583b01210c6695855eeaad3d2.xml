<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>03f911531b310100227e5581be0713d7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LDAPClientUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;LDAP client callable utils&lt;/description&gt;
        &lt;name&gt;LDAPClientUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("LDAPUtils");

var LDAPClientUtils = Class.create();
LDAPClientUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    
    testOUConnection: function() {
        var ouSysId = this.getParameter("sysparm_ouSysId");
        var ldapOu = new GlideRecord("ldap_ou_config");
        ldapOu.get(ouSysId);
        
        var result = this.newItem("result");
        var error = this.newItem("error");
        result.appendChild(error);
        
        var ldapConnectionTester = new GlideLDAPTestConnectionProcessor(ldapOu.server.toString(), ouSysId);
        var testResult = false;
        try {
            testResult = ldapConnectionTester.testConnection();
            error.setAttribute('code', gs.getSession().getProperty("ldap_test.errorCode"));
            
            var message = this.newItem('message');
            message.setAttribute('value', GlideXMLUtil.removeInvalidChars(gs.getSession().getProperty("ldap_test.errorMessage")));
            error.appendChild(message);
        }catch(e) {
            error.setAttribute('code', "41000");
            var message = this.newItem('message');
            message.setAttribute('value', GlideXMLUtil.removeInvalidChars(e.getMessage()));
            error.appendChild(message);
        }
        
        return testResult;
    },
    
    testServerConnection: function() {
        var serverSysId = this.getParameter("sysparm_serverSysId");
        
        var result = this.newItem("result");
        var error = this.newItem("error");
        result.appendChild(error);
        
        var ldapConnectionTester = new GlideLDAPTestConnectionProcessor(serverSysId, null);
        var testResult = false;
        try {
            testResult = ldapConnectionTester.testConnection();
            error.setAttribute('code', gs.getSession().getProperty("ldap_test.errorCode"));
            
            var message = this.newItem('message');
            message.setAttribute('value', GlideXMLUtil.removeInvalidChars(gs.getSession().getProperty("ldap_test.errorMessage")));
            error.appendChild(message);
        }catch(e) {
            error.setAttribute('code', "41000");
            var message = this.newItem('message');
            message.setAttribute('value', GlideXMLUtil.removeInvalidChars(e.getMessage()));
            error.appendChild(message);
        }
        
        return testResult;
    },
    
    testServerURLConnections: function() {
        var serverSysId = this.getParameter("sysparm_serverSysId");
        
        var result = this.newItem("result");
        var errors = this.newItem("errors");
        result.appendChild(errors);

	    var markUpAuthoritative    = true;
	    var markDownAuthoritative  = true;        
        var ldapConnectionTester = new GlideLDAPTestConnectionProcessor(serverSysId, null, markUpAuthoritative, markDownAuthoritative);
        var testResult = false;
        try {
            testResult = ldapConnectionTester.testServerURLConnections();
            var allURLConnResults = gs.getSession().getProperty("ldap_test.all_urls.result");
            // Clear results in session
            gs.getSession().clearProperty("ldap_test.all_urls.result");
            
            var urlresultIterator = allURLConnResults.iterator();
            var allSuccessful = true;
            while(urlresultIterator.hasNext()) {
				var ldapURL = urlresultIterator.next();
				if(ldapURL.getTestErrorCode() == 0)
					continue;// Do not show successful messages
				
                var error = this.newItem("error");
                errors.appendChild(error);
                
                error.setAttribute('id', ldapURL.getID());
                error.setAttribute('url', ldapURL.getURL());
                error.setAttribute('code', ldapURL.getTestErrorCode());
                
                if(ldapURL.getTestErrorCode() != 0)
                    allSuccessful = false;
                
                var message = this.newItem('message');
                message.setAttribute('value', GlideXMLUtil.removeInvalidChars(ldapURL.getURL() + ' ' + ldapURL.getTestErrorMessage()));
                error.appendChild(message);
            }
            if(allSuccessful == true) {
                result.removeChild(errors);
                errors = this.newItem("errors");
                result.appendChild(errors);
                var error = this.newItem("error");
                errors.appendChild(error);
                error.setAttribute('code', 0);
                
                var message = this.newItem('message');
                message.setAttribute('value', "Connected Successfully");
                error.appendChild(message);
            }
        } catch(e) {
            var error = this.newItem("error");
            errors.appendChild(error);
            error.setAttribute('code', "41000");
            var message = this.newItem('message');
            message.setAttribute('value', GlideXMLUtil.removeInvalidChars(e.getMessage()));
            error.appendChild(message);
        }
        
        return testResult;
    },
    
    type: 'LDAPClientUtils'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-06-11 17:28:03&lt;/sys_created_on&gt;
        &lt;sys_id&gt;03f911531b310100227e5581be0713d7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;85&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LDAPClientUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="LDAP Support" source="com.glide.ldap"&gt;b4a638643cb1311068bcf327dfe37fda&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_03f911531b310100227e5581be0713d7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2015-04-02 15:38:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:07</sys_created_on>
        <sys_id>33307c5583b01210c6695855eeaad3d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LDAPClientUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_33307c5583b01210c6695855eeaad3d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:07</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
