<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>16d9e8765ba53010461b52380a81c772</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DynamicSchedulingResourceUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DynamicSchedulingResourceUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SYS_USER_TYPE = "sys_user";
var WM_CREW_TYPE = "wm_crew";

var DynamicSchedulingResourceUtil = Class.create();
DynamicSchedulingResourceUtil.prototype = {
    initialize: function() {},

    getExtensionPoint: function(extPointName, params, record) {

        if (typeof GlideScriptedExtensionPoint == "undefined") {
            gs.error("global.DynamicSchedulingResourceUtil:  Scripted extension points are not enabled");
            return null;
        }

        try {
            var ep = new GlideScriptedExtensionPoint().getExtensions(extPointName);
            for (var e = 0; e &lt; ep.length; e++) {
                if (ep[e].handles != undefined &amp;&amp; ep[e].handles(params)) {
                    return ep[e];
                }
            }
            gs.error("global.DynamicSchedulingResourceUtil:  No extension point exists for " + extPointName);
        } catch (ex) {
            gs.error("global.DynamicSchedulingResourceUtil: Error fetching extension point " + extPointName);
        }

        return null;

    },

    getResourceEntity: function(extPointName, params, taskIds, taskGR) {
        if ((gs.nil(params) || gs.nil(params.type))) {
            if (!gs.nil(taskGR)) {
                params = this.getParamsByTaskGR(taskGR);
            } else if (!gs.nil(taskIds)) {
                params = this.getParamsByTaskIds(taskIds);
            }
        }

        var resourceControllerExt = this.getExtensionPoint(extPointName, params);
        if (resourceControllerExt &amp;&amp; resourceControllerExt.getResourceImpl != undefined)
            return resourceControllerExt.getResourceImpl(params);

        return null;
    },

    getParamsByTaskIds: function(taskIds) {
        if (taskIds.length == 1) {
            return this.getParamsByTaskId(taskIds[0]);
        }

        return {};
    },

    getParamsByTaskId: function(taskId) {
        var taskGR = new GlideRecord("wm_task");
        taskGR.get(taskId);
        return this.getParamsByTaskGR(taskGR);
    },

    getParamsByTaskGR: function(taskGR) {
        var params = {};
        if (GlidePluginManager.isActive("com.snc.fsm_crew_scheduling") &amp;&amp; (taskGR.getValue("requires_crew") == true || taskGR.requires_crew == true)) {
            params.type = WM_CREW_TYPE;
            return params;
        }

        params.type = SYS_USER_TYPE;
        return params;
    },

    type: 'DynamicSchedulingResourceUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-28 05:12:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;16d9e8765ba53010461b52380a81c772&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DynamicSchedulingResourceUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Dynamic Scheduling" source="com.snc.dynamic_scheduling"&gt;88cb5ebf4722c210cd4e1ce4316d43f3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_16d9e8765ba53010461b52380a81c772&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-16 09:57:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:51</sys_created_on>
        <sys_id>45a0b8d583b01210c6695855eeaad3ed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DynamicSchedulingResourceUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_45a0b8d583b01210c6695855eeaad3ed</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
