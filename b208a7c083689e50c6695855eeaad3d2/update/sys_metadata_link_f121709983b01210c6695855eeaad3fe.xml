<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2c092d58d701210058c92cf65e6103c9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ProjectWorkbenchAjaxService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Ajax utility which is responsible for fetching data required to draw Project Workbench as dashboard.&lt;/description&gt;
        &lt;name&gt;ProjectWorkbenchAjaxService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ProjectWorkbenchAjaxService = Class.create();
ProjectWorkbenchAjaxService.prototype = Object.extendsObject(AbstractAjaxProcessor, {


    getWorkbenchData : function() {
        var projectId = this.getParameter('sysparm_project_id'); 
        var name = this.getParameter('sysparm_name');
        var items = this.getWorkbenchService().getData(projectId);
        return items;
    },
    
    getSprintData : function() {
        var sprintId = this.getParameter('sysparm_sprint_id'); 
        var name = this.getParameter('sysparm_field_name'); 
        var gr = new GlideRecord('rm_sprint');
        var result = this.newItem("result");
        if (gr.get(sprintId)) {
            if(gr.getValue(name)){
                var gdt = new GlideDateTime(gr.getValue(name));
                result.setAttribute("message","success");
                var sys_id = this.getParameter('sysparm_projectTaskId');
                var ptmUtil = new ProjectTaskManagerUtil();
                var scheduleId = ptmUtil.getScheduleId(sys_id);
                var scheduledDate = ptmUtil.adjustDatePerSchedule(scheduleId,gdt.getDisplayValue(),name);
                result.setAttribute("date",scheduledDate);
            }else{
                result.setAttribute("message","error");
                result.setAttribute("errorMsg",gs.getMessage("Error in getting Date for Sprint"));
            }
        }else{
            result.setAttribute("message","error");
            result.setAttribute("errorMsg",gs.getMessage("Error in getting Data for Sprint"));
        }
    },

    getWorkbenchService: function(){
        if(!this.workbenchService){
            this.workbenchService = new ProjectWorkbenchService();
        }
        return this.workbenchService;
    },  

    initializeScrumAPI : function() {
        this.scrumAPI = new ProjectWorkbenchScrumApis();
    },

    getScrumTeams: function() {
        this.initializeScrumAPI();
        var teams = this.scrumAPI.getScrumTeams();
        return this.encodeJson(teams);
    },
    
    getScrumTeamMembers: function() {
        this.initializeScrumAPI();
        var team_sys_id = this.getParameter('team_sys_id'); 
        var members = this.scrumAPI.getScrumTeamMembers(team_sys_id);
        return this.encodeJson(members);
    },

    getSprintCalendar: function() {
        this.initializeScrumAPI();
        var team_sys_id = this.getParameter('team_sys_id'); 
        var calendar = this.scrumAPI.getSprintCalendar(team_sys_id);
        return this.encodeJson(calendar);
    },

    updatePhaseInStories: function() {
        this.initializeScrumAPI();
        var project_sys_id = this.getParameter('project_sys_id'); 
        var phase_sys_id = this.getParameter('phase_sys_id'); 
        return this.returnResult( this.scrumAPI.updatePhaseInStories(project_sys_id, phase_sys_id) );
    },

    updateTeamInStories: function() {
        this.initializeScrumAPI();
        var project_sys_id = this.getParameter('sysparm_project_id'); 
        var team_sys_id = this.getParameter('sysparm_team_id');
        return this.returnResult( this.scrumAPI.updateTeamInStories(project_sys_id, team_sys_id) );
    },
    

    updateTeamForProject: function(){
        var projectId = this.getParameter('sysparm_project_id');
        var teamId = this.getParameter('sysparm_team_id');
        return this.getWorkbenchService().updateTeamForProject(projectId, teamId);
    },  
    
    applyTemplateForProject: function(){
        this.getWorkbenchService().applyTemplateForProject(this.getParameter('sysparm_template_id'), this.getParameter('sysparm_project_id'), this.getParameter('sysparm_start_date'),this.getParameter('sysparm_scope_id'));
        return true;
    },  
    
    updateProjectTask : function() {
        var projectTaskId = this.getParameter('sysparm_task_id');
        var key = this.getParameter('sysparm_key');
        var val = this.getParameter('sysparm_val');
        return this.getWorkbenchService().updateProjectTask(projectTaskId, key, val);       
    },
    
    getUserProjectPreference: function() {
        var projectId = this.getParameter('sysparm_project_id');
        var prefKey = this.getParameter('sysparm_pref_key');
        return this.getWorkbenchService().getUserProjectPreference(projectId, prefKey);
    },
    
    setUserProjectPreference: function() {
        var projectId = this.getParameter('sysparm_project_id');
        var prefKey = this.getParameter('sysparm_pref_key');        
        var prefData = this.getParameter('sysparm_pref_data');
        this.getWorkbenchService().setUserProjectPreference(projectId, prefKey, prefData);
    },

    setUserPreference: function() {
        var sysClassName = this.getParameter('sysparm_sys_class_name');
        var prefKey = this.getParameter('sysparm_pref_key');        
        var prefData = this.getParameter('sysparm_pref_data');
        this.getWorkbenchService().setUserPreference(sysClassName, prefKey, prefData);
    },

    encodeJson: function(object) {
        var json = new JSON();
        var jsonResponse = json.encode(object);
        return jsonResponse;    
    },

    returnResult: function(result) {
        if( result ) {
            result = {};
            result.status = 'success';
            result.message = 'successfully updated';
        }
        else {
            result = {};
            result.status = 'error';
            result.message = 'invalid inputs';
        }
        return this.encodeJson(result);
    },
    
    type: 'ProjectWorkbenchAjaxService'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-05-28 20:30:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2c092d58d701210058c92cf65e6103c9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ProjectWorkbenchAjaxService&lt;/sys_name&gt;
        &lt;sys_package display_value="Project Workbench" source="com.snc.project_workbench"&gt;9bff8ee747e64210cd4e1ce4316d4341&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2c092d58d701210058c92cf65e6103c9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-03-06 04:22:35&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:05</sys_created_on>
        <sys_id>f121709983b01210c6695855eeaad3fe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProjectWorkbenchAjaxService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f121709983b01210c6695855eeaad3fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
