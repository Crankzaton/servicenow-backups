<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6a32dd80eb6230103da4ee2c47522852</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MLLabelCandidate&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utilities related to ML Label Candidate table&lt;/description&gt;
        &lt;name&gt;MLLabelCandidate&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MLLabelCandidate = Class.create();
(function() {
    var TABLE = 'ml_label_candidate';
    var FIELDS = {
        TEXT: 'text',

        SUGGESTED_LABEL: 'suggested_label',
        RECOMMENDATION: 'recommendation',

        SOURCE: 'source',
        PRODUCT: 'product',
        FREQUENCY: 'frequency',

        LAST_RECEIVED_TIME: 'last_received_time',
        COMMENTS: 'comments',
        DISCREPANCY: 'discrepancy'
    };

    var getQuery = function(labelCandidateData, filter) {
        var query = FIELDS.TEXT + '=' + labelCandidateData.text;
        if (labelCandidateData.label)
            query += '^' + FIELDS.SUGGESTED_LABEL + '=' + labelCandidateData.suggested_label;
        if (filter)
            query += '^' + filter;
        return query;
    };

    MLLabelCandidate.recordExists = function(labelCandidateData, filter) {
        var ga = new GlideAggregate(TABLE);
        ga.addAggregate('COUNT');
        ga.addEncodedQuery(getQuery(labelCandidateData, filter));
        ga.query();
        return ga.next() &amp;&amp; ga.getAggregate('COUNT') &gt; 0;
    };

    MLLabelCandidate.getRecords = function(labelCandidateData, filter) {
        var gr = new GlideRecord(TABLE);
        gr.addEncodedQuery(getQuery(labelCandidateData, filter));
        gr.query();
        return gr;
    };

    MLLabelCandidate.getRecordBySysId = function(sysId) {
        var gr = new GlideRecord(TABLE);
        return gr.get(sysId) &amp;&amp; gr;
    };

    MLLabelCandidate.createRecord = function(data) {
        if (!data || !data[FIELDS.TEXT]) return null; // text is mandatory
        var gr = new GlideRecord(TABLE);
        gr.newRecord();
        for (var key in FIELDS) {
            var field = FIELDS[key];
            if (data[field]) gr.setValue(field, data[field]);
        }
        return gr.insert();
    };

    MLLabelCandidate.deleteRecords = function(filter) {
        if (!filter) return null;
        var gr = new GlideRecord(TABLE);
        gr.addEncodedQuery(filter);
        return gr.deleteMultiple();
    };

    MLLabelCandidate.prototype = {
        initialize: function(sysId, gr) {
            this.sysId = sysId;
            if (!gs.nil(gr)) {
                this.gr = gr;
                this.sysId = gr.getUniqueValue();
            }
        },

        getGr: function() {
            if (!this.gr) this.gr = MLLabelCandidate.getRecordBySysId(this.sysId);
            return this.gr;
        },

        updateData: function(data) {
            var gr = this.getGr();
            for (var field in data)
                gr.setValue(field, data[field]);
            return gr.update();
        },

        deleteRecord: function() {
            var gr = this.getGr();
            return gr &amp;&amp; gr.deleteRecord();
        },

        type: 'MLLabelCandidate'
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-07 12:46:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6a32dd80eb6230103da4ee2c47522852&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MLLabelCandidate&lt;/sys_name&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;c41430683c31311068bcf327dfe37f28&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6a32dd80eb6230103da4ee2c47522852&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-12-07 10:08:15&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:14</sys_created_on>
        <sys_id>dae6305d83f01210c6695855eeaad3e1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MLLabelCandidate</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_dae6305d83f01210c6695855eeaad3e1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:14</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
