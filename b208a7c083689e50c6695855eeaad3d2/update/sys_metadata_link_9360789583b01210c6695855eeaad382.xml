<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0c628f8053a60110a8edddeeff7b124d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_vsc.VSCScanAjaxProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VSCScanAjaxProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VSCScanAjaxProcessor = Class.create();
VSCScanAjaxProcessor.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    SUCCESS_CODE: 0,
    FAILED_CODE: 1,

    executeScan: function(func) {
        try {
            return JSON.stringify({
                status: this.SUCCESS_CODE,
                progressId: func()
            });
        } catch (e) {
            return JSON.stringify({
                status: this.FAILED_CODE,
                message: e.message
            });
        }
    },

    collectUsageMetricWithParam: function() {
        var event = this.getParameter("sysparm_metric_event");
        this.collectUsageMetric(event);
    },

    getCheckTable: function() {
        var table = "";
        var checkId = this.getParameter('sysparm_sys_id');
        var grTable = new GlideRecord("scan_table_check");
        grTable.addQuery("sys_id", checkId);
        grTable.query();
        if (grTable.next()) {
            table = "scan_table_check";
        } else {
            var grCol = new GlideRecord("scan_column_type_check");
            grCol.addQuery("sys_id", checkId);
            grCol.query();
            if (grCol.next()) {
                table = "scan_column_type_check";
            }
        }
		return table;
    },

    collectUsageMetric: function(event) {
        var sampleMap = new GCFSampleMap();
        sampleMap.put('event_name', '' + event);
        GCFCollector.recordUsageEvent('custom_metric', 'instance_scan_suite', 'instance_scan_suite_event', sampleMap);
    },

    executeTestScan: function() {
        this.collectUsageMetric('scan_instance_ajax_test_scan');
        var sysId = this.getParameter("sysparm_sys_id");
        var tableName = this.getParameter("sysparm_table_name");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerTestScan(sysId, tableName);
        });
    },

    executePointScan: function() {
        this.collectUsageMetric('scan_instance_ajax_point_scan');
        var sysId = this.getParameter("sysparm_sys_id");
        var tableName = this.getParameter("sysparm_table_name");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerPointScan(tableName, sysId);
        });
    },

    executeSuiteScan: function() {
        this.collectUsageMetric('scan_instance_ajax_suite_scan');
        var sysId = this.getParameter("sysparm_sys_id");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerSuiteScan(sysId);
        });
    },

    executeUpdateSetScan: function() {
        this.collectUsageMetric('scan_instance_ajax_update_set_scan');
        var sysId = this.getParameter("sysparm_sys_id");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerUpdateSetScan(sysId);
        });
    },

    executeUpdateSetBatchScan: function() {
        this.collectUsageMetric('scan_instance_ajax_update_set_batch_scan');
        var sysId = this.getParameter("sysparm_sys_id");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerUpdateSetBatchScan(sysId);
        });
    },

    executeAppScan: function() {
        this.collectUsageMetric('scan_instance_ajax_app_scan');
        var scopeId = this.getParameter("sysparm_scope_id");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerAppScan(scopeId);
        });
    },

    executeFullScan: function() {
        this.collectUsageMetric('scan_instance_ajax_full_instance_scan');
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerFullScan();
        });
    },

    executeScanFromCombo: function() {
        this.collectUsageMetric('scan_instance_ajax_from_combo_scan');
        var comboId = this.getParameter("sysparm_combo_id");
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerScanFromCombo(comboId);
        });
    },

    executeSuiteScanWithTargets: function() {
        this.collectUsageMetric('scan_instance_ajax_suite_with_targets_scan');
        var comboId = this.getOrCreateCombo();
        return this.executeScan(function() {
            return new sn_instance_scan.ScanInstance().triggerScanFromCombo(comboId);
        });
    },

    getOrCreateCombo: function() {
        var suiteId = this.getParameter('sysparm_suite_sys_id');
        var targetTable = this.getParameter('sysparm_target_table');
        var targetIds = JSON.parse(this.getParameter('sysparm_target_sys_ids'));

        return new sn_instance_scan.ScanUtil().getOrCreateComboFromSuiteAndTargets(suiteId, targetTable, targetIds);
    },

    hasActiveChecksInSuiteTree: function() {
        var scan = new sn_instance_scan.SuiteTree(this.getParameter("sysparm_suite_sys_id"));
        return scan.hasActiveChecksInSuiteTree();
    },

    _createResponse: function(status, message) {
        return JSON.stringify({
            status: status,
            message: message
        });
    },


    type: 'VSCScanAjaxProcessor'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-25 16:33:00&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0c628f8053a60110a8edddeeff7b124d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VSCScanAjaxProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Security Center" source="sn_vsc"&gt;a51d46e3f2014110366b10017c5ba675&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Security Center"&gt;a51d46e3f2014110366b10017c5ba675&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0c628f8053a60110a8edddeeff7b124d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-28 16:59:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:54</sys_created_on>
        <sys_id>9360789583b01210c6695855eeaad382</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VSCScanAjaxProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9360789583b01210c6695855eeaad382</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
