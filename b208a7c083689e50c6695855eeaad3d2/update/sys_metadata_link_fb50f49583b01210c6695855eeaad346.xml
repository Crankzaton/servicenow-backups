<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>09d6be32c7433010dd7ab6c427c2602e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFActionService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Class for "sn_rf_recommendation_action" table utility functions.&lt;/description&gt;
        &lt;name&gt;RFActionService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFActionService = Class.create();

RFActionService.serializeEvaluationOutput = function(evaluationOutputs) {
    var ruleOutputs = {};
    // Serialize the rule outputs for generating recommendations
    var evaluationOutputsKeys = evaluationOutputs ? Object.keys(evaluationOutputs) : {};
    for (var idx1 = 0; idx1 &lt; evaluationOutputsKeys.length; idx1++) {
        var output = {};
        var key = evaluationOutputsKeys[idx1];
        var value = evaluationOutputs[key];
        if (value &amp;&amp; value.isValidRecord) {
            output[RFConstants.TYPE] = RFConstants.evaluationOutputTypes.REFERENCE;
            output[RFConstants.REFERENCE_TYPE] = value.getTableName();
            output[RFConstants.VALUE] = value.getValue(RFConstants.fields.SYS_ID);
        } else {
            output[RFConstants.TYPE] = RFConstants.evaluationOutputTypes.STRING;
            output[RFConstants.VALUE] = value;
        }
        ruleOutputs[key] = output;
    }
    return JSON.stringify(ruleOutputs);
};

RFActionService.createObjectFromRuleOutputs = function(ruleOutputsString) {
    var ruleOutputsObject = {};
    var ruleOutputsObjectDetails = {
        isAccessible: true,
        ruleOutputsObject: ruleOutputsObject
    };
    try {
        var ruleOutputs = JSON.parse(ruleOutputsString);
        var hiddenKeys = ruleOutputs[RFConstants.evaluatorVariable.HIDDEN_INTERNAL] &amp;&amp;
            ruleOutputs[RFConstants.evaluatorVariable.HIDDEN_INTERNAL][RFConstants.VALUE] || [];
        var keys = Object.keys(ruleOutputs);
        for (var idx1 = 0; idx1 &lt; keys.length; idx1++) {
            var ruleOutput = ruleOutputs[keys[idx1]];
            var value = ruleOutput[RFConstants.VALUE];
            if (ruleOutput[RFConstants.TYPE] == RFConstants.evaluationOutputTypes.REFERENCE) {
                var table = ruleOutput[RFConstants.REFERENCE_TYPE];
                //Check if the record is accessible to logged-in user. Skip ACLs check if the schema element is hidden.
                if (hiddenKeys.indexOf(keys[idx1]) != -1) {
                    var gr = new GlideRecord(table);
                } else {
                    gr = new GlideRecordSecure(table);
                }
                if (gr.isValid() &amp;&amp; gr.get(value)) {
                    ruleOutputsObject[keys[idx1]] = gr;
                } else {
                    ruleOutputsObjectDetails.isAccessible = false;
                    ruleOutputsObject[keys[idx1]] = value;
                }
            } else {
                ruleOutputsObject[keys[idx1]] = value;
            }
        }
    } catch (e) {
        new RFLogger("RFActionService - createObjectFromRuleOutputs").logError(e);
        return ruleOutputsObjectDetails;
    }
    return ruleOutputsObjectDetails;
};

RFActionService.discardRecommendation = function(contextRecord, ruleOutputsString, options) {
    var result = {};
    var ruleOutputs = RFActionService.createObjectFromRuleOutputs(ruleOutputsString).ruleOutputsObject;
    var historyId = RFActionService._addInHistory(contextRecord, ruleOutputs, ruleOutputsString, RFConstants.historyStatus.DISCARDED, options.experienceId, RFConstants.actionType.DISCARD);
    if (historyId) {
        result[RFConstants.experienceDetails.MESSAGE] = RFConstants.DISCARD_SUCCESS_MESSAGE;
    } else {
        result[RFConstants.ERROR_CODE] = 40001;
        result[RFConstants.ERROR_MESSAGE] = RFConstants.DISCARD_ERROR_MESSAGE;
        new RFLogger("RFActionService - discardRecommendation").logError(result[RFConstants.ERROR_MESSAGE]);
    }
    return result;
};

RFActionService._addInHistory = function(contextRecord, ruleOutputs, ruleOutputsString, status, experienceId, actionID) {
    var experience = new RFExperienceService(experienceId);
    return RFHistoryService.create(contextRecord, experienceId, actionID, experience.getPrimaryActionId() == actionID, status, ruleOutputs, ruleOutputsString);
};

RFActionService.prototype = {
    tableName: RFConstants.tables.SN_RF_RECOMMENDATION_ACTION,

    initialize: function(grOrSysId) {
        this.rfLogger = new RFLogger("RFActionService");
        if (grOrSysId &amp;&amp; grOrSysId.sys_class_name == this.tableName) {
            this.currentRecord = grOrSysId;
        } else if (grOrSysId) {
            var actionGr = new GlideRecord(this.tableName);
            if (actionGr.get(grOrSysId)) {
                this.currentRecord = actionGr;
            }
        }
    },

    hasValidRecord: function() {
        return this.currentRecord &amp;&amp; this.currentRecord.sys_class_name == this.tableName;
    },

    isActive: function() {
        return this.currentRecord.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_ACTIVE);
    },

    getLabel: function() {
        return this.currentRecord.getDisplayValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_LABEL);
    },

    getSysId: function() {
        return this.currentRecord.getValue(RFConstants.fields.SYS_ID);
    },

    getUndoActionSysId: function() {
        return this.currentRecord.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_UNDO_ACTION);
    },

    getUndoAction: function() {
        var undoActionId = this.getUndoActionSysId();
        if (undoActionId) {
            var action = new RFActionService(undoActionId);
            if (action.hasValidRecord()) {
                return action;
            }
        }
    },

    getType: function() {
        return this.currentRecord.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_TYPE);
    },

    isServerScript: function() {
        return this.getType() == RFConstants.actionType.SERVER_SCRIPT;
    },

    isSubflow: function() {
        return this.getType() == RFConstants.actionType.SUBFLOW;
    },

    isUXFClientAction: function() {
        return this.getType() == RFConstants.actionType.UXF_CLIENT_ACTION;
    },

    getServerScript: function() {
        return this.currentRecord.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_SERVER_SCRIPT);
    },

    getSubflow: function() {
        return this.currentRecord[RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_SUBFLOW].getRefRecord();
    },

    getActionKey: function() {
        return this.currentRecord.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_ACTION_KEY);
    },

    getActionClientPayload: function() {
        return this.currentRecord.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_CLIENT_PAYLOAD);
    },

    markCompleteOrRevert: function(contextRecord, ruleOutputsString, isUndo, options) {
        var ruleOutputs = RFActionService.createObjectFromRuleOutputs(ruleOutputsString).ruleOutputsObject;
        var historyId = this._updateHistory(contextRecord, ruleOutputs, ruleOutputsString, isUndo, options);
        if (historyId) {
            return {
                message: RFConstants.EMPTY_STRING
            };
        } else {
            if (isUndo) {
                var exception = new RFExceptionManager("MARK_REVERT_FAILED");
            } else {
                exception = new RFExceptionManager("MARK_COMPLETE_FAILED");
            }
            this.rfLogger.logError(exception.getMessage(), "RFActionService - markCompleteOrRevert");
            return exception.getJSON();
        }
    },

    performAction: function(contextRecord, ruleOutputsString, isUndo, options) {
        var ruleOutputs = RFActionService.createObjectFromRuleOutputs(ruleOutputsString).ruleOutputsObject;
        var errorCode, errorMessage, message;
        var result = {};
        result[RFConstants.STATUS] = RFConstants.INITIALIZED;
        if (this.isServerScript()) {
            var evaluator = new GlideScopedEvaluator();
            evaluator.putVariable(RFConstants.actionVars.CURRENT, contextRecord);
            evaluator.putVariable(RFConstants.actionVars.RULE_OUTPUTS, ruleOutputs);
            result = evaluator.evaluateScript(this.currentRecord, RFConstants.fields.SN_RF_RECOMMENDATION_ACTION_SERVER_SCRIPT);
        } else if (this.isSubflow()) {
            var subflow = this.getSubflow();
            try {
                var inputs = {};
                inputs[RFConstants.actionVars.CURRENT] = contextRecord;
                inputs[RFConstants.actionVars.RULE_OUTPUTS_SUBFLOW] = ruleOutputs;
                var internalName = subflow.getValue(RFConstants.actionVars.INTERNAL_NAME);
                var scopeSysId = subflow.getValue(RFConstants.actionVars.SCOPE);
                var scope = (scopeSysId === RFConstants.actionVars.GLOBAL) ? scopeSysId : subflow.sys_scope.scope;
                var subflowName = scope + RFConstants.actionVars.DOT + internalName;

                var output = sn_fd.FlowAPI.getRunner().subflow(subflowName).inForeground().withInputs(inputs).run();
                result = output.getOutputs();
                this._convertActionResultToCamelCase(result);
            } catch (e) {
                this.rfLogger.logError("Error occured while executing performAction for subflow " + subflow.sys_id + ". Error: " + e);
            }
        }

        if (result &amp;&amp; result.status == RFConstants.SUCCESS) {
            this._updateHistory(contextRecord, ruleOutputs, ruleOutputsString, isUndo, options);
            return {
                "message": result.message || RFConstants.DEFAULT_ACTION_SUCCESS_MESSAGE
            };
        } else {
            errorMessage = (result &amp;&amp; result.errorMessage) || RFConstants.DEFAULT_ACTION_ERROR_MESSAGE;
            errorCode = result &amp;&amp; result.errorCode;
        }

        if (!errorCode) {
            var exception = new RFExceptionManager("UNKNOWN_ERROR");
            errorCode = exception.getCode();
            errorMessage = exception.getMessage();
        }
        this.rfLogger.logError("Error occurred while performing action " + this.getSysId() +
            ". Error: " + errorMessage, "RFActionService - performAction");
        return {
            "errorCode": errorCode,
            "errorMessage": errorMessage
        };
    },

    getDetails: function(contextRecord, evaluationOutputs, experienceId, needUndo) {
        var details;
        try {
            if (needUndo &amp;&amp; this.hasValidRecord()) {
                var undoAction = this.getUndoAction();
                if (undoAction) {
                    details = undoAction._getDetails(contextRecord, evaluationOutputs, experienceId, true, this.getSysId());
                } else {
                    details = {};
                    details[RFConstants.actionDetails.TYPE] = RFConstants.actionType.DISABLED;
                    details[RFConstants.actionDetails.ACTION_SYS_ID] = this.getSysId();
                    details[RFConstants.actionDetails.LABEL] = this.getLabel();
                }
            } else if (!needUndo &amp;&amp; this.hasValidRecord()) {
                details = this._getDetails(contextRecord, evaluationOutputs, experienceId, false);
            }
        } catch (e) {
            this.rfLogger.logError("Error occurred while getting details for action " + this.getSysId() +
                ". Error: " + e, "RFActionService - getDetails");
        }
        return details;
    },

    _getDetails: function(contextRecord, evaluationOutputs, experienceId, isUndo, undoOf) {
        var details = {};
        details[RFConstants.actionDetails.TYPE] = this.getType();
        details[RFConstants.actionDetails.ACTION_SYS_ID] = this.getSysId();
        details[RFConstants.actionDetails.LABEL] = this.getLabel();
        details[RFConstants.actionDetails.IS_UNDO] = isUndo;
        details[RFConstants.actionDetails.ADDITIONALPARAMETERS] = {};

        if (isUndo) {
            details[RFConstants.actionDetails.ADDITIONALPARAMETERS][RFConstants.actionDetails.UNDO_OF] = undoOf;
        }
        details[RFConstants.actionDetails.RULE_OUTPUTS] = RFActionService.serializeEvaluationOutput(evaluationOutputs);
        details[RFConstants.actionDetails.ADDITIONALPARAMETERS][RFConstants.actionDetails.EXPERIENCE_ID] = experienceId;
        if (this.isUXFClientAction()) {
            details[RFConstants.actionDetails.ACTION_KEY] = this.getActionKey();
            details[RFConstants.actionDetails.CLIENT_PAYLOAD] = new RFPillParserUtils().getParsedValue(this.getActionClientPayload(), contextRecord, evaluationOutputs);
        }
        details[RFConstants.actionDetails.ADDITIONALPARAMETERS] = JSON.stringify(details[RFConstants.actionDetails.ADDITIONALPARAMETERS]);
        return details;
    },

    _convertActionResultToCamelCase: function(result) {
        if (!result) {
            return;
        }
        result.errorCode = result.error_code;
        result.errorMessage = result.error_message;
    },

    _updateHistory: function(contextRecord, ruleOutputs, ruleOutputsString, isUndo, options) {
        if (isUndo) {
            var historyId = RFHistoryService.markReverted(contextRecord, options.experienceId, options.undoOf, ruleOutputs);
        } else {
            historyId = RFActionService._addInHistory(contextRecord, ruleOutputs, ruleOutputsString, RFConstants.historyStatus.COMPLETED, options.experienceId, this.getSysId());
        }
        return historyId;
    },

    type: "RFActionService"
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-11 05:07:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;09d6be32c7433010dd7ab6c427c2602e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFActionService&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_09d6be32c7433010dd7ab6c427c2602e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-25 10:52:13&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:40</sys_created_on>
        <sys_id>fb50f49583b01210c6695855eeaad346</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFActionService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_fb50f49583b01210c6695855eeaad346</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:40</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
