<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9d0b1a9c77552110f9818d8bbe5a9991</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SyncTypeUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class for iamsync_type table. Used for Federated ID generation.&lt;/description&gt;
        &lt;name&gt;SyncTypeUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SyncTypeUtil = Class.create();

/**
 * @param tableName: table name selected by the user
 * @param fields: ID Fields selected by the user for generating federated id
 * @return: Map&lt;field_name,field_label&gt; of unsupported and blacklisted fields added to ID Fields
 */
SyncTypeUtil.checkUnsupportedFields = function(tableName, fields) {
    var unsupportedFieldMap = {};
    if (JSUtil.nil(fields)) {
        return unsupportedFieldMap;
    }
    var syncResourceTD = new GlideTableDescriptor(tableName);
    var resourceSchema = syncResourceTD.getSchema();
    var fieldList = fields.split(',');
    fieldList.forEach(function(fieldName) {
        var fieldED = resourceSchema.get(fieldName);
        if (SyncTypeUtil.isBlacklistedField(fieldED.getName()) || !SyncTypeUtil.isSupportedField(fieldED)) {
            unsupportedFieldMap[fieldName] = fieldED.getLabel();
        }
    });
    return unsupportedFieldMap;
};

/**
 * @param tableName: table name selected by the user
 * @param fields: ID Fields selected by the user for generating federated id
 * Return a map&lt;field_name,field_label&gt; of mandatory fields not part to ID Fields
 */
SyncTypeUtil.checkRequiredFields = function(tableName, fields) {
    var missingRequiredFieldMap = {};
    if (tableName == 'sys_user' &amp;&amp; (JSUtil.nil(fields) || fields.split(',').indexOf('user_name') == -1)) {
        var sysUserTD = new GlideTableDescriptor('sys_user');
        var sysUserSchema = sysUserTD.getSchema();
        missingRequiredFieldMap['user_name'] = sysUserSchema.get('user_name').getLabel();
    }
    return missingRequiredFieldMap;
};

/**
 * @param fieldName: column name of the table
 * Return true if the field is a system field or federated_id
 */
SyncTypeUtil.isBlacklistedField = function(fieldName) {
    var blacklistedFields = ['sys_domain_path', 'federated_id', 'sys_id', 'sys_tags', 'sys_class_path', 'sys_class_name', 'sys_mod_count', 'sys_updated_by', 'sys_updated_on', 'sys_created_by', 'sys_created_on'];
    return blacklistedFields.indexOf(String(fieldName)) != -1;
};

/**
 * @param fieldED: Element Descriptor of the column
 * @return: true if the field is eligible for federated id generation
 */
SyncTypeUtil.isSupportedField = function(fieldED) {
    return fieldED.isString() &amp;&amp;
        fieldED.isActive() &amp;&amp;
        !'password'.equals(fieldED.getInternalType()) &amp;&amp;
        !'password2'.equals(fieldED.getInternalType()) &amp;&amp;
        !'user_roles'.equals(fieldED.getInternalType()) &amp;&amp;
        !'user_image'.equals(fieldED.getInternalType()) &amp;&amp;
        !'image'.equals(fieldED.getInternalType()) &amp;&amp;
        !fieldED.isVirtual() &amp;&amp;
        !fieldED.hasAttribute('no_replicate') &amp;&amp;
        !fieldED.hasAttribute('no_data_replicate') &amp;&amp;
        !fieldED.isMetricType() &amp;&amp;
        !fieldED.isEdgeEncrypted();
};

/**
 * @param map: Map&lt;key, value&gt; 
 * @return: comma-separated-string of the map values.
 */
SyncTypeUtil.getCommaSeparatedValues = function(map) {
    var commaSeparatedValue = '';
    Object.keys(map).forEach(function(key) {
        commaSeparatedValue += map[key];
        if (key != Object.keys(map).slice(-1)) {
            commaSeparatedValue += ', ';
        }
    });
    return commaSeparatedValue;
};

SyncTypeUtil.prototype = {
    type: 'SyncTypeUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-24 21:19:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9d0b1a9c77552110f9818d8bbe5a9991&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SyncTypeUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Federated ID Generation" source="com.glide.identity.globalid"&gt;6788d35b47220210cd4e1ce4316d4319&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9d0b1a9c77552110f9818d8bbe5a9991&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-01 03:31:24&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:11</sys_created_on>
        <sys_id>3ab8b09183341210c6695855eeaad35a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SyncTypeUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3ab8b09183341210c6695855eeaad35a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
