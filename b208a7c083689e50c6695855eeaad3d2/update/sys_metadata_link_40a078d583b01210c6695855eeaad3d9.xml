<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>15f2285773011300f49d0690fdf6a721</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VariableUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VariableUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VariableUtil = Class.create();
VariableUtil.prototype = {
    initialize: function() {

    },
	getDisplayValue : function (questionId, questionValue) {
		var question = GlideappQuestion.getQuestion(questionId);
		if (question) {
			question.setValue(questionValue);
			return question.getDisplayValue();
		}
		return this.getMultiRowSetDisplayValue(questionId, questionValue);
	},
	getMultiRowSetDisplayValue : function (vSetId, questionValue) {
		var vSetGr = new GlideRecord("item_option_new_set");
		var resultArr = [];
		if (vSetGr.get(vSetId)) {
			var multiRowSetQuestions = [];
			var multiRowQuestionIds = [];
			var multiRowSetMetaGr = new GlideRecord("item_option_new");
			multiRowSetMetaGr.addQuery("variable_set", vSetId);
			multiRowSetMetaGr.query();
			while (multiRowSetMetaGr.next()) {
				var q = GlideappQuestion.getQuestion(multiRowSetMetaGr.getUniqueValue(), multiRowSetMetaGr);
				if (q != null) {
					multiRowSetQuestions.push(q);
					multiRowQuestionIds.push(q.getId());
				}
				else
					gs.log("VariableUtil: Invalid question definition in Table variable "+ vSetId +", item_option_new record with sys_id "+multiRowSetMetaGr.getUniqueValue());
			}
			var tableVariableClassExists = JSUtil.has(sn_sc.TableVariableSetJS);
			var valArr = JSON.parse(questionValue);
			for (var i=0 ; i &lt; valArr.length; i++) {
				var row = valArr[i];
				var rowVal = {};
				var questionsObj = {};
				if (tableVariableClassExists) {
					var tableVariableSet = new sn_sc.TableVariableSetJS(vSetId);
					tableVariableSet.setRowData(JSON.stringify(row));
					tableVariableSet.setSequence(multiRowQuestionIds);
					tableVariableSet.setFetchQuestionsFromModel(false);
					tableVariableSet.load();
					var questions = tableVariableSet.getFlatQuestions();
					for (var idx = 0; idx &lt; questions.length; idx++) {
						var qName = questions[idx].name;
						if (!qName)
							continue;
						questionsObj[qName] = questions[idx];
					}
				}
				
				for (var j=0; j &lt; multiRowSetQuestions.length; j++) {
					var col = multiRowSetQuestions[j];
					if (row[col.getName()])
						col.setValue(row[col.getName()]);
					else
						col.setValue("");
					var displayValue = '';
					if (col.getType() == 29 &amp;&amp; row[col.getName()]) {
						var parts = [];
						parts = this.parseDurationToParts(row[col.getName()]);
						displayValue += getDurationDisplayValue(parts);
						rowVal[col.getName()] = displayValue;
					}
					else if (col.getType() == 9 || col.getType() == 10)
						rowVal[col.getName()] = col.getValue();
					else {
						if (tableVariableClassExists &amp;&amp; questionsObj[col.getName()] != undefined)
							displayValue = questionsObj[col.getName()].displayvalue;
						else
							displayValue = col.getDisplayValue();
						rowVal[col.getName()] = displayValue;
					}
				}
				resultArr.push(rowVal);
			}
		}
		return JSON.stringify(resultArr);

		function getDurationDisplayValue(parts) {
			var d = parseInt(parts[0], 10);
			var h = parseInt(parts[1], 10);
			var m = parseInt(parts[2], 10);
			var s = parseInt(parts[3], 10);
			var daysString = d &gt; 0 ? d + ' ' : '';
			var timeString = [h, m, s].map(prependZero).join(':');
			return daysString + timeString;
		}

		function prependZero(number) {
			return (number &lt; 10 ? '0' : '') + number;
		}
	},

	parseDurationToParts : function(value) {
		var MS_IN_DAY = 86400000;
		var parts = value.split(" ");
		if (parts.length == 2) {
			var times = parts[1].split(":");
			for (var i = 0; i &lt; times.length; i++)
				parts[1 + i] = times[i];
			var dateParts = parts[0].split("-");
			if (dateParts.length == 3)
				// coming from existing record: "1970-01-05
				// 00:05:00"
				parts[0] = parseInt(Date.parse(dateParts[1]
						+ '/' + dateParts[2] + '/'
						+ dateParts[0] + ' 00:00:00 UTC'))
						/ MS_IN_DAY;
		}

		return parts;
	},
	copyAttachment : function(attachmentId, targetTable, targetId) {
		var gr = new GlideRecord("sys_attachment");
		if (GlideStringUtil.isEligibleSysID(attachmentId) &amp;&amp; gr.get(attachmentId)) {
			var sysAttach = new GlideSysAttachment();
			return sysAttach.write(targetId, targetTable, gr.getValue('file_name'), gr.getValue('content_type'), sysAttach.getContentStream(gr.getUniqueValue()));
		}
		return '';
	},
    type: 'VariableUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-03-29 20:20:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;15f2285773011300f49d0690fdf6a721&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VariableUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;3607b4283cb1311068bcf327dfe37fee&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_15f2285773011300f49d0690fdf6a721&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-05 09:44:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:46</sys_created_on>
        <sys_id>40a078d583b01210c6695855eeaad3d9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VariableUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_40a078d583b01210c6695855eeaad3d9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:46</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
