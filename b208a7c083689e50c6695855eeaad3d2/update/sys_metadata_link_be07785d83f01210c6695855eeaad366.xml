<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>75cd26c0870ef910df0943760cbb3553</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.wfSPMCMSNotification&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Send Notification to Specfic Groups&lt;/description&gt;
        &lt;name&gt;wfSPMCMSNotification&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var wfSPMCMSNotification = Class.create();
wfSPMCMSNotification.prototype = {
    initialize: function() {},


    /*@name   getImpactedAssignGroup
    @description used to get groups based on selection of impacted groups
    @param demand record and type of the group
    @returns the list of Groups*/

    getImpactedAssignGroup: function(dmnRec, type) {
        var grpStr = new wfSPMCMSDemandUtils().getImpactedGroups(dmnRec);
        var grpArray = grpStr.split(",");
        var grpImpLength = grpArray.length;
        var impFuncGroups = [];
        var grpSBC;
        var grpCS;
        var grpDefault;
        var grpPC;
        var funcGrps;
        var funcGrpsObj;
        var grpUtil = new ArrayUtil();

        if (type === "func") {
            funcGrps = gs.getProperty('wf.spm.cms.func.change.group');
            funcGrpsObj = JSON.parse(funcGrps);
            grpSBC = funcGrpsObj["CM_CL_CMS_SBC_FUNC_GRP_CHANGE_MGMT"];
            grpCS = funcGrpsObj["CM_CL_CMS_CREDIT_SVCS_FUNC_GRP_CHANGE_MGMT"];
            grpDefault = funcGrpsObj["CM_CL_CMS_REG_POL_FUNC_GRP_CHANGE_MGMT"];
            grpPC = funcGrpsObj["CM_CL_CMS_PC_FUNC_GRP_CHANGE_MGMT"];
        } else if (type === "chgOwner") {
            funcGrps = gs.getProperty('wf.spm.cms.change.owner.group');
            funcGrpsObj = JSON.parse(funcGrps);
            grpSBC = funcGrpsObj["CM_CL_CMS_SBC_OWNERS"];
            grpCS = funcGrpsObj["CM_CL_CMS_CREDIT_SVCS_OWNERS"];
            grpDefault = funcGrpsObj["CM_CL_CMS_REG_POL_OWNERS"];
            grpPC = funcGrpsObj["CM_CL_CMS_PC_OWNERS"];
        } else if (type === "imp") {
            funcGrps = gs.getProperty('wf.spm.cms.func.imp.team');
            funcGrpsObj = JSON.parse(funcGrps);
            grpSBC = funcGrpsObj["CM_CL_CMS_SBC_FUNC_GRP_IMPL_TEAM"];
            grpCS = funcGrpsObj["CM_CL_CMS_CREDIT_SVCS_FUNC_GRP_IMPL_TEAM"];
            grpDefault = funcGrpsObj["CM_CL_CMS_REG_POL_FUNC_GRP_IMPL_TEAM"];
            grpPC = funcGrpsObj["CM_CL_CMS_PC_FUNC_GRP_IMPL_TEAM"];
        } else if (type === "sme") {
            funcGrps = gs.getProperty('wf.spm.cms.func.sme.group');
            funcGrpsObj = JSON.parse(funcGrps);
            grpSBC = funcGrpsObj["CM_CL_CMS_SBC_CHANGE_CHAMPIONS"];
            grpCS = funcGrpsObj["CM_CL_CMS_CREDIT_SVCS_CHANGE_CHAMPIONS"];
            grpDefault = funcGrpsObj["CM_CL_CMS_REG_POL_CHANGE_CHAMPIONS"];
            grpPC = funcGrpsObj["CM_CL_CMS_PC_CHANGE_CHAMPIONS"];
        }
        for (var i = 0; i &lt; grpImpLength; i++) {

            if (grpArray[i] === 'Small Business Cards') {
                impFuncGroups.push(grpSBC);
            } else if (grpArray[i] === 'Credit Services') {
                impFuncGroups.push(grpCS);
            } else if (grpArray[i] === 'Product Capabilities') {
                impFuncGroups.push(grpPC);
            } else if (grpArray[i] === 'Change Management Process Execution') {
                impFuncGroups.push(grpDefault);
            } else {
                impFuncGroups.push(grpDefault);

            }

        }
        impFuncGroups = grpUtil.unique(impFuncGroups);


        return impFuncGroups.toString();
    },


    /*@name    getLRCCGrps
    @description used to get LRCC groups based on selection of impacted groups
    @param demand record 
    @returns the list ofLRCC Groups*/
    getLRCCGrps: function(dmnRec) {

        var grpStr = new wfSPMCMSDemandUtils().getImpactedGroups(dmnRec);
        var grpArray = grpStr.split(",");
        var grpImpLength = grpArray.length;

        var lrccGrps = gs.getProperty('wf.spm.cms.lrcc.group');
        var lrccGrpsObj = JSON.parse(lrccGrps);
        var lrccSBCStr = lrccGrpsObj["SBCLegal"];
        var lrccPCStr = lrccGrpsObj["PCLegal"];
        var lrccCSStr = lrccGrpsObj["CreditSvcs"];
        var lrccDefaultStr = lrccGrpsObj["DefaultLegal"];
        var lrccChgStr = lrccGrpsObj["ChgManagement"]
        var lrccSBC = lrccSBCStr.split(',');
        var lrccPC = lrccPCStr.split(',');
        var lrccChg = lrccChgStr.split(',');
        var lrccDefault = lrccDefaultStr.split(',');
        var lrccCS = lrccCSStr.split(',');
        var impLrccGrps = [];
        var lrccUtil = new ArrayUtil();

        for (var i = 0; i &lt; grpImpLength; i++) {

            if (grpArray[i] === 'Small Business Cards') {
                impLrccGrps.push(lrccSBC);
            } else if (grpArray[i] === 'Credit Services') {
                impLrccGrps.push(lrccCS);
            } else if (grpArray[i] === 'Product Capabilities') {
                impLrccGrps.push(lrccPC);
            } else if (grpArray[i] === 'Change Management Process Execution') {
                impLrccGrps.push(lrccChg);
            } else {
                impLrccGrps.push(lrccDefault);

            }
        }
        impLrccGrps = lrccUtil.unique(impLrccGrps);

        return impLrccGrps;
    },



    /*@name   getUserListForGroups
    @description used to get User list of the groups
    @param array of group record
    @returns the list of users*/
    getUserListForGroups: function(grpsArray) {

        var grpStr = grpsArray.toString();
        var usrArray = [];
        var usrArrayUtil = new ArrayUtil();

        var grUser = new GlideRecord('sys_user_grmember');

        grUser.addQuery('group', 'IN', grpStr);

        grUser.query();
        while (grUser.next()) {

            usrArray.push(grUser.user.getValue('sys_id'));
        }

        usrArray = usrArrayUtil.unique(usrArray);
        return usrArray.toString();
    },


    /*@name checkSubProjectTaskClosed 
        @description returns true if all subproject tasks Draft/Validate is closed
        @param parent project sys_id
        @returns the boolean value*/

    checkSubProjectTaskClosed: function(parentProject) {

        var subProject = new GlideRecord("pm_project");
        subProject.addQuery('parent.sys_id', parentProject);
        subProject.query();
        while (subProject.next()) {
            var prjTask = new GlideRecord("pm_project_task");
            prjTask.addQuery('parent', subProject.getUniqueValue());
            prjTask.addEncodedQuery("correlation_display=CMS - Approve^ORcorrelation_display=CMS - Draft");
            prjTask.addEncodedQuery("state!=3");
            prjTask.setLimit(1);
            prjTask.query();
            if (prjTask.next()) {

                return false;
            }

        }

        return true;

    },

    /*@name getAssigneeReadinessTask 
        @description returns assignee of the Implementation Readiness Approval
        @param parent project sys_id
        @returns sys_id of the assignee of the project task*/

    getDetailsReadinessTask: function(parentProject) {
        var prjTaskDetails = {};
        var prjTask = new GlideRecord("pm_project_task");
        prjTask.addQuery('parent.sys_id', parentProject);
        prjTask.addQuery('correlation_display', 'CMS - Implementation Readiness Approval');
        prjTask.orderByDesc('sys_created_on');
        prjTask.setLimit(1);
        prjTask.query();
        if (prjTask.next()) {
            prjTaskDetails.assignee = prjTask.getValue('assigned_to');
            prjTaskDetails.record = prjTask.getValue('sys_id');
            return JSON.stringify(prjTaskDetails);
        }

    },

    type: 'wfSPMCMSNotification'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;K095242&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-10-18 07:03:36&lt;/sys_created_on&gt;
        &lt;sys_id&gt;75cd26c0870ef910df0943760cbb3553&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;56&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;wfSPMCMSNotification&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_75cd26c0870ef910df0943760cbb3553&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:25:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:49</sys_created_on>
        <sys_id>be07785d83f01210c6695855eeaad366</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>wfSPMCMSNotification</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_be07785d83f01210c6695855eeaad366</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:49</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
