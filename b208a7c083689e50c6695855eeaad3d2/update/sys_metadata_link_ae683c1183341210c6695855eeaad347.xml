<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>868ed7f20f020110b8ed6577b9767e55</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFSurveyProcessorScript&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This script is responsible for extracting content for translation and saving the translated content for Surveys.&lt;/description&gt;
        &lt;name&gt;LFSurveyProcessorScript&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFSurveyProcessorScript = Class.create();
LFSurveyProcessorScript.prototype = Object.extendsObject(global.LFArtifactProcessorSNC, {
    category: 'localization_framework', // DO NOT REMOVE THIS LINE!

    /**********
     * Extracts the translatable content for the artifact record
     * 
     * @param params.tableName The table name of the artifact record
     * @param params.sysId The sys_id of the artifact record 
     * @param params.language Language into which the artifact has to be translated (Target language)
     * @return LFDocumentContent object
     **********/
    getTranslatableContent: function(params) {
        /**********
         * Use LFDocumentContentBuilder to build the LFDocumentContent object
         * Use the build() to return the LFDocumentContent object
         **********/

        var tableName = params.tableName;
        var sysId = params.sysId;
        var language = params.language;
        var lfDocumentContentBuilder = new global.LFDocumentContentBuilder("v1", language, sysId, tableName);
        getSurveyTranslatableContent();

        function getSurveyTranslatableContent() {
            // Get the assessment metric type record
            var amType = new GlideRecord('asmt_metric_type');
            if (amType.get(sysId)) {
                lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(amType, 'Survey');

                var choiceDataTypes = ['choice', 'scale', 'numericscale', 'imagescale', 'ranking', 'multiplecheckbox'];

                // We need to go through the categories, followed by the metrics questions
                var amCat = new GlideRecord('asmt_metric_category');
                amCat.addQuery('metric_type', amType.sys_id);
                amCat.query();
                while (amCat.next()) {
                    lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(amCat, 'Category');

                    var amMet = new GlideRecord('asmt_metric');
                    amMet.addQuery('category', amCat.sys_id);
                    amMet.orderBy('question');
                    amMet.query();
                    while (amMet.next()) {
                        lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(amMet, amMet.getDisplayValue());

                        var questionDataType = amMet.getValue("datatype");
                        // Lets get choices for this question
                        if (choiceDataTypes.indexOf(questionDataType) != -1) {
                            processChoices(amMet.sys_id, amMet.getDisplayValue());
                        }

                        // Get the template details for the question
                        if (questionDataType == "template") {
                            processTemplates(amMet.template, amMet.getDisplayValue());
                        }
                    }
                }

                // Translate the signature record associated with the assessment metric type
                var signature = amType.signature;
                if (signature) {
                    processSignature(signature);
                }
            }
        }

        function processChoices(metricSysID, metricDisplayValue) {
            var tableName = "asmt_metric_definition";
            var encodedQuery = "metric=" + metricSysID + "^ORDERBYvalue";
            var groupName = metricDisplayValue + ": Choices";
            lfDocumentContentBuilder.processTranslatableFieldsForMultipleRecords(tableName, encodedQuery, groupName);
        }

        function processTemplates(temmplateSysID, metricDisplayValue) {
            var tableName = "asmt_template_definition";
            var encodedQuery = "template=" + temmplateSysID + "^ORDERBYvalue";
            var groupName = metricDisplayValue + ": Choices";
            lfDocumentContentBuilder.processTranslatableFieldsForMultipleRecords(tableName, encodedQuery, groupName);
        }

        function processSignature(signatureSysID) {
            var amSig = new GlideRecord('asmt_signature');
            if (amSig.get(signatureSysID)) {
                lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(amSig, 'Signature');
            }
        }

        return lfDocumentContentBuilder.build();
    },

    /**********
     * Uncomment the saveTranslatedContent function to override the default behavior of saving translations
     * 
     * @param documentContent LFDocumentContent object
     * @return
     **********/
    /**********
        saveTranslatedContent: function(documentContent) {},
    **********/

    type: 'LFSurveyProcessorScript'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-09 11:04:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;868ed7f20f020110b8ed6577b9767e55&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFSurveyProcessorScript&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_868ed7f20f020110b8ed6577b9767e55&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-03-22 17:48:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:48</sys_created_on>
        <sys_id>ae683c1183341210c6695855eeaad347</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFSurveyProcessorScript</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ae683c1183341210c6695855eeaad347</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:48</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
