<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>74d4df1a773a3010d3ef07dc7d5a9929</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CSMResponsibilityModelUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CSMResponsibilityModelUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CSMResponsibilityModelUtil = Class.create();
CSMResponsibilityModelUtil.prototype = {
	initialize: function() {
	},

	type: 'CSMResponsibilityModelUtil'
};

CSMResponsibilityModelUtil._getResponsibilitiesFromTargetEntityParents = function(relationship, accessLevel, targetEntity) {
    var responsibilities = null;
    var tu = new global.TableUtils(targetEntity);
    var targetEntityParentTables = j2js(tu.getTables());
    //first entry in targetEntityParentTables will be the target entity itself.
    for (var j = 1; j &lt; targetEntityParentTables.length; j++) {
        responsibilityPath = [relationship, targetEntityParentTables[j], accessLevel];
        responsibilities = global.CSMRelationshipUtils.prototype.getSafely(global.CSMRelationshipConstants.RELATIONSHIPS, responsibilityPath);
        if (!gs.nil(responsibilities)) {
            break;
        }
    }
    return responsibilities;
};

CSMResponsibilityModelUtil.getResponsibilities = function(relationship, accessLevel, accessRoles, skipRoleCheck, targetEntity, applicableTo, restrictAccessTo) {
	// If accessLevel is not passed, default it to READ
	accessLevel = accessLevel || global.CSMRelationshipConstants.ACCESS.READ;
	
	var respCacheUtil = new global.ResponsibilityAccessConfigCacheUtil();
	
	// Return responsibilities based on responsibility access configuration if record(s) exist
	if (respCacheUtil.hasAccessConfigRecord(relationship, accessLevel, targetEntity) == true) {
		return respCacheUtil.getResponsibilitiesFromCache(relationship, accessLevel, targetEntity, applicableTo, restrictAccessTo, skipRoleCheck);
	}
	
	// Fallback to existing CSMRelationshipConstants for responsibility access configuration
	var responsibilityPath = [];
	var relationshipHasTargetEntity = !gs.nil(targetEntity)? global.CSMRelationshipUtils.prototype.getSafely(global.CSMRelationshipConstants.RELATIONSHIPS, [relationship, global.CSMRelationshipConstants.HAS_TARGET_ENTITY]) : false;

	if (gs.nil(targetEntity))
		responsibilityPath = [relationship, accessLevel];
	else if (relationshipHasTargetEntity)
		responsibilityPath = [relationship, targetEntity, accessLevel];
	else
		return [];

	var responsibilities = global.CSMRelationshipUtils.prototype.getSafely(global.CSMRelationshipConstants.RELATIONSHIPS, responsibilityPath);
	if (gs.nil(responsibilities) &amp;&amp; !gs.nil(targetEntity) &amp;&amp; relationshipHasTargetEntity){
		//current target entity did not have any configuration set, so falling back to it's parents.
		responsibilities = CSMResponsibilityModelUtil._getResponsibilitiesFromTargetEntityParents(relationship, accessLevel, targetEntity); 
	}
	if (gs.nil(responsibilities)) {
		return [];
	}
	if(gs.nil(accessRoles))
		accessRoles = {};
	accessRoles.list = [];
	var qualifiedResp = [];
	var respToRoles = global.CSMRelationshipConstantsSNC.RESPONSIBILITY_ROLES[relationship];
	
	//TODO: FIXME: Remove this check and return statement once roles are added to all the relationship types.
	if(gs.nil(respToRoles) || Object.keys(respToRoles).length == 0)
		return responsibilities;
	
	for(var i=0, l= responsibilities.length; i &lt; l; i++ ){
		var responsibility = responsibilities[i];
		var roles = respToRoles[responsibility];
		if(gs.nil(roles))
			continue;

		accessRoles.list = accessRoles.list.concat(roles);
		for(var p=0, q=roles.length; p &lt; q; p++) {
			var role = roles[p];
			if(!gs.nil(role) &amp;&amp; gs.hasRole(role)) {
				qualifiedResp.push(responsibility);
				break;
			}
		}
	}

	// Not returning early if skipRoleCheck is true to populate accessRoles, accessRoles might be used by the caller
	return (skipRoleCheck) ? responsibilities : qualifiedResp;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-27 07:41:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;74d4df1a773a3010d3ef07dc7d5a9929&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CSMResponsibilityModelUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Base Entities" source="com.snc.cs_base"&gt;4f2cce6b47664210cd4e1ce4316d43a4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_74d4df1a773a3010d3ef07dc7d5a9929&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-15 11:27:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:46</sys_created_on>
        <sys_id>8e07785d83f01210c6695855eeaad305</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CSMResponsibilityModelUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8e07785d83f01210c6695855eeaad305</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:46</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
