<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>401d6b2e778551100ed05d9c4f5a99b9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_uibtk_site_map.ExperienceResolverRecords&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ExperienceResolverRecords&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExperienceResolverRecords = Class.create();
ExperienceResolverRecords.prototype = {
    TABLES: {
        THEME: 'm2m_app_config_theme',
        AUDIENCE: 'sys_ux_applicability_m2m_screen',
        SCREEN: 'sys_ux_screen',
        SCREEN_CONDITION: 'sys_ux_screen_condition',
        MACROPONENT: 'sys_ux_macroponent',
        SCREEN_TYPE: 'sys_ux_screen_type',
        ROUTE: 'sys_ux_app_route'
    },
    initialize: function(env, type) {
        this.args = env.getArguments();
        this.table = this.TABLES[type];
        this.UIBGQL = new global.BuilderToolkitAPIGlobal();
    },
    _getFieldData: function(acc, field) {
        var fieldName = field.getName();
        var fieldObject = null;
        if (!field.nil()) {
            var fieldType = field.getED().getInternalType();
            var fieldValue = field.toString();
            switch (fieldType) {
                case 'integer':
                    fieldValue = parseInt(fieldValue);
					break;
                case 'boolean':
                    fieldValue = fieldValue === 'true';
					break;
            }
			fieldObject = {
				value:fieldValue,
				display_value: field.getDisplayValue()
			};
			if (fieldName === 'sys_scope') {
				fieldObject.scopeName = field.getRefRecord().getValue('scope');
			}
        }
        acc[fieldName] = fieldObject;
        return acc;
    },
    upsertRecord: function(queryEncodedQuery, fieldValues) {
        var action = 'update';
        var genericGR = this.UIBGQL.getSecure(this.table, queryEncodedQuery, false, this.args.no_domain);
        var encodedQuery = genericGR.getEncodedQuery();
        if (genericGR.hasNext()) {
            genericGR.next();
        } else {
            action = 'insert';
            genericGR.initialize();
            genericGR.applyEncodedQuery(encodedQuery);
        }
        Object.keys(fieldValues).forEach(function(key) {
            var value = fieldValues[key];
            genericGR.setValue(key, value);
        });
        genericGR[action]();
        return genericGR;
    },
    deleteRecords: function(recordIds) {
        recordIds.forEach(this.deleteRecord);
    },
    deleteRecord: function(recordId) {
        var genericGR = this.UIBGQL.getSecure(this.table, 'sys_id=' + recordId, false, this.args.no_domain);
        if (genericGR.next()) {
            genericGR.deleteRecord();
        }
    },
    upsertThemeRecord: function() {
        var themeId = this.args.primaryThemeId;
        if (themeId !== null) {
            var encodedQuery = this.args.sysId ?
                'sys_id=' + this.args.sysId :
                'ux_app_configuration=' + this.args.appConfigId;
            if (themeId === '') {
                var queryEncodedQuery = 'ux_app_configuration=' + this.args.appConfigId + '^order=0';
                var themeGR = this.UIBGQL.getSecure(this.table, queryEncodedQuery, false, this.args.no_domain);
                if (themeGR.next()) {
                    themeGR.deleteRecord();
                }
            }
            var fieldValues = {
                ux_app_configuration: this.args.appConfigId,
                theme: themeId,
                order: 0
            };
            return this.upsertRecord(encodedQuery, fieldValues);
        }
    },
    upsertAudienceRecords: function() {
        var that = this;
        if (that.args.audiences !== null &amp;&amp; that.args.audiences !== undefined) {
            return that.args.audiences.reduce(function(acc, audienceObj) {
                if (audienceObj.remove === true &amp;&amp; audienceObj.sysId) {
                    that.deleteRecord(audienceObj.sysId);
                } else {
                    acc.push(that.upsertAudienceRecord(audienceObj));
                }
                return acc;
            }, []);
        }
        return [];

    },
    upsertAudienceRecord: function(audience) {
        var encodedQuery = audience.sysId ?
            'sys_id=' + audience.sysId :
            'screen=' + this.args.screenId + '^applicability=' + audience.audienceId;
        var fieldValues = {
            applicability: audience.audienceId,
            screen: this.args.screenId,
            order: audience.order === undefined ? 0 : audience.order,
            active: audience.active === undefined ? true : audience.active
        };
        var audienceRecord = this.upsertRecord(encodedQuery, fieldValues);
        return audienceRecord.getElements().reduce(this._getFieldData, {});
    },
    getRouteRecords: function(encodedQuery, includeScreenType) {
        var routes = [];
        var routesGR = this.UIBGQL.getSecure(this.TABLES.ROUTE, encodedQuery, 'order', this.args.no_domain);
        while (routesGR.next()) {
            var route = routesGR.getElements().reduce(this._getFieldData, {});
            if (includeScreenType) {
                route.screen_type = this.getScreenCollectionRecords('sys_id=' + route.screen_type.value);
            } else {
                var parentScreen = this.getScreenRecords('macroponent=' + route.parent_macroponent.value);
                route.parent_screen = parentScreen.length === 0 ? null : [0];
            }
            routes.push(route);
        }
        return routes;
    },
    getScreenCollectionRecords: function(encodedQuery, includeRoutes) {
        var screentType = {};
        var screenTypeGR = this.UIBGQL.getSecure(this.TABLES.SCREEN_TYPE, encodedQuery, false, this.args.no_domain);
        if (screenTypeGR.next()) {
            screenType = screenTypeGR.getElements().reduce(this._getFieldData, {});
            var childEncodedQuery = 'screen_type=' + screenType.sys_id.value;
            if (includeRoutes) {
                screenType.routes = this.getRouteRecords(childEncodedQuery);
            } else {
                screenType.screens = this.getScreenRecords(childEncodedQuery);
            }
        }
        return screenType;
    },
    getMacroponentRecords: function(encodedQuery) {
        var macroponentGR = this.UIBGQL.getSecure(this.TABLES.MACROPONENT, encodedQuery, false, this.args.no_domain);
        if (macroponentGR.next()) {
            return macroponentGR.getElements().reduce(this._getFieldData, {});
        }
        return {};
    },
    getSubRouteRecords: function() {
        var subroute = {};
        if (this.args.query_conditions || this.args.sys_id) {
            var encodedQuery = this.args.sys_id ? 'sys_id=' + this.args.sys_id : this.args.query_conditions;
            var screenGR = this.UIBGQL.getSecure(this.TABLES.SCREEN, encodedQuery, false, this.args.no_domain);
            if (screenGR.next()) {
                subroute = screenGR.getElements().reduce(this._getFieldData, subroute);
                var routes = this.getRouteRecords('parent_macroponent=' + subroute.macroponent.value + '^parent_macroponent_composition_element_id=' + this.args.element_id, true);
                subroute.macroponent = this.getMacroponentRecords('sys_id=' + subroute.macroponent.value);
                subroute.screen_collection = this.getScreenCollectionRecords('sys_id=' + subroute.screen_type.value, true);
                subroute.routes = routes.length === 0 ? null : routes;
            }
        }
        return subroute;
    },
    getScreenRecords: function(encodedQuery) {
        var screens = [];
        if (encodedQuery || this.args.query_conditions || this.args.sys_id) {
            encodedQuery = encodedQuery || (this.args.sys_id ? 'sys_id=' + this.args.sys_id : this.args.query_conditions);
            var screenGR = this.UIBGQL.getSecure(this.TABLES.SCREEN, encodedQuery, 'order', this.args.no_domain);
            while (screenGR.next()) {
                var screen = screenGR.getElements().reduce(this._getFieldData, {});
                var audiences = this.getAudienceRecordsFromScreenId(false, screen.sys_id.value);
                screen.audiences = audiences.length === 0 ? null : audiences;
                screen.screenConditionCount = this.getScreenConditionCount(screen.sys_id.value);
				screen.macroponent = this.getMacroponentRecords('sys_id=' + screen.macroponent.value);
                screens.push(screen);
            }
        }
        return screens;
    },
    getAudienceRecordsFromScreenId: function(encodedQuery, screenId) {
        var audiences = [];
        encodedQuery = encodedQuery || 'screen=' + screenId;
        var audienceGR = this.UIBGQL.getSecure(this.TABLES.AUDIENCE, encodedQuery, 'order', this.args.no_domain);
        while (audienceGR.next()) {
            audiences.push(audienceGR.getElements().reduce(this._getFieldData, {}));
        }
        return audiences;
    },
    getScreenConditionCount: function(screenId) {
        var encodedQuery = 'screen=' + screenId + '^active=true';
        var screenConditionGR = this.UIBGQL.getSecure(this.TABLES.SCREEN_CONDITION, encodedQuery, false, this.args.no_domain);
        return screenConditionGR.getRowCount();
    },
    type: 'ExperienceResolverRecords'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-04 20:37:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;401d6b2e778551100ed05d9c4f5a99b9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;73&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExperienceResolverRecords&lt;/sys_name&gt;
        &lt;sys_package display_value="@devsnc/sn-uibtk-site-map" source="sn_uibtk_site_map"&gt;e66ddf5fbdfe27b1ff649fc8eafdcb62&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="@devsnc/sn-uibtk-site-map"&gt;e66ddf5fbdfe27b1ff649fc8eafdcb62&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_401d6b2e778551100ed05d9c4f5a99b9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-12-08 17:26:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:13</sys_created_on>
        <sys_id>2c76b0d983f01210c6695855eeaad3d1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExperienceResolverRecords</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2c76b0d983f01210c6695855eeaad3d1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
