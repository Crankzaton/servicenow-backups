<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>700f1ad15301011031a5ddeeff7b1265</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AutoResolutionResponseChannelHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AutoResolutionResponseChannelHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AutoResolutionResponseChannelHelper = Class.create();
AutoResolutionResponseChannelHelper.prototype = {
    initialize: function() {},

    type: 'AutoResolutionResponseChannelHelper'
};

AutoResolutionResponseChannelHelper.createResponseChannelForARConfig = function(configSysId) {
    var responseChannel = gs.getProperty(AutoResolutionConstants.RESPONSE_CHANNEL_LIST, '');
    var responseChannelList = responseChannel.split(",");
    if (!responseChannelList.length)
        return;
    var order = 100;
    var respChannelGr = new GlideRecord(AutoResolutionConstants.RESPONSE_CHANNEL_TABLE_NAME);
    for (var i = 0; i &lt; responseChannelList.length; i++) {
        respChannelGr.initialize();
        respChannelGr.setValue("response_channel", responseChannelList[i]);
        respChannelGr.setValue("order", order * (i + 1));
        respChannelGr.setValue("active", false);
        respChannelGr.setValue("configuration", configSysId);
        respChannelGr.insert();
    }
};

AutoResolutionResponseChannelHelper.canActivateResponseChannel = function(channelGr) {
	var responseChannelName = channelGr.getValue(AutoResolutionConstants.RESPONSE_CHANNEL_FIELD_NAME);
	var logger = new AutoResolutionLoggingUtils().withName(this.type).createLogger();
	var isResponseChannelConfigured = false;
	switch (responseChannelName) {
		case AutoResolutionNotificationHelper.RESPONSE_CHANNEL.EMAIL:
			isResponseChannelConfigured = AutoResolutionResponseChannelHelper.isEmailConfiguredForResponseChannel();
			break;
		case AutoResolutionNotificationHelper.RESPONSE_CHANNEL.SMS:
			isResponseChannelConfigured = 
				AutoResolutionResponseChannelHelper.isSMSConfiguredForResponseChannel(channelGr.configuration.getRefRecord());
			break;
		case AutoResolutionNotificationHelper.RESPONSE_CHANNEL.VA:
			isResponseChannelConfigured = AutoResolutionResponseChannelHelper.isVAConfiguredForResponseChannel();
			break;
		default:
			logger.error("Response channel type does not match any of the following: Email, SMS, Virtual Agent.");
			break;
	}

	var connectionStatus = isResponseChannelConfigured 
		? AutoResolutionConstants.RESPONSE_CHANNEL_STATUS_SUCCESS
		: AutoResolutionConstants.RESPONSE_CHANNEL_STATUS_FAILURE;
	AutoResolutionResponseChannelHelper.updateResponseChannelStatus(channelGr.getUniqueValue(), connectionStatus);
	
	return isResponseChannelConfigured;
};


AutoResolutionResponseChannelHelper.updateResponseChannelStatus = function(channelSysId, status) {
    
	var respChannelGr = new GlideRecord(AutoResolutionConstants.RESPONSE_CHANNEL_TABLE_NAME);
    respChannelGr.get(channelSysId);
	
    if (respChannelGr.isValidRecord()) {
        respChannelGr.setValue("status", status);
        respChannelGr.update();
    }
};

/**
 * Check if response channel records exists for response channels in com.glide.cs.auto_resolution.response_channel_list
 * for the given configSysId
 * @param configSysId
 */
AutoResolutionResponseChannelHelper.shouldCreateResponseChannels = function(configSysId) {
    var responseChannel = gs.getProperty(AutoResolutionConstants.RESPONSE_CHANNEL_LIST, '');
    var responseChannelList = responseChannel.split(",");
    if (!responseChannelList.length)
        return false;

    var respChannelGr = new GlideRecord(AutoResolutionConstants.RESPONSE_CHANNEL_TABLE_NAME);
    respChannelGr.addQuery("configuration", configSysId);
    respChannelGr.addQuery("response_channel", "IN",  responseChannelList);
    respChannelGr.query();

    return !respChannelGr.next();
};

/**
 * Check whether a certain channel type is active for an IAR configuration
 * @param {string} configSysId, respChannelType
 * @returns {boolean}
 */
AutoResolutionResponseChannelHelper.checkActiveResponseChannelForConfig = function(configSysId, respChannelType) {
    var respChannelGr = new GlideRecord(AutoResolutionConstants.RESPONSE_CHANNEL_TABLE_NAME);
	respChannelGr.addQuery('configuration', configSysId);
	respChannelGr.addQuery('response_channel', respChannelType);
	respChannelGr.addActiveQuery();
	respChannelGr.query();

	if (respChannelGr.next()) {
		return true;
	}

	return false;
};

/**
 * Checks whether email is configured in order for the email response channel to be active
 * @returns {boolean}
 */
AutoResolutionResponseChannelHelper.isEmailConfiguredForResponseChannel = function() {
	if (gs.getProperty(AutoResolutionConstants.EMAIL_SENDING_ENABLED) === "true")
		return true;

	gs.flushMessages();
	gs.addErrorMessage(gs.getMessage("Email sending needs to be enabled to set Email as active response channel. Set property glide.email.smtp.active to true and try again."));
	return false;
};
	
/**
 * Checks whether the Notify for Twilio Direct is configured and the Notify SMS Phone field is populated 
 * on the AR Config in order for the SMS response channel to be active
 * @param {string} configTargetTableName
 * @returns {boolean}
 */
AutoResolutionResponseChannelHelper.isSMSConfiguredForResponseChannel = function(configGr) {
	if (!GlidePluginManager.isActive("com.snc.notify.twilio_direct")) {
		gs.flushMessages();
		gs.addErrorMessage(gs.getMessage("Twilio Notify plugin is required to set SMS as active response channel. Install Twilio Notify and try again."));
		return false;
	}

	if (!AutoResolutionNotificationHelper.isNotifySMSPhonePresentAndSelectedOnConfig(configGr)) {
		var notifyWithTwilioUrl = new SNC.ContextDocAPI().getURLFromName('Configure_Notify_Twilio');
		var notifyWithTwilioLink = '&lt;a href="' + notifyWithTwilioUrl + '"&gt;' + gs.getMessage("Notify with Twilio") + '&lt;/a&gt;';

		gs.flushMessages();
		gs.addErrorMessage(gs.getMessage("Auto-Resolution Notification Preferences should have a Notify SMS phone value. Configure {0} and try again.", notifyWithTwilioLink));
		return false;
	}
	
	return true;
};

/**
 * Checks whether the VA plugin is installed and if either the web client are active or there exists 
 * an active VA notification channel in order for the SMS response channel to be active
 * @returns {boolean}
 */
AutoResolutionResponseChannelHelper.isVAConfiguredForResponseChannel = function() {
	if (!GlidePluginManager.isActive("com.glide.cs.chatbot")) {
		gs.flushMessages();
		gs.addErrorMessage(gs.getMessage("Glide Virtual Agent plugin is required to set Virtual Agent as active response channel. Install  Glide Virtual Agent (com.glide.cs.chatbot) and try again."));
		return false;
	}
	
	if (!AutoResolutionNotificationHelper.isVANotificationEnabledOnTheInstance()) {
		var vaSettingsUrl = gs.getProperty("glide.servlet.uri") + "now/conversation/settings/virtual-agent";
		var vaSettingsLink = '&lt;a href="' + vaSettingsUrl + '"&gt;' + gs.getMessage("Virtual Agent Settings") + '&lt;/a&gt;';
		gs.flushMessages();
		gs.addErrorMessage(gs.getMessage("VA Notifications need to be enabled to set Virtual Agent as an active response channel. Enable VA Notifications in {0} and try again.", vaSettingsLink));
		return false;
		
	}
	
	if (!AutoResolutionNotificationHelper.isVANotificationChannelEnabled()) {		
		var messagingAppsIntegrationUrl = gs.getProperty("glide.servlet.uri") + "$bot-install-ui.do";
		var messagingAppsIntegrationLink = '&lt;a href="' + messagingAppsIntegrationUrl + '"&gt;' + gs.getMessage("Messaging Apps Integration") + '&lt;/a&gt;';
		
		gs.flushMessages();
		gs.addErrorMessage(gs.getMessage("VA Notification channel needs to be enabled to set Virtual Agent as an active response channel. Enable VA Notification channel in {0} and try again.", messagingAppsIntegrationLink));
		return false;
	}
	
	return true;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-01-13 21:41:21&lt;/sys_created_on&gt;
        &lt;sys_id&gt;700f1ad15301011031a5ddeeff7b1265&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AutoResolutionResponseChannelHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Issue Auto-Resolution" source="com.glide.cs.auto_resolution"&gt;81ddf4a03c75311068bcf327dfe37fa6&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_700f1ad15301011031a5ddeeff7b1265&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-12-09 18:36:21&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:32</sys_created_on>
        <sys_id>faf6345d83f01210c6695855eeaad368</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AutoResolutionResponseChannelHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_faf6345d83f01210c6695855eeaad368</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:32</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
