<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4ced699c5338211031a5ddeeff7b12e6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VANotificationActionAPI&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Script API to create VA notification action. &lt;/description&gt;
        &lt;name&gt;VANotificationActionAPI&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VANotificationActionAPI = Class.create();
VANotificationActionAPI.prototype = {
    TOPIC_REF_QUALIFIER: "active=true^published=true^libraryISEMPTY^ORlibrary=false^is_system_topicISEMPTY^ORis_system_topic=false",
	VA_NOTIFICATION_ACTION_TABLE: "sys_notification_va_action",

    initialize: function() {},

    /**
    * API to create VA Action for a notification.
    * @param notificationId : valid notification (sys_notification) sys_id
    * @param payload: Array of action objects. Each object contains valid required fields for creating the action. Example:
    * 		[{ 	
    			name: “topic action”, (Mandatory), 
    			topic: "sys_id of topic sys_cs_topic", (Mandatory) 
    			active: true/false, (default is true if not provided) 
    		}] 
    
    * @return {"name of action1": "sys_id of action1", "name of action2": "sys_id of action2", message: "Any error message" }
    */

    createActions: function(notificationId, payload) {
        if (!VANotificationAPIHelper.isNotificationValid(notificationId)) {
            return {
                sys_id: null,
                message: "Failed to create or update VA action for notification. Invalid notification ID"
            };
        }

        var payloadValidationResult = this._validateActionPayloadAndCreateActionObj(notificationId, payload);
        if (!payloadValidationResult.isValid) {
            return {
                sys_id: null,
                message: payloadValidationResult.message
            };
        }
        var result = this._insertActions(notificationId, payloadValidationResult.actionArr);
        result.message = "";
        return result;
    },

    /**
    * API to update VA Action for a notification.
    * @param actionId : valid VA action (sys_notification_va_action) sys_id
    * @param payload: object contains valid fields for updating the action. Example:
    * 		{ 	
    			name: “topic action”, 
    			topic: "sys_id of topic sys_cs_topic",
    			active: true/false 
    		} 
    
    * @return {sys_id: "sys_id of updated action", message: "Any error message" }
    */
    updateAction: function(actionId, payload) {

        if (!this._isActionValid(actionId)) {
            return {
                sys_id: null,
                message: "Failed to update VA action for notification. Invalid action ID"
            };
        }

        var actionObj = {};
        actionObj.sys_id = actionId;

        if (!gs.nil(payload.name)) {
            var actionGr = this._getActionGr(actionId);
            var notificationId = actionGr.getValue('notification');
            if (this._isActionExistWithSameName(payload.name, notificationId, actionId)) {
                return {
                    sys_id: null,
                    message: "Failed to update VA action for notification. Action with same name exist"
                };
            }
            actionObj.name = payload.name;
        }

        if (!gs.nil(payload.topic)) {
            if (!this._isTopicValid(payload.topic)) {
                return {
                    isValid: false,
                    message: "Failed to update VA action for notification. Invalid topic"
                };
            }
            actionObj.topic = payload.topic;
        }

        if (!gs.nil(payload.active))
            actionObj.active = payload.active;

        var actionSysId = this._updateAction(actionObj);
        return {
            sys_id: actionSysId,
            message: ""
        };

    },

    _validateActionPayloadAndCreateActionObj: function(notificationId, payload) {

        if (gs.nil(payload) || !payload.length) {
            return {
                isValid: false,
                message: "Failed to create VA action for notification. Invalid payload"
            };
        }

        var actionArr = [];
        var names = {};
        for (var i = 0; i &lt; payload.length; i++) {
            var actionObj = {};
            if (gs.nil(payload[i].name)) {
                return {
                    isValid: false,
                    message: "Failed to create VA action for notification. Invalid name"
                };
            }
           
            if (names.hasOwnProperty(payload[i].name) || this._isActionExistWithSameName(payload[i].name, notificationId)) {
                return {
                    isValid: false,
                    message: "Failed to create VA action for notification. Duplicate name for action"
                };
            } else {
                names[payload[i].name] = true;
            }

			actionObj.name = payload[i].name;

            if (gs.nil(payload[i].topic) || !this._isTopicValid(payload[i].topic)) {
                return {
                    isValid: false,
                    message: "Failed to create VA action for notification. Invalid topic"
                };
            }
            actionObj.topic = payload[i].topic;
            actionObj.active = gs.nil(payload[i].active) ? true : payload[i].active;
            actionArr.push(actionObj);
        }

        return {
            isValid: true,
            actionArr: actionArr
        };
    },

    _isTopicValid: function(topicId) {
        var topicGr = new GlideRecordSecure("sys_cs_topic");
        topicGr.addQuery("sys_id", topicId);
        topicGr.addEncodedQuery(this.TOPIC_REF_QUALIFIER);
        topicGr.query();
        topicGr.next();
        return topicGr.isValidRecord();
    },

    _insertActions: function(notificationId, actionArr) {
        var returnObj = {};
        actionArr.forEach(function(action) {
            var actionGr = new GlideRecordSecure(this.VA_NOTIFICATION_ACTION_TABLE);
            actionGr.initialize();
            if (action.sys_id)
                actionGr.get(action.sys_id);

            actionGr.setValue("notification", notificationId);
            for (var key in action)
                actionGr.setValue(key, action[key]);

            var sysId = actionGr.update();
            returnObj[action['name']] = sysId;
        }, this);

        return returnObj;
    },

    _updateAction: function(actionObj) {
        var actionGr = new GlideRecordSecure(this.VA_NOTIFICATION_ACTION_TABLE);
        actionGr.initialize();
        if (actionObj.sys_id)
            actionGr.get(actionObj.sys_id);

        for (var key in actionObj)
            actionGr.setValue(key, actionObj[key]);

        return actionGr.update();
    },

    _isActionValid: function(actionId) {
        var actionGr = new GlideRecordSecure(this.VA_NOTIFICATION_ACTION_TABLE);
        actionGr.get(actionId);
        return actionGr.isValidRecord();
    },

    _getActionGr: function(actionId) {
        var actionGr = new GlideRecordSecure(this.VA_NOTIFICATION_ACTION_TABLE);
        actionGr.get(actionId);
        return actionGr;
    },

    _isActionExistWithSameName: function(name, notificationId, actionId) {
        var actionGr = new GlideRecordSecure(this.VA_NOTIFICATION_ACTION_TABLE);
        actionGr.addQuery('notification', notificationId);
        actionGr.addQuery('name', name.trim());

        if (!gs.nil(actionId))
            actionGr.addQuery('sys_id', '!=', actionId);

        actionGr.query();
        return actionGr.hasNext();
    },

    type: 'VANotificationActionAPI'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-30 21:31:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4ced699c5338211031a5ddeeff7b12e6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VANotificationActionAPI&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;e3c239e293400210b31a30dcebba1088&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4ced699c5338211031a5ddeeff7b12e6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-02-14 16:30:22&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:52</sys_created_on>
        <sys_id>9296f8d983f01210c6695855eeaad3ce</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VANotificationActionAPI</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9296f8d983f01210c6695855eeaad3ce</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
