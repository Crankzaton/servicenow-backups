<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0413dc56dba179d0653d1a59139619be</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WFChangeRequestAPICommon&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Common Change Request checks to be used in API Transform Map script or Scripted REST APIs
&lt;/description&gt;
        &lt;name&gt;WFChangeRequestAPICommon&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WFChangeRequestAPICommon = Class.create();
WFChangeRequestAPICommon.prototype = {

    PRINCIPAL_CLASS_MAP: {},

    initialize: function() {
        this.PRINCIPAL_CLASS_MAP = {};
        this.initCITypeClassesAndLabels();
    },

    /**
     * Initialize and loads the CMDB and Principal Class CI classes and labels.
     * 
     * @method initCITypeClassesAndLabels
     * @param {none}
     * @return {void}
     * 
     */
    initCITypeClassesAndLabels: function() {
        var cmdbClassInfo = new GlideRecordSecure("cmdb_class_info");
        cmdbClassInfo.addQuery("principal_class", true);
        cmdbClassInfo.query();
        while (cmdbClassInfo.next()) {
            this.PRINCIPAL_CLASS_MAP[cmdbClassInfo.getValue("class")] = {};
        }
        var fieldChoices = GlideChoiceList.getChoiceList("cmdb_ci", "sys_class_name");
        var size = fieldChoices.getSize();
        var pos = 0;
        while (pos &lt; size) {
            var choice = fieldChoices.getChoice(pos);
            var tableName = String(choice.getValue()).toLowerCase();
            var tableLabel = String(choice.getLabel()).toLowerCase();
            if (this.PRINCIPAL_CLASS_MAP[tableName] !== undefined) {
                this.PRINCIPAL_CLASS_MAP[tableName] = tableLabel;
            }
            pos++;
        }
    },

    /**
     * Validates if a group exists and is active by checking the Group name or Group Sys ID.
     * 
     * @method isGroupValid
     * @param {string} assignmentGroup - Group name or Group Sys ID.
     * @return {object} - Returns a JSON object that contains the results of the Group validation.
     * 
     */
    isGroupValid: function(assignmentGroup) {
        var resultObj = {};
        resultObj.error = false;
        resultObj.error_message = "";
        if (!gs.nil(assignmentGroup)) {
            var group = new GlideRecordSecure("sys_user_group");
            if (!group.get(assignmentGroup)) {
                resultObj.error = true;
                resultObj.error_message = gs.getMessage("Unknown Assignment Group sent by the integration: {0}", [assignmentGroup]);
            } else if (!group.active) {
                resultObj.error = true;
                resultObj.error_message = gs.getMessage("Unknown Assignment Group sent by the integration: {0}", [assignmentGroup]);
            }
        }
        return resultObj;
    },

    /**
     * This method applies the Principal Class to a CI and returns the CI Name and CI Sys if the CI is a principal class CI.
     * It performs the following checks:
     * - Validates if the Principal Class CI exists in the CMDB by checking the CI name or CI Sys ID.
     * - Validates if the Principal Class CI doesn't have duplicate CI names.
     * 
     * @method applyPrincipalClassToCI
     * @param {string} configurationItem - CI name or CI Sys ID of a Configuration item.
     * @param {GlideRecord} taskRecord - A GlideRecord instance subclass of the Task table, e.g. change_request, change_task.
     * @return {object} - Returns a JSON object that contains the results of the Principal Class CI validation.
     * 
     */
    applyPrincipalClassToCI: function(configurationItem, taskRecord) {
        var resultObj = {};
        resultObj.error = true;
        resultObj.error_message = "";
        resultObj.ci_name = "";
        resultObj.ci_sys_id = "";

        if (gs.nil(configurationItem) || !String(configurationItem).trim()) {
            resultObj.error_message = "Configuration item cannot be empty.";
            return resultObj;
        }
        if (gs.nil(taskRecord) || gs.nil(taskRecord.getTableName())) {
            resultObj.error_message = "Invalid GlideRecord instance.";
            return resultObj;
        }

        if (!this.isCIonCMDB(configurationItem)) {
            resultObj.error_message = gs.getMessage("Invalid CI. CI record not found: {0}.", [configurationItem]);
            return resultObj;
        }

        var principalClassFilter = new global.TaskUtils().getConfigurationItemFilter(taskRecord);

        var ciRecord = new GlideAggregate("cmdb_ci");
        ciRecord.addQuery("name", configurationItem);
        ciRecord.addNotNullQuery("name");
        if (!gs.nil(principalClassFilter)) {
            ciRecord.addEncodedQuery(principalClassFilter);
        }
        ciRecord.addAggregate("COUNT");
        ciRecord.query();
        var recordCount = ciRecord.next() ? (ciRecord.getAggregate("COUNT") - 0) : 0;

        if (recordCount &gt; 1) {
            resultObj.error_message = gs.getMessage("CI name has duplicates in the system : {0}", [configurationItem]);
            return resultObj;
        } else if (recordCount === 1) {
            ciRecord = new GlideRecordSecure("cmdb_ci");
            ciRecord.addQuery("name", configurationItem);
            ciRecord.addNotNullQuery("name");
            if (!gs.nil(principalClassFilter)) {
                ciRecord.addEncodedQuery(principalClassFilter);
            }
            ciRecord.query();
            if (ciRecord.next() &amp;&amp; ciRecord.isValidRecord()) {
                resultObj.error = false;
                resultObj.ci_name = ciRecord.getValue("name");
                resultObj.ci_sys_id = ciRecord.getUniqueValue();
                return resultObj;
            }
        } else {
            ciRecord = new GlideRecordSecure("cmdb_ci");
            ciRecord.addQuery("sys_id", configurationItem);
            ciRecord.addNotNullQuery("sys_id");
            if (!gs.nil(principalClassFilter)) {
                ciRecord.addEncodedQuery(principalClassFilter);
            }
            ciRecord.query();
            if (ciRecord.next() &amp;&amp; ciRecord.isValidRecord()) {
                resultObj.error = false;
                resultObj.ci_name = ciRecord.getValue("name");
                resultObj.ci_sys_id = ciRecord.getUniqueValue();
                return resultObj;
            }
        }
        resultObj.error_message = gs.getMessage("Invalid CI. The selected CI cannot be associated to a change because it is part of a non-principal CI class.");
        return resultObj;
    },

    /**
     * This method uses the CI Type to apply the Principal Class to a CI and returns the CI Name and CI Sys if the CI is a principal class CI.
     * It performs the following checks:
     * - Validates if the CI Type is a valid Principal Class CI Type
     * - Validates if the Principal Class CI exists in the CMDB by checking the CI name or CI Sys ID.
     * - Validates if the Principal Class CI doesn't have duplicate CI names.
     * 
     * @method applyPrincipalClassToCIType
     * @param {string} configurationItem - CI name or CI Sys ID of a Configuration item.
     * @param {string} cmdbTableName - CMDB table name to apply the Principal Class filter.
     * @param {GlideRecord} taskRecord - A GlideRecord instance subclass of the Task table, e.g. change_request, change_task.
     * @return {object} - Returns a JSON object that contains the results of the Principal Class CI validation.
     * 
     */
    applyPrincipalClassToCIType: function(configurationItem, cmdbTableName, taskRecord) {
        var resultObj = {};
        resultObj.error = true;
        resultObj.error_message = "";
        resultObj.ci_name = "";
        resultObj.ci_sys_id = "";

        if (gs.nil(configurationItem) || !String(configurationItem).trim()) {
            resultObj.error_message = "Configuration item cannot be empty.";
            return resultObj;
        }
        if (gs.nil(cmdbTableName) || !String(cmdbTableName).trim()) {
            resultObj.error_message = "CI Type cannot be empty.";
            return resultObj;
        }
        if (gs.nil(taskRecord) || gs.nil(taskRecord.getTableName())) {
            resultObj.error_message = "Invalid GlideRecord instance.";
            return resultObj;
        }

        var CITypeValue = String(cmdbTableName).toLowerCase();

        if (CITypeValue === "cmdb_ci" || CITypeValue === "Configuration Item".toLowerCase()) {
            CITypeValue = "cmdb_ci";
        } else {
            // Find the CI Type by Label
            if (this.PRINCIPAL_CLASS_MAP[CITypeValue] === undefined) {
                var refMap = this.PRINCIPAL_CLASS_MAP;
                var tableNames = Object.keys(this.PRINCIPAL_CLASS_MAP).filter(function(tableName) {
                    return refMap[tableName] === CITypeValue;
                });
                // Check for duplicate CI Type with same table label name
                if (tableNames.length &gt; 1) {
                    resultObj.error_message = gs.getMessage("CI Type has duplicates in the system : {0}", [cmdbTableName]);
                    return resultObj;
                } else if (tableNames.length === 1) {
                    CITypeValue = tableNames[0];
                } else {
                    resultObj.error_message = gs.getMessage("Invalid CI Type. The selected CI Type it is not a principal CI class.");
                    return resultObj;
                }
            }
        }

        if (!this.isCIonCMDB(configurationItem, CITypeValue)) {
            resultObj.error_message = gs.getMessage("Invalid CI. CI record not found: {0}.", [configurationItem]);
            return resultObj;
        }

        var principalClassFilter = new global.TaskUtils().getConfigurationItemFilter(taskRecord);

        var ciRecord = new GlideAggregate("cmdb_ci");
        ciRecord.addQuery("name", configurationItem);
        ciRecord.addQuery("sys_class_name", CITypeValue);
        ciRecord.addNotNullQuery("name");
        ciRecord.addNotNullQuery("sys_class_name");
        if (!gs.nil(principalClassFilter)) {
            ciRecord.addEncodedQuery(principalClassFilter);
        }
        ciRecord.addAggregate("COUNT");
        ciRecord.query();
        var recordCount = ciRecord.next() ? (ciRecord.getAggregate("COUNT") - 0) : 0;

        if (recordCount &gt; 1) {
            resultObj.error_message = gs.getMessage("CI name has duplicates in the system : {0}", [configurationItem]);
            return resultObj;
        } else if (recordCount === 1) {
            ciRecord = new GlideRecordSecure("cmdb_ci");
            ciRecord.addQuery("name", configurationItem);
            ciRecord.addQuery("sys_class_name", CITypeValue);
            ciRecord.addNotNullQuery("name");
            ciRecord.addNotNullQuery("sys_class_name");
            if (!gs.nil(principalClassFilter)) {
                ciRecord.addEncodedQuery(principalClassFilter);
            }
            ciRecord.query();
            if (ciRecord.next() &amp;&amp; ciRecord.isValidRecord()) {
                resultObj.error = false;
                resultObj.ci_name = ciRecord.getValue("name");
                resultObj.ci_sys_id = ciRecord.getUniqueValue();
                return resultObj;
            }
        } else {
            ciRecord = new GlideRecordSecure("cmdb_ci");
            ciRecord.addQuery("sys_id", configurationItem);
            ciRecord.addQuery("sys_class_name", CITypeValue);
            ciRecord.addNotNullQuery("sys_id");
            ciRecord.addNotNullQuery("sys_class_name");
            if (!gs.nil(principalClassFilter)) {
                ciRecord.addEncodedQuery(principalClassFilter);
            }
            ciRecord.query();
            if (ciRecord.next() &amp;&amp; ciRecord.isValidRecord()) {
                resultObj.error = false;
                resultObj.ci_name = ciRecord.getValue("name");
                resultObj.ci_sys_id = ciRecord.getUniqueValue();
                return resultObj;
            }
        }
        resultObj.error_message = gs.getMessage("Invalid CI. The selected CI cannot be associated to a change because it is part of a non-principal CI class.");
        return resultObj;
    },

    /**
     * This method applies the Principal Class to a CI on a Change Task and returns the CI Name and CI Sys if the CI is a principal class CI.
     * It performs the following checks:
     * - Validates if the Principal Class CI exists in the CMDB by checking the CI name or CI Sys ID.
     * - Validates if the Principal Class CI doesn't have duplicate CI names.
     * - Validates if the Principal Class CI exists in the Change Request Affected CI tab.
     * 
     * @method applyPrincipalClassToCTask
     * @param {string} configurationItem - CI name or CI Sys ID of a Configuration item.
     * @param {string} changeRequestID - Change request Sys ID or Number.
     * @return {object} - Returns a JSON object that contains the results of the Principal Class CI validation.
     * 
     */
    applyPrincipalClassToCTask: function(configurationItem, changeRequestID) {
        var resultObj = {};
        resultObj.error = true;
        resultObj.error_message = "";
        resultObj.ci_name = "";
        resultObj.ci_sys_id = "";

        if (gs.nil(configurationItem) || !String(configurationItem).trim()) {
            resultObj.error_message = "Configuration item cannot be empty.";
            return resultObj;
        }
        if (gs.nil(changeRequestID) || !String(changeRequestID).trim()) {
            resultObj.error_message = "Change Request cannot be empty.";
            return resultObj;
        }

        var changeRequest = new GlideRecordSecure("change_request");
        if (changeRequest.get(changeRequestID) &amp;&amp; changeRequest.isValidRecord()) {
            // Apply Principal CI filter first
            resultObj = this.applyPrincipalClassToCI(configurationItem, changeRequest);
            // If the CI is invalid, send back the error response.
            if (resultObj.error) {
                return resultObj;
            }
            // Check if the CI is available in the change request affected CI tab
            var affectedCIs = new GlideAggregate("task_ci");
            affectedCIs.addQuery("task", changeRequest.getUniqueValue());
            affectedCIs.addQuery("ci_item", resultObj.ci_sys_id);
            affectedCIs.addAggregate("COUNT");
            affectedCIs.addNotNullQuery("task");
            affectedCIs.addNotNullQuery("ci_item");
            affectedCIs.query();
            var recordCount = affectedCIs.next() ? (affectedCIs.getAggregate("COUNT") - 0) : 0;
            // If a record is not found, send back the CI details
            if (recordCount === 0) {
                resultObj.error = true;
                resultObj.error_message = gs.getMessage("The CI in the Change task should be limited to the CIs in the CR Affected CI tab. Unknown CI provided by the integration: {0}", [configurationItem]);
                return resultObj;
            }
        } else {
            resultObj.error_message = gs.getMessage("Invalid Change Request. Unknown Change Request provided by the integration: {0}", [changeRequestID]);
        }
        return resultObj;
    },

    /**
     * This method checks if a CI exists in the CMDB using the Principal class CI classes.
     * 
     * @method isCIonCMDB
     * @param {string} configurationItem - CI name or CI Sys ID of a Configuration item.
     * @param {string} cmdbTableName - CMDB table name to apply the Principal Class filter (optional).
     * @return {boolean} - Returns true if a CI exists in the CMDB based on the current Principal class CI classes.
     * 
     */
    isCIonCMDB: function(configurationItem, cmdbTableName) {
        if (gs.nil(configurationItem) || !String(configurationItem).trim()) {
            return false;
        }
        var CITypes = "";
        if (!gs.nil(cmdbTableName)) {
            var CIType = String(cmdbTableName).toLowerCase();
            // Check if the CIType based on Label
            if (this.PRINCIPAL_CLASS_MAP[CIType] === undefined) {
                var refMap = this.PRINCIPAL_CLASS_MAP;
                var tableNames = Object.keys(this.PRINCIPAL_CLASS_MAP).filter(function(tableName) {
                    return refMap[tableName] === cmdbTableName;
                });
                // No CIType found, return false
                if (tableNames.length === 0) {
                    return false;
                }
                CITypes = tableNames.join(",");
            } else {
                // CIType is an exact match of the table name
                CITypes = CIType;
            }
        }
        // Do a CI exists with this name?
        var ciRecord = new GlideRecordSecure("cmdb_ci");
        ciRecord.addQuery("name", configurationItem);
        if (!gs.nil(CITypes)) {
            ciRecord.addQuery("sys_class_name", "IN", CITypes);
            ciRecord.addNotNullQuery("sys_class_name");
        }
        ciRecord.addNotNullQuery("name");
        ciRecord.setLimit(1);
        ciRecord.query();
        var recordCount = ciRecord.next() ? 1 : 0;
        if (recordCount === 0) {
            // Do a CI exists with this Sys ID?
            ciRecord = new GlideRecordSecure("cmdb_ci");
            ciRecord.addQuery("sys_id", configurationItem);
            if (!gs.nil(CITypes)) {
                ciRecord.addQuery("sys_class_name", "IN", CITypes);
                ciRecord.addNotNullQuery("sys_class_name");
            }
            ciRecord.addNotNullQuery("sys_id");
            ciRecord.setLimit(1);
            ciRecord.query();
            recordCount = ciRecord.next() ? 1 : 0;
        }
        return (recordCount &gt; 0);
    },

    type: 'WFChangeRequestAPICommon'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;U838459&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-09-29 23:02:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0413dc56dba179d0653d1a59139619be&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WFChangeRequestAPICommon&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;309288c81bed18109a0f0e57ec4bcb09&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value=""&gt;309288c81bed18109a0f0e57ec4bcb09&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0413dc56dba179d0653d1a59139619be&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;U838459&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-12-05 00:50:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:08</sys_created_on>
        <sys_id>80407c5583b01210c6695855eeaad3e7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFChangeRequestAPICommon</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_80407c5583b01210c6695855eeaad3e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:08</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
