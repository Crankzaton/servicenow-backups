<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0831a94b7ff11010154bfdc92efa914f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FSMLocationUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Returns a distance between two point from its Latitude and Longitude. Can be in kms or miles&lt;/description&gt;
        &lt;name&gt;FSMLocationUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FSMLocationUtil = Class.create();
FSMLocationUtil.prototype = {
	initialize: function() {
	},

    getDistanceFromLatLongInMiles: function (lat1, long1, lat2, long2) {
        var distanceInKms = this.calculateDistanceInKilometres(lat1, long1, lat2, long2);
        return JSUtil.nil(distanceInKms) ? null : this.convertKilometersToMiles(distanceInKms);
    },

    getDistanceFromLatLongInKilometers: function (lat1, long1, lat2, long2) {
        var distanceInKms = this.calculateDistanceInKilometres(lat1, long1, lat2, long2);
        return JSUtil.nil(distanceInKms) ? null : distanceInKms;
    },

    calculateDistanceInKilometres: function (lat1, long1, lat2, long2) {
        if (!this.checkValidLatLong(lat1, long1, lat2, long2))
            return null;

        var radiusOfEarth = 6371; // Radius of the earth in km
        var dLat = this.deg2rad(lat2 - lat1);
        var dLon = this.deg2rad(long2 - long1);
        var a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = radiusOfEarth * c;
        return d;
    },

    deg2rad: function (deg) {
        return deg * (Math.PI / 180);
    },

    checkValidLatLong: function (lat1, long1, lat2, long2) {
        if (JSUtil.nil(lat1) || JSUtil.nil(long1) || JSUtil.nil(lat2) || JSUtil.nil(long2))
            return false;
        return true;
    },

    convertMilesToKilometers: function (miles) {
        return miles * 1.609;
    },

    convertKilometersToMiles: function (kilometers) {
        return kilometers / 1.609;
    },

	/**
	* getDistanceText is to get a text of distance with unit
 	* Input Parameters (passed to the method) are:
	* 'distance' - distance value calcualted from lat and lang
 	* 'distanceUnit' - string of the unit, for eg "miles" or "km"
	* 'unitMiles' - "miles"
	* 'unitKilometers' - "km"
 	*/
	getDistanceText: function(distance, distanceUnit, unitMiles, unitKilometers) {
		if (!distanceUnit || distanceUnit == "miles") {
			return this._getDistanceInMiles(distance) + " " + unitMiles;
		} else {
			return this._getDistanceInKilometers(distance) + " " + unitKilometers;
		}
	},

	// Convert distance caulated from lat and lang to km
	_getDistanceInKilometers: function(distance) {
		var distanceInKilos = 0.001 * distance;
		return distanceInKilos &lt; 0.1 ? 0 : distanceInKilos.toFixed(1);
	},

	// Convert distance caulated from lat and lang to miles
	_getDistanceInMiles: function(distance) {
		var distanceInMiles = distance / 1609.344;
		return distanceInMiles &lt; 0.1 ? 0 : distanceInMiles.toFixed(1);
	},

    type: 'FSMLocationUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-07-08 21:47:48&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0831a94b7ff11010154bfdc92efa914f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FSMLocationUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0831a94b7ff11010154bfdc92efa914f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-09-23 19:01:31&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:30</sys_created_on>
        <sys_id>2150309583b01210c6695855eeaad3da</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FSMLocationUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2150309583b01210c6695855eeaad3da</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:30</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
