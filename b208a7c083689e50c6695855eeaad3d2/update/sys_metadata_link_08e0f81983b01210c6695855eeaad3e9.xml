<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>206630c4ff312110468365d7d3b8fe42</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityCalculation_UserContextV1&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityCalculation_UserContextV1&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UnallocatedEntityCalculation_UserContextV1 = Class.create();
UnallocatedEntityCalculation_UserContextV1.prototype = {
    /**
     * @param {guid} userId The sys_user.sys_id the context represents
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     */
    initialize: function(userId, oobRolesOnly, subscriptionContext, userHasRoleCache, userHasLicenseInMemoryCache) {
        this._userId = userId;
        this._oobRolesOnly = oobRolesOnly;

        this._subscriptionContext = subscriptionContext;

        this._userRoleDao = new sn_entitlement.PassThroughCache(new sn_entitlement.UserRoleDao());
        this._licenseDetailsDao = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseDetailDaoV1());
        this._licenseRoleService = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseRoleServiceV1(oobRolesOnly));
        this._userHasRoleCache = userHasRoleCache;
		this._userHasLicenseInMemoryCache = userHasLicenseInMemoryCache;
    },

    /**
     * The key used to identify the sys_user.sys_id value
     * 
     * @returns {string} A string to be used as a key
     */
    getEntityKeyName: function() {
        return 'sys_user.sys_id';
    },

    /**
     * The ID value for the sys_user.sys_id output
     * 
     * @returns {string} A string to be used as the value to identify this record
     */
    getEntityKeyValue: function() {
        return this._userId;
    },

    /**
     * Retrieves the subscription Ids the user is subscribed to
     *
     * @returns {array} An array of subscription_entitlement.sys_id values
     */
    getSubscriptionIdsSubscribed: function() {
		return this._userHasLicenseInMemoryCache.getLicenseIdsByUserId(this._userId);
    },

    /**
     * Retrieves all of the metered role IDs assigned to a user. (Direct or indirectly via group)
     * 
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsAssigned: function() {
        return this._userHasRoleCache.getRoleIdsByUserId(this._userId);
    },

    /**
     * Retrieves all of the role IDs subscribed to by a user.
     * 
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsSubscribed: function() {
        const userLicenseIds = this.getSubscriptionIdsSubscribed();
        const roleIds = new Set(userLicenseIds.flatMap(licenseId =&gt; this._licenseRoleService.getRoleIdsByLicenseIdAndRequiresALicense(licenseId, this._oobRolesOnly)));
        return Array.from(roleIds);
    },

    type: 'UnallocatedEntityCalculation_UserContextV1'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-20 15:53:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;206630c4ff312110468365d7d3b8fe42&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityCalculation_UserContextV1&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_206630c4ff312110468365d7d3b8fe42&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-30 21:45:51&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:52</sys_created_on>
        <sys_id>08e0f81983b01210c6695855eeaad3e9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityCalculation_UserContextV1</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_08e0f81983b01210c6695855eeaad3e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
