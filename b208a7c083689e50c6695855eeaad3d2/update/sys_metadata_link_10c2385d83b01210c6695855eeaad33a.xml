<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>31ce7fdbdbb5111086a072c7f4961944</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Exception Payment Script based on Time of the Day&lt;/description&gt;
        &lt;name&gt;Exception Payment Request&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[// take today's date
var checkdate = new GlideDateTime(); //in UTC
checkdate.addSeconds(28800); // in KL time
//gs.log("checkdate: " + checkdate);

var days = 0;


// create your threshold timestamp to check the time
var endtime = "10:00:00";
var enddate = new GlideDateTime(); 
enddate.addSeconds(28800); // in KL time
//enddate.addDays(2); // change date to simulate when ticket is submitted
//gs.log("enddate: " + enddate);
var checkend = enddate.getDate() + " " + endtime; // surrent date and hardcoded time
//gs.log("checkend: " + checkend); // today's date at 10am  //comment

// convert today 10am to gdt object
var checkcompare = new GlideDateTime(checkend);
//gs.log("checkcompare: " + checkcompare);


gs.log("&gt;&gt; Exception Payment: Checking date time:" + checkdate);
var diff = gs.dateDiff(checkdate, checkcompare, true);
//gs.log("current ticket raised time that is checkdate shd be here:" + checkdate); // shd give current ticket raised time
gs.log("shd give 10 am that is checkcompare shd be here:" + checkend); // shd give 10 am
gs.log("diff: " + diff);

var breachTime;
var slaDate = new GlideDate(); // start with today's date
gs.log("sladate : " + slaDate);
var nextDay = new GlideDate(); // for handling tomorrow's date
nextDay.addDays(1); // store tomorrow

// check if today is a working day
var isTodayWorking = checkSchedule(slaDate.getDisplayValue() + " 09:30:00");
var isnextDayWorking;

if (isTodayWorking) {
    if (diff &gt;= 1 &amp;&amp; diff &lt;= 36000) {
        //breachTime = slaDate.getDisplayValue() + "09:30:00";
		calculator.calcRelativeDueDate(calculator.startDateTime, days, "17:30:00");
        gs.log('&gt;&gt; Exception Payment: Before 10am so resolve on same day by 5:30PM');
    } else if (diff &gt;= -17999 &amp;&amp; diff &lt;= 0) {
		//slaDate.addDays(1);
        //breachTime = slaDate.getDisplayValue() + "04:00:00";
		days++;
        calculator.calcRelativeDueDate(calculator.startDateTime, days, "12:00:00");
        gs.log('&gt;&gt; Exception Payment: 10am - 3pm so resolve next day by 12:00PM');
    } else if (diff &gt;= -50399 &amp;&amp; diff &lt;= -18000) {
		days++;
        calculator.calcRelativeDueDate(calculator.startDateTime, days, "17:30:00");
		//slaDate.addDays(1);
        //breachTime = slaDate.getDisplayValue() +  "09:30:00";
        gs.log('&gt;&gt; Exception Payment: After 3pm so resolve next day by 5:30PM');
    }
} else {
    // check if tomorrow is working or not
    isnextDayWorking = checkSchedule(nextDay.getDisplayValue() + " 17:30:00");
    while (!isnextDayWorking) {
        nextDay.addDays(1); // till we find the next working day, keep adding 1
		isnextDayWorking = checkSchedule(nextDay.getDisplayValue() + " 09:30:00");
	}
    breachTime = nextDay.getDisplayValue() + " 09:30:00";
    gs.log('&gt;&gt; Exception Payment: Submitted on a non working day, set resolve next working day by 5:30PM');
}

//gs.log("&gt;&gt; Exception Payment: breachTime: " + breachTime);

function checkSchedule(datecheck) {
	gs.log("datecheck: " + datecheck);
    var glide = new GlideRecord('cmn_schedule');
    glide.addQuery('name', 'Malaysia Working Hours except Holidays');
    glide.query();
    if (glide.next()) {
        var sched = new GlideSchedule(glide.sys_id);
        var date = new GlideDateTime();
        date.setDisplayValue(datecheck);
        if (sched.isInSchedule(date)) {
            gs.log("IN schedule: " + date);
            return true;
        } else {
            gs.log("OUT of schedule: " + date);
            return false;
        }
    }
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-13 12:38:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;31ce7fdbdbb5111086a072c7f4961944&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Exception Payment Request&lt;/sys_name&gt;
        &lt;sys_package display_value="Employee Center" source="sn_ex_sp"&gt;4249e63a28d54d61bb6fbf61fd86cccb&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Employee Center"&gt;4249e63a28d54d61bb6fbf61fd86cccb&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_31ce7fdbdbb5111086a072c7f4961944&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-13 12:38:38&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:20:05</sys_created_on>
        <sys_id>10c2385d83b01210c6695855eeaad33a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Exception Payment Request</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_10c2385d83b01210c6695855eeaad33a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:20:05</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
