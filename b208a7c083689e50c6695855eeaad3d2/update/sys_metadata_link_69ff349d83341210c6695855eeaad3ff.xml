<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>acc44b0bc30270104b8e88c7c840ddbc</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CIRecordPagePropsUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CIRecordPagePropsUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CIRecordPagePropsUtil = Class.create();
CIRecordPagePropsUtil.prototype = {
    initialize: function() {
        this.ciPagePropsMetadata = new CIRecordPagePropsMetadata();
    },
    _isNewRecord: function(sysId) {
        if (sysId.startsWith('-')) return true;
        return false;
    },
    _isTaggingSupported: function(table, sysId) {
        try {
            if (this._isNewRecord(sysId)) return false;
            if (this.ciPagePropsMetadata.BLACKLIST_TAGS_FROM_SUPPORTED_TABLES.indexOf(table) &gt;= 0) return false;
            return true;
        } catch (e) {
            return false;
        }
    },
    _isFormSupported: function(table) {
        try {
            //check for static list
            var supportedList = this.ciPagePropsMetadata.SUPPORTED_TABLES;
            if (supportedList.indexOf(table) &gt;= 0) return true;

            //check for view based support
            var viewName = this.ciPagePropsMetadata.SUPPORTED_TABLES_VIEW;
            var formViewGr = new GlideRecord('sys_ui_section');
            formViewGr.addEncodedQuery('view.name=' + viewName + '^name=' + table);
            formViewGr.query();
            if (formViewGr.next()) return true;

            //check for sys_property
            var supportedListViaPropValue = this.ciPagePropsMetadata.SUPPORTED_TABLES_VIA_PROP;
            if (supportedListViaPropValue) {
                var supportedListViaProp = supportedListViaPropValue.split(',').map(function(table) {
                    return table.trim();
                });
                if (supportedListViaProp.indexOf(table) &gt;= 0) return true;
            }
            return false;
        } catch (e) {
            return false;
        }
    },
    _getScopeProperties: function(table, sysId) {
        var scopeProps = {
            userScope: '',
            tableScope: '',
            tableScopeName: '',
            scopeMatched: false
        };
        if (!sysId) return scopeProps;

        var _scope = gs.getCurrentApplicationId();
        scopeProps.userScope = _scope == 'rhino.global' ? 'global' : _scope;
        scopeProps.tableScope = _scope;
        scopeProps.tableScopeName = _scope == 'global' ? 'Global' : '';
        var dbObjectGr = new GlideRecord(table);
        if (dbObjectGr.get(sysId)) {
            scopeProps.tableScope = dbObjectGr.sys_scope.toString();
            if (!scopeProps.tableScope) {
                scopeProps.tableScope = 'global';
                scopeProps.tableScopeName = 'Global';
            } else {
                scopeProps.tableScopeName = dbObjectGr.getDisplayValue('sys_scope');
            }
        }
        scopeProps.scopeMatched = _scope == scopeProps.tableScope;
        return scopeProps;
    },
    _getTableName: function(table) {
        var metadata = this.ciPagePropsMetadata.TABLE_METADATA;
        if (metadata[table]) return metadata[table].heading;
        var sysDbGr = new GlideRecord('sys_db_object');
        sysDbGr.addQuery('name', table);
        sysDbGr.query();
        if (sysDbGr.next()) {
            return sysDbGr.getValue('label');
        }
        return table;
    },
    _getRecordDisplayValue: function(table, sysId) {
        var tableGr = new GlideRecord(table);
        if (tableGr.get(sysId)) {
            return tableGr.getDisplayValue();
        }
        return sysId;
    },
    _getEntryPage: function(route) {
        var entries = this.ciPagePropsMetadata.CRUMBS;
        var defaultLandingRoute = this.ciPagePropsMetadata.DEFAULT_LANDING_ROUTE;
        if (route &amp;&amp; entries[route]) return entries[route];
        return entries[defaultLandingRoute];
    },
    _getProps: function(table) {
        var response = {
            'entry': '',
            'supported': false,
            'heading': '',
            'title': '',
            'subheading': '',
            'filter': '',
            'view': ''
        };
        var _self = this;
        //check whether the table is mapped
        if (this.ciPagePropsMetadata.TABLE_METADATA[table]) {
            var _tableMetaData = _self.ciPagePropsMetadata.TABLE_METADATA[table];
            response.supported = true;
            response.entry = _self._getEntryPage(_tableMetaData.entry);
            response.heading = _tableMetaData.heading;
            response.title = _tableMetaData.title;
            response.subheading = _tableMetaData.subHeading;
            response.list_filter = _tableMetaData.list_filter;
            response.list_view = _tableMetaData.list_view;
            response.form_filter = _tableMetaData.form_filter;
            response.from_view = _tableMetaData.from_view;
            response.related_list_table = _tableMetaData.related_list_table;
            response.custom_form = _tableMetaData.custom_form;
            response.custom_list = _tableMetaData.custom_list;
        } else {
            response.supported = false;
            response.entry = _self._getEntryPage();
            response.heading = _self._getTableName(table);
            response.title = response.heading;
            response.subheading = '';
            response.list_filter = '';
            response.list_view = '';
            response.form_filter = '';
            response.from_view = '';
            response.related_list_table = '';
            response.custom_form = '';
            response.custom_list = '';
        }
        return response;
    },
    _getRelatedListParentTableRecordSysId: function(table, sysId, query, field) {
        try {
            if (this._isNewRecord(sysId) &amp;&amp; query) {
                query = decodeURIComponent(query);
                var regex = new RegExp(field + '=(.*?)(?:\\^|\\^OR|$)', 'g');
                var matches = regex.exec(query);
                if (matches &amp;&amp; matches[1]) return matches[1];
                return '';
            }
            var gr = new GlideRecord(table);
            if (gr.get(sysId)) {
                return gr.getValue(field);
            }
            return '';
        } catch (e) {
            return '';
        }
    },
    _getRelatedListBreadcrumbPath: function(type, table, sysId) {
        var _self = this;
        switch (type) {
            case 'list':
                return _self.ciPagePropsMetadata.CUSTOM_TAG + '#' + _self.ciPagePropsMetadata.DEFAULT_LIST + '#' + table;
            case 'form':
                var _formRoute = _self.ciPagePropsMetadata.TABLE_METADATA[table] &amp;&amp; _self.ciPagePropsMetadata.TABLE_METADATA[table].custom_form;
                return _self.ciPagePropsMetadata.CUSTOM_TAG + '#' + (_formRoute || _self.ciPagePropsMetadata.DEFAULT_FORM) + '#' + (_formRoute ? '' : table) + '#' + sysId;
            default:
                return '';
        }
    },
    _generateBreadcrumbs: function(props, table, sysId, query, rlt) {
        var breadcrumbs = [], _self = this;
        var title = props.title;
        if (props.related_list_table) {
            var splittedRlt = props.related_list_table.split('.');
            var rltField = splittedRlt[0];
            var rltTable = splittedRlt[1];
            var rltRecord = _self._getRelatedListParentTableRecordSysId(table, sysId, query, rltField);
            breadcrumbs = _self._generateBreadcrumbs(_self._getProps(rltTable), rltTable, rltRecord, null, true).breadcrumbs;
        } else {
            breadcrumbs.push(props.entry);
            // Set the list view page of the table only for supported fields
            if (props.supported) {
                breadcrumbs.push({
                    page: rlt ? _self._getRelatedListBreadcrumbPath('list', table, sysId) : (props.custom_list || _self.ciPagePropsMetadata.DEFAULT_LIST),
                    label: title,
                    filter: props.list_filter,
                    view: props.list_view
                });
            }
        }

        // Set the table's record form page (iff sysId exists)
        if (sysId) {
            title = (this._isNewRecord(sysId)) ? _self.ciPagePropsMetadata.DEFAULT_NEW_RECORD_LABEL : (_self._getRecordDisplayValue(table, sysId) || _self.ciPagePropsMetadata.DEFAULT_EMPTY_RECORD_LABEL);
            breadcrumbs.push({
                page: rlt ? _self._getRelatedListBreadcrumbPath('form', table, sysId) : _self.ciPagePropsMetadata.DEFAULT_FORM,
                label: title,
                filter: props.form_filter,
                view: props.form_view
            });
        }
        return {
            'breadcrumbs': breadcrumbs,
            'title': title
        };
    },
    _hasWritePermission: function(table, sysId) {
        var gr = new GlideRecord(table);
        if (gr.get(sysId)) {
            return gr.canWrite();
        }
        return false;
    },
    _getPageProps: function(table, sysId, query) {
        var _self = this,
            pageProps = {},
            title;

        // Entry point
        var _props = _self._getProps(table);
        var breadcrumbs = _self._generateBreadcrumbs(_props, table, sysId, query, false);
        var userScope = _self._getScopeProperties(table, sysId).userScope;
        var userScopeName = _self._getScopeName(userScope);

        pageProps = {
            title: breadcrumbs.title,
            heading: _props.heading,
            subHeading: _props.subheading,
            breadcrumbs: breadcrumbs.breadcrumbs,
            filter: _props.filter,
            view: _props.view,
            is_scope_not_matched: !_self._getScopeProperties(table, sysId).scopeMatched,
            user_scope: userScope,
            record_scope: _self._getScopeProperties(table, sysId).tableScope,
            user_scope_name: userScopeName,
            record_scope_name: _self._getScopeProperties(table, sysId).tableScopeName,
            canWrite: _self._hasWritePermission(table, sysId),
            is_form_supported: _self._isFormSupported(table)
        };
        pageProps.hide_tags = !(pageProps.is_form_supported &amp;&amp; _self._isTaggingSupported(table, sysId));
        return pageProps;
    },

    _getScopeName: function(scopeId) {
        if (scopeId &amp;&amp; scopeId == 'global') {
            return 'Global';
        }
        if (scopeId) {
            var app = new GlideRecord('sys_store_app');
            if (app.get(scopeId)) {
                return app.getValue('name');
            }
            return '';
        }
    },
    getPageProps: function(table, sysId, query) {
        try {
            return this._getPageProps(table, sysId, query);
        } catch (e) {
            return [];
        }
    },
    _fetchDefaultValueForScript: function(table, field) {
        var dictionaryGr = new GlideRecord('sys_dictionary');
        dictionaryGr.addQuery('name', table.toString());
        dictionaryGr.addQuery('element', field);
        dictionaryGr.query();
        if (dictionaryGr.next()) return dictionaryGr.getValue('default_value');
        return '';
    },
    _fetchValuesForField: function(gr, fieldMetaData, fieldType, isNewRecord) {
        var field = fieldMetaData.field_name,
            _self = this;
        switch (fieldType) {
            case 'script':
                return isNewRecord ? _self._fetchDefaultValueForScript(gr.getTableName(), fieldMetaData.field_name) : gr.getValue(field);
            case 'slushbucket':
                //Input: Comma separated &lt;sys_id&gt;,
                //Output: [{id: &lt;sys_id&gt;, label: &lt;display_value&gt;}, ...]
                if (isNewRecord) return [];
                var userData = gr.getValue(field),
                    userDataFormatted = [];
                if (!userData) return null;
                userData = userData.split(',');
                fieldMetaData.field_data_source.forEach(function(group) {
                    if (userData.indexOf(group.id) != -1) userDataFormatted.push(group);
                });
                return userDataFormatted;
        }
        return null;
    },
    /*
     * Get all configured fields which are not supported by UIB Record Page Tabs/Form component
     * params:
     * table {string}: Name of the table
     * recordSysId {string} SysId of the record
     * preFetchUserData {boolean} If true, the field is pre-populated with the field data. The data is available under 'field_data' key
     */
    getFields: function(table, recordSysId, preFetchUserData) {
        try {
            if (!table || !recordSysId) return null;
            var allFields = this.ciPagePropsMetadata.SUPPORTED_CUSTOM_FIELDS[table];
            if (!preFetchUserData) return allFields;
            var tableGr = new GlideRecord(table);
            if (!this._isNewRecord(recordSysId) &amp;&amp; (!tableGr.get(recordSysId) || !tableGr.canRead())) return allFields;
            for (var fieldType in allFields) {
                allFields[fieldType].field_data = this._fetchValuesForField(tableGr, allFields[fieldType], fieldType, this._isNewRecord(recordSysId));
            }
            return allFields;
        } catch (e) {
            return {};
        }
    },
    type: 'CIRecordPagePropsUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-23 07:44:19&lt;/sys_created_on&gt;
        &lt;sys_id&gt;acc44b0bc30270104b8e88c7c840ddbc&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CIRecordPagePropsUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Conversational Interfaces Settings" source="com.glide.cs.admin_console"&gt;717df0203c75311068bcf327dfe37fac&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_acc44b0bc30270104b8e88c7c840ddbc&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-11 10:21:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:47</sys_created_on>
        <sys_id>69ff349d83341210c6695855eeaad3ff</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CIRecordPagePropsUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_69ff349d83341210c6695855eeaad3ff</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
