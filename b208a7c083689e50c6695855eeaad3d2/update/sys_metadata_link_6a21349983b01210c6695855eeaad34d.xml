<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2c52b4fcc0a801655a172610b6b8d4c5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.TranslationLoader&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;A.  Create files to send to translators...&amp;#13;
			Start with a freshly zbooted instance and run the following:&amp;#13;
			&amp;#13;
			var tl = new TranslationLoader();&amp;#13;
			tl.process();&amp;#13;
			&amp;#13;
			OR&amp;#13;
			&amp;#13;
			var tl = new TranslationLoader();&amp;#13;
			var pluginArray = ['com.glideapp.custom_charts', 'com.snc.hr_management'];&amp;#13;
			tl.process(pluginArray);&amp;#13;
			&amp;#13;
			1.  Loads default plugins (an array of unpublished but used plugins)&amp;#13;
			2.  Loads array of unpublished plugins as provided via script&amp;#13;
			- processing only occurs on published plugins.  &amp;#13;
			- If translations are required for an unpublished plugin then pass that plugin id into this processing script by means of the pluginArray&amp;#13;
			3.  Loads all inactive published plugins&amp;#13;
			4.  For each plugin:&amp;#13;
			Grab new modules&amp;#13;
			Grab new tables (from above module definition)&amp;#13;
			Render table form/list&amp;#13;
			5.  Copy sys_choice, sys_documentation, sys_translated, sys_ui_message to the corresponding translation tables&amp;#13;
			- gives us english entries for each record&amp;#13;
			6.  Loads all of our existing translation plugins so we have the data in place to build a master sheet&amp;#13;
			translated fields -&amp;gt; u_trf_translations&amp;#13;
			messages -&amp;gt; u_msg_translations&amp;#13;
			sys_documentation -&amp;gt; u_gmld_translations&amp;#13;
			sys_choice -&amp;gt; u_choice_translations&amp;#13;
			7.  Attachement records are created for each translation table&amp;#13;
			&amp;#13;
			Processing takes 3-4 hours&amp;#13;
			&amp;#13;
			B.  Process files from translators&amp;#13;
			Copy files from translators into a directory on your local machine (/translations)&amp;#13;
			Start with a freshly zbooted instance and run the following&amp;#13;
			&amp;#13;
			var tl = new TranslationLoader();&amp;#13;
			tl.setDebug(true);&amp;#13;
			tl.setImportPath('/trans/import/');&amp;#13;
			tl.setExportPath('/trans/export/');&amp;#13;
			tl.importTranslations();&amp;#13;
			&amp;#13;
			1.  Loads the translated files&amp;#13;
			2.  Transforms to sys_choice, sys_documentation, sys_translated and sys_ui_message&amp;#13;
			3.  For each language export each table to excel&amp;#13;
			Result is excel files matching the below file naming convention&amp;#13;
			4.  Check these excel files into each language plugin&amp;#13;
			&amp;#13;
			File naming convention&amp;#13;
			sys_choice_&amp;lt;country&amp;gt;.xls&amp;#13;
			sys_translated_&amp;lt;country&amp;gt;.xls&amp;#13;
			sys_documentation_&amp;lt;country&amp;gt;.xls&amp;#13;
			sys_ui_message_&amp;lt;country_.xls&lt;/description&gt;
        &lt;name&gt;TranslationLoader&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("DataSourceLoader");
gs.include("ImportSetCleaner");

var TranslationLoader = Class.create();
TranslationLoader.prototype = {
    initialize: function () {
        this.languageAbbreviation;
        this.languageName;
        this.choiceLoader;
        this.docLoader;
        this.transLoader;
        this.msgLoader;
        this.txtLoader;


        // Default plugins
        this.defaultPluginArray;
        this.setupDefaultPluginArray();

        // Mapping
        this.choiceFields = new Object();
        this.docFields = new Object();
        this.transFields = new Object();
        this.msgFields = new Object();
        this.txtFields = new Object();
        this.setupMapping();

        // Modules
        this.moduleChk = new Object();

        // Debug
        this.debug = false;

        // Process?  Do we process modules after plugin activation
        this.moduleProcessing = true;

        // Read from File System (Default)
        this.importPath = '/translations/translations_import/';

        // Write to File System
        this.exportPath = '/translations/translations_export/';
        this.writeToFileSystem = false;

        // Send messages to Worker if available
        this.worker = null;
    },

    process: function(pluginArray) {
        // Get initial counts
        this.getCounts();

        // Turn on Translate and Learn
        gs.setProperty('glide.translate.learn', true);

        // Create English Language Choices
        this.createEnglishLanguageChoices();

        // Process modules (forms/lists) active by default
        this.processModules(true);

        // Load default plugins
        this.loadNamedPlugins(this.defaultPluginArray);

        // Load plugins (provided by user)
        if (typeof pluginArray != 'undefined')
            this.loadNamedPlugins(pluginArray);

        // Load plugins
        this.loadPlugins();

        // Process UI Pages
        this.processUIPages();

        // Gauges
        this.processGauges();

        // Create entries for all translated_field type fields
        this.createTranslatedFieldEntries();

        // Create entries in sys_translatedtxt_translations for all
        // translated_text/translated_html type fields
        // btw - these don't have english entries - producing english
        // for translators only
        this.createTranslatedTextEntries();

        // Turn off Translate and Learn
        gs.setProperty('glide.translate.learn', false);

        // Create English Entries for all choices, doc, translated and messages
        this.transferEnglishTranslations();

        // Load Translations
        this.loadLanguages(true);

        // Get final counts
        this.getCounts();

        // Pre-export Cleanup
        this.preExportCleanup();
    },

    importTranslations: function() {
        // Make sure we cleanup
        this.cleanupTranslations();

        // Import Translated Files
        this.importFiles();

        // Create/Populate Document Key Sys ID
        this.populateDocumentSysID();

        // Nuke Document Key Sys ID
        this.deleteDocumentSysID();
    },

    importFiles: function() {
        var dir = new Packages.java.io.File(this.importPath);
        var dirs = dir.listFiles();
        for (var i = 0; i &lt; dirs.length; i++) {
            var langdir = dirs[i];
            if (langdir.isDirectory()) {
                this.languageAbbreviation = this.getLanguageCodeFromFile(langdir.getName());
                this.choiceLoader = this.loadFile(langdir, 'sys_choice_translations', 'u_choice_translated');
                this.docLoader = this.loadFile(langdir, 'sys_documentation_translations', 'u_gmld_translated');
                this.transLoader = this.loadFile(langdir, 'sys_translated_translations', 'u_trf_translated');
                this.msgLoader = this.loadFile(langdir, 'sys_ui_message_translations', 'u_msg_translated');
                this.txtLoader = this.loadFile(langdir, 'sys_translatedtxt_translations', 'u_txt_translated');

                // Transform
                this.transformLanguage(true);
            }
        }
    },

    transferEnglishTranslations: function() {
        //Turn the cache flush off for this session
        GlideSession().get().setCacheFlush(false);
        GlideSession().get().setWorkflow(false);

        this.transferEnglishTranslation('sys_choice', 'sys_choice_translations', this.choiceFields);
        this.transferEnglishTranslation('sys_documentation', 'sys_documentation_translations', this.docFields);
        this.transferEnglishTranslation('sys_translated', 'sys_translated_translations', this.transFields);
        this.transferEnglishTranslation('sys_ui_message', 'sys_ui_message_translations', this.msgFields);

        // Flush the cache and then turn cache flushing back on for this session
        GlideCacheManager.flush();
        GlideSession().get().setCacheFlush(true);
        GlideSession().get().setWorkflow(true);
    },

    transferEnglishTranslation: function(source, destination, fields) {
        var t = new GlideRecord(source);
        t.query();
        while (t.next()) {
            var trans = new GlideRecord(destination);
            trans.initialize();

            var td =  new GlideTableDescriptor(t.getRecordClassName());
            var tda = td.getSchema().keySet().toArray();
            for (var i = 0; i != tda.length; i++) {
                var fld = tda[i];
                if (fields[fld.toString()])
                    trans.setValue(fld.toString(), t.getValue(fld));
            }
            trans.english_label = t.label;
            if (source == 'sys_choice')
                trans.english_hint = t.hint;

            if (source == 'sys_documentation') {
                trans.english_plural = t.plural;
                trans.english_hint = t.hint;
                trans.english_help = t.help;
            }

            if (source == 'sys_ui_message')
                trans.english_message = t.message;

            trans.setWorkflow(false);
            trans.insert();
        }
    },

    createEnglishLanguageChoices: function() {
        var sysLanguage = new GlideRecord('sys_language');
        sysLanguage.query();
        while (sysLanguage.next()) {
            var choice = new GlideRecord('sys_choice');
            choice.addQuery('element', 'preferred_language');
            choice.addQuery('language', 'en');
            choice.addQuery('value', sysLanguage.id);
            choice.query();
            if(!choice.next()) {
                choice.initialize();
                choice.name = 'sys_user';
                choice.element = 'preferred_language';
                choice.language = 'en';
                choice.value = sysLanguage.id;
                choice.inactive = false;
                choice.label = sysLanguage.name;
                choice.insert();
            }
        }
    },

    pluginActivation_activateLanguage: function(plugin) {
        plugin = plugin.toString();
        this.debug = true;
        this.languageAbbreviation = this.getLanguageAbbreviation0(plugin);
        var isExpressPlugin = plugin.indexOf(".express") &gt; 0;
        var isExpressOffering = GlideUtil.isExpressInstance();

        // If an Express instance tries to upgrade an Enterprise plugin even though
        // an Express plugin exists, DO NOTHING
        if (isExpressOffering &amp;&amp; !isExpressPlugin &amp;&amp; this.hasExpressPlugin(plugin))
            return;

        // If an Enterprise instance accidentally tries installing the Express language
        // plugin, DO NOTHING
        if (!isExpressOffering &amp;&amp; isExpressPlugin)
            return;

        // Create English Choice
        new I18nUtils().createDefaultLanguageChoice(this.languageAbbreviation);

        if (isExpressOffering &amp;&amp; isExpressPlugin)
            this.pluginActivation_loadTranslationsEnterpriseThenExpress(plugin);
        else
            this.pluginActivation_loadTranslationsFromPlugin(plugin);

        // Activate language choices (based upon active languages)
        gs.print("Running activatePreferredLanguageChoices for " + this.languageAbbreviation);
        new I18nUtils().activatePreferredLanguageChoices(this.languageAbbreviation);

        // Activate timezone choices (based on currently active English timezone choices)
        new I18nUtils().activateTimezoneChoices(this.languageAbbreviation);
    },

	hasExpressPlugin: function (plugin) {
		var expressSuffix = ".express";
        var pluginHasExpressSuffix = plugin.indexOf(expressSuffix) != -1;

        
        if (pluginHasExpressSuffix) {
            return pm.getInstalledPlugin(plugin) != null;
        } else {
        	return pm.getInstalledPlugin(plugin + expressSuffix) != null;
        }
        
       },


    pluginActivation_loadTranslationsEnterpriseThenExpress: function (plugin) {
        var expressSuffix = ".express";
        var enterprisePluginId;
        var expressPluginId;
        var pluginHasExpressSuffix = plugin.indexOf(expressSuffix) == (plugin.length - expressSuffix.length);

        if (pluginHasExpressSuffix) {
            enterprisePluginId = plugin.substring(0, (plugin.length - expressSuffix.length));
            expressPluginId = plugin;
        } else {
            enterprisePluginId = plugin;
            expressPluginId = plugin + expressSuffix;
        }

		gs.print("Running Enterprise " + enterprisePluginId + " plugin first");
        this.pluginActivation_loadTranslationsFromPlugin(enterprisePluginId);
		gs.print("Running Express " + expressPluginId + " plugin second");
        this.pluginActivation_loadTranslationsFromPlugin(expressPluginId);
    },
    
    loadAppLanguageFiles: function(appPlugin) {
		
		appPlugin = appPlugin.toString();
		
		var gr = new GlideRecord('sys_language');
		gr.query();
		
		while(gr.next()) {
			var lName = gr.name.toLowerCase();
			
			if(lName.contains(' - '))
				lName = lName.replace(' - ',/-/g);
			else if(lName.contains(' '))
				lName = lName.replaceAll(' ', '_');
			
			this.languageAbbreviation = this.getLanguageAbbreviation0('com.snc.i18n.'+lName);
			
			this.loadTranslationsFromAppPlugin(appPlugin);
			gs.print('Completed loading application language files for:' + 'com.snc.i18n.'+lName);
		}
		
		
		
	},
	
	loadTranslationsFromAppPlugin: function (plugin) {
		this.importAppPluginLanguageFiles(plugin);
		this.pluginActivation_transformLanguageFile();
	},
	
	importAppPluginLanguageFiles: function(plugin) {
		var lName = this.languageName;
		this.choiceLoader = this.loadFromApp(plugin, 'sys_choice_' + lName, 'u_sys_choice');
		this.docLoader = this.loadFromApp(plugin, 'sys_documentation_' + lName, 'u_sys_documentation');
		this.transLoader = this.loadFromApp(plugin, 'sys_translated_' + lName, 'u_sys_translated');
		this.msgLoader = this.loadFromApp(plugin, 'sys_ui_message_' + lName, 'u_sys_ui_message');
		this.txtLoader = this.loadFromApp(plugin, 'sys_translated_text_' + lName, 'u_sys_translated_text');
		this.scheduleAppCacheFlush();
	},
	
	scheduleAppCacheFlush: function() {
		var sys_trigger = new GlideRecord('sys_trigger');

		if (sys_trigger.isValid()) {
			var triggerName = 'ASYNC: TranslationLoader_importAppPlugin';
			sys_trigger.addQuery('name', triggerName);
			sys_trigger.query();

			if (!sys_trigger.next()) {
				var script = 'GlideCacheManager.flush(\'sys_choice_compiled\');\n' +
					'GlideCacheManager.flush(\'DBCategoryPoolCache_tables\');\n' +
					'GlideCacheManager.flush(\'knowledge_base_cache\');\n' +
					'GlideCacheManager.flush(\'syscache_primary_key_dbiglide\');\n' +
					'GlideCacheManager.flush(\'TS_TRANSLATED_MAP\');\n' +
					'GlideCacheManager.flush(\'syscache_message\');\n' +
					'GlideCacheManager.flush(\'syscache_translated_field\');\n' +
					'GlideCacheManager.flush(\'type_ui_page\');\n' +
					'GlideCacheManager.flush(\'syscache_sys_ui_context_menu\');';

				var when = new GlideDateTime();
				when.addSeconds(60 * 60); // An hour
				GlideRunScriptJob.scheduleScript(script, "TranslationLoader_importAppPlugin", when);
			}
		}
	},
	
	loadFromApp: function (plugin, identifier, stageTable) {
		var isgr;
		
		try {
			
			var resource = '/update/translations/'+this.languageName+'/' + identifier + '.xlsx';
			var fs = SNC.PluginResources.openStream(plugin, resource);
			var ds = this.createPluginI18nDataSource(fs, resource, stageTable);
			var loader = new GlideImportSetLoader();
			var dsgr = ds.getDataSourceGR();
			// Once we have the data source then update a couple of things
			// set the connection_url as it is needed to getFile later
			dsgr.connection_url = "attachment://sys_data_source:" + dsgr.sys_id + "/";
			// set dynamic resize to prevent truncation and language
			dsgr.properties = 'dynamic_field_resize=true,language=' + this.languageAbbreviation + ',is_store_app';
			// get and set language property
			dsgr.setWorkflow(false);
			dsgr.update();
			isgr = loader.getImportSetGr(dsgr);
			loader.loadImportSetTable(isgr, dsgr);
		} catch(ex) {
			gs.print('Exception loading language file for app :' + plugin + ' for the language: ' + this.languageName);
		}
		
		return isgr;
	},

    pluginActivation_loadTranslationsFromPlugin: function (plugin) {
        // Import/Transform Language files
        gs.print("Running " + plugin + " Imports... this may take a while");
        this.pluginActivation_importPluginLanguage(plugin);
        this.pluginActivation_transformLanguageFile();
    },

    pluginActivation_importPluginLanguage: function (plugin) {
        var lName = this.languageName;
        this.choiceLoader = this.loadPlugin(plugin, 'sys_choice_' + lName, 'u_sys_choice');
        this.docLoader = this.loadPlugin(plugin, 'sys_documentation_' + lName, 'u_sys_documentation');
        this.transLoader = this.loadPlugin(plugin, 'sys_translated_' + lName, 'u_sys_translated');
        this.msgLoader = this.loadPlugin(plugin, 'sys_ui_message_' + lName, 'u_sys_ui_message');
        this.txtLoader = this.loadPlugin(plugin, 'sys_translated_text_' + lName, 'u_sys_translated_text');
    },

    load: function (plugin) {
        this.logger("Translation Log - Load Language: " + plugin.id + " - " + gs.nowDateTime());

        var pname = plugin.id;
        var lName = this.languageName;
        this.choiceLoader = this.loadPlugin(pname, 'sys_choice_' + lName, 'u_choice_translations');
        this.docLoader = this.loadPlugin(pname, 'sys_documentation_' + lName, 'u_gmld_translations');
        this.transLoader = this.loadPlugin(pname, 'sys_translated_' + lName, 'u_trf_translations');
        this.msgLoader = this.loadPlugin(pname, 'sys_ui_message_' + lName, 'u_msg_translations');
        this.txtLoader = this.loadPlugin(pname, 'sys_translated_text_' + lName, 'u_txt_translations');
    },

    loadPlugin: function (plugin, identifier, stageTable) {
        var resource = '/update/' + identifier + '.xlsx';
        var fs = SNC.PluginResources.openStream(plugin, resource);
        var ds = this.createPluginI18nDataSource(fs, resource, stageTable);
        var loader = new GlideImportSetLoader();
        var dsgr = ds.getDataSourceGR();
        // Once we have the data source then update a couple of things
        // set the connection_url as it is needed to getFile later
        dsgr.connection_url = "attachment://sys_data_source:" + dsgr.sys_id + "/";
        // set dynamic resize to prevent truncation and language
        dsgr.properties = 'dynamic_field_resize=true,language=' + this.languageAbbreviation;
        // get and set language property
        dsgr.setWorkflow(false);
        dsgr.update();
        var isgr = loader.getImportSetGr(dsgr);
        loader.loadImportSetTable(isgr, dsgr);

        this.logger('Translation Log - Loaded ' + resource + ': ' + gs.nowDateTime());

        return isgr;
    },

    createPluginI18nDataSource: function (fs, resource, tablename) {
        return GlideDataSource.createAttachedDataSource(fs, resource, resource, tablename);
    },

    pluginActivation_importLanguageFile: function(dir) {
        var lName = this.languageName;
        this.choiceLoader = this.loadFile(dir, 'sys_choice_' + lName, 'u_sys_choice');
        this.docLoader = this.loadFile(dir, 'sys_documentation_' + lName, 'u_sys_documentation');
        this.transLoader = this.loadFile(dir, 'sys_translated_' + lName, 'u_sys_translated');
        this.msgLoader = this.loadFile(dir, 'sys_ui_message_' + lName, 'u_sys_ui_message');
        this.txtLoader = this.loadFile(dir, 'sys_translated_text_' + lName, 'u_sys_translated_text');
    },

    pluginActivation_transformLanguageFile: function() {
        this.transform('Sys Choice', this.choiceLoader, false);
        this.transform('Sys Documentation', this.docLoader, false);
        this.transform('Sys Translated', this.transLoader, false);
        this.transform('Sys UI Message', this.msgLoader, false);
        this.transform('Sys Translated Text', this.txtLoader, false);
    },

    loadLanguages: function(transform) {
        var languagePlugins = new GlideRecord('v_plugin');
        languagePlugins.addQuery('id', 'STARTSWITH', 'com.snc.i18n');
        languagePlugins.addQuery('state', 'published');
        languagePlugins.query();
        while (languagePlugins.next()) {
            // Load
            this.languageAbbreviation = this.getLanguageAbbreviation(languagePlugins);
            this.load(languagePlugins);

            // Transform
            if (transform)
                this.transformLanguage(false);
        }
    },

    loadFile: function(dir, identifier, stageTable) {
        var file = this.findFile(dir, identifier, 'xlsx');
        if (!file)
            return;

        var ds = this.createDataSource(file, stageTable);
        var loader = new GlideImportSetLoader();
        var dsgr = ds.getDataSourceGR();
        // Once we have the data source then update a couple of things
        // set the connection_url as it is needed to getFile later
        dsgr.connection_url = "attachment://sys_data_source:" + dsgr.sys_id + "/";
        // set dynamic resize to prevent truncation and language
        dsgr.properties = 'dynamic_field_resize=true,language=' + this.languageAbbreviation;
        // get and set language property
        dsgr.setWorkflow(false);
        dsgr.update();
        var isgr = loader.getImportSetGr(dsgr);
        loader.loadImportSetTable(isgr, dsgr);

        this.logger('Translation Log - Loaded ' + file + ':  ' + gs.nowDateTime());

        return isgr;
    },

    createDataSource: function(f, tablename) {
        return GlideDataSource.createAttachedDataSource(f, f.getName(), tablename);
    },

    findFile: function(dir, fn, ext) {
        this.logger('Translation Log - Find File:  ' + fn);

        var d = dir.listFiles();
        for (var i = 0; i &lt; d.length; i++) {
            var n = d[i].getName();
            if (n.indexOf(fn) == 0 &amp;&amp; n.endsWith(ext))
                return d[i];
        }
    },

    findMap: function(mapName) {
        var mapid = "";
        var map = new GlideRecord('sys_transform_map');
        map.addQuery('name', mapName);
        map.query();
        if (map.next())
            mapid = map.sys_id;

        this.logger("Translation Log - Found Map:  " + mapid);

        return mapid;
    },

    transformLanguage: function(translated) {
        this.transform('Choice', this.choiceLoader, translated);
        this.transform('GMLD', this.docLoader, translated);
        this.transform('TRF', this.transLoader, translated);
        this.transform('MSG', this.msgLoader, translated);
        this.transform('TXT', this.txtLoader, translated);
    },

    transform: function(map, loader, translated) {
        if (!loader)
            return;

        this.logger("Translation Log - Loader:  " + loader.number + "/" + loader.table_name);

        var mapName = map;
        if (translated)
            mapName += ' Translated';
        else
            mapName += ' Translation Map';

        this.logger("Translation Log - Transform " + mapName + ":  " + gs.nowDateTime());

        var mapid = this.findMap(mapName);
        if (mapid == "")
            return;

        var t = new GlideImportSetTransformer();
        t.setMapID(mapid);
        t.transformAllMaps(loader);

        if (translated) {
            // Clean up Import
            var cleaner = new ImportSetCleaner(loader.table_name);
            cleaner.setDataOnly(false);
            cleaner.setDeleteMaps(false);
            cleaner.clean();
        }
    },

    getLanguageAbbreviation: function(languagePlugins) {
        this.logger("Translation Log - getLanguageAbbreviation:  " + languagePlugins.id);

        return this.getLanguageAbbreviation0(languagePlugins.id);
    },

    getLanguageAbbreviation0: function(pluginID) {
        this.logger("Translation Log - getLanguageAbbreviation for Language Plugin:  " + pluginID);

        this.languageName = pluginID.split('.')[3];
        var lName = this.languageName.replaceAll('_', ' ');
        lName = lName.replace(/-/g, ' - ');
        var scpl = new GlideRecord('sys_language');
        scpl.addQuery('name', lName);
        scpl.query();
        scpl.next();

        this.logger("Translation Log - getLanguageAbbreviation:  " + scpl.id);

        return scpl.id;
    },

    getLanguageCodeFromFile: function(fileName, extension) {
        var end = fileName.length();
        if (typeof extension != 'undefined')
            end = fileName.indexOf(extension);

        var lc = fileName.substring(end-2, end);
        lc = lc.toLowerCase();
        // zh_tw -&gt; zt Traditional Chinese
        if (lc == 'tw')
            lc = 'zt';

        // fr-ca -&gt; fq French - Canada
        if (lc == 'ca')
            lc = 'fq';

        // pt-br -&gt; pb Brazilian Portuguese
        if (lc == 'br')
            lc = 'pb';

        // zh-cn -&gt; zh Simplified Chinese
        if (lc == 'cn')
            lc = 'zh';

        return lc;
    },

    loadPlugins: function() {
        var plugins = new GlideRecord('v_plugin');
        plugins.addQuery('state', 'published');
        plugins.addQuery('id', 'DOES NOT CONTAIN', 'i18n');
        plugins.addQuery('active', 'inactive');
        plugins.query();
        while (plugins.next()) {
            this.processPlugin(plugins.id);
        }
    },

    loadNamedPlugins: function(pluginArray) {
        for (var i = 0; i &lt; pluginArray.length; i++) {
            this.processPlugin(pluginArray[i]);
        }
    },

    processPlugin: function(pluginsid) {
        if (pm.getActivePlugin(pluginsid) == null) {
            this.logger("Translation Log - Loading plugin:  " + pluginsid);

            pm.registerPlugin(pluginsid);
        }

        // After plugin activation look for new modules and render forms/lists
        if (this.moduleProcessing)
            this.processModules(false);
    },

    processModules: function(active) {
        var sam = new GlideRecord('sys_app_module');
        if (active)
            sam.addQuery('active', true);
        sam.query();
        while (sam.next()) {
            var samid = sam.sys_id.toString();
            if (!this.moduleChk[samid]) {
                // Process modules
                var name = sam.name;
                var application = sam.application.name;
                if (!name.nil())
                    this.renderForm(name);

                var linkType = sam.link_type;
                var query = sam.query;
                if (linkType == 'SEPARATOR' &amp;&amp; !query.nil())
                    gs.getMessage(query);

                // Add module to processed list
                this.moduleChk[samid] = true;
            }
        }
    },

    processUIPages: function() {
        var suip = new GlideRecord('sys_ui_page');
        suip.query();
        while (suip.next()) {
            var name = suip.name;
            if (name.nil())
                continue;

            this.renderPage(suip);
        }
    },

    processUIMacros: function() {
        var suim = new GlideRecord('sys_ui_macro');
        suim.addQuery('xml', 'CONTAINS', 'getMessage');
        suim.query();
        while (suim.next()) {
            var rp = new GlideRenderProperties();
            rp.setView("Default view", "Default view");
            var jr = new GlideJellyRunner();
            jr.setEscaping(true);
            jr.setRenderProperties(rp);
            jr.runFromTemplate(suim.name + ".xml");
        }
    },

    processGauges: function() {
        // Render Properties so we don't throw a bunch 'o errors
        var rp = new GlideRenderProperties();
        rp.setView("Default view", "Default view");

        var script = '&lt;?xml version="1.0" encoding="utf-8" ?&gt;' +
            '&lt;j:jelly trim="true" xmlns:j="jelly:core" xmlns:g="glide"&gt;' +
            '&lt;g:gauge id="sys_id" width="800" height="600"/&gt;' +
            '&lt;/j:jelly&gt;';

        var gauge = new GlideRecord('sys_gauge');
        gauge.addQuery('type', 'counts');
        gauge.query();
        while (gauge.next()) {
            this.logger("Translation Log - Rendering Gauge:  " + gauge.name);

            // Jelly Runner to hit the gauges
            var jr = new GlideJellyRunner();
            jr.setRenderProperties(rp);

            var runScript = script.replace('sys_id', gauge.sys_id.toString());
            jr.runFromScript(runScript);
        }
    },

    renderForm: function(name) {
        this.logger("Translation Log - Rendering Forms/Lists:  " + name);

        // Variables
        var gc = new GlideController();
        var rp = new GlideRenderProperties();

        // Render Form
        var gf = new GlideForm(gc, name, 0);
        gf.setRenderProperties(rp);
        var f = gf.getRenderedPage();

        // Render List
        name += "_list";
        gf = new GlideForm(gc, name, 0);
        gf.setRenderProperties(rp);
        var l = gf.getRenderedPage();
    },

    renderPage: function(sysUIPage) {
        // RP
        var RP = new GlideRenderProperties();
        RP.setView("Default view", "Default view");

        // Variables
        var output = new Packages.org.apache.commons.jelly.XMLOutput.createXMLOutput(Packages.java.lang.System.out);
        var gc = new GlideController();
        gc.putGlobal("RP", RP);
        var fgc = new GlideJellyContext(gc);

        // Emit
        var script = sysUIPage.getValue('html');
        var clientScript = sysUIPage.getValue('client_script');
        var emitter = new GlideEmitter(fgc, output);
        emitter.emitJelly(script);
        emitter.emitClientScriptWithEval(clientScript, GlideEmitter.PHASE1);
    },

    createTranslatedFieldEntries: function() {
        var dic = new GlideRecord('sys_dictionary');
        dic.addQuery('internal_type', 'translated_field');
        dic.query();
        while (dic.next()) {
            var tbl = dic.name;
            var fld = dic.element;

            var tfr = new GlideRecord(tbl);
            tfr.query();
            while (tfr.next()) {
                var value = tfr.getValue(fld);

                if (!value)
                    continue;

                var lookup = new GlideRecord('sys_translated');
                lookup.addQuery('name', tbl);
                lookup.addQuery('element', fld);
                lookup.addQuery('value', value);
                lookup.query();
                if (lookup.getRowCount() != 0)
                    continue;

                var tfrt = new GlideRecord('sys_translated');
                tfrt.initialize();
                tfrt.name = tbl;
                tfrt.element = fld;
                tfrt.value = value;
                tfrt.label = value;
                tfrt.language = 'en';
                tfrt.setWorkflow(false);
                tfrt.insert();
            }
        }
    },

    createTranslatedTextEntries: function(exportLanguage) {
        var dic = new GlideRecord('sys_dictionary');
        dic.addQuery('internal_type', 'translated_text').addOrCondition('internal_type', 'translated_html');
        dic.query();
        while (dic.next()) {
            var tbl = dic.name;
            var fld = dic.element;
            var c = new GlideRecord(tbl);
            c.query();
            while (c.next()) {
                var value = c.getValue(fld);
                if (!value)
                    continue;

                var doc = c.sys_id.toString();
                var tt = this.getTranslatedTextEntry(tbl, fld, doc);
                if (tt == null)
                    this.insertTranslatedTextEntry(tbl, fld, doc, value);
            }
        }
    },

    getTranslatedTextEntry: function(tbl, fld, doc) {
        var tt = new GlideRecord('sys_translatedtxt_translations');
        tt.addQuery('tablename', tbl);
        tt.addQuery('fieldname', fld);
        tt.addQuery('documentkey', doc);
        tt.query();
        if (tt.next())
            return tt;

        return null;
    },

    insertTranslatedTextEntry: function(tbl, fld, doc, value) {
        var tt = new GlideRecord('sys_translatedtxt_translations');
        tt.initialize();
        tt.tablename = tbl;
        tt.fieldname = fld;
        tt.documentkey = doc;
        tt.documentkey_sys_id = doc;
        tt.english_value = value;
        tt.insert();
    },

    /**
     *  Special processing
     *  Create documentkey_sys_id field in sys_translated_text
     *  Populate the field with the sys_id of the documentkey field
     *  Export the translated files
     *  Delete the documentkey_sys_id field in sys_translated_text
     *  Note: the documentkey_sys_id field does not have to actually exist in the
     *            sys_translated_text table (for customers)
     *        we need it only for processing of translation files
     *        if the documentkey_sys_id exists in our translation files then we
     *            can use it for coalesce when a language plugin is activated
     */
    populateDocumentSysID: function() {
        this.createDocumentSysID();

        var tt = new GlideRecord('sys_translated_text');
        tt.query();
        while (tt.next()) {
            tt.documentkey_sys_id = tt.documentkey.toString();
            tt.setWorkflow(false);
            tt.update();
        }
    },

    createDocumentSysID: function() {
        var tbl = 'sys_translated_text';
        var lbl = 'Document Sys ID';
        var cnm = 'documentkey_sys_id';
        new GlideDBUtil.createElement(tbl, lbl, cnm, 'string', '40', null, true, false);
    },

    deleteDocumentSysID: function() {
        var tbl = 'sys_translated_text';
        var cnm = 'documentkey_sys_id';
        gs.dropColumnQuick(tbl, cnm);
        system.cacheFlush();
    },

    preExportCleanup: function() {
        // A little cleanup before export!!!!
        // If we don't have a Value OR English Label then delete
        var sct = new GlideRecord('sys_choice_translations');
        sct.addNullQuery('value');
        sct.addNullQuery('english_label');
        sct.query();
        while (sct.next()) {
            sct.deleteRecord();
        }

        // If we don't have English labels then set English Label to Value
        sct = new GlideRecord('sys_choice_translations');
        sct.addNullQuery('english_label');
        sct.query();
        while (sct.next()) {
            sct.english_label = sct.value;
            sct.update();
        }

        // Get rid of entries that don't have Labels
        var sdt = new GlideRecord('sys_documentation_translations');
        sdt.addNullQuery('english_label');
        sdt.query();
        sdt.deleteMultiple();

        // Cleanup approval_engine entries
        var sumt = new GlideRecord('sys_ui_message_translations');
        sumt.addQuery('key', 'STARTSWITH', 'approval_engine');
        sumt.query();
        while (sumt.next()) {
            var key = sumt.key;
            var msg = sumt.english_message;
            if (key.equals(msg))
                sumt.deleteRecord();
        }

        // Remove Spaces
        sumt = new GlideRecord('sys_ui_message_translations');
        sumt.addQuery('key', ' ');
        sumt.deleteMultiple();

        // Remaining have message = key
        sumt = new GlideRecord('sys_ui_message_translations');
        sumt.addNullQuery('english_message');
        sumt.query();
        while (sumt.next()) {
            sumt.english_message = sumt.key;
            sumt.update();
        }

        var stt = new GlideRecord('sys_translated_translations');
        stt.addQuery('name', 'sys_ui_view');
        stt.addQuery('element', 'title');
        stt.addQuery('value', 'STARTSWITH', 'Rpt');
        stt.deleteMultiple();

        stt = new GlideRecord('sys_translated_translations');
        stt.addNullQuery('english_label');
        stt.addNullQuery('value');
        stt.deleteMultiple();

        stt = new GlideRecord('sys_translated_translations');
        stt.addQuery('english_label', ' ');
        stt.addQuery('value', ' ');
        stt.deleteMultiple();

        stt = new GlideRecord('sys_translated_translations');
        stt.addNullQuery('english_label');
        stt.query();
        while (stt.next()) {
            stt.english_label = stt.value;
            stt.update();
        }

        var sttt = new GlideRecord('sys_translatedtxt_translations');
        sttt.addNullQuery('english_value');
        sttt.deleteMultiple();
    },

    preExportNoChoice: function() {
        var dic = new GlideRecord('sys_dictionary');
        dic.addQuery('choice_table', 'sys_user');
        dic.addQuery('choice_field', 'preferred_language');
        dic.addQuery('name', 'sys_translated_text').addOrCondition('name', 'sys_ui_message');
        dic.query();
        while (dic.next()) {
            dic.choice = "";
            dic.setWorkflow(false);
            dic.update();
        }
    },

    createFixJobs: function(backPortTo) {
        var pname = 'com.glide.i18n';
        var p = pm.getInstalledPlugin(pname);
        var path = p.getPath() + '/';
        var dir = new Packages.java.io.File(path);
        var fjName = 'import_translations_fix_tpl';
        var fjBack = dir + '/update/' + 'import_' + backPortTo + '_translations.xml';
        // Find fix job template file
        var fromFile = this.findFile(dir, fjName, 'txt');
    },

    getFieldChoices: function(table, fieldsArray) {
        var fieldChoices = new Array();
        var fieldChoicesPK = new Array();
        var td =  new GlideTableDescriptor(table);
        var tda = td.getSchema().keySet().toArray();
        for (var i = 0; i != tda.length; i++) {
            var fld = tda[i];
            if (!fld.startsWith('sys') &amp;&amp; !fieldsArray[fld])
                fieldChoices.push(fld.toString());

            if (fieldsArray[fld])
                fieldChoicesPK.push(fld.toString());
        }

        var fc = new GlideChoiceList();
        // Push in "PK" fields
        for (var i = 0; i &lt; fieldChoicesPK.length; i++) {
            fc.add(fieldChoicesPK[i], fieldChoicesPK[i]);
        }
        // Sort then push in remaining fields
        fieldChoices.sort();
        for (var i = 0; i &lt; fieldChoices.length; i++) {
            fc.add(fieldChoices[i], fieldChoices[i]);
        }

        return fc;
    },

    activateLanguages: function() {
        var languagePlugins = new GlideRecord('v_plugin');
        languagePlugins.addQuery('id', 'STARTSWITH', 'com.snc.i18n');
        languagePlugins.query();
        while (languagePlugins.next()) {
            this.activateLanguage(languagePlugins.id);
        }
    },

    activateLanguage:  function(pluginsid) {
        this.logger("Translation Log - Loading plugin:  " + pluginsid);

        pm.registerPlugin(pluginsid);
    },

    setupMapping: function() {
        // Choice mapping
        this.choiceFields['name'] = true;
        this.choiceFields['element'] = true;
        this.choiceFields['value'] = true;
        this.choiceFields['dependent_value'] = true;
        this.choiceFields['sequence'] = true;
        // Documentation mapping
        this.docFields['name'] = true;
        this.docFields['element'] = true;
        this.docFields['url'] = true;
        this.docFields['url_target'] = true;
        // Translated mapping
        this.transFields['name'] = true;
        this.transFields['element'] = true;
        this.transFields['value'] = true;
        // Message mapping
        this.msgFields['application'] = true;
        this.msgFields['key'] = true;
        // Translated Text mapping
        this.txtFields['documentkey_sys_id'] = true;
        this.txtFields['documentkey'] = true;
        this.txtFields['tablename'] = true;
        this.txtFields['fieldname'] = true;
    },

    setupDefaultPluginArray: function() {
        this.defaultPluginArray = [
            'com.glide.cmdb_reconcilliation',
            'com.glide.context_help',
            'com.glide.email_filter',
            'com.glideapp.compliance',
            'com.glideapp.monitor',
            'com.snc.certification',
            'com.snc.customer_registration',
            'com.snc.discovery',
            'com.snc.discovery.consolidation',
            'com.snc.enterprise_cmdb.hostnames',
            'com.snc.field_service_management',
            'com.snc.ha',
            'com.snc.runbook_automation',
            'com.snc.runbook_automation.examples',
            'com.snc.runbook_automation.vmware',
            'com.snc.runbook_snc_instance',
            'com.snc.territory_management'];
    },

    getCount: function(table) {
        var tbl = new GlideRecord(table);
        tbl.query();

        this.logger("Translation Log - Row Counts for " + table + ":  " + tbl.getRowCount());
    },

    getCounts: function() {
        this.getCount('sys_choice');
        this.getCount('sys_documentation');
        this.getCount('sys_translated');
        this.getCount('sys_ui_message');
        this.getCount('sys_translated_text');
        this.getCount('sys_choice_translations');
        this.getCount('sys_documentation_translations');
        this.getCount('sys_translated_translations');
        this.getCount('sys_ui_message_translations');
        this.getCount('sys_translatedtxt_translations');
    },

    setDebug: function(debug) {
        this.debug = debug;
    },

    setWorker: function(worker) {
        this.worker = worker;
    },

    setImportPath: function(path) {
        this.importPath = path;
    },

    setExportPath: function(path) {
        if (!path.endsWith("/"))
            path += "/";

        this.exportPath = path;
    },

    setWriteToFileSystem: function(writeOut) {
        this.writeToFileSystem = writeOut;
    },

    setModuleProcessing: function(moduleProcessing) {
        this.moduleProcessing = moduleProcessing;
    },

    cleanupUpdates: function() {
        var sux = new GlideRecord('sys_update_xml');
        sux.deleteMultiple();
    },

    cleanupTranslations: function(language) {
        //Turn the cache flush off for this session
        GlideSession().get().setCacheFlush(false);
        GlideSession().get().setWorkflow(false);

        var tbls = new Array('sys_choice', 'sys_documentation', 'sys_translated', 'sys_translated_text', 'sys_ui_message');
        for (var i = 0; i &lt; tbls.length; i++) {
            var sc = new GlideRecord(tbls[i]);
            sc.addQuery('language', '!=', 'en');
            if (typeof language != 'undefined')
                sc.addQuery('language', language);

            sc.deleteMultiple();
        }

        // Flush the cache and then turn cache flushing back on for this session
        GlideCacheManager.flush();
        GlideSession().get().setCacheFlush(true);
        GlideSession().get().setWorkflow(true);
    },

    cleanupLanguageTranslations: function(language) {
        this.cleanupTranslations(language);
    },

    synchChoiceOrder: function (pluginId, tableName, fieldName) {
        var language = this.getLanguageAbbreviation0(pluginId);


        var gr = new GlideRecord("sys_choice");
        gr.addQuery("name", tableName);
        gr.addQuery("element", fieldName);
        gr.addQuery("language", language);
        gr.query();

        var valArray = {};
        while (gr.next()) {
            var order = valArray[gr.value];
            if (order === null || typeof order === 'undefined') {
                var englishType = new GlideRecord("sys_choice");
                englishType.addQuery("name", tableName);
                englishType.addQuery("element", fieldName);
                englishType.addQuery("language", "en");
                englishType.addQuery("value", gr.value);
                englishType.query();

                if (englishType.next()) {
                    valArray[gr.value] = englishType.sequence;
                    order = englishType.sequence;
                } else {
                    valArray[gr.value] = "delete";
                    order = "delete";
                }
            }

            if (order == "delete") {
                gr.deleteRecord();
            } else if (gr.sequence != order) {
                gr.sequence = order;
                gr.update();
            }
        }
    },

    logger: function(message) {
        if (this.debug)
            gs.log(message);

        if (this.worker != null)
            worker.addMessage(message);
    },

    type: "TranslationLoader"
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;myla.jordan&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2010-11-08 16:33:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2c52b4fcc0a801655a172610b6b8d4c5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;281&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TranslationLoader&lt;/sys_name&gt;
        &lt;sys_package display_value="I18N: Internationalization" source="com.glide.i18n"&gt;2cdd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2c52b4fcc0a801655a172610b6b8d4c5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-12 10:28:03&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:08</sys_created_on>
        <sys_id>6a21349983b01210c6695855eeaad34d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TranslationLoader</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6a21349983b01210c6695855eeaad34d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:08</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
