<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.getTableName() == 'sys_dictionary'</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Table name and Element name</name>
        <order>5</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[validateTableAndElementNames();

function validateTableAndElementNames() {
 var tu = new TableUtils();
 current.name = tu.sanitizeTableName(current.name.toString());
 var scope = current.sys_scope.toString();
 if (!scope && typeof parent != 'undefined' && parent != null && !parent.nil())
  scope = parent.sys_scope.toString();

 //separate checks for columns vs. tables
 if (current.element.nil()) { // table
  // If new table then sanitize the table name...
  if (current.isNewRecord()) {
   current.name = tu.getValidTableName(scope, current.name.toString());
  }
 } else { // column
  if (current.name.nil()) {
   current.setAbortAction(true);
   current.name.setError(gs.getMessage("Table name cannot be empty for columns."));
   gs.addErrorMessage(gs.getMessage("Table name cannot be empty for columns."));
  } else {
   //get the valid column name.  If inserting or if the name field
   //has changed, then the field needs to be valided.  If it is update
   //and the name hasn't changed, then there is no need to change the name.
   if (current.operation() == "insert" || current.element.changes()) {
    current.element = SNC.TableEditor.getValidScopedElementName(scope, current.element.toString(), current.name);
   }
   //get the valid column label
   current.column_label = SNC.TableEditor.getValidDocumentationLabel(current.column_label, current.element);

   if (current.internal_type.nil())
    current.internal_type = "string";

   //only need to check the element exists already on insert
   if (current.operation() == "insert") {
    var gr = new GlideRecord(current.name);
    //if the table name does not already exist, then
    //use getValidTableName to make sure name is proper.
    if (!gr.isValid()) {
     current.name = tu.getValidTableName(scope, current.name.toString());
     gr = new GlideRecord(current.name);
    }

    //if the table is invalid, then checking field validity does not
    //make sense.  This may happen during table insert.
    if (gr.isValid() && SNC.TableEditor.isValidInDescendants(current.name, current.element)) {
     current.setAbortAction(true);
     var errMsg = gs.getMessage("Column {0} already exists in this table or a table extended from it", current.element);
     current.element.setError(errMsg);
     gs.addErrorMessage(errMsg);
    }
    
    //check if we are coming from TableEditor and if it is table insert - need to check if element exists in parent table 
    else if (typeof parent != 'undefined' && parent != null && 
     !parent.nil() && parent.operation() == 'insert' && parent.getTableName() == 'sys_db_object' &&
     (!parent.super_class.nil())) {
     var sup = new GlideRecord('sys_db_object');
     if (sup.get(parent.super_class.toString()) && 
        (GlideTableDescriptor.fieldExists(sup.name.toString(), current.element.toString()))) {
       current.setAbortAction(true);
       var errMsg = gs.getMessage("Column {0} already exists in this table or a table extended from it", current.element);
       current.element.setError(errMsg);
       gs.addErrorMessage(errMsg);
     }
    }
   }
  }
 }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>716ba09183701210c6695855eeaad3ee</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Table name and Element name</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_716ba09183701210c6695855eeaad3ee</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:58</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=716ba09183701210c6695855eeaad3ee"/>
</record_update>
