<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.active == true</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Start, End date Config</name>
        <order>40</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var startDate = current.getValue('start_date');
    var endDate = current.getValue('end_date');

    var startGDT = new GlideDate();
    startGDT.setValue(startDate);
    var endGDT = new GlideDate();
    endGDT.setValue(endDate);


    var util = new sn_apptmnt_booking.AppointmentBookingUtil();
    var hasActiveAppointments = false;

    var dailyStartTime = current.daily_start_time.toString() + ":00";
    var dailyEndTime = current.daily_end_time.toString() + ":00";

    if (previous && previous.start_date && previous.end_date) {
        var previousStartDate = previous.getValue('start_date');
        var previousEndDate = previous.getValue('end_date');

        var prevStartGDT = new GlideDate();
        prevStartGDT.setValue(previousStartDate);
        var prevEndGDT = new GlideDate();
        prevEndGDT.setValue(previousEndDate);

        if ((prevStartGDT.getNumericValue() < endGDT.getNumericValue()) && (prevEndGDT.getNumericValue() > startGDT.getNumericValue())) { //Overlap case
            var temp = new GlideDate();

            if (prevStartGDT.getNumericValue() < startGDT.getNumericValue()) {
                temp.setValue(startGDT);
                temp.addDaysUTC(-1);
                hasActiveAppointments = util.hasActiveAppointmentsInRangeForCatalog(current, prevStartGDT, temp, dailyStartTime, dailyEndTime);
            }
            if (!(hasActiveAppointments) && prevStartGDT.getNumericValue() > startGDT.getNumericValue()) {
                temp.setValue(prevStartGDT);
                temp.addDaysUTC(-1);
                hasActiveAppointments = util.hasActiveAppointmentsInRangeForCatalog(current, startGDT, temp, dailyStartTime, dailyEndTime);
            }
            if (!(hasActiveAppointments) && prevEndGDT.getNumericValue() < endGDT.getNumericValue()) {
                temp.setValue(prevEndGDT);
                temp.addDaysUTC(1);
                hasActiveAppointments = util.hasActiveAppointmentsInRangeForCatalog(current, temp, endGDT, dailyStartTime, dailyEndTime);
            }
            if (!(hasActiveAppointments) && prevEndGDT.getNumericValue() > endGDT.getNumericValue()) {
                temp.setValue(endGDT);
                temp.addDaysUTC(1);
                hasActiveAppointments = util.hasActiveAppointmentsInRangeForCatalog(current, temp, prevEndGDT, dailyStartTime, dailyEndTime);
            }

        } else {
            hasActiveAppointments = util.hasActiveAppointmentsInRangeForCatalog(current, prevStartGDT, prevEndGDT, dailyStartTime, dailyEndTime);
        }
    }
    if (!hasActiveAppointments) {

        hasActiveAppointments = util.hasActiveAppointmentsInRangeForCatalog(current, startGDT, endGDT, dailyStartTime, dailyEndTime);

    }
    if (hasActiveAppointments) {
        current.setAbortAction(true);
        if (current.start_date.changes()) {
            gs.addErrorMessage(gs.getMessage("Active appointments found. Before updating the Start date, clear active appointments affected by the change."));
        } else { //if(current.end_date.changes())
            gs.addErrorMessage(gs.getMessage("Active appointments found. Before updating the End date, clear active appointments affected by the change."));
        }
        gs.setRedirect(current);
    }



})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d80c249583701210c6695855eeaad334</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Start, End date Config</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_d80c249583701210c6695855eeaad334</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:36</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=d80c249583701210c6695855eeaad334"/>
</record_update>
