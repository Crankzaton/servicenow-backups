<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>PA target update value change fields</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var now = new GlideDateTime();
 var target = new GlideRecord('pa_targets');
 if (target.get(current.target)) {
  target.values_modified_at = now;
  target.update();
 }

 if (current.target.changes() && target.get(previous.target)) {
  target.values_modified_at = now;
  target.update();
 }
 
 // if insert, delete, or target_at modified
 if (!current || !previous || current.target_at != previous.target_at) {
  
  var targetId = current.target || previous.target;
  
  // introduce myself to the new neighbours
  if (current) {
   var newValues = new GlideRecord('pa_target_values');
   newValues.addQuery('target', targetId);
   newValues.addQuery('target_at', '<', current.target_at);
   newValues.orderByDesc('target_at');
   newValues.limit(1);
   newValues.query();

   if (newValues.next()) {
    newValues.setValue('next_target', current.target_at + '');
    newValues.update();
   }
   
   newValues.init();
   if (!newValues.get(current.sys_id)) {
    // this record should always exist
    return;
   }
   
   var currentNext = new GlideRecord('pa_target_values');
   currentNext.addQuery('target', targetId);
   currentNext.addQuery('target_at', '>', current.target_at);
   currentNext.orderBy('target_at');
   currentNext.limit(1);
   currentNext.query();
   
   // update my next to the following
   if (currentNext.next()) {
    newValues.setValue('next_target', currentNext.target_at + '');
    newValues.update();
   } else {
    newValues.setValue('next_target', '');
    newValues.update();
   }
   
  }
 
  // the old neighbour must make friends with whoever remains
  if (previous) {
   var oldValues = new GlideRecord('pa_target_values');
   oldValues.addQuery('target', targetId);
   oldValues.addQuery('target_at', '<', previous.target_at);
   oldValues.orderByDesc('target_at');
   oldValues.limit(1);
   oldValues.query();

   if (oldValues.next()) {
    var oldNext = new GlideRecord('pa_target_values');
    oldNext.addQuery('target', targetId);
    oldNext.addQuery('target_at', '>', oldValues.target_at);
    oldNext.orderBy('target_at');
    oldNext.limit(1);
    oldNext.query();
    
    if (oldNext.next()) {
     oldValues.setValue('next_target', oldNext.target_at + '');
     oldValues.update();
    } else {
     oldValues.setValue('next_target', '');
     oldValues.update();
    }
    
   }
  }
  
 }
 
 
 GlideCacheManager.flush('pa_targets');

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:39</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d50ca49583701210c6695855eeaad325</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PA target update value change fields</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_d50ca49583701210c6695855eeaad325</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:39</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=d50ca49583701210c6695855eeaad325"/>
</record_update>
