<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1118e0629f022100598a5bb0657fcffe</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ReleaseBurndown&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This utility includes is used for release burndown json.&lt;/description&gt;
        &lt;name&gt;ReleaseBurndown&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ReleaseBurndown = Class.create();

ReleaseBurndown.prototype = {

    initialize: function ( burndownRequest ) {
        this.sysId = burndownRequest['sysId'];
        this.burndownMetric = new BurndownMetric(burndownRequest);
        this.gsLog = new GSLog(this.burndownMetric.SCRUM_PP_BURNDOWN_LOG, this.type); 
        this.gsLog.setLevel("debug");
        this.gsLog.logDebug('ReleaseBurndown sysId: ' + this.sysId);
    },

    getBurndownMetric: function() {
        return this.burndownMetric;
    },

    canProcessBurndown: function() {
        if (this.burndownMetric.hasMetricData() &amp;&amp; this.burndownMetric.hasValidDates()) {
            return true;
        }
        return false;
    },
    
    generate: function() {
        var actualData = this.actual();
        var idealData = this.burndownMetric.getIdeal();
        var dailyData = this.burndownMetric.getDailyPoints();
        var sprintData = this.sprintDetails();
        var jsonOutput = {actual: actualData,
                          ideal: idealData,
                          total: dailyData,
                          sprint: sprintData,
                          title: this.burndownMetric.getTitle()
                         };
        return jsonOutput;
    },
    
    actual: function() {
        var data = [];
        var dailyTotalsMap = this.burndownMetric.getDailyTotalsMap();
        var storyMetrics = this.burndownMetric.getStoryMetrics();
        var startDate =  new GlideDateTime(this.burndownMetric.getStartDate()).getLocalDate();
        var endDate = new GlideDateTime(this.burndownMetric.getEndDate()).getLocalDate();
        var today = new GlideDate().getLocalDate();
        var points = 0;
        /*startDate.addDays(-1);
        data.push({
            key: String(new GlideDateTime(startDate).getDate()),
            value: dailyTotalsMap.startingValue
        });
        this.gsLog.logDebug('actual { key:' + String(new GlideDateTime(startDate).getDate()) + ' ,value: ' + dailyTotalsMap.startingValue + ' },');
        startDate.addDays(1);*/
        while (startDate.compareTo(endDate) &lt;= 0 &amp;&amp; startDate.compareTo(today) &lt;= 0) {
            points += storyMetrics[startDate] ? storyMetrics[startDate] : 0;
            
            data.push({
                // key: String(new GlideDateTime(startDate).getDate()),
                key: String(startDate),
                value: Math.max(dailyTotalsMap[startDate].dailyPoints + points, 0)
            });
            /*this.gsLog.logDebug('actual { key:' + String(new GlideDateTime(startDate).getDate()) + ' ,value: ' + Math.max(dailyTotalsMap[startDate].dailyPoints + points, 0)  + ' },');*/
            startDate.addDays(1);
        }
        return data;
    },

    sprintDetails: function() {
        var sprintCount = 0;
        var sprintData = [];
        var gr = new GlideRecord('rm_sprint');
        gr.addQuery('release', this.sysId);
        gr.orderBy('start_date');
        gr.query(); 
        while ( gr.next() ) {
            //fetch the mid day
            sprintCount++;
            var startDate = new GlideDateTime(gr.getValue('start_date'));
            var endDate = new GlideDateTime(gr.getValue('end_date'));
            var diff = GlideDateTime.subtract(startDate, endDate);
            diff = diff.getDayOfMonthLocalTime();
            var midDay = new GlideDateTime(startDate);
            midDay.addDaysLocalTime(diff/2);
			var tooltip = (startDate.getLocalDate().getDisplayValue()) + 
				" - " + (endDate.getLocalDate().getDisplayValue());
            sprintData.push({
                key: String(midDay.getDate()),
                sprint: gr.getValue('short_description'),
                sysId: gr.getValue('sys_id'),
                state: gr.getDisplayValue('state'),
                startDate: String(startDate.getLocalDate()),
                endDate: String(endDate.getLocalDate()),
                tooltip: tooltip
            });
            /*this.gsLog.logDebug('sprints { key:' + String(midDay.getDate()) + ' ,sprint: ' + gr.getValue('short_description') + 
                        ' ,sysId: ' + gr.getValue('sys_id') +  ' ,startDate: ' + String(startDate.getDate()) +  
                        ' ,endDate: ' + String(endDate.getDate()) + ' },');*/
        }
        return sprintData;
    },
    
    type:  'ReleaseBurndown'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-07-24 08:33:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1118e0629f022100598a5bb0657fcffe&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;38&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ReleaseBurndown&lt;/sys_name&gt;
        &lt;sys_package display_value="Agile Development" source="com.snc.sdlc.scrum.pp"&gt;3605e388477e0610cd4e1ce4316d43db&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1118e0629f022100598a5bb0657fcffe&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-06-25 09:30:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:20</sys_created_on>
        <sys_id>258070d583b01210c6695855eeaad3e4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ReleaseBurndown</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_258070d583b01210c6695855eeaad3e4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:20</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
