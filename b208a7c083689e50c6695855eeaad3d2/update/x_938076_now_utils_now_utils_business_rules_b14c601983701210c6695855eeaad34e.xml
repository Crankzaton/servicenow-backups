<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Household Member Dates</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var startValue = current.start_date;
    var endValue = current.end_date;

    if (endValue != "" && startValue != "") {
        var start = new GlideDateTime(current.start_date);
        var end = new GlideDateTime(current.end_date);

        if (end.equals(start)) {
            gs.addErrorMessage(gs.getMessage("End and start date cannot be the same."));
            current.setAbortAction(true);
            return;
        } else if (end.before(start)) {
            gs.addErrorMessage(gs.getMessage("End date has to be after start date."));
            current.setAbortAction(true);
            return;
        }
    }

    var util = new sn_csm_household.HouseHoldUtils();
    var currentMemberSysId = util.getCurrentHouseholdMemberRecordSysId(current.consumer.sys_id, current.household.sys_id);

    if (currentMemberSysId != null && currentMemberSysId != current.sys_id) {
        if (util.areHouseholdMemberDatesCurrent(current.start_date, current.end_date)) {
            gs.addErrorMessage(gs.getMessage("This record is not allowed because the consumer is already a current member of this household."));
            current.setAbortAction(true);
            return;
        }
    }


})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:47</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b14c601983701210c6695855eeaad34e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Household Member Dates</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_b14c601983701210c6695855eeaad34e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:47</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=b14c601983701210c6695855eeaad34e"/>
</record_update>
