<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>979ebcbbffd36110468365d7d3b8fecb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.InstanceStateUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;InstanceStateUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InstanceStateUtils = Class.create();
InstanceStateUtils.prototype = {
    initialize: function() {},

    /**
     * This function determines if the instance is an "open instance" or not.
     * 
     * @returns {bool} Returns true if the instance state is open
     */
    isInstanceOpen() {
        // HACK: This should be making use of GlideUtil.isOpenInstance() but this is currently not accessible
        //    to scoped apps. So this is a temporary hack in order to get around this limitation. This code should
        //    be corrected at the first reasonable opportounity.
        var gr = new GlideRecord('ua_instance_state');
        if (!gr.isValid())
            return false;

        gr.query();
        return gr.isValidField('state') &amp;&amp;
            gr.next() &amp;&amp;
            gr.getValue('state') === 'open';
    },

    type: 'InstanceStateUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-06-14 21:47:00&lt;/sys_created_on&gt;
        &lt;sys_id&gt;979ebcbbffd36110468365d7d3b8fecb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InstanceStateUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_979ebcbbffd36110468365d7d3b8fecb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-14 21:55:56&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:54</sys_created_on>
        <sys_id>6aa87c5183341210c6695855eeaad32c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>InstanceStateUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6aa87c5183341210c6695855eeaad32c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
