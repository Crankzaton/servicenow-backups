<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1dc0c6b6ff612110468365d7d3b8fec2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.LicenseRoleServiceV1&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;LicenseRoleServiceV1&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LicenseRoleServiceV1 = Class.create();
LicenseRoleServiceV1.prototype = {

    /**
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     */
    initialize: function(oobRolesOnly) {
        this._oobRolesOnly = oobRolesOnly;

        this._licenseRoleTypeDaoV1 = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseRoleTypeDaoV1());
        this._licenseDetailDaoV1 = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseDetailDaoV1());
        this._userRoleDaoV1 = new sn_entitlement.PassThroughCache(new sn_entitlement.UserRoleDaoV1());
    },

    /**
     * Retrieves an array of sys_user_role.sys_id values that require a license
     * This is the super-set of all roles requiring a license (across all license)
     *
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsByRequiresALicense: function() {
        const roleIds = this._licenseDetailDaoV1.getLicenseIdsByIsPerUser()
            .flatMap(roleId =&gt; this.getRoleIdsByLicenseIdAndRequiresALicense(roleId, this._oobRolesOnly));
        return Array.from(new Set(roleIds));
    },

    /**
     * Retrieves an array of sys_user_role.sys_id values that require a license for the provided licenseId
     * This is just the set of roles requiring a license for this specific license
     *
     * @param {guid} licenseId The license_details.sys_id of the license to get sys_user_role.sys_id values for
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsByLicenseIdAndRequiresALicense: function(licenseId, oobRolesOnly) {
        const licensableRoleTypeNames = this._licenseRoleTypeDaoV1.getLicenseRoleTypeNamesByLicenseId(licenseId);
        return this._userRoleDaoV1.getUserRoleIdsByLicenseIdAndLicenseRoleTypeNames(licenseId, licensableRoleTypeNames, oobRolesOnly);
    },

    /**
     * Retrieves all role IDs associated with the license identified even if the role is not
     * a metered role for the license
     *
     * @param {guid} licenseId The license ID to get roles for
     * @returns {array} An array of role IDs associated with the license
     */
    getUserRoleIdsByLicenseId: function(licenseId) {
        return this._userRoleDaoV1.getUserRoleIdsByLicenseId(licenseId, this._oobRolesOnly);
    },

    type: 'LicenseRoleServiceV1'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-17 00:06:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1dc0c6b6ff612110468365d7d3b8fec2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LicenseRoleServiceV1&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1dc0c6b6ff612110468365d7d3b8fec2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-23 19:17:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:34</sys_created_on>
        <sys_id>77c0b41983b01210c6695855eeaad3e3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LicenseRoleServiceV1</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_77c0b41983b01210c6695855eeaad3e3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:34</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
