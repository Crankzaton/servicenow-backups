<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2dd504581b9c6d5454d7653de54bcbd6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WFIMAccessUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;WFIMAccessUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WFIMAccessUtils = Class.create();
WFIMAccessUtils.prototype = {
    initialize: function() {
        this.user = gs.getUserID().toString();

        this.bcm_assignee_role = gs.getProperty('sn_grc.wfim.bcm.assignee.role');
        this.bcm_manager_role = gs.getProperty('sn_grc.wfim.bcm.manager.role');
        this.read_access_role = gs.getProperty('sn_grc.wfim.read.access.role');
        this.cmi_assignee_role = gs.getProperty('sn_grc.wfim.cmi.assignee.role');
        this.cmi_manager_role = gs.getProperty('sn_grc.wfim.cmi.manager.role');
        this.webservice_account = gs.getProperty('sn_grc.wfim.inbound.service.account');
    },

    // Checks if the logged in user has 'Veritas Internal User' role
    isVeritasInternalUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_internal_user')) {
            return true;
        } else return false;
    },

    // Checks if the logged in user is web service account
    isWebServiceAccount: function() {
        if (this.webservice_account == gs.getUserName().toString()) {
            return true;
        }
    },

    // Checks if the current user has "Super User" role
    isSuperUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_super_user')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "GRC Admin" role
    isGrcAdminUser: function() {
        if (gs.getUser().hasRole('sn_grc.admin')) {
            return true;
        } else return false;
    },

    // Check if the current user has "IM Admin Governance" role
    isAdminGovernanceUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_im_admin_governance')) {
            return true;
        } else return false;
    },

    isReadUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_readaccess')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "imveritas_independent_risk_management" role  
    isIRMUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_irm')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas Source" role
    isSourceUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_source')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas Internal Aduit" role
    isInternalAuditUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_internal_audit')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas Internal Aduit QA" role
    isInternalAuditQAUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_internal_audit_qa')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas WFRR Enhanced" role
    isWFRREnhancedUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_wfrr_enhanced')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas WFRR standard" role
    isWFRRStandardUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_wfrr_standard')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas Source ECO_O" role
    isSourceECOUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_ec_o')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas Regulator" role
    isRegulatorUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_regulator')) {
            return true;
        } else return false;
    },


    // Checks if the current user has "IM Veritas Regulator FRB" role
    isRegulatorFrbUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_regulator_frb')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas REGULATOR CFPB" role
    isRegulatorCfpbUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_regulator_cfpb')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas REGULATOR OCC" role
    isRegulatorOccUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_regulator_occ')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas REGULATOR FDIC" role
    isRegulatorFdicUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_regulator_fdic')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas REGULATOR Other" role
    isRegulatorOtherUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_regulator_other')) {
            return true;
        } else return false;
    },

    // Check if the current user has "BCM Assignee" role
    hasBCMAssigneeBaseRole: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_bcm_assignee')) {
            return true;
        } else return false;
    },

    // Check if the current user has "BCM Manager" role
    hasBCMManagerBaseRole: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_bcm_manager')) {
            return true;
        } else return false;
    },

    // Check if the current user has "CMI Assignee" role
    hasCMIAssigneeRole: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_cmi_assignee')) {
            return true;
        } else return false;
    },

    // Check if the current user has "CMI Manager" role
    hasCMIManagerRole: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_cmi_manager')) {
            return true;
        } else return false;
    },

    // Checks if the current user has "IM Veritas Data Team " role
    isDataTeamUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_data_team')) {
            return true;
        } else return false;
    },

    // Check if the current user has "FLIV user role
    isFLIVUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_fliv')) {
            return true;
        } else return false;
    },

    // Check if the current user has "Veritas FLIV Assignee" user role
    isFLIVAssigneeUser: function() {
        var fliv_assignee_user = (gs.getUser().hasRole('sn_grc.imveritas_fliv_assignee'));
        return fliv_assignee_user;
    },

    // Check if the current user has "Veritas FLIV Lead" user role
    isFLIVLeadUser: function() {
        var fliv_lead_user = (gs.getUser().hasRole('sn_grc.imveritas_fliv_lead'));
        return fliv_lead_user;
    },

    // Check if the current user has "Veritas FLIV Reviewer" user role
    isFLIVReviewerUser: function() {
        var fliv_reviewer_user = (gs.getUser().hasRole('sn_grc.imveritas_fliv_reviewer'));
        return fliv_reviewer_user;
    },

    //Check if the current user has the Veritas Validator role
    isValidatorUser: function() {
        if (gs.getUser().hasRole('sn_grc.imveritas_validator')) {
            return true;
        } else return false;
    },

    // Check if the current issue is created from source record
    isSourceIssue: function(issueGR) {
        if (issueGR.u_source_id) {
            return true;
        } else return false;
    },

    // Check if the current issue is created from pre-vetting record
    isPrevettingIssue: function(issueGR) {
        if (issueGR.u_pre_vetting_record_id) {
            return true;
        } else return false;
    },

    // Check if the current source sub type is "Self Identified"
    isSelfIdentified: function(source_type) {
        if (source_type == gs.getProperty('sn_grc.wfim.self.identified')) {
            return true;
        } else return false;
    },

    // Check if the current source type is "Audit Identified"
    isAuditIdentified: function(source_type) {
        if (source_type == gs.getProperty('sn_grc.wfim.audit.identified')) {
            return true;
        } else return false;
    },
    // Check if the current source type is "IRM Identified"
    isIRMIdentified: function(source_type) {
        if (source_type == gs.getProperty('sn_grc.wfim.irm.identified')) {
            return true;
        } else return false;
    },

    // Check if the current source type is "Regulator Identified"
    isRegulatoryIdentified: function(source_type) {
        if (source_type == gs.getProperty('sn_grc.wfim.regulator.identified')) {
            return true;
        } else return false;
    },

    // Check if the current source sub type is "COSO Assessments"
    isCOSOIdentified: function(source_type) {
        if (source_type == gs.getProperty('sn_grc.wfim.coso.identified')) {
            return true;
        } else return false;
    },

    // Check if the current issue record has the moderate 'Issue Risk Level Rating'
    isModerateIssue: function(issueGR) {
        if (issueGR.issue_rating == gs.getProperty('sn_grc.wfim.issue_rating.moderate')) {
            return true;
        } else return false;
    },

    // Check if the current user is assigned as "BCM Assignee" on the parent issue and current AD group is "WFRR Enhanced"
    isBCMAndRegulatorEnhancedGroup: function(issueGR, ad_group) {
        if (this.isIssueBCMAssignee(issueGR) &amp;&amp; (ad_group == gs.getProperty('sn_grc.wfim.wfrr_enhanced.group'))) {
            return true;
        } else return false;
    },

    // Checks if the 'Issue' record is 'Active'
    isIssueActive: function(issueGR) {
        if (issueGR.active == '1') {
            return true;
        } else return false;
    },

    // Check if the current user is assigned as "BCM Assignee" on the parent issue.
    isIssueBCMAssignee: function(issueGR) {
        if (!gs.nil(issueGR.assigned_to) &amp;&amp; (issueGR.assigned_to.toString() == this.user)) {
            return true;
        } else return false;
    },

    // Checks if 'Change to Baseline' and 'Maintainance Request' is 'In Progress'.
    isCTBorMRInProgress: function(issueGR) {
        var UPDATES_IN_PROGRESS = '9';
        var cr_type = issueGR.u_change_request_type;
        var cr_substate = issueGR.u_cr_substate;

        if (((cr_type == 'change_to_baseline') || (cr_type == 'maintenance_request')) &amp;&amp; (cr_substate == UPDATES_IN_PROGRESS)) {
            return true;
        } else return false;
    },

    // Checks if 'Change to Baseline' and 'Maintainance Request' is'In Progress' and 'Regulator Objection to Plan' is 'In Progress'
    isCTBorMRorROInProgress: function(issueGR) {
        var UPDATES_IN_PROGRESS = '9';
        var cr_type = issueGR.u_change_request_type;
        var cr_substate = issueGR.u_cr_substate;

        if (((cr_type == 'change_to_baseline') || (cr_type == 'maintenance_request') || (cr_type == 'supervisory_objection_to_plan')) &amp;&amp; (cr_substate == UPDATES_IN_PROGRESS)) {
            return true;
        } else return false;
    },

    // Checks if 'Change to Baseline' is 'In Progress'
    isCTBInProgress: function(issueGR) {
        var UPDATES_IN_PROGRESS = '9';
        var cr_type = issueGR.u_change_request_type;
        var cr_substate = issueGR.u_cr_substate;

        if ((cr_type == 'change_to_baseline') &amp;&amp; (cr_substate == UPDATES_IN_PROGRESS)) {
            return true;
        } else return false;
    },

    // Checks if 'Admin Request' is 'In Progress'
    isAdminRequestInProgress: function(issueGR) {
        var UPDATES_IN_PROGRESS = '9';
        var cr_type = issueGR.u_change_request_type;
        var cr_substate = issueGR.u_cr_substate;

        if ((cr_type == 'admin_request') &amp;&amp; (cr_substate == UPDATES_IN_PROGRESS)) {
            return true;
        } else return false;
    },

    // Get issue record object
    canReadIssue: function(issue_sysid) {
        var issueGR = new GlideRecord("sn_grc_issue");
        issueGR.get(issue_sysid);

        if (issueGR.canRead()) {
            return true;
        }
        return false;
    },

    isMemberOfGroup: function(group_id) {
        if (gs.getUser().isMemberOf(group_id)) {
            return true;
        } else return false;
    },

    // Check if the current user is assigned as "Tollgate Panel Member (Approver)" for the parent issue record.
    isTollgatePanelMember: function(issue_sysid) {
        var tollgateGR = new GlideAggregate('sn_grc_tollgate_approvals');
        tollgateGR.addAggregate('COUNT');
        tollgateGR.addQuery('u_parent', issue_sysid);
        tollgateGR.addQuery('u_tollgate_reviewers', 'CONTAINS', this.user);
        tollgateGR.query();
        if (tollgateGR.next() &amp;&amp; (tollgateGR.getAggregate('COUNT') &gt; 0)) {
            return true;

        } else return false;
    },

    // Checks if the current user is assigned as a part of other Impacted Heirarchy Units.
    isOtherImpactedHierachyUnits: function(hierarchy_sysids) {
        var hierarchy_list = hierarchy_sysids.split(',');
        var loopLength = hierarchy_list.length;

        for (var i = 0; i &lt; loopLength; i++) {
            var entity_sysid = this.getEntity(hierarchy_list[i]);
            if (this.isHierarchyBCMAssignee(entity_sysid)) {
                return true;
            }
        }
        return false;
    },

    // Get entity for 'Risk Hierarchy'
    getEntity: function(hierarchy_sysid) {
        var entityGR = new GlideRecord('sn_grc_profile');
        entityGR.addQuery('applies_to', hierarchy_sysid);
        entityGR.query();
        if (entityGR.next()) {
            return entityGR.getUniqueValue();
        }
    },


    // Get 'Current Entity' BCM Assignees
    isCurrentHierarchyBCMAssignee: function(entity_sysid) {
        if (this.hasBCMAssigneeBaseRole()) {
            return this.hasAccessToCurrentHierarchy(entity_sysid, this.bcm_assignee_role);
        } else return false;
    },

    // Get 'Current Entity' BCM Managers
    isCurrentHierarchyBCMManager: function(entity_sysid) {
        if (this.hasBCMManagerBaseRole()) {
            return this.hasAccessToCurrentHierarchy(entity_sysid, this.bcm_manager_role);
        } else return false;
    },

    // Get 'Current Entity' CMI Assignees
    isCurrentHierarchyCMIAssignee: function(entity_sysid) {
        if (this.hasCMIAssigneeRole()) {
            return this.hasAccessToCurrentHierarchy(entity_sysid, this.cmi_assignee_role);
        } else return false;
    },

    // Get 'Current Entity' CMI Managers
    isCurrentHierarchyCMIManager: function(entity_sysid) {
        if (this.hasCMIManagerRole()) {
            return this.hasAccessToCurrentHierarchy(entity_sysid, this.cmi_manager_role);
        } else return false;
    },

    // Checks if 'logged in User' has access to current entity
    hasAccessToCurrentHierarchy: function(entity_sysid, role_sysid) {
        var entGrp = new GlideRecord('sn_grc_m2m_groups_entities');
        entGrp.addEncodedQuery('u_entity=' + entity_sysid + '^u_role=' + role_sysid);
        entGrp.query();
        if (entGrp.next() &amp;&amp; gs.getUser().isMemberOf(entGrp.u_group.toString())) {
            return true;
        } else {
            return false;
        }
    },

    // Get 'Upsteam Entities' BCM Assignees
    isHierarchyBCMAssignee: function(entity_sysid) {
        if (this.hasBCMAssigneeBaseRole()) {
            return this.hasAccessToRiskHierarchy(entity_sysid, this.bcm_assignee_role);
        } else return false;
    },

    // Get 'Upsteam Entities' BCM Managers
    isHierarchyBCMManager: function(entity_sysid) {
        if (this.hasBCMManagerBaseRole()) {
            return this.hasAccessToRiskHierarchy(entity_sysid, this.bcm_manager_role);
        } else return false;
    },

    // Get 'Upsteam Entities' user with 'Read Access' role
    hasHierarchyReadRole: function(entity_sysid) {
        if (this.isReadUser()) {
            return this.hasAccessToRiskHierarchy(entity_sysid, this.read_access_role);
        } else return false;
    },

    // Get 'Upsteam Entities' CMI Assignees
    isHierarchyCMIAssignee: function(entity_sysid) {
        if (this.hasCMIAssigneeRole()) {
            return this.hasAccessToRiskHierarchy(entity_sysid, this.cmi_assignee_role);
        } else return false;
    },

    // Get 'Upsteam Entities' CMI Managers
    isHierarchyCMIManager: function(entity_sysid) {
        if (this.hasCMIManagerRole()) {
            return this.hasAccessToRiskHierarchy(entity_sysid, this.cmi_manager_role);
        } else return false;
    },

    // Checks if 'logged in User' has access to current or upstream entities
    hasAccessToRiskHierarchy: function(entity_sysid, role_sysid) {
        var entGrp = new GlideRecord('sn_grc_m2m_groups_entities');
        entGrp.addEncodedQuery('u_entity=' + entity_sysid + '^u_role=' + role_sysid);
        entGrp.query();
        if (entGrp.next() &amp;&amp; gs.getUser().isMemberOf(entGrp.u_group.toString())) {
            return true;
        } else {
            var entityParent = new GlideRecord('sn_grc_m2m_profile_profile');
            entityParent.addEncodedQuery('downstream_profile=' + entity_sysid + '^upstream_profileISNOTEMPTY');
            entityParent.query();
            if (entityParent.next()) {
                var upstream_entity_id = entityParent.upstream_profile.toString();
                return this.hasAccessToRiskHierarchy(upstream_entity_id, role_sysid);
            } else {
                return false;
            }
        }
    },

    // Get members of the groups - {@groupList - accepts array}
    isGroupMember: function(groupsList) {
        if (groupsList) {
            var groups = groupsList.split(',');
            var arrLength = groups.length;
            for (var i = 0; i &lt; arrLength; i++) {
                if (gs.getUser().isMemberOf(groups[i])) {
                    return true;
                }
            }
        }
        return false;
    },

    getUpStreamEntities: function(entity_sysid) {
        var upStreamEntities = [];
        upStreamEntities.push(entity_sysid);

        var parentEntity = new sn_grc.GRCProfileLists().getUpstreamProfiles(entity_sysid);
        upStreamEntities.push(parentEntity);
        return upStreamEntities;
    },

    hasAccessToHierarchy: function(upStreamEntities) {
        var entGrp = new GlideRecord('sn_grc_m2m_groups_entities');
        entGrp.addQuery('u_entity', 'IN', upStreamEntities.toString());
        entGrp.query();
        while (entGrp.next()) {
            if (gs.getUser().isMemberOf(entGrp.u_group.toString())) {
                return true;
            }
        }
        return false;
    },


    type: 'WFIMAccessUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;U819138&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-05 17:38:18&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2dd504581b9c6d5454d7653de54bcbd6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;91&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WFIMAccessUtils&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;53f81621cb200200829cf865734c9c58&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;53f81621cb200200829cf865734c9c58&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2dd504581b9c6d5454d7653de54bcbd6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:23:36&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:19</sys_created_on>
        <sys_id>5d31749983b01210c6695855eeaad3bc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFIMAccessUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5d31749983b01210c6695855eeaad3bc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
