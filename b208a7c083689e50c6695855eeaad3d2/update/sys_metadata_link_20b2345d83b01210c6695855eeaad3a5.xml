<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2950e583c34620100bf407720f40dd03</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Updating the correct/incorrect logic for nlu_batch_test_result table&lt;/description&gt;
        &lt;name&gt;Update NLU Batch Test Result&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[/*
* This script was initially added in "Version 2.0.5 - May 2021"
* Is made "Run Once" in "Aug 2021" release. 

* Modifications to nlu_batch_test_result table: 
	1. Following fields are not being used:
		- predicted_intent
		- prediction_model
		- confidence_threshold
	2. 'predictions' json is updated with: 
		- filter the ones above threshold only
		- Also add modelId in each object of the array
	3. Updated outcome:
		- correctly_skipped is changed to correct
		- Updated the logic of outcome. 

* Modifications to nlu_batch_test_run_execution
	1. 'models_data' 
		- Aggregate counts of (correct, incorrect, incorrectly_skipped)
		- Intents Covered: intents_count (covered, total)
*/

(function() {
    var tables = NLUWorkbenchConstants.tables;
    var RESULT_TYPE = NLUWorkbenchConstants.BATCHTEST_RESULT_TYPE;

    var solutionNameToModelName = {};

    function getModelNameFromSolutionName(solutionName) {
        if (!solutionNameToModelName[solutionName]) {
            var mlGr = new GlideRecord('ml_solution');
            if (mlGr.get('solution_name', solutionName)) {
                solutionNameToModelName[solutionName] = mlGr.ml_capability_definition.solution_label + '';
            }
        }
        return solutionNameToModelName[solutionName];
    }

    var executionGr = new GlideRecord(tables.NLU_BATCH_TEST_RUN_EXECUTION);
    executionGr.addQuery('status', 'success');
    executionGr.query();
    while (executionGr.next()) {
        try {
            var executionId = executionGr.getUniqueValue();
            gs.info('Fix: Update NLU Batch Test Result - Processing execution: ' + executionId);

            var modelSnapshot = JSON.parse(executionGr.getValue('models_data') || '[]');
            modelSnapshot &amp;&amp; modelSnapshot.forEach(function(snapshot) {
                // previously, name field has solutionName, 
                // now name will have modelName &amp; solutionName will have solution name.
                var solutionName = snapshot.name;
                snapshot.name = getModelNameFromSolutionName(snapshot.name) || snapshot.name;
                if (!snapshot.solutionName)
                    snapshot.solutionName = solutionName;
            });

            var testExecution = new NLUBatchTestExecution(null, executionGr);
            var resultsHelper = new NLUBatchTestResults(testExecution);
            resultsHelper.initDataMap();

            var testResultGr = new GlideRecord(tables.NLU_BATCH_TEST_RESULT);
            testResultGr.addQuery('test_run_execution', executionId);
            testResultGr.query();
            while (testResultGr.next()) {
                var intentsData = JSON.parse(testResultGr.getValue('predictions') || '[]');
                var predictionData = {
                    utterance: testResultGr.utterance.utterance.toString(),
                    intents: intentsData
                };

                testResultGr.setValue('predicted_intent', '');
                testResultGr.setValue('prediction_model', '');
                testResultGr.setValue('confidence_threshold', '');
                var result = resultsHelper.addResult(predictionData, RESULT_TYPE.CURRENT, testResultGr);
                if (!result) {
                    gs.error('Fix: Update NLU Batch Test Result - Failed to update NLU Batch test result: ' + testResultGr.getUniqueValue());
                }
            }

            resultsHelper.updateSnapshot();
        } catch (e) {
            gs.error('Fix: Update NLU Batch Test Result - Failed to process execution: ' + executionId);
        }
    }

})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-05 05:07:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2950e583c34620100bf407720f40dd03&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;113&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Update NLU Batch Test Result&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Advanced Features" source="sn_nlu_workbench"&gt;31f5f491c3a710100bf407720f40ddf4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="NLU Workbench - Advanced Features"&gt;31f5f491c3a710100bf407720f40ddf4&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_2950e583c34620100bf407720f40dd03&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-06-29 12:35:55&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:19:49</sys_created_on>
        <sys_id>20b2345d83b01210c6695855eeaad3a5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update NLU Batch Test Result</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_20b2345d83b01210c6695855eeaad3a5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:19:49</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
