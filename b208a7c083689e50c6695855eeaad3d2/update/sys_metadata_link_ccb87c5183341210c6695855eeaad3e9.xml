<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>98b6a23f53de21106720ddeeff7b1272</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ExpenseLinesHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ExpenseLinesHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExpenseLinesHelper = Class.create();

ExpenseLinesHelper.prototype = {
    initialize: function(expenseLine) {
		this.source_id = expenseLine.source_id;
		this.source_table = expenseLine.source_table;
	},

    setTaskActualCosts: function() {
        var task = this.source_id.getRefRecord();
        if (!task.instanceOf("planned_task") || task.instanceOf("pm_program") || !task.isValidRecord())
            return;
        //start financial mgmt logging, only outputs if debug property is enabled
        var total = 0;
        var isProjectCurrencyCalculationRequired = new ProjectCurrencyUtil().isProjectCurrencyCalculationRequired(task);
        var expTotal = this.getTotalExpenseLineActualCost(task, isProjectCurrencyCalculationRequired);
        var childTotal = this.getTotalChildTaskActualCost(task, isProjectCurrencyCalculationRequired);
        total = expTotal.amount + childTotal.actual_cost;
        this.updateTaskActualCost(task, total);
        if (expTotal.amount_project_currency) {
            var totalProjectCurrency = expTotal.amount_project_currency + childTotal.actual_cost_project_currency;
            this.updateTaskActualCostprojectCurrency(task, totalProjectCurrency);
        } else if (new ProjectCurrencyUtil().isProjectCurrencyPresent(task)) {
            this.updateTaskActualCostprojectCurrency(task, total);
        }
        task.update();
    },

    getTotalExpenseLineActualCost: function(task, isProjectCurrencyCalculationRequired) {
        var expTotal = {};
        var exp = new GlideAggregate("fm_expense_line");
        exp.addQuery("source_table", this.source_table);
        exp.addQuery("source_id", this.source_id);
        exp.addQuery("state", "processed");
        exp.addAggregate("SUM", "amount");
        if (isProjectCurrencyCalculationRequired)
            exp.addAggregate("SUM", "amount_project_currency");
        exp.setGroup(false);
        exp.query();
        if (exp.next()) {
            expTotal.amount = parseFloat(exp.getAggregate("SUM", "amount"));
            if (isProjectCurrencyCalculationRequired)
                expTotal.amount_project_currency = parseFloat(exp.getAggregate("SUM", "amount_project_currency"));
        }
        if (isNaN(expTotal.amount))
            expTotal.amount = 0;
        return expTotal;
    },

    getTotalChildTaskActualCost: function(task, isProjectCurrencyCalculationRequired) {
        var childTotal = {};
        childTotal.actual_cost = 0;
        childTotal.actual_cost_project_currency = 0;
        var log = new FMLogger("Update Planned Task Actual rule: ");
        //if we copy expenses to top task, don't include children for top task
        if (gs.getProperty("glide.cost_mgmt.process_task_top_task") == "true" &amp;&amp; task.parent.nil()) {
            log.logDebug("skipping children total since we have all expenses on top task");
        } else {
            //get children totals
            var children = new GlideAggregate('planned_task');
            children.addQuery('parent', this.source_id.toString());
            children.addAggregate("SUM", "work_cost");
            if (isProjectCurrencyCalculationRequired)
                children.addAggregate("actual_cost_project_currency");
            children.setGroup(false);
            children.query();
            log.logDebug("children query: " + children.getEncodedQuery() + " = " + children.getRowCount());
            if (children.next()) {
                childTotal.actual_cost = parseFloat(children.getAggregate("SUM", "work_cost"));
            }
            if (isNaN(childTotal.actual_cost))
                childTotal.actual_cost = 0;
            if (isProjectCurrencyCalculationRequired)
                childTotal.actual_cost_project_currency = parseFloat(new ProjectCurrencyUtil().convertCurrencyUsingFxRate(childTotal.actual_cost, task.cost.getReferenceCurrencyCode(), task.project_currency.code));
            if (isNaN(childTotal.actual_cost_project_currency))
                childTotal.actual_cost_project_currency = 0;

        }
        return childTotal;
    },

    updateTaskActualCost: function(task, total) {
        var currencyCode = task.cost.getReferenceCurrencyCode();
        task.work_cost = currencyCode + ";" + total;
    },

    updateTaskActualCostprojectCurrency: function(task, totalProjectCurrency) {
        task.actual_cost_project_currency.amount = totalProjectCurrency;
        task.actual_cost_project_currency.currency = task.project_currency.code;
    },

    type: 'ExpenseLinesHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-04-26 12:17:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;98b6a23f53de21106720ddeeff7b1272&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExpenseLinesHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_98b6a23f53de21106720ddeeff7b1272&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:26:05&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:00</sys_created_on>
        <sys_id>ccb87c5183341210c6695855eeaad3e9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExpenseLinesHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ccb87c5183341210c6695855eeaad3e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
