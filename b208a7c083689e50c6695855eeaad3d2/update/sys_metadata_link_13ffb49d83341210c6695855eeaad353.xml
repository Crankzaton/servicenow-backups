<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ae72f2687c2f1110f87754eb73ab0086</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_uibtk_api.APIHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;* This is meant to call into other script includes in this scope
* No GlideRecord Queries should be performed in here&lt;/description&gt;
        &lt;name&gt;APIHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var APIHelper = Class.create();
APIHelper.prototype = {
    initialize: function( /*RESTAPIRequest*/ requsest, /*RESTAPIResponse*/ response) {
        this.REQUEST = request;
        this.RESPONSE = response;
    },
    execute: function(fn) {
        try {
            fn();
        } catch (err) {
            gs.error(`${err}\n${err.stack}`);
            this.respondUnsuccessfully(BuilderToolkitConstants.ERRORS.A_ERROR_HAS_OCCURED, err, 500);
        }
    },
    getDataByQuery: function(dataClass, encodedQuery = '', errorMessage, orderBy = false) {
        const queryResult = dataClass.getRecordsByQuery(encodedQuery, orderBy);
        this.getResponse(queryResult, errorMessage);
    },
    getResponse: function(result, errorMessage = BuilderToolkitConstants.ERRORS.A_ERROR_HAS_OCCURED) {
        if (!result || (Array.isArray(result) &amp;&amp; result.length === 0)) {
            return this.respondUnsuccessfully(errorMessage);
        }
        this.respondSuccesfully(result);
    },
    getResponseGlideOperation: function(operationResult, errorMessage = BuilderToolkitConstants.ERRORS.A_ERROR_HAS_OCCURED) {
        if (operationResult.error) {
            return this.respondUnsuccessfully(errorMessage, operationResult.reason);
        }
        this.respondSuccesfully({
            sysId: operationResult
        });
    },
    getResponseFromMutliOperation: function(resultObject) {
        const results = Object.values(resultObject);
        const allSucceeded = results.every(this.didOperationSucceed.bind(this));
        const someSucceeded = results.some(this.didOperationSucceed.bind(this));
        if (allSucceeded) {
            return this.respondSuccesfully(resultObject);
        } else if (someSucceeded) {
            this.respondSuccesfully(Object.entries(resultObject).reduce(this.getReducedOperationMessage.bind(this), {}), 207);
        } else {
            this.respondUnsuccessfully(BuilderToolkitConstants.A_ERROR_HAS_OCCURED, resultObject);
        }
    },
    getQueryParam: function(paramName, defaultValue = null) {
        return this.REQUEST.queryParams[paramName] ?? defaultValue;
    },
    getBodyParam: function(key, defaultValue = null) {
        return this.REQUEST.body.data[key] ?? defaultValue;
    },
    respondSuccesfully: function(body = {}, status = 200) {
        this.RESPONSE.setContentType('application/json');
        this.RESPONSE.setStatus(status);
        this.RESPONSE.setBody(body);
    },
    respondUnsuccessfully: function(message = '', details = '', status = 400) {
        this.RESPONSE.setError(
            new sn_ws_err.ServiceError()
            .setStatus(status)
            .setMessage(message)
            .setDetail(details)
        );
    },
    didOperationSucceed: function(value) {
        if (typeof value === 'boolean' || typeof value === 'string') {
            return true;
        }
        if (Array.isArray(value)) {
            return value.every(this.didOperationSucceed);
        }
        return false;
    },
    getReducedOperationMessage: function(acc, [key, value]) {
        if (Array.isArray(value)) {
            acc[key] = value.map(this.getOperationMessage);
        } else {
            acc[key] = this.getOperationMessage(value)
        }
        return acc;
    },
    getOperationMessage: function(value) {
        const error = value?.error ?? false;
        const reason = value?.reason ?? '';
        return {
            status: error ? 400 : 200,
            value: error ? reason : value
        };
    },
    // -------------------
    // HELPERS
    // -------------------

    /**
     * @param message {string} the message we want to log
     * @param prefix {string} the prefix for the log message to find it easier
     */
    _logMessage: function(message, prefix) {
        prefix = prefix || this.type;
        gs.info('{0}\n\n{1}', prefix, message);
    },

    /**
     * @param messageObj {JSON} the JSON object or array we want to log
     * @param prefix {string} the prefix for the log message to find it easier
     */
    _logJSON: function(messageObj, prefix) {
        this._logMessage(JSON.stringify(messageObj, null, 4), prefix);
    },
    type: 'APIHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-11-30 17:52:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;ae72f2687c2f1110f87754eb73ab0086&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;APIHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="@devsnc/uibtk-api" source="sn_uibtk_api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="@devsnc/uibtk-api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_ae72f2687c2f1110f87754eb73ab0086&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-23 19:06:49&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:54</sys_created_on>
        <sys_id>13ffb49d83341210c6695855eeaad353</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>APIHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_13ffb49d83341210c6695855eeaad353</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
