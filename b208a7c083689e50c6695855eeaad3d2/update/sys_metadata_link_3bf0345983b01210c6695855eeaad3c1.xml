<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>250149d9db0022004c5199b8f0b8f54f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.itfm_DataSourceFieldMap&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;itfm_DataSourceFieldMap&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var itfm_DataSourceFieldMap = Class.create();

itfm_DataSourceFieldMap.prototype = Object.extendsObject(itfm_AbstractWrapper, {

	getExistingFieldMaps: function(fieldMap) {
		var existingFieldMaps = new GlideRecord(fieldMap.getTableName());
		existingFieldMaps.addQuery('itfm_data_source', fieldMap.itfm_data_source);
		if(fieldMap.operation() == 'update')
			existingFieldMaps.addQuery('sys_id', '!=', fieldMap.sys_id);
		return existingFieldMaps;
	},

	mandatoryFieldMissingError: function(field) {
		return gs.getMessage('Mandatory field "{0}" is missing.', field.getLabel());
	},

	listClashedFieldMaps: function(fieldMap, clashedFieldMaps) {
		var dsTable = new GlideRecord(fieldMap.itfm_data_source.table);
		dsTable.initialize();
		while(clashedFieldMaps.next()) {
			gs.addErrorMessage(gs.getMessage('Segment "{0}" is mapped to field "{1}" of Data Source "{2}".', [ clashedFieldMaps.segment_name.getDisplayValue(), dsTable[clashedFieldMaps.field_name].getLabel(), clashedFieldMaps.itfm_data_source.getDisplayValue() ]));
		}
	},

	validateFieldMap: function(fieldMap) {
		if( fieldMap.itfm_data_source &amp;&amp; fieldMap.field_name &amp;&amp; fieldMap.segment_name &amp;&amp; fieldMap.txn_field_name ) {
			var clashedFieldMaps;

			/* when used for cleansing, check if a mapping for field already exists */
			if(fieldMap.cleansing == true) {
				clashedFieldMaps = this.getExistingFieldMaps(fieldMap);

				clashedFieldMaps.addQuery('cleansing', 'true');
				clashedFieldMaps.addQuery('field_name', fieldMap.field_name);
				clashedFieldMaps.query();

				var dsTable = new GlideRecord(fieldMap.itfm_data_source.table);
				dsTable.initialize();
				if(clashedFieldMaps.hasNext()) {
					this.listClashedFieldMaps(fieldMap, clashedFieldMaps);
					return gs.getMessage('Cleansing map for Data Source field "{0}" already exists.', dsTable[fieldMap.field_name].getLabel());
				}
			}

			/* check if segment is already mapped to some field */
			clashedFieldMaps = this.getExistingFieldMaps(fieldMap);
			clashedFieldMaps.addQuery('segment_name', fieldMap.segment_name);
			clashedFieldMaps.query();

			if(clashedFieldMaps.hasNext()) {
				this.listClashedFieldMaps(fieldMap, clashedFieldMaps);
				return gs.getMessage("Mapping a segment to multiple datasource fields is not allowed.");
			}
		}
		else {
			if(!fieldMap.itfm_data_source)
				return this.mandatoryFieldMissingError(fieldMap.itfm_data_source);
			if(!fieldMap.segment_name)
				return this.mandatoryFieldMissingError(fieldMap.segment_name);
			if(!fieldMap.field_name)
				return this.mandatoryFieldMissingError(fieldMap.field_name);
			if(!fieldMap.txn_field_name)
				return this.mandatoryFieldMissingError(fieldMap.txn_field_name);
		}
		return '';
	},

	type: 'itfm_DataSourceFieldMap'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-06-15 14:00:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;250149d9db0022004c5199b8f0b8f54f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;itfm_DataSourceFieldMap&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Plugin For ITFM and Financial Planning" source="com.snc.itfm_core"&gt;8210166b47e64210cd4e1ce4316d4327&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_250149d9db0022004c5199b8f0b8f54f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-06-15 15:09:15&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:24</sys_created_on>
        <sys_id>3bf0345983b01210c6695855eeaad3c1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>itfm_DataSourceFieldMap</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3bf0345983b01210c6695855eeaad3c1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:24</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
