<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>309ea955ff912110468365d7d3b8fef3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityRule_RoleIsNotCoveredByModule&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityRule_RoleIsNotCoveredByModule&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UnallocatedEntityRule_RoleIsNotCoveredByModule = Class.create();
UnallocatedEntityRule_RoleIsNotCoveredByModule.prototype = {
    initialize: function(subscriptionsContext, entityContext) {
        this._subscriptionsContext = subscriptionsContext;
        this._entityContext = entityContext;

        this._qualifyingDataBuilder = new sn_entitlement.UnallocatedEntityRule_RuleQualifyingDataBuilder(this.type);

        this._roleIdsAssociatedModuleSubscriptions = new Set(this._getRoleIdsAssociatedWithModules());
    },

    /**
     * Test if the role should be excluded based on the module subscription rule
     * A role is considered to be covered under the module rule if
     * 1. There is 1 or more active module subscriptions
     * 2. The role is associated with (doesn't need to be metered) any module subscription
     * 
     * @param {guid} roleId The sys_user_role.sys_id to test
     * @returns {bool} True if the role is NOT covered under the user's module subscription(s)
     */
    test: function(roleId) {
        const result = !this._roleIdsAssociatedModuleSubscriptions.has(roleId);
        this._qualifyingDataBuilder.addTestResult(roleId, result);
        return result;
    },

    /**
     * Retrieve the qualifying data generated from this rule instance
     *
     * @returns {object} An object representing the rule, test executions, and the data used
     */
    getQualifyingData: function() {
        this._qualifyingDataBuilder.addData('role_ids_associated_with_module_subscriptions', Array.from(this._roleIdsAssociatedModuleSubscriptions));

        return this._qualifyingDataBuilder.getQualifyingData();
    },

    /**
     * Retrieves all role ids that are associated with any module subscriptions without a capacity meter
     */
    _getRoleIdsAssociatedWithModules: function() {
        const moduleSubscriptionIds = this._subscriptionsContext
            .getSubscriptionIdsByIsModuleWithoutCapacityMeter();

        return moduleSubscriptionIds
            .flatMap(subscriptionId =&gt; this._subscriptionsContext.getRoleIdsBySubscriptionId(subscriptionId));
    },

    type: 'UnallocatedEntityRule_RoleIsNotCoveredByModule'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-27 20:46:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;309ea955ff912110468365d7d3b8fef3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityRule_RoleIsNotCoveredByModule&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_309ea955ff912110468365d7d3b8fef3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-12 04:41:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:33</sys_created_on>
        <sys_id>7e46789983f01210c6695855eeaad3cd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityRule_RoleIsNotCoveredByModule</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7e46789983f01210c6695855eeaad3cd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
