<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>323669e5ff0221107f944ee9453bf163</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LabelCacheCleanupFlow&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;LabelCacheCleanupFlow&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LabelCacheCleanupFlow = Class.create();
LabelCacheCleanupFlow.prototype = {
    initialize: function() {
    },

    type: 'LabelCacheCleanupFlow'
};

LabelCacheCleanupFlow.getCleanFlowLabelCacheWithFlow = function(flowText, printDetails) {
	var result = null;
	try {
		flow = JSON.parse(flowText);
		var sysId = flow.sys_id || flow.id;
		var name = flow.name;
		var labelCache = flow.label_cache;
		result = LabelCacheCleanupFlow.getCleanFlowLabelCache(sysId, name, labelCache, printDetails);

	} catch (e) {
		gs.error (e);
	}
	return result;
}; 

LabelCacheCleanupFlow.getCleanFlowLabelCache = function(sysId, name, labelCache, printDetails) {
    var result = null;
	var hitCount = 0;
	var missCount = 0;
	try {
		LabelCacheCleanupFlow.printWithName(name, "Attempting to clean the label cache for flow/subflow \'" + name + "\' with sys id \'" + sysId);
		if (!labelCache) {
			LabelCacheCleanupFlow.printWithName(name, "Has an empty label cache");
		} else {
			
			var parsedLabelCache = JSON.parse(labelCache);
			var pills = LabelCacheCleanupFlow.getPills(sysId);

			result = labelCache;
			LabelCacheCleanupFlow.printWithName(name, "Original label cache before the removal:\n" + name + ": " + labelCache);
			var newLabelCache = [];
			for (var labelKey in parsedLabelCache) {
				if (pills[parsedLabelCache[labelKey].name] || pills['{{' + parsedLabelCache[labelKey].name + '}}'] ) {
					if (printDetails)
						LabelCacheCleanupFlow.printWithName(name, "We have a match " + parsedLabelCache[labelKey].name);
					newLabelCache.push(parsedLabelCache[labelKey]);
					hitCount++;
				} else {
					if (printDetails)
						LabelCacheCleanupFlow.printWithName(name, "We have a miss " + parsedLabelCache[labelKey].name);
					missCount++;
				}
			}
			result = JSON.stringify(newLabelCache);
			if (printDetails) {
				LabelCacheCleanupFlow.printWithName(name, "hitCount: " + hitCount + " missCount: " + missCount);
				LabelCacheCleanupFlow.printWithName(name, "New label cache after the removal:\n" + name + ": " + labelCache);
			}
		}
	} catch (e) {
		gs.error (e);
	}

    return result;
};

LabelCacheCleanupFlow.getPills = function(flowId) {
    var pills = {};
    var instances = new GlideRecord("sys_hub_flow_component");
    instances.addQuery("flow", flowId);
    instances.query();
    while(instances.next()) {
		var instanceSysId = instances.sys_id || instances.id;
        LabelCacheCleanupFlow.findPillsInMapping(instanceSysId, pills);
    }

    LabelCacheCleanupFlow.findPillsInMapping(flowId, pills);
    LabelCacheCleanupFlow.findPillsInTriggerInstance(flowId, pills);
    return pills;
};

LabelCacheCleanupFlow.findPillsInTriggerInstance = function(flowId, pills) {
    var triggerInstance = new GlideRecord("sys_hub_trigger_instance");
    triggerInstance.addQuery("flow", flowId);
    triggerInstance.query();
    // should be at max one result in triggerInstance
    while(triggerInstance.next()) { 
        var triggerInstanceId = triggerInstance.sys_id || triggerInstance.id;
        var sysVariableValue = new GlideRecord("sys_variable_value");
        sysVariableValue.addQuery("document_key", triggerInstanceId);
        sysVariableValue.query();
        while(sysVariableValue.next()) {
            var value = sysVariableValue.value;
            LabelCacheCleanupFlow.findPillsInValue(value, pills);
        }
    }
};

LabelCacheCleanupFlow.findPillsInMapping = function(id, pills) {
    var elementMapping = new GlideRecord("sys_element_mapping");
    elementMapping.addQuery("id", id);
    elementMapping.query();
    while(elementMapping.next()) { 
        var value = elementMapping.value;
        LabelCacheCleanupFlow.findPillsInValue(value, pills);
    }
};

LabelCacheCleanupFlow.findPillsInTransform  = function(value, pills) {
    // removes "{{fd_transform:" prefix and "}}" postfix
    if (value &amp;&amp; value.length &gt; 16) {
        var uuid = value.substring(15, value.length - 2);
        var pillCompound = new GlideRecord("sys_hub_pill_compound");
        pillCompound.addQuery("ui_id", uuid);
        pillCompound.query();
        while (pillCompound.next()) {
            var prescription = pillCompound.prescription;
            LabelCacheCleanupFlow.findPillsInValue(prescription, pills);
        }
    }
};

LabelCacheCleanupFlow.findPillsInValue = function(value, pills) {
    var result;
	var PILL_REGEX = /{{(?!{)([^}]*)}}/g;
    while(result = PILL_REGEX.exec(value)) {
        if (result[0] &amp;&amp; result[0].startsWith("{{fd_transform:") &amp;&amp; result[0].length &gt; 16) {
            LabelCacheCleanupFlow.findPillsInTransform(result[0], pills);
        } else {
            pills[result[0]] = true;
        } 
    }
};

LabelCacheCleanupFlow.findPillsInErrorHandling = function(id, pills) {
    var errorHandlingMetadata = new GlideRecord("sys_hub_action_status_metadata");
    if (!errorHandlingMetadata.get("action_type_id", id))
        return;

    var statusCondition = new GlideRecord("sys_hub_status_condition");
	var errorHandlingMetadataSysId = errorHandlingMetadata.sys_id || errorHandlingMetadata.id;
    statusCondition.addQuery("action_status_metadata_id", errorHandlingMetadataSysId);
    statusCondition.query();
    while (statusCondition.next()) {
        LabelCacheCleanupFlow.findPillsInValue(statusCondition.status, pills);
        LabelCacheCleanupFlow.findPillsInValue(statusCondition.condition, pills);
    }
};

LabelCacheCleanupFlow.printWithName = function(name, text) {
    gs.print(name + ": " + text);
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-04-06 21:28:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;323669e5ff0221107f944ee9453bf163&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LabelCacheCleanupFlow&lt;/sys_name&gt;
        &lt;sys_package display_value="Flow Designer Designer Model" source="com.glide.hub.designer_backend.model"&gt;ffe9f8683cf1311068bcf327dfe37fdf&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_323669e5ff0221107f944ee9453bf163&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:23:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:36</sys_created_on>
        <sys_id>eb46b89983f01210c6695855eeaad30f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LabelCacheCleanupFlow</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_eb46b89983f01210c6695855eeaad30f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
