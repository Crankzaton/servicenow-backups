<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4f3177af43302110b4a1c083a9b8f2b6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.FGEEntitlementProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;FGEEntitlementProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FGEEntitlementProcessor = Class.create();
FGEEntitlementProcessor.prototype = {
    initialize: function() {
        this.instanceInfoUtil = new InstanceInfoUtil();
        this._cacheManager = new LicensingCacheManager();
        this.logger = new LoggingUtil();
    },

    /**
     * Checks for the given fgeId into the cache, If cache object is empty then reload the subscrition entitlement cache and 
     * then validate if given fge is present for the active subscription.
     * @param {string} fgeId
     */
    isEntitled: function(fgeId) {
        try {
            var entitlmentIdToSubscriptionObj = new Map();
            entitlmentIdToSubscriptionObj = this._cacheManager.getDataFromCache(LicensingEngineConstants.LICENSING_CACHE_CATALOG, LicensingEngineConstants.SUBSCRIPTION_ENTITLEMENT_CACHE);

            if (global.JSUtil.nil(entitlmentIdToSubscriptionObj))
                new SubscriptionEntitlementDAO().loadSubscriptionEntitlementIntoCache();
            entitlmentIdToSubscriptionObj = this._cacheManager.getDataFromCache(LicensingEngineConstants.LICENSING_CACHE_CATALOG, LicensingEngineConstants.SUBSCRIPTION_ENTITLEMENT_CACHE);

            for (let [entitlementId, subscriptionObjectList] of entitlmentIdToSubscriptionObj) {
                for (let subscriptionObject of subscriptionObjectList) {
                    if (!global.JSUtil.nil(subscriptionObject[LicensingEngineDBConstants.FGE_IDS]) &amp;&amp; subscriptionObject[LicensingEngineDBConstants.FGE_IDS].toLowerCase().includes(fgeId)) {
                        if (this.logger.isEntitlementLoggingEnabled()) {
                            this.logger.logInfo(LicensingEngineConstants.FGE_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, " Given fge is present is entitled : " + fgeId);
                        }
                        return true;
                    }
                }
            }

            if (this.logger.isEntitlementLoggingEnabled()) {
                entitlmentIdToSubscriptionObj.forEach(function(subscriptionObjectList, entitlementId) {
                    new LoggingUtil().logInfo(LicensingEngineConstants.FGE_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, "entitlementId loaded from cache: " + entitlementId);
                    subscriptionObjectList.forEach(function(subscriptionObject) {
                        new LoggingUtil().logInfo(LicensingEngineConstants.FGE_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, "subscriptionObject loaded from cache: " + JSON.stringify(subscriptionObject));
                    });
                });

                const errorMsg = LicensingEngineConstants.LICENSING_ERROR_CODES[LicensingEngineConstants.ENTITLEMENT_API_CODE.NO_FGE_ENTITLEMENT] + fgeId;
                this.logger.logError(LicensingEngineConstants.FGE_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, errorMsg, LicensingEngineConstants.ENTITLEMENT_API_CODE.NO_FGE_ENTITLEMENT, LicensingEngineConstants.LICENSING_ERROR_TYPES.ENTITLEMENT_API);
            }
            return false;

        } catch (error) {
            const errorMsg = LicensingEngineConstants.LICENSING_ERROR_CODES[LicensingEngineConstants.ENTITLEMENT_API_CODE.FGE_ERROR] + fgeId + error + " \n " + error.stack;;
            this.logger.logError(LicensingEngineConstants.FGE_ENTITLEMENT_PROCESSOR, LicensingEngineConstants.IS_ENTITLED, errorMsg, LicensingEngineConstants.ENTITLEMENT_API_CODE.FGE_ERROR, LicensingEngineConstants.LICENSING_ERROR_TYPES.ENTITLEMENT_API);

            return false;
        }
    },

    type: 'FGEEntitlementProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-10 09:30:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4f3177af43302110b4a1c083a9b8f2b6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;62&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FGEEntitlementProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4f3177af43302110b4a1c083a9b8f2b6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-14 05:55:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:57</sys_created_on>
        <sys_id>17963cd983f01210c6695855eeaad356</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FGEEntitlementProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_17963cd983f01210c6695855eeaad356</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
