<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>02a8879477113010e2ab29354f5a99ab</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_gf.GFRefQualHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GFRefQualHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GFRefQualHelper = Class.create();

GFRefQualHelper.getCalendarPeriodsForGoal = function(current) {
    var calendarType = sn_gf.GoalConfigUtil.getCalendarType();
    if (calendarType == sn_gf.GoalFrameworkConstants.FISCAL_PERIOD_TABLE)
        return 'sys_class_name=' + calendarType;
    var sysIdsOfBusinessCalendarsRelatedToGregCalendarGroup = [sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_WEEK, sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_MONTH, sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_QUARTER, sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_YEAR];
    return 'calendarIN' + sysIdsOfBusinessCalendarsRelatedToGregCalendarGroup.join();
};

GFRefQualHelper.getCalendarPeriodsForStrategy = function(current) {
    var calendarType = sn_gf.GoalConfigUtil.getCalendarType();
    if (calendarType == sn_gf.GoalFrameworkConstants.FISCAL_PERIOD_TABLE)
        return 'sys_class_name=' + calendarType;
    var sysIdsOfBusinessCalendarsRelatedToGregCalendarGroup = [sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_WEEK, sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_MONTH, sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_QUARTER, sn_gf.GoalFrameworkConstants.BUSINESS_CALENDAR_YEAR];
    return 'calendarIN' + sysIdsOfBusinessCalendarsRelatedToGregCalendarGroup.join();
};

GFRefQualHelper.getParentIdsForGoal = function(current) {
    return 'sys_idNOT IN' + current.sys_id; //to avoid circular loop
};

GFRefQualHelper.getParentIdsForStrategy = function(current) {
    return 'sys_idNOT IN' + current.sys_id; //to avoid circular loop
};

GFRefQualHelper.getStrategiesForGoal = function(goalGR) { 
    return '';
};

GFRefQualHelper.getValidGoalsForPlanningItemOfGoalRel = function(goalRelGr) {
    return '';
};

GFRefQualHelper.getValidGoalsForPlanningItem = function(planningItemGr) {
	return '';
};

GFRefQualHelper.getValidPlanningItemsFromGoalPlanningOrg = function(goalRelGr) {
    if (GlidePluginManager.isActive('com.sn_align_ws')) {
        var planningItemType = goalRelGr.getValue('planning_item_type');
		return 'sys_class_name=' + planningItemType;
    } 
	
	return '';
};

//here work item is (project, demand, program, epic ) 
//ref qualifier for primary goal
GFRefQualHelper.getValidGoalsForWorkItem = function(workItemGr) {
    return '';
};

GFRefQualHelper.getValidGoalsBasedOnWorkItemPopulated = function(goalRel) { //goalRel instance of goal relationship
    return '';
};

//ref qualifier on Goal relationship record goal field, to get planning org from work / planning items
GFRefQualHelper.getValidGoalsForWorkItemOnGoalRelRecord = function(goalRel) {
    return '';
};

//ref qualifier for work / planning items to get planning org from selected goal
GFRefQualHelper.getValidWorkItemsFromGoalPlanningOrg = function(goalRel, tableName) {
    return '';
};

GFRefQualHelper.getFeatureRecords = function(goalRel) {
    return 'sys_class_name=' + sn_gf.GoalFrameworkConstants.FEATURE_TABLE + '^ORsys_class_name=' + sn_gf.GoalFrameworkConstants.SAFE_FEATURE_TABLE;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-08 12:05:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;02a8879477113010e2ab29354f5a99ab&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;89&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GFRefQualHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Goal Framework" source="sn_gf"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Goal Framework"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_02a8879477113010e2ab29354f5a99ab&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-07 09:47:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:00</sys_created_on>
        <sys_id>ca30f85583b01210c6695855eeaad38f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GFRefQualHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ca30f85583b01210c6695855eeaad38f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
