<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5b91bf9f537330106d79ddeeff7b1205</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_employee.EP_MyTeamsUtilsSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;EP_MyTeamsUtilsSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[
			var EP_MyTeamsUtilsSNC = Class.create();
	EP_MyTeamsUtilsSNC.prototype = {
	initialize: function() {
	},

	/**
     * Returns manager of the given user
     * @param {GlideRecord} userGr - GlideRecord of a user
     * returns {GlideRecord}
     */
	getManager: function(userGr){
		var mgr = userGr.getValue('manager');
		if (mgr) {
			var gr = new GlideRecord('sys_user');
			if (gr.get(mgr))
				return gr;
		}
	},
		
	/**
     * Returns team members of the given user
     * @param {GlideRecord} userGr - GlideRecord of a user
     * returns {Array}{GlideRecord}
     */
	getTeamMembers: function(userGr){
		var teamGR = new GlideRecord("sys_user");
		teamGR.addActiveQuery();
		teamGR.orderBy("name");
		teamGR.addQuery("manager", userGr.getValue('manager'));
		teamGR.addQuery("sys_id", "!=", userGr.getUniqueValue());
		teamGR.addNotNullQuery("manager");
		teamGR.query();
		return teamGR;
	},
		
	/**
     * Returns direct reportees of the given user
     * @param {GlideRecord} userGr - GlideRecord of a user
     * returns {Array}{GlideRecord}
     */
	getDirectReports: function(userGr){
		var directReportGR = new GlideRecord("sys_user");
		directReportGR.addActiveQuery();
		directReportGR.orderBy("name");
		directReportGR.addQuery("manager", userGr.getUniqueValue());
		directReportGR.query();
		return directReportGR;
	},
	
	/* 
		Param : current,
		Type : {
		selected_user : sys_id of the User record for current record context,
		logged_inP_user : sys_id of the current logged in user
		},
		Returns : current selected user manager sys_id
	*/
	getCurrentUserManager : function(current) {
		var currentUser = current.manual_user || current.selected_user || current.logged_in_user;
		var userRecord = new GlideRecord('sys_user');
		if(userRecord.get(currentUser)){
			var managerGR = this.getManager(userRecord);
			if(managerGR) return managerGR.sys_id
		}
		else return null;
	},
	/* 
		Param : current,
		Type : {
		selected_user : sys_id of the User record for current record context,
		logged_inP_user : sys_id of the current logged in user
		},
		Returns : array of sys ids from sys_user table for users, who share the same manager
	*/
	getCurrentUserCoworkers : function(current) {
		var currentUser = current.manual_user || current.selected_user || current.logged_in_user;
		var currentUserRecord = new GlideRecord('sys_user');
		if(currentUserRecord.get(currentUser)) {
			var coworkers = [];
			var coworkerGR = this.getTeamMembers(currentUserRecord);
			while(coworkerGR.next()) {
				coworkers.push(coworkerGR.getValue('sys_id'));
			}
			return coworkers;
		}
		else return [];
	},
	/* 
		Param : current,
		Type : {
		selected_user : sys_id of the User record for current record context,
		logged_inP_user : sys_id of the current logged in user
		},
		Returns : array of sys ids from sys_user table for users, for whom current user is the manager
	*/
	getCurrentUserReports : function(current) {
		var currentUser = current.manual_user || current.selected_user || current.logged_in_user;
		var reportees = [];
		var userGR = new GlideRecord('sys_user');
		if(userGR.get(currentUser)) {
			var reportsGR = this.getDirectReports(userGR);
			while(reportsGR.next()) {
				reportees.push(reportsGR.getValue('sys_id'));
			}
			return reportees;
		}
		else return null;
		
	},
	type: 'EP_MyTeamsUtilsSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-11-19 05:25:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5b91bf9f537330106d79ddeeff7b1205&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;EP_MyTeamsUtilsSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Employee Profile" source="sn_employee"&gt;1e95bac2738f001001b566b90ff6a7cd&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Employee Profile"&gt;1e95bac2738f001001b566b90ff6a7cd&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5b91bf9f537330106d79ddeeff7b1205&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-28 10:38:06&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:29</sys_created_on>
        <sys_id>d3b6f01d83f01210c6695855eeaad38e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>EP_MyTeamsUtilsSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d3b6f01d83f01210c6695855eeaad38e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
