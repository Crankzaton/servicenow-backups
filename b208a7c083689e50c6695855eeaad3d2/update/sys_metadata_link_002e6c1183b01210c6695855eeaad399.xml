<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>34da1fc4537433003a2eddeeff7b12a1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;service_entitlement&lt;/collection&gt;
        &lt;condition&gt;!current.sold_product.nil() || !current.install_base_item.nil()&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;validate account, consumer and product&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (!current.account.nil()) {

        if (!current.sold_product.nil()) {
            /*  entitlement account not maching with sold product account */
            if (current.sold_product.account != current.account) {
                gs.addErrorMessage(gs.getMessage("Account selected does not match account in the sold product"));
                current.setAbortAction(true);
                return;
            }
        }

        if (!current.install_base_item.nil()) {
            /* entitlement account not maching with install base account */
            if (current.install_base_item.account != current.account) {
                gs.addErrorMessage(gs.getMessage("Account selected does not match account in the install base item"));
                current.setAbortAction(true);
                return;
            }
        }
    } else if (!current.consumer.nil()) {
        if (!current.sold_product.nil()) {
            /* entitlement consumer not maching with  sold product consumer */
            if (current.sold_product.consumer != current.consumer) {
                gs.addErrorMessage(gs.getMessage("Consumer selected does not match Consumer in the sold product"));
                current.setAbortAction(true);
                return;
            }
        }
        if (!current.install_base_item.nil()) {
            /* entitlement consumer not maching with  install base consumer */
            if (current.install_base_item.consumer != current.consumer) {
                gs.addErrorMessage(gs.getMessage("Consumer selected does not match consumer in the install base item"));
                current.setAbortAction(true);
                return;
            }
        }

    } else {

        if (!current.sold_product.nil()) {
            if (!current.sold_product.account.nil()) /* set consumer/account to consumer/account of sold product */
                current.account = current.sold_product.account;
            else
                current.consumer = current.sold_product.consumer;
        } else if (!current.install_base_item.nil()) {
            if (!current.install_base_item.account.nil()) /* set consumer/account to consumer/account of install base item */
                current.account = current.install_base_item.account;
            else
                current.consumer = current.install_base_item.consumer;
        }
    }
    if (!current.sold_product.nil()) {
        /* check if product is matching with sold_product.product */
        if (!current.product.nil()) {
            if ((current.sold_product.product != current.product)) {
                gs.addErrorMessage(gs.getMessage("Product selected does not match product in the sold product"));
                current.setAbortAction(true);
                return;
            }
        } else /* assign product = sold_prodct.product if product is empty */
            current.product = current.sold_product.product;

    }

    if (!current.sold_product.nil() &amp;&amp; !current.install_base_item.nil()) {
        /* install base and sold item should belongs to same account  */
        if (!current.install_base_item.account.nil()) {
            if (current.install_base_item.account != current.sold_product.account) {
                gs.addErrorMessage(gs.getMessage("Sold product and install base item are not selected from the same account"));
                current.setAbortAction(true);
                return;
            }
        } else if (!current.install_base_item.consumer.nil()) {
            if (current.install_base_item.consumer != current.sold_product.consumer) {
                gs.addErrorMessage(gs.getMessage("Sold product and install base item are not selected from the same consumer"));
                current.setAbortAction(true);
                return;
            }
        }
    }

})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-04-09 13:31:20&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;34da1fc4537433003a2eddeeff7b12a1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;validate account, consumer and product&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Customer Service Base Entities" source="com.snc.cs_base"&gt;4f2cce6b47664210cd4e1ce4316d43a4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_34da1fc4537433003a2eddeeff7b12a1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-04-12 09:16:03&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=34da1fc4537433003a2eddeeff7b12a1"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:59:51</sys_created_on>
        <sys_id>002e6c1183b01210c6695855eeaad399</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>validate account, consumer and product</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_002e6c1183b01210c6695855eeaad399</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:59:51</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
