<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>20daed2453202110dff1ddeeff7b12c7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAFBMessengerCustomBot&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Glide Record helper class for sn_va_fb_messenger.VAFBMessengerCustomBotInstall.&lt;/description&gt;
        &lt;name&gt;VAFBMessengerCustomBot&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAFBMessengerCustomBot = Class.create();

var PROVIDER_APPLICATION_TABLE = 'sys_cs_provider_application';
var HASH_MESSAGE_VERIFICATION_TABLE = 'hash_message_verification';
var TOKEN_VERIFICATION_TABLE = 'token_verification';
var MESSAGE_AUTH_TABLE = 'message_auth';

var FB_MESSENGER_PROVIDER_ID = '4dd0298d0f9310105375001ea8767e73';
var FB_MESSENGER_PROVIDER_NAME = 'FB Messenger Provider';

VAFBMessengerCustomBot.prototype = {
    initialize: function() {},


    insertHashMessageVerificationRecord: function(botName, hashSecret) {
        var hsFieldValueMap = {};
        hsFieldValueMap['name'] = 'hash-secret-for-' + botName;
        hsFieldValueMap['description'] = 'fb-messenger-inbound-hash-token-for-' + botName;
        hsFieldValueMap['secret'] = hashSecret;

        return this.insertRecord(HASH_MESSAGE_VERIFICATION_TABLE, hsFieldValueMap);

    },

    insertOutboundTokenRecord: function(botName, token) {
        var tokenFieldValueMap = {};
        tokenFieldValueMap['name'] = 'outbound-token-for-' + botName;
        tokenFieldValueMap['description'] = 'fb-messenger-outbound-token-for-' + botName;
        tokenFieldValueMap['token'] = token;

        return this.insertRecord(TOKEN_VERIFICATION_TABLE, tokenFieldValueMap);
    },

    insertMessageAuthRecord: function(botName, hashMessageVerification, tokenVerification, appID) {

        var authFieldValueMap = {};
        authFieldValueMap['name'] = 'message-auth-for-' + botName;
        authFieldValueMap['provider_name'] = FB_MESSENGER_PROVIDER_NAME;
        authFieldValueMap['group_name'] = appID;
        authFieldValueMap['outbound_message_creation'] = tokenVerification;
        authFieldValueMap['inbound_message_verification'] = hashMessageVerification;

        return this.insertRecord(MESSAGE_AUTH_TABLE, authFieldValueMap);

    },

    insertAdapterConfigurationRecord: function(botName, messageAuth, inboundId) {
        var providerFieldValueMap = {};
        providerFieldValueMap['name'] = botName;
        providerFieldValueMap['short_description'] = '';
        providerFieldValueMap['message_auth'] = messageAuth;
        providerFieldValueMap['provider'] = FB_MESSENGER_PROVIDER_ID;
        providerFieldValueMap['inbound_id'] = inboundId;

        return this.insertRecord(PROVIDER_APPLICATION_TABLE, providerFieldValueMap);

    },


    insertRecord: function(tableName, fieldValueMap) {
        try {
            var _gr = new GlideRecord(tableName);
            _gr.initialize();

            for (var fieldName in fieldValueMap) {
                var fieldValue = fieldValueMap[fieldName];
                _gr.setValue(fieldName, fieldValue);
            }

            _gr.insert();
            gs.info("VAFBMessengerCustomBot::insertRecord - Successfully inserted record with into {0} [ {1} ] \n Value: {3} \n", [tableName, _gr.sys_id, JSON.stringify(fieldValueMap)]);

            return _gr.sys_id;

        } catch (error) {
            gs.error("VAFBMessengerCustomBot::insertRecord - Failed to insert record in :" + tableName + ':' + error.message);

            return -1;
        }
    },

    getRecords: function(tableName, encodedQString) {
        var _getGR = new GlideRecord(tableName);
        _getGR.addEncodedQuery(encodedQString);
        _getGR.query();

        return _getGR;

    },

    updateCustomBot: function(botName, hashRecordSysId, hashSecret, tokenRecordSysId, token) {

        var result = {
            'error': false,
            'message': gs.getMessage('You have successfully updated the custom bot integration for Facebook Messenger - {0}', botName)
        };

        var tokenRecord = this.updateRecordBySysId(TOKEN_VERIFICATION_TABLE, tokenRecordSysId, {
            'token': token
        });
        if (!this.isSuccess(tokenRecord)) {
            result.error = true;
            result.message = gs.getMessage('Failed to update Token Verification Record. Check logs for more information.');
        }

        var hashRecord = this.updateRecordBySysId(HASH_MESSAGE_VERIFICATION_TABLE, hashRecordSysId, {
            'secret': hashSecret
        });
        if (!this.isSuccess(hashRecord)) {
            result.error = true;
            result.message = gs.getMessage('Failed to update Hash Message Verification Record. Check logs for more information.');
        }

        gs.info('VAFBMessengerCustomBot:: You have successfully updated the custom bot integration for Facebook Messenger - ' + botName);

        return result;
    },

    updateRecordBySysId: function(tableName, sysId, fieldValueMap) {

        try {
            var _upGR = new GlideRecord(tableName);
            _upGR.get(sysId);

            for (var fieldName in fieldValueMap) {
                var fieldVal = fieldValueMap[fieldName];
                _upGR.setValue(fieldName, fieldVal);
            }
            var _sysId = _upGR.update();

            return _sysId;
        } catch (error) {
            gs.error("VAFBMessengerCustomBot::updateRecordBySysId - Failed to update record:" + error.message);
            return -1;
        }

    },
    isSuccess: function(sysId) {
        return sysId !== null &amp;&amp; sysId !== undefined &amp;&amp; sysId !== -1;
    },

    type: 'VAFBMessengerCustomBot'

}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-19 05:41:36&lt;/sys_created_on&gt;
        &lt;sys_id&gt;20daed2453202110dff1ddeeff7b12c7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAFBMessengerCustomBot&lt;/sys_name&gt;
        &lt;sys_package display_value="Conversational Custom Chat Integration Utilities" source="com.glide.ccci.clients.utils"&gt;ac9d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_20daed2453202110dff1ddeeff7b12c7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:23:19&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:56</sys_created_on>
        <sys_id>c1e03c1983b01210c6695855eeaad36f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAFBMessengerCustomBot</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c1e03c1983b01210c6695855eeaad36f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:56</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
