<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b21bda22b4ee3c10f87755e926c386b9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RequestNotificationUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;[WARNING: Customers should NOT modify this script]

            The purpose of this script include is to provide default behaviours for the RequestNotificationUtil script include.
            To change the behaviour of these methods (or add new methods), Customers should override/add new methods to the RequestNotificationUtil script include. &lt;/description&gt;
        &lt;name&gt;RequestNotificationUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RequestNotificationUtilSNC = Class.create();
RequestNotificationUtilSNC.prototype = {
    initialize: function() {},

    /**
     * create notification Request primary button
     * @param template - templatePrinter
     * @param url - string url for the redirection
     * @param message - message of button
     */
    createNotificationPrimayAction: function(template, url, message) {
        var backgroundColor = 'background-color: #4F52BD;';
        var color = 'color: #ffffff;';
        var fontSize = 'font-size: 16px;';
        var fontFamily = 'font-family: Lato, Arial, sans-serif;';
        var textDecoration = 'text-decoration: none; border-radius: 4px;';
        var webKitBorder = '-webkit-border-radius: 4px;';
        var mozBorder = '-moz-border-radius: 4px;';
        var display = 'display: inline-block;';
        var padding = 'padding: 6px 16px;';
        var marginBottom = 'margin-bottom:32px';
        template.print('&lt;div&gt;&lt;a href="' + url + '"');
        template.print('style="' + backgroundColor + color + fontSize + fontFamily + textDecoration + webKitBorder + mozBorder + display + padding + marginBottom);
        template.print('"&gt;');
        template.print(message);
        template.print('&lt;/a&gt;&lt;/div&gt;');
    },

    /**
     * Get RITM details for notification
     * @param sys_id - Request Sys_id
     * @returns request details for notitification
     */
    getRequestDetails: function(sys_id, requestGr, addReqItemVariables) {
        var requestDetails = {
            showRequestedFor: true,
            totalTasks: 0,
            tasks: []
        };
        var gr = new GlideRecord('sc_req_item');
        gr.addQuery('request', sys_id);
        gr.query();
        while (gr.next()) {
            if (requestDetails.totalTasks &lt; 3) {
                var catalogItemJS = new sn_sc.CatItem(gr.cat_item);
                var catItemDetails = catalogItemJS.getItemSummary(true);
                var showItemRequestedFor = false;
                if (gr.requested_for.toString() !== requestGr.requested_for.toString()) {
                    requestDetails.showRequestedFor = false;
                    showItemRequestedFor = true;
                }
                var task = this._generateRequestItemObject(gr, catItemDetails, addReqItemVariables);
                task.showItemRequestedFor = showItemRequestedFor;
                requestDetails.tasks.push(task);
            }

            requestDetails.totalTasks = requestDetails.totalTasks + 1;
        }
        return requestDetails;
    },


    getRequestItemDetails: function(requestItemId, requestedFor, showVariables) {
        var task = {};
        var gr = new GlideRecord('sc_req_item');
        gr.addQuery('sys_id', requestItemId);
        gr.query();
        if (gr.next()) {
            var catalogItemJS = new sn_sc.CatItem(gr.cat_item);
            var catItemDetails = catalogItemJS.getItemSummary(true);
            var showItemRequestedFor = false;
            if (gr.requested_for.toString() !== requestedFor.toString()) {
                showItemRequestedFor = true;
            }
            task = this._generateRequestItemObject(gr, catItemDetails, showVariables);
            task.showItemRequestedFor = showItemRequestedFor;
        }
        return task;
    },

    _generateRequestItemObject: function(requestItemGr, catItemDetails, showVariables) {
        var requestItem = {
            sysId: requestItemGr.getUniqueValue(),
            requestNumber: requestItemGr.number.toString(),
            item: catItemDetails.name.toString(),
            price: requestItemGr.price.toString(),
            quantity: requestItemGr.quantity.toString(),
            recurringPrice: requestItemGr.recurring_price.toString(),
            priceWithCurrency: requestItemGr.price.getDisplayValue(),
            recurringPriceWithCurrency: requestItemGr.recurring_price.getDisplayValue(),
            recurringFrequency: catItemDetails.recurring_frequency,
            omitPrice: !catItemDetails.show_price,
            showQuantity: catItemDetails.show_quantity,
            requestedFor: requestItemGr.requested_for.name.getDisplayValue()
        };
        if (showVariables) {
            requestItem['variables'] = this.getRequestItemVariables(requestItem.sysId);
        }
        return requestItem;
    },

    /**
     * Get REQ recurring price for notification
     * @param sys_id - Request Sys_id
     * @returns request rollup recurring price string concatinated
     */
    gerRecurringPriceRollup: function(sys_id) {
        var recurringPriceText = '';
        var recurringPriceGr = new GlideRecord('sc_recurring_rollup');
        recurringPriceGr.query('request', sys_id);
        recurringPriceGr.query();
        while (recurringPriceGr.next()) {
            recurringPriceText = recurringPriceText + ' + ' + recurringPriceGr.recurring_price.getDisplayValue() + ' ' + recurringPriceGr.recurring_frequency.getDisplayValue();
        }
        return recurringPriceText;
    },

    /**
     * Get REQ comment for state
     * @param requestId - requestId
     * @param state - state of the approval
     * @returns comment based on the state for last approved/rejected
     */
    getRequestComment: function(requestId, state) {
        var approverRecord = new GlideRecord("sysapproval_approver");
        approverRecord.addQuery('state', state);
        approverRecord.addQuery('sysapproval', requestId);
        approverRecord.orderBy('sys_updated_on');
        approverRecord.setLimit(1);
        approverRecord.query();
        while (approverRecord.next()) {
            var commentDesc = approverRecord.comments.getJournalEntry(1).toString();
            if (commentDesc.length &gt; 0) {
                var split = commentDesc.split(/\(comments\)/gi);
                if (split.length &gt; 1) {
                    // returns the first comment.
                    var comment = split[split.length - 1];
                    comment = comment.trim();
                    var colonIndex = comment.indexOf(':');
                    if (colonIndex != -1) {
                        comment = comment.substr(colonIndex + 2, comment.length - 1);
                    }
                    comment = comment.replace(/\n/g, '&lt;br/&gt;');
                    return comment;
                }
            }
        }
    },

    /**
     * Get Request Item Variables
     * @param sys_id - Request Item Sys_id
     * @returns request item variables
     */
    getRequestItemVariables: function(sys_id) {
        var reqItemVariables = [];
        var glideVariableSet = new GlideappVariablePoolQuestionSet();
        glideVariableSet.setRequestID(sys_id);
        glideVariableSet.load();
        var variables = glideVariableSet.getFlatQuestions();
        for (var i = 0; i &lt; variables.size(); i++) {
            if (variables.get(i).getLabel() !== '' &amp;&amp; variables.get(i).getDisplayValue() &amp;&amp; variables.get(i).getDisplayValue() !== '' &amp;&amp; variables.get(i).isVisibleSummary()) {
                var displayVal = variables.get(i).getDisplayValue();
                if (displayVal instanceof String) {
                    displayVal = String(displayVal).valueOf();
                    displayVal = displayVal.replace(/\n/g, '&lt;br/&gt;');
                }
                var reqItemVariable = {
                    'label': variables.get(i).getLabel(),
                    'value': displayVal,
                    'type': variables.get(i).getType()
                };
                reqItemVariables.push(reqItemVariable);
            }
        }
        return reqItemVariables;
    },

    /**
     * Get Comments from journal records
     * @param elementId, current objectId
     * @param sysClass, classname of the object
     * @param byUserName, filter by username
     * @returns comment object with {val: comment, user: comment_created_by}
     */
    getComments: function(elementId, sysClass, byUserName) {
        var comment = {
            val: '',
            user: byUserName
        };
        var journalRec = new GlideRecord('sys_journal_field');
        journalRec.addQuery('element_id', elementId);
        journalRec.addQuery('element', 'comments');
        journalRec.addQuery('name', sysClass);
        if (byUserName) {
            journalRec.addQuery('sys_created_by', byUserName);
        }
        journalRec.orderByDesc('sys_created_on');
        journalRec.setLimit(1);
        journalRec.query();
        if (journalRec.next()) {
            var notes = journalRec.value.trim();
            notes = notes.replace(/\n/g, '&lt;br/&gt;');
            if (notes.length &gt; 0) {
                comment.val = notes;
            }
            if (!byUserName) {
				if (journalRec.sys_created_by == "system")
					comment.user = "System";
				else {
					var userRec = new GlideRecord('sys_user');
					userRec.addQuery('user_name', journalRec.sys_created_by);
					userRec.setLimit(1);
					userRec.query();

					if (userRec.next())
						comment.user = userRec.name;
				}
            }
        }
        return comment;
    },

    /**
     * create Request item price content
     * @param requestItemDetails - requestItem details which has price information
     * @param template - templatePrinter
     */
    setPricingtoTemplate: function(requestItemDetails, template) {
        var priceDisplay = gs.getProperty('glide.sc.price.display');
        var showPrice = !requestItemDetails.price.nil() &amp;&amp; !requestItemDetails.omitPrice;
        var showRecurringPrice = !requestItemDetails.recurringPrice.nil() &amp;&amp; !requestItemDetails.omitPrice;
        if (priceDisplay == 'never') {
            showPrice = false;
            showRecurringPrice = false;
        }
        if ((priceDisplay == 'non_zero' &amp;&amp; (!(requestItemDetails.price &gt; 0) || !showPrice)) ||
            (priceDisplay == 'always' &amp;&amp; !showPrice)) {
            showPrice = false;
        }
        if ((priceDisplay == 'non_zero' &amp;&amp; (!(requestItemDetails.recurringPrice &gt; 0) || !showRecurringPrice)) ||
            (priceDisplay == 'always' &amp;&amp; !showRecurringPrice) || !requestItemDetails.recurringFrequency) {
            showRecurringPrice = false;
        }
        if (showPrice || showRecurringPrice) {
            var finalPrice = showPrice ? '&lt;b style="font-weight: 600;"&gt;' + requestItemDetails.priceWithCurrency + '&lt;/b&gt;' : '';
            if (showRecurringPrice) {
                finalPrice = finalPrice + (showPrice ? ' + ' : '');
                finalPrice = finalPrice + '&lt;span style="font-size:14px;font-weight: 600"&gt;' + requestItemDetails.recurringPriceWithCurrency + ' ' + requestItemDetails.recurringFrequency + '&lt;/span&gt;';
            }
            finalPrice = finalPrice + '&lt;span style="font-size:14px;font-weight: 600"&gt; each&lt;/span&gt;';
            template.print('&lt;div style="font-size: 16px; line-height:24px"&gt;Price: ' + finalPrice + '&lt;/div&gt;');
        }
    },

    /**
     * create Request item variables content
     * @param requestItem - requestItem
     * @param template - templatePrinter
     */
    setRequestItemVariablestoTemplate: function(requestItem, template) {
        var self = this;
        var fontSize = 'font-size: 16px;';
        var lineHeight = 'line-height: 24px;';
        var ATTACHMENT_VARIABLE_TYPE = 33;
        template.print('&lt;div style="' + fontSize + lineHeight + '"&gt;' + gs.getMessage("Options:") + '&lt;/div&gt;');
        requestItem.variables.forEach(function(variable) {
            if (variable.type === ATTACHMENT_VARIABLE_TYPE) {
                self.addAttachmentLinkToRequestItemTemplate(requestItem.sysId, variable, template);
            } else {
                var variableValue = variable.value;
                if (variableValue == 'true') {
                    variableValue = gs.getMessage("Yes");
                } else if (variableValue == 'false') {
                    variableValue = gs.getMessage("No");
                }
                template.print('&lt;div style="' + fontSize + lineHeight + 'padding-left:24px;"&gt;' + variable.label + ': &lt;b style="font-weight: 600;"&gt;' + ' ' + variableValue + "&lt;/b&gt;&lt;br/&gt;&lt;/div&gt;");
            }
        });
    },

    /**
     * add attachment link to request item variables template
     * @param requestItemSysId - requestItem sys_id
     * @param variable - requestItem attachment variable
     * @param template - templatePrinter
     */
    addAttachmentLinkToRequestItemTemplate: function(requestItemSysId, variable, template) {
        var fontSize = 'font-size: 16px;';
        var lineHeight = 'line-height: 24px;';
        var sysAttachmentGr = new GlideRecord('sys_attachment');
        sysAttachmentGr.addQuery('table_sys_id', requestItemSysId);
        sysAttachmentGr.query();
        if (sysAttachmentGr.next()) {
            var attachmentDownloadLink = '/sys_attachment.do?sys_id=' + sysAttachmentGr.sys_id;
            template.print('&lt;div style="' + fontSize + lineHeight + 'padding-left:24px;"&gt;' + variable.label + ': &lt;a href=' + attachmentDownloadLink + ' style="color: #3C59E7;font-weight: 600;"&gt;' + ' ' + variable.value + "&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;");
        }
    },
    /**
     * generates the greeting message dynamically based on receipients fields
     * @param requestGR - request record
     * @param notificationGR - notification record
     */
    setGreetingsMessage: function(requestGR, notificationGR) {
        var recipients = notificationGR.recipient_fields.split(",");
        var watchListIndex = recipients.indexOf("watch_list");
        if (watchListIndex &gt; -1)
            recipients.splice(watchListIndex, 1);

        if (((recipients.length == 2) &amp;&amp; recipients.indexOf("opened_by") !== -1) &amp;&amp; (recipients.indexOf("requested_for") !== -1)) {
            if (requestGR.requested_for == requestGR.opened_by)
                return gs.getMessage("Hi {0},", [requestGR.requested_for.first_name]);
            else
                return gs.getMessage("Hi there,");
        } else if (recipients.length == 1) {
            var requestObj = requestGR;
            var fields = recipients[0].split(".");
            fields.forEach(function(item) {
                requestObj = requestObj[item];
            });
            if (requestObj.sys_class_name == 'sys_user')
                return gs.getMessage("Hi {0},", requestObj.first_name);
            else
                return gs.getMessage("Hi there,");
        } else
            return gs.getMessage("Hi there,");
    },

    type: 'RequestNotificationUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-21 11:21:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b21bda22b4ee3c10f87755e926c386b9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;30&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RequestNotificationUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;3607b4283cb1311068bcf327dfe37fee&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b21bda22b4ee3c10f87755e926c386b9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-18 13:04:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:12</sys_created_on>
        <sys_id>2b00899d83341210c6695855eeaad3f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RequestNotificationUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2b00899d83341210c6695855eeaad3f4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:12</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
