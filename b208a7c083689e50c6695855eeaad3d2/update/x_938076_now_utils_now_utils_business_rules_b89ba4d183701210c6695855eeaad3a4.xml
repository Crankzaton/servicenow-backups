<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Access Token</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var currJson = current.getValue("service_account_json");

    //validations
    if (!currJson) {
        gs.addErrorMessage(gs.getMessage('Service Account Json cannot be empty'));
        current.setAbortAction(true);
        return;
    }

    if (current.operation() == "insert") {
        refreshAccessTokenAndUpdate();
        return;
    }

    if (current.operation() == "update") {
        var prevJson = previous.getValue("service_account_json");
        if (currJson != prevJson) {
            refreshAccessTokenAndUpdate();
        }
  if(current.getValue('auth_token') != previous.getValue('auth_token')) {
   gs.addErrorMessage(gs.getMessage('Auth Token cannot be manually updated'));
   current.setAbortAction(true);
   return;
  }
    }

    function refreshAccessTokenAndUpdate() {
        var currDecryptedJson = current.service_account_json.getDecryptedValue();
        var accessToken = JSON.parse(SNC.FcmAuthTokenUtil.refreshFcmAccessToken(currDecryptedJson));
        if (accessToken && accessToken.tokenValue && accessToken.expirationTimeMillis) {
            current.auth_token = accessToken.tokenValue;
            var gdt = new GlideDateTime();
            gdt.setValue(accessToken.expirationTimeMillis);
            current.token_expiry_on = gdt.getDisplayValue();
        } else {
            gs.error('FCM Oauth HTTP V1 API: accessToken or tokenValue or expirationTimeMillis are empty for ' +
                current.sys_id);
            gs.addErrorMessage(gs.getMessage('Unable to update Access Token'));
            current.setAbortAction(true);
        }
    }


})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:42</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b89ba4d183701210c6695855eeaad3a4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Access Token</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_b89ba4d183701210c6695855eeaad3a4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:42</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=b89ba4d183701210c6695855eeaad3a4"/>
</record_update>
