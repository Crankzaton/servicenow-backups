<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check Requested For on variable set</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 if (shouldSkipExecution(current))
  return;

 var catItem = current.sc_cat_item;
 var variableSet = current.variable_set;
 var requestedForUtil = new RequestedForUtil();
 //In case of update operation, if the outgoing variable_set has requested for, 
 //then there is no need to do item check as the outgoing VS had the requested for.
 if(current.operation() == "update" && current.variable_set.changes() && requestedForUtil.hasRequestedForOnVariableSet(previous.variable_set)) {
  return;
 }
 //Check requested for on item and variable set that they both do not have a requested for variable
 if (requestedForUtil.hasRequestedForOnVariableSet(variableSet) && requestedForUtil.hasRequestedForOnItem(catItem)) {
  gs.addErrorMessage(gs.getMessage("You cannot associate {0} with {1} since the item already includes a Requested For variable. {2}", [variableSet.getDisplayValue(), catItem.getDisplayValue(), requestedForUtil.getDocumentationLink()]));
  current.setAbortAction(true);
  return;
 }

 function shouldSkipExecution(current) {
  return shouldSkipByProcess(current) || !(current.sc_cat_item.changes() || current.variable_set.changes());
 }
 function shouldSkipByProcess(current) {
  return JSUtil.has(new global.SNCCatalogUtil().isProcessBuilder) && new global.SNCCatalogUtil().isProcessBuilder(current, ['checkout','publish']);
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>048b6c9183701210c6695855eeaad33f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check Requested For on variable set</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_048b6c9183701210c6695855eeaad33f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:23</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=048b6c9183701210c6695855eeaad33f"/>
</record_update>
