<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6f6d823b5b044110d9a5ce1a8581c754</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WorkspaceSearchConfigurationService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Script include for relating workspaces and their Search Application Configurations&lt;/description&gt;
        &lt;name&gt;WorkspaceSearchConfigurationService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WorkspaceSearchConfigurationService = Class.create();
WorkspaceSearchConfigurationService.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    type: 'WorkspaceSearchConfigurationService',

    USER_PREFERENCES_TABLE: 'sys_user_preference',
    LEGACY_PREFERENCE_NAME: 'workspace.globalSearch.recentActions',
    PREFIX: 'globalSearch.now/',
    GLOBAL_SEARCH_PATH: 'nav/ui',
    WORKSPACE_CATEGORY_ID: 'afb4e3e173322010f0ca1e666bf6a726',
    UNIFIED_NAV_APP_ID: 'c86a62e2c7022010099a308dc7c26022',

    /**
     * Returns a list of workspaces (name and workspaceID) that are configured to
     * use the specified Search Application Configuration
     */
    getWorkspacesBySearchAppConfigID: function() {
        if (!gs.hasRole('search_application_admin')) {
            return 'The search_application_admin role is required to execute this script';
        }
        var sacID = this.getParameter('sysparm_sac_id');
        var propertiesGR = new GlideRecord('sys_ux_page_property');
        propertiesGR.addQuery('name', 'globalSearchDataConfigId');
        propertiesGR.addQuery('value', sacID);
        propertiesGR.query();
        var response = [];
        while (propertiesGR.next()) {
            response.push({
                'name': propertiesGR.getDisplayValue('page'),
                'workspaceID': propertiesGR.getValue('page')
            });
        }
        return JSON.stringify(response);
    },

    /**
     * Returns a list of the relative URL paths for search-enabled workspaces (e.g. "cwf/agent")
     */
    getGlobalSearchContextURLs: function() {
        if (!gs.hasRole('search_application_admin')) {
            return 'The search_application_admin role is required to execute this script';
        }
        var response = [this.GLOBAL_SEARCH_PATH];

        var uxApps = new GlideRecord('sys_ux_registry_m2m_category');
        // Only get Workspaces
        uxApps.addQuery('experience_category', this.WORKSPACE_CATEGORY_ID);
        // Only get workspaces with the 'Unified Navigation App Shell' parent app
        uxApps.addQuery('page_registry.parent_app', this.UNIFIED_NAV_APP_ID);

        // Only get the workspaces where search is enabled in the chrome_header property, and 
        // there are globalSearchDataConfigId and global_search_configurations properties
        var propertyJoin = uxApps.addJoinQuery('sys_ux_page_property', 'page_registry', 'page');
        propertyJoin.addCondition('name', 'chrome_header');
        propertyJoin.addCondition('value', 'CONTAINS', 'searchEnabled": true');

        var propertyJoin2 = uxApps.addJoinQuery('sys_ux_page_property', 'page_registry', 'page');
        propertyJoin2.addCondition('name', 'globalSearchDataConfigId');

        var propertyJoin3 = uxApps.addJoinQuery('sys_ux_page_property', 'page_registry', 'page');
        propertyJoin3.addCondition('name', 'global_search_configurations');

        uxApps.query();
        while (uxApps.next()) {
            response.push(uxApps.page_registry.path);
        }
        return response;
    },

    /**
     * Copies over the workspace suggestion values provided in "existingValues" to a new 
     * preference named after the provided path. 
     *
     * It will first create the preference if it doesn't exist, else it will 
     * overwrite the values if it does
     */
    copySuggestionsForUser: function(paths, user, existingValue) {
        var parentScope = this;
        paths.forEach(function(path) {
            var userPrefRecord = new GlideRecord(parentScope.USER_PREFERENCES_TABLE);
            userPrefRecord.addQuery('name', parentScope.PREFIX + path);
            userPrefRecord.addQuery('user', user);
            userPrefRecord.query();
            if (!userPrefRecord.next()) {
                userPrefRecord.initialize();
                userPrefRecord.setValue('user', user);
                userPrefRecord.setValue('name', parentScope.PREFIX + path);
                userPrefRecord.setValue('value', existingValue);
                userPrefRecord.insert();
            } else {
                userPrefRecord.setValue('value', existingValue);
                userPrefRecord.update();
            }
        });
    },

    /**
     * Copies over user suggestion preferences from the legacy workspace 
     * preference (workspace.globalSearch.recentActions) to the new preference 
     * for each workspace, plus global search
     */
    copyLegacySuggestionsForPolaris: function() {
        var paths = this.getGlobalSearchContextURLs();
        var userPrefs = new GlideRecord(this.USER_PREFERENCES_TABLE);
        userPrefs.addQuery('name', this.LEGACY_PREFERENCE_NAME);
        userPrefs.query();
        while (userPrefs.next()) {
            this.copySuggestionsForUser(paths, userPrefs.getValue('user'), userPrefs.getValue('value'));
        }
    }
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-12-02 21:45:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6f6d823b5b044110d9a5ce1a8581c754&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WorkspaceSearchConfigurationService&lt;/sys_name&gt;
        &lt;sys_package display_value="Text Search API" source="com.glide.search"&gt;c93878203cf1311068bcf327dfe37f61&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6f6d823b5b044110d9a5ce1a8581c754&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-10-20 02:29:05&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:29</sys_created_on>
        <sys_id>75f6b05d83f01210c6695855eeaad3cc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WorkspaceSearchConfigurationService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_75f6b05d83f01210c6695855eeaad3cc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
