<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>05ee3976ff612110468365d7d3b8fed5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UserRoleDaoV1&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UserRoleDaoV1&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UserRoleDaoV1 = Class.create();
UserRoleDaoV1.prototype = {
    initialize: function() {},

    /**
     * Retrieves the roleIds associated to the license provided
     *
     * @param {guid} licenseId The license_details.sys_id to filter the sys_user_role records by
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     * @return {array} An array of sys_user_role.sys_id values
     */
    getUserRoleIdsByLicenseId: function(licenseId, oobRolesOnly) {
        const gr = this._createGlideQueryForLicenseDetailsAssociatedRoles(licenseId, oobRolesOnly);
        gr.query();

        return this._mapAssocRoleRecordsToLicenseRoleIds(gr);
    },

    /**
     * Retrieves the roleIds (sys_ids) associated to the licenseId (sys_id) provided
     * filtered down to just the license_role_type.sys_id values provided
     *
     * @param {guid} licenseId The license_details.sys_id to filter the sys_user_role records by
     * @param {array} licenseRoleTypeNames The license_role_type.name values to limit the results by
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     * @return {array} An array of sys_user_role.sys_id values
     */
    getUserRoleIdsByLicenseIdAndLicenseRoleTypeNames: function(licenseId, licenseRoleTypeNames, oobRolesOnly) {
        const gr = this._createGlideQueryForLicenseDetailsAssociatedRoles(licenseId, oobRolesOnly);
        gr.addQuery('lr_license_role_type', 'IN', licenseRoleTypeNames);
        gr.query();

        return this._mapAssocRoleRecordsToLicenseRoleIds(gr);
    },

    /**
     * Pre-configures the common query that is likely to always be used when reading from
     * license_details_assoc_roles and returns the pre-configured GlideRecord
     *
     * @param {guid} licenseId The license_details.sys_id to filter the sys_user_role records by
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     * @return {GlideRecord} A pre-configured GlideRecord query
     */
    _createGlideQueryForLicenseDetailsAssociatedRoles: function(licenseId, oobRolesOnly) {
        const gr = new GlideRecord('license_details_assoc_roles');
        gr.addQuery('lhf_license', licenseId);

        if (oobRolesOnly)
            gr.addQuery('lr_category', 0); // 0 is the value for "ServiceNow OOB"; 1 is the value for "Custom"

        return gr;
    },

    /**
     * Retrieves the distinct sys_user_role.sys_id values from a license_details_assoc_roles query
     *
     * @param {GlideRecord} The glide record that has been queried and has records to process
     * @return {array} An array of sys_user_role.sys_id values for the related roles
     */
    _mapAssocRoleRecordsToLicenseRoleIds: function(gr) {
        const ids = new Set();
        while (gr.next())
            if (gr.lr_sys_user_role.sys_id)
                ids.add(String(gr.lr_sys_user_role.sys_id));
        return Array.from(ids);
    },

    type: 'UserRoleDaoV1'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-17 00:02:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;05ee3976ff612110468365d7d3b8fed5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UserRoleDaoV1&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_05ee3976ff612110468365d7d3b8fed5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-20 19:01:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:20</sys_created_on>
        <sys_id>be40fc5583b01210c6695855eeaad377</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UserRoleDaoV1</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_be40fc5583b01210c6695855eeaad377</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:20</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
