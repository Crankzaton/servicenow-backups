<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0582ee58c33111003d2ae219cdba8fa8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.sc_ic_Section&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Wrapper class for Item Creator question layout sections&lt;/description&gt;
        &lt;name&gt;sc_ic_Section&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var sc_ic_Section = Class.create();
sc_ic_Section.prototype = Object.extendsObject(sc_ic_Base, {
    initialize: function(_gr,_gs) {
		sc_ic_Base.prototype.initialize.call(this,_gr,_gs);

		this._defnChgFld = {
			"index": true,
			"label":true
		};
    },
	
	sectionChanged: function() {
		for (var key in this._defnChgFld)
			if (this._defnChgFld[key] &amp;&amp; this._gr[key].changes()) {
				this._log.debug("[sectionChanged] Section has changed");
				return true;
			}
		
		return false;
	},

	setLayoutChangedOnItem: function() {
		var iGr = new GlideRecord(sc_ic.ITEM_STAGING);
		if (iGr.get(this._gr[sc_ic.ITEM_STAGING])) {
			this._log.debug("[setLayoutChangedOnItem] Changed Item " + this._gr[sc_ic.ITEM_STAGING]);
			sc_ic_Factory.wrap(iGr).layoutChanged();
		}
	},
	
	createDefaultColumns: function() {
		var columnGr = new GlideRecord(sc_ic.COLUMN);
		columnGr[sc_ic.SECTION] = this._gr.getUniqueValue();
		columnGr.name = "Left column";
		columnGr[sc_ic.INDEX] = 0;
		columnGr.insert();
			
		columnGr.initialize();
		columnGr[sc_ic.SECTION] = this._gr.getUniqueValue();
		columnGr.name = "Right column";
		columnGr[sc_ic.INDEX] = 1;
		columnGr.insert();
	},
	
	isDuplicate: function() {
		if (JSUtil.nil(this._gr[sc_ic.ITEM_STAGING]) || JSUtil.nil(this._gr[sc_ic.INDEX]))
			return false;
		
		var sectionGr = new GlideRecord(sc_ic.SECTION);
		sectionGr.addQuery(sc_ic.ITEM_STAGING, this._gr[sc_ic.ITEM_STAGING]);
		sectionGr.addQuery(sc_ic.INDEX, this._gr[sc_ic.INDEX]);
		sectionGr.query();
				
		if (sectionGr.hasNext())
			return true;
		
		return false;
	},
	
	getNextQuestionOrderNumber: function() {
		var questionGr = new GlideAggregate(sc_ic.QUESTION);
		questionGr.addAggregate("MAX", "order");
		questionGr.addNotNullQuery("order");
		questionGr.addQuery(sc_ic.SECTION, this._gr.getUniqueValue());
		questionGr.groupBy(sc_ic.SECTION);
		questionGr.query();
	
		if (questionGr.next()) {
			return "" + (1 + parseInt(questionGr.getAggregate("MAX", "order"), 10));
		}
	
		return 1;
	},
	
	isProducerServiceItem: function() {
		return JSUtil.nil(this._gr[sc_ic.ITEM_STAGING][sc_ic.ITEM_TYPE]) || this._gr[sc_ic.ITEM_STAGING][sc_ic.ITEM_TYPE] == "sc_cat_item_producer_service";	
	},
	
	isUsedByQuestions: function() {
		var questionGr = new GlideAggregate(sc_ic.QUESTION);
		questionGr.addQuery(sc_ic.SECTION, this._gr.getUniqueValue());
		questionGr.addAggregate("COUNT");
		questionGr.query();
		
		if (questionGr.next() &amp; questionGr.getAggregate("COUNT") &gt; 0)
			return true;
			
		return false;
	},

    type: 'sc_ic_Section'
});

sc_ic_Section.getNextPosition = function(itemSysId, returnDisplayValue) {
	var nextPosition = (returnDisplayValue ? 1 : 0);

	if (JSUtil.nil(itemSysId))
		return nextPosition;
	
	var sectionGr = new GlideAggregate(sc_ic.SECTION);
	sectionGr.addAggregate("MAX", "index");
	sectionGr.addQuery(sc_ic.ITEM_STAGING, itemSysId);
	sectionGr.groupBy(sc_ic.ITEM_STAGING);
	sectionGr.query();
	
	if (sectionGr.next()) {
		return "" + (nextPosition + 1 + parseInt(sectionGr.getAggregate("MAX", "index"), 10));
	}
	
	return nextPosition;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;chris.henson&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-12-18 11:15:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0582ee58c33111003d2ae219cdba8fa8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;sc_ic_Section&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;3607b4283cb1311068bcf327dfe37fee&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0582ee58c33111003d2ae219cdba8fa8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;nigel.bell&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2014-03-09 20:38:38&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:17</sys_created_on>
        <sys_id>4e40fc5583b01210c6695855eeaad313</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sc_ic_Section</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4e40fc5583b01210c6695855eeaad313</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:17</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
