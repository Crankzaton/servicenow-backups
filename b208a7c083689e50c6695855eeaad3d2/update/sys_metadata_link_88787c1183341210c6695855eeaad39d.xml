<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>880b4f36770da1109c62f5f3cb5a99e7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.SubscriptionHasAppDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO class to retrieve data related to subscription_has_app table&lt;/description&gt;
        &lt;name&gt;SubscriptionHasAppDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SubscriptionHasAppDAO = Class.create();
SubscriptionHasAppDAO.prototype = {
    initialize: function() {
        this.logger = new LoggingUtil();
    },

    getActiveSubscriptionsForApp: function(appId) {
        var activeAppSubscriptions = [];
        var appSubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_APP);
        if (appSubscriptionGR.isValid() &amp;&amp; appSubscriptionGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION) &amp;&amp;
            appSubscriptionGR.isValidField(LicensingEngineDBConstants.APPLICATION)) {
            var appIdField = LicensingEngineDBConstants.APPLICATION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.APP_ID);
            appSubscriptionGR.addQuery(appIdField, appId);
            var subscriptionStatusField = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
            appSubscriptionGR.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);
            appSubscriptionGR.query();
            while (appSubscriptionGR.next())
                activeAppSubscriptions.push(appSubscriptionGR.getValue(LicensingEngineDBConstants.SUBSCRIPTION));
            if (activeAppSubscriptions.length === 0 &amp;&amp; this.logger.isEntitlementLoggingEnabled()) {
                var conditionsString = LicensingEngineDBConstants.APPLICATION.concat(LicensingEngineConstants.COMMA).concat(appId).concat(LicensingEngineConstants.COMMA)
                    .concat(subscriptionStatusField).concat(LicensingEngineConstants.COMMA).concat(LicensingEngineConstants.ACTIVE_STATUS);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.SUBSCRIPTION_HAS_APP_DAO, LicensingEngineDBConstants.SUBSCRIPTION_HAS_APP, conditionsString);
            }
        }
		
        if (activeAppSubscriptions.length === 0 &amp;&amp; this.logger.isEntitlementLoggingEnabled())
            this.logger.logCouldNotDetermine(LicensingEngineConstants.SUBSCRIPTION_HAS_APP_DAO, LicensingEngineConstants.GET_ACTIVE_SUBSCRIPTIONS_FOR_APP,
                LicensingEngineConstants.ACTIVE_ASSOCIATED_SUBSCRIPTIONS.concat(LicensingEngineConstants.COLON).concat(appId));

        return activeAppSubscriptions;
    },


    getActiveSubscriptionMapForApps: function(appIdList) {
        let appToSubscriptionMap = {};
        try {
            let subscriptionAppGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_APP);
            if (subscriptionAppGR.isValid() &amp;&amp; subscriptionAppGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION) &amp;&amp;
                subscriptionAppGR.isValidField(LicensingEngineDBConstants.APPLICATION)) {
                const appIdField = LicensingEngineDBConstants.APPLICATION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.APP_ID);

                subscriptionAppGR.addQuery(appIdField, LicensingEngineDBConstants.IN, appIdList);
                const subscriptionStatusField = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
                subscriptionAppGR.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);
                subscriptionAppGR.query();
                while (subscriptionAppGR.next()) {
                    let activeAppSubscriptions = [];
                    const appId = subscriptionAppGR.getElement(appIdField);

                    if (appToSubscriptionMap[appId] != undefined)
                        activeAppSubscriptions = appToSubscriptionMap[appId];

                    activeAppSubscriptions.push(subscriptionAppGR.getValue(LicensingEngineDBConstants.SUBSCRIPTION));
                    appToSubscriptionMap[appId] = activeAppSubscriptions;
                }

                const appIds = appIdList.split(LicensingEngineConstants.COMMA);
                // Identifies if the record doesn't exist for an app.
                appIds.forEach(function(appId) {
                    if (appToSubscriptionMap[appId] == undefined) {
                        appToSubscriptionMap[appId] = [];
                        const logger = new LoggingUtil();
                        const conditionsString = LicensingEngineDBConstants.APPLICATION.concat(LicensingEngineConstants.COMMA).concat(appId);
                        logger.logRecordDoesNotExists(LicensingEngineConstants.SUBSCRIPTION_HAS_APP_DAO, LicensingEngineDBConstants.SUBSCRIPTION_HAS_APP, conditionsString);
                    }
                });
            }
        } catch (error) {
            this.logger.logError(LicensingEngineConstants.SUBSCRIPTION_HAS_APP_DAO, LicensingEngineConstants.GET_ACTIVE_SUBSCRIPTION_MAP,
                error);
        }
        return appToSubscriptionMap;
    },


	getActiveSubscriptionSysIdsForApp: function(appId) {
        let activeAppSubscriptions = [];
        const appSubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_APP);
        if (appSubscriptionGR.isValid() &amp;&amp; appSubscriptionGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION) &amp;&amp;
            appSubscriptionGR.isValidField(LicensingEngineDBConstants.APPLICATION)) {
            const appIdField = LicensingEngineDBConstants.APPLICATION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.APP_ID);
            appSubscriptionGR.addQuery(appIdField, appId);
            const subscriptionStatusField = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
            appSubscriptionGR.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);
            appSubscriptionGR.query();
            while (appSubscriptionGR.next())
                activeAppSubscriptions.push(appSubscriptionGR.getElement(LicensingEngineDBConstants.SUBSCRIPTION_SYS_ID));
            if (activeAppSubscriptions.length === 0 &amp;&amp; this.logger.isEntitlementLoggingEnabled()) {
                var conditionsString = LicensingEngineDBConstants.APPLICATION.concat(LicensingEngineConstants.COMMA).concat(appId).concat(LicensingEngineConstants.COMMA)
                    .concat(subscriptionStatusField).concat(LicensingEngineConstants.COMMA).concat(LicensingEngineConstants.ACTIVE_STATUS);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.SUBSCRIPTION_HAS_APP_DAO, LicensingEngineDBConstants.SUBSCRIPTION_HAS_APP, conditionsString);
            }
        }
		
        if (activeAppSubscriptions.length === 0 &amp;&amp; this.logger.isEntitlementLoggingEnabled())
            this.logger.logCouldNotDetermine(LicensingEngineConstants.SUBSCRIPTION_HAS_APP_DAO, LicensingEngineConstants.GET_ACTIVE_SUBSCRIPTIONS_SYS_ID_FOR_APP,
                LicensingEngineConstants.ACTIVE_ASSOCIATED_SUBSCRIPTIONS.concat(LicensingEngineConstants.COLON).concat(appId));

        return activeAppSubscriptions;
    },

    type: 'SubscriptionHasAppDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-20 08:58:22&lt;/sys_created_on&gt;
        &lt;sys_id&gt;880b4f36770da1109c62f5f3cb5a99e7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SubscriptionHasAppDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_880b4f36770da1109c62f5f3cb5a99e7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-08 18:22:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:55</sys_created_on>
        <sys_id>88787c1183341210c6695855eeaad39d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SubscriptionHasAppDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_88787c1183341210c6695855eeaad39d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
