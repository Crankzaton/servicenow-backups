<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5c2fed69777a6010b2b4ddd9cf5a9909</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FlowDesignerInstanceHealth&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Grabs diagnostic info for flow's action/subflow instances&lt;/description&gt;
        &lt;name&gt;FlowDesignerInstanceHealth&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FlowDesignerInstanceHealth = Class.create();
FlowDesignerInstanceHealth.prototype = {
    initialize: function initialize(flowSysId) {
		this.flowSysId = flowSysId;
    },
	
    type: 'FlowDesignerInstanceHealth',
	
	getActionInstanceValidity: function getActionInstanceValidity() {
		this.actionInstance = new GlideRecord('sys_hub_action_instance');
		this.actionInstance.addQuery('flow', this.flowSysId);
		this.actionInstance.query();
		
		this.actionInstanceInputs = [];
		this.actionTypeInputDefs = [];
		this.actionUnexpectedInputs = [];
		this.actionInstanceOutputs = [];
		this.actionTypeOutputDefs = [];
		this.actionUnexpectedOutputs = [];
		this.displaySeparator = '-----';
		this.actionTypeExistCount = 0;
		this.actionTypeParentExistCount = 0;
		this.actionTypeParentTotal = 0;
		this.actionExpectedInputValidCount = 0;
		this.actionExpectedInputTotal = 0;
		this.actionUnexpectedInputsCount = 0;
		this.actionExpectedOutValidCount = 0;
		this.actionExpectedOutTotal = 0;
		this.actionUnexpectedOutputsCount = 0;
		
		while (this.actionInstance.next()) {
			// Get the action type
			this.actionType = new GlideRecord('sys_hub_action_type_snapshot');
			
			// Track each action instance
			if (this.actionType.get(this.actionInstance.action_type)) {
				this.actionTypeExistCount++;
			}
			var actionTypeHeader = this.actionType.name + ' (' + this.actionInstance.action_type.toString() + ')';
			
			// If the action has a parent, verify its existence
			if (this.actionInstance.action_type_parent) {
				this.actionTypeParentTotal++;
				this.actionTypeParent = new GlideRecord('sys_hub_action_type_definition');
				if (this.actionTypeParent.get(this.actionInstance.action_type_parent)) {
					this.actionTypeParentExistCount++;
				}
			}
			
			// Track each input definition
			this.actionInputDef = new GlideRecord('sys_hub_action_input');
			this.actionInputDef.addQuery('model', this.actionInstance.action_type);
			this.actionInputDef.query();
			this.actionExpectedInputTotal += this.actionInputDef.getRowCount();
			
			// Adding to arrays for tracking of instance vs definition inputs, if any
			if (this.actionInputDef.getRowCount() &gt; 0) {
				this.actionInstanceInputs.push(actionTypeHeader);
				this.actionTypeInputDefs.push(actionTypeHeader);
			}
			
			// Check that if the input is mandatory, that the instance value exists
			// Or if it's not mandatory, that the instance recognizes it
			while (this.actionInputDef.next()) {
				this.actionTypeInputDefs.push(this.actionInputDef.element.toString());
				var nextActionInputValue = this.actionInstance.action_inputs[this.actionInputDef.element];
				if (this.actionInstance.action_inputs.hasOwnProperty(this.actionInputDef.element)) {
					if (this.actionInputDef.mandatory &amp;&amp; 
						!nextActionInputValue.hasValue() &amp;&amp; !nextActionInputValue.hasMapping()) {
						this.actionInstanceInputs.push('FOUND, BUT NO VALUE ON INSTANCE');
					}
					else {
						this.actionExpectedInputValidCount++;
						this.actionInstanceInputs.push(this.actionInputDef.element.toString());
					}
				}
				else {
					this.actionInstanceInputs.push('NOT FOUND ON INSTANCE');
				}
			}
			
			// Add separator for "inputs" if any were found this iteration
			if (this.actionInputDef.getRowCount() &gt; 0) {
				this.actionInstanceInputs.push(this.displaySeparator);
				this.actionTypeInputDefs.push(this.displaySeparator);
			}
			
			// Check for any unexpected inputs
			var unexpectedInFound = false;
			for (var input in this.actionInstance.action_inputs) {
				if (input !== 'sys_meta' &amp;&amp; input !== 'sys_id') {				
					var inputFound = false;
					for (var j = 0; j &lt; this.actionTypeInputDefs.length; j++) {
						if (this.actionTypeInputDefs[j] === input) {
							inputFound = true;
						}
					}

					if (!inputFound) {
						if (!unexpectedInFound) {
							this.actionUnexpectedInputs.push(actionTypeHeader);
						}

						this.actionUnexpectedInputs.push(input);
						this.actionUnexpectedInputsCount++;
						unexpectedInFound = true;
					}
				}
			}
			
			// Add separator for "unexpected inputs" if any were found this iteration
			if (unexpectedInFound) {
				this.actionUnexpectedInputs.push(this.displaySeparator);
			}
			
			// Track each output definition
			this.actionOutputDef = new GlideRecord('sys_hub_action_output');
			this.actionOutputDef.addQuery('model', this.actionInstance.action_type);
			this.actionOutputDef.query();
			this.actionExpectedOutTotal += this.actionOutputDef.getRowCount();
			
			// Adding to arrays for tracking of instance vs definition outputs, if any
			if (this.actionOutputDef.getRowCount() &gt; 0) {
				this.actionInstanceOutputs.push(actionTypeHeader);
				this.actionTypeOutputDefs.push(actionTypeHeader);
			}
			
			// Check that each output on the action type snapshot is valid
			while (this.actionOutputDef.next()) {
				this.actionTypeOutputDefs.push(this.actionOutputDef.element.toString());
				if (this.actionType.outputs.hasOwnProperty(this.actionOutputDef.element)) {
					this.actionExpectedOutValidCount++;
					this.actionInstanceOutputs.push(this.actionOutputDef.element.toString());
				} else {
					this.actionInstanceOutputs.push('NOT FOUND ON SNAPSHOT');
				}
			}			
			
			// Add separator for "outputs" if any were found this iteration
			if (this.actionOutputDef.getRowCount() &gt; 0) {			
				this.actionInstanceOutputs.push(this.displaySeparator);
				this.actionTypeOutputDefs.push(this.displaySeparator);
			}
			
			// Check for any unexpected outputs
			var unexpectedOutFound = false;
			for (var output in this.actionType.outputs) {
				if (output !== 'sys_meta' &amp;&amp; output !== 'sys_id') {
					var outputFound = false;
					for (var outIndex = 0; outIndex &lt; this.actionTypeOutputDefs.length; outIndex++) {
						if (this.actionTypeOutputDefs[outIndex] === output) {
							outputFound = true;
						}
					}

					if (!outputFound) {
						if (!unexpectedOutFound) {
							this.actionUnexpectedOutputs.push(actionTypeHeader);
						}

						this.actionUnexpectedOutputs.push(output);
						this.actionUnexpectedOutputsCount++;
						unexpectedOutFound = true;
					}
				}
			}
			
			// Add separator for "unexpected outputs" if any were found this iteration
			if (unexpectedOutFound) {
				this.actionUnexpectedOutputs.push(this.displaySeparator);
			}
		}
		
		var result = {
			areValid: this.actionTypeExistCount === this.actionInstance.getRowCount(),
			totalValid: this.actionTypeExistCount,
			totalChecked: this.actionInstance.getRowCount(),
			areParentsValid: this.actionTypeParentExistCount === this.actionTypeParentTotal,
			totalParentsValid: this.actionTypeParentExistCount,
			totalParentsChecked: this.actionTypeParentTotal,
			areInputsValid: this.actionExpectedInputValidCount === this.actionExpectedInputTotal,
			totalInputsValid: this.actionExpectedInputValidCount,
			totalInputsChecked: this.actionExpectedInputTotal,
			totalUnexpectedInputs: this.actionUnexpectedInputsCount,
			areOutputsValid: this.actionExpectedOutValidCount === this.actionExpectedOutTotal,
			totalOutputsValid: this.actionExpectedOutValidCount,
			totalOutputsChecked: this.actionExpectedOutTotal,
			totalUnexpectedOutputs: this.actionUnexpectedOutputsCount,
			instanceInputs: this.actionInstanceInputs.join(','),
			defInputs: this.actionTypeInputDefs.join(','),
			unexpectedInputs: this.actionUnexpectedInputs.join(','),
			instanceOutputs: this.actionInstanceOutputs.join(','),
			defOutputs: this.actionTypeOutputDefs.join(','),
			unexpectedOutputs: this.actionUnexpectedOutputs.join(',')
		};
		
		result.areValidComplete = result.areValid &amp;&amp; result.areParentsValid &amp;&amp;
			result.areInputsValid &amp;&amp; result.totalUnexpectedInputs === 0 &amp;&amp;
			result.areOutputsValid &amp;&amp; result.totalUnexpectedOutputs === 0;
		
		return result;
	},
	
	getActionInstanceSnapshotValidity: function getActionInstanceSnapshotValidity() {
		return sn_fd_health.ScriptableFlowHealthCheck.validateActionInstanceSnapshots(this.flowSysId);
	},
	
	getSubflowInstanceValidity: function getSubflowInstanceValidity() {
		this.subflowInstance = new GlideRecord('sys_hub_sub_flow_instance');
		this.subflowInstance.addQuery('flow', this.flowSysId);
		this.subflowInstance.query();
		
		this.subflowInstances = [];
		this.subflowBases = [];
		this.subflowInputs = [];
		this.subflowInputDefs = [];
		this.subflowUnexpectedInputs = [];
		this.subflowOutputs = [];
		this.subflowOutputDefs = [];
		this.subflowUnexpectedOutputs = [];
		this.subflowExistsCheck = true;
		this.subflowValidCount = 0;
		this.subflowExpectedInputValidCount = 0;
		this.subflowExpectedInputTotal = 0;
		this.subflowUnexpectedInputCount = 0;
		this.subflowInstanceInputTotal = 0;
		this.subflowExpectedOutValidCount = 0;
		this.subflowExpectedOutTotal = 0;
		this.subflowInstanceOutTotal = 0;
		this.subflowUnexpectedOutputCount = 0;
		
		while (this.subflowInstance.next()) {		
			if (this.subflowInstance.subflow) {
				// Get the base flow
				this.subflowBase = new GlideRecord('sys_hub_flow_base');
				this.subflowBase.get(this.subflowInstance.subflow);
				this.subflowBases.push(this.subflowBase.name);
				var subflowHeader = this.subflowBase.name + ' (' + this.subflowInstance.subflow.toString() + ')';
				
				if (this.subflowBase.active) {
					this.subflowValidCount++;
					this.subflowInstances.push(this.subflowInstance.subflow.toString());
				}
				else {
					this.subflowExistsCheck = false;
				}
			
				// Get this flow's expected inputs
				this.subflowExpectedInputDef = new GlideRecord('sys_hub_flow_input');
				this.subflowExpectedInputDef.addQuery('model', this.subflowInstance.subflow);
				this.subflowExpectedInputDef.query();
				this.subflowExpectedInputTotal += this.subflowExpectedInputDef.getRowCount();
			
				// Adding to arrays for tracking of instance/definition inputs, if any
				if (this.subflowExpectedInputDef.getRowCount() &gt; 0) {
					this.subflowInputs.push(subflowHeader);
					this.subflowInputDefs.push(subflowHeader);
				}
				
				// Check that if the input is mandatory, that the instance value exists
				// Or if it's not mandatory, that the instance recognizes it
				while (this.subflowExpectedInputDef.next()) {
					// Track each input definition
					this.subflowInputDefs.push(this.subflowExpectedInputDef.element.toString());
					var nextSubflowInputValue = this.subflowInstance.inputs[this.subflowExpectedInputDef.element];
					
					if (this.subflowInstance.inputs.hasOwnProperty(this.subflowExpectedInputDef.element)) {
						if (this.subflowExpectedInputDef.mandatory &amp;&amp; 
							!nextSubflowInputValue.hasValue() &amp;&amp; !nextSubflowInputValue.hasMapping()) {
							this.subflowInputs.push('FOUND, BUT NO VALUE ON INSTANCE');
						}
						else {
							this.subflowExpectedInputValidCount++;
							this.subflowInputs.push(this.subflowExpectedInputDef.element.toString());
						}
					}
					else {
						this.subflowInputs.push('NOT FOUND ON INSTANCE');
					}
			
					// Add separator for "inputs" if any were found this iteration
					if (this.subflowExpectedInputDef.getRowCount() &gt; 0) {
						this.subflowInputs.push(this.displaySeparator);
						this.subflowInputDefs.push(this.displaySeparator);
					}
				}

				// Check for any unexpected inputs
				var unexpectedInFound = false;
				for (var input in this.subflowInstance.inputs) {
					if (input !== 'sys_meta' &amp;&amp; input !== 'sys_id') {				
						var inputFound = false;
						for (var j = 0; j &lt; this.subflowInputDefs.length; j++) {
							if (this.subflowInputDefs[j] === input) {
								inputFound = true;
							}
						}

						if (!inputFound) {
							if (!unexpectedInFound) {
								this.subflowUnexpectedInputs.push(subflowHeader);
							}

							this.subflowUnexpectedInputs.push(input);
							this.subflowUnexpectedInputCount++;
							unexpectedInFound = true;
						}
					}
				}

				// Add separator for "unexpected inputs" if any were found this iteration
				if (unexpectedInFound) {
					this.subflowUnexpectedInputs.push(this.displaySeparator);
				}
				
				// Get this flow's expected outputs
				this.subflowExpectedOutDef = new GlideRecord('sys_hub_flow_output');
				this.subflowExpectedOutDef.addQuery('model', this.subflowInstance.subflow);
				this.subflowExpectedOutDef.query();
				this.subflowExpectedOutTotal += this.subflowExpectedOutDef.getRowCount();
				
				// Adding to arrays for tracking of instance/definition outputs, if any
				if (this.subflowExpectedOutDef.getRowCount() &gt; 0) {
					this.subflowOutputs.push(subflowHeader);
					this.subflowOutputDefs.push(subflowHeader);
				}
				
				// Check that each output on the flow base is valid
				while(this.subflowExpectedOutDef.next()) {
					// Track each output definition
					this.subflowOutputDefs.push(this.subflowExpectedOutDef.element.toString());
					if (this.subflowBase.outputs.hasOwnProperty(this.subflowExpectedOutDef.element)) {
						this.subflowExpectedOutValidCount++;
						this.subflowOutputs.push(this.subflowExpectedOutDef.element.toString());
					}
					else {
						this.subflowOutputs.push('NOT FOUND ON FLOW');
					}
				}		

				// Add separator for "outputs" if any were found this iteration
				if (this.subflowExpectedOutDef.getRowCount() &gt; 0) {			
					this.subflowOutputs.push(this.displaySeparator);
					this.subflowOutputDefs.push(this.displaySeparator);
				}
			
				// Check for any unexpected outputs
				var unexpectedOutFound = false;
				for (var output in this.subflowBase.outputs) {
					if (output !== 'sys_meta' &amp;&amp; output !== 'sys_id') {
						var outputFound = false;
						for (var outIndex = 0; outIndex &lt; this.subflowOutputDefs.length; outIndex++) {
							if (this.subflowOutputDefs[outIndex] === output) {
								outputFound = true;
							}
						}

						if (!outputFound) {
							if (!unexpectedOutFound) {
								this.subflowUnexpectedOutputs.push(subflowHeader);
							}

							this.subflowUnexpectedOutputs.push(output);
							this.subflowUnexpectedOutputCount++;
							unexpectedOutFound = true;
						}
					}
				}

				// Add separator for "unexpected outputs" if any were found this iteration
				if (unexpectedOutFound) {
					this.subflowUnexpectedOutputs.push(this.displaySeparator);
				}
			}
			else {
				this.subflowExistsCheck = false;
			}
		}
		
		var result = {
			areValid: this.subflowExistsCheck,
			totalValid: this.subflowValidCount,
			totalChecked: this.subflowInstance.getRowCount(),
			areInputsValid: this.subflowExpectedInputValidCount === this.subflowExpectedInputTotal,
			totalInputsValid: this.subflowExpectedInputValidCount,
			totalInputsChecked: this.subflowExpectedInputTotal,
			totalUnexpectedInputs: this.subflowUnexpectedInputCount,
			areOutputsValid: this.subflowExpectedOutValidCount === this.subflowExpectedOutTotal,
			totalOutputsValid: this.subflowExpectedOutValidCount,
			totalOutputsChecked: this.subflowExpectedOutTotal,
			totalUnexpectedOutputs: this.subflowUnexpectedOutputCount,
			subflowInstances: this.subflowInstances.join(','),
			subflowBases: this.subflowBases.join(','),
			instanceInputs: this.subflowInputs.join(','),
			defInputs: this.subflowInputDefs.join(','),
			unexpectedInputs: this.subflowUnexpectedInputs.join(','),			
			instanceOutputs: this.subflowOutputs.join(','),
			defOutputs: this.subflowOutputDefs.join(','),
			unexpectedOutputs: this.subflowUnexpectedInputs.join(',')
		};
		
		result.areValidComplete = result.areValid &amp;&amp;
			result.areInputsValid &amp;&amp; result.totalUnexpectedInputs === 0 &amp;&amp;
			result.areOutputsValid &amp;&amp; result.totalUnexpectedOutputs === 0;
		
		return result;
	}
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-09 20:25:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5c2fed69777a6010b2b4ddd9cf5a9909&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;242&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FlowDesignerInstanceHealth&lt;/sys_name&gt;
        &lt;sys_package display_value="Flow Designer - Health Check Tool" source="com.glide.hub.flow_health_check_tool"&gt;a60ab4a83cf1311068bcf327dfe37f13&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5c2fed69777a6010b2b4ddd9cf5a9909&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-30 19:59:30&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:31</sys_created_on>
        <sys_id>77b6341d83f01210c6695855eeaad359</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FlowDesignerInstanceHealth</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_77b6341d83f01210c6695855eeaad359</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:31</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
