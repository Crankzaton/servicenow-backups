<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7e200bf9b7102110045b59fd2e11a97d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_skill_cfg_page.ManageSkillsExtnPtDefault&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point sn_skill_cfg_page.ManageSkillsExtnPtDefault&amp;#13;
Allows customized query and sort order of users by group in the Manage Skills Configurable Page.&lt;/description&gt;
        &lt;name&gt;ManageSkillsExtnPtDefault&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ManageSkillsExtnPtDefault = Class.create();
ManageSkillsExtnPtDefault.prototype = {
    initialize: function() {},

    canHandle: function(params) {
        return (params.groupBy === 'department' &amp;&amp; params.parentDepartment);
    },

    /*
     * add conditions that will result in the users to be displayed on Manage Skills page
     */
    getUsers: function(params) {
        var parentDepartment = params.parentDepartment;
        var isRecursiveDepartment = params.isRecursiveDepartment;
        var pageSize = params.pageSize;
        var pageNumber = params.pageNumber;
        let depts = [];

        var gr = new GlideRecord("sys_user");
        gr.addActiveQuery();

        if (gs.nil(parentDepartment) || !this.getDepartmentGr(parentDepartment)) {
            gs.warn("Parent department not provided");
            return {
                error: true,
                errorMessage: gs.getMessage("Could not find parent department")
            };
        }

        if (isRecursiveDepartment === true) {
            depts = this.getAllDepartments(parentDepartment, isRecursiveDepartment); // populate fAllDepartments
            gr.addQuery("department", "IN", Array.from(depts).join());
        } else {
            depts.push(parentDepartment);
            gr.addQuery("department", parentDepartment);
        }

        if (params.filter &amp;&amp; params.filter.sys_user &amp;&amp; params.filter.sys_user.sys_id)
            gr.addQuery('sys_id', 'IN', params.filter.sys_user.sys_id.join(','));
        if (params.filter &amp;&amp; params.filter.sys_user &amp;&amp; params.filter.sys_user['location.city'])
            gr.addQuery('location.city', 'IN', params.filter.sys_user['location.city'].join(','));

        if (pageSize &amp;&amp; pageNumber != null) {
            pageSize = Number(pageSize);
            pageNumber = Number(pageNumber);
            if (pageSize &gt; 0 &amp;&amp; pageNumber &gt;= 0) {
                gr.chooseWindow(pageNumber * pageSize, pageNumber * pageSize + pageSize);
            }
        }
        gr.orderBy('department');
        gr.orderBy('name');
        gr.query();

        var usersList = [];
        var grpMembers = {};
        while (gr.next()) {
            var dept = gr.getValue('department');
            if (gs.nil(grpMembers[dept]))
                grpMembers[dept] = {
                    groupName: gr.getDisplayValue('department'),
                    users: []
                };
            grpMembers[dept].users.push({
                'userID': gr.getUniqueValue(),
                'userName': gr.getValue('name') || " "
            });
            usersList.push(gr.getUniqueValue());
        }
        var totalRowCount = Object.keys(params.filter).length === 0 ? this.getDepartmentUserCount(depts) : gr.getRowCount();
        return {
            grpMembers,
            usersList,
            totalRowCount
        };
    },

    /* 
     * get list of departments, given a parent department 
     */
    getAllDepartments(parentDepartment) {
        if (gs.nil(parentDepartment)) {
            gs.warn("Parent department not provided");
        }
        this.fAllDepartments = new Map();
        var gr = this.getDepartmentGr(parentDepartment);
        if (!gr) {
            gs.warn("Parent department not found");
        }
        this.fAllDepartments.set(parentDepartment, {
            id: parentDepartment,
            label: gr.getValue('name')
        });
        this._getRecursiveDepartments(parentDepartment);
        const ar = Array.from(this.fAllDepartments);
        return ar;
    },

    /*
     * helper for getAllDepartments() when recurive option is true
     */
    _getRecursiveDepartments(parentDepartment) {
        var dep = new GlideRecord("cmn_department");
        dep.addActiveQuery();
        dep.addQuery("parent", parentDepartment);
        dep.query();
        while (dep.next()) {
            var depSysId = dep.getUniqueValue();
            if (!this.fAllDepartments.get(depSysId)) {
                this.fAllDepartments.set(depSysId, {
                    id: depSysId,
                    label: dep.getValue('name')
                });
                this._getRecursiveDepartments(depSysId);
            }
        }
    },

    getDepartmentGr: function(department) {
        var gr = new GlideRecord("cmn_department");
        if (gr.get(department))
            return gr;

        return null;
    },

    getDepartmentUserCount: function(departments) {
        var totalRowCount = 0;
        var userGA = new GlideAggregate('sys_user');
        userGA.addQuery('department', 'IN', departments.join(','));
        userGA.addQuery('active', true);
        userGA.addAggregate('COUNT');
        userGA.query();
        if (userGA.next())
            totalRowCount = userGA.getAggregate('COUNT');
        return totalRowCount;
    },

    getFilterProps: function(params) {
        let results = [];
        const parentDepartment = params.parentDepartment;
        const isRecursiveDepartment = params.isRecursiveDepartment;
        const util = new ManageSkillsUtils();
        const departmentsArr = util.getAllDepartments(parentDepartment, isRecursiveDepartment);
        userFilterEncodedQuery = 'active=true^departmentIN' + departmentsArr.join(',');

        const skillsMap = util.getSkillsByParentSkill(params.parentSkill, params.isRecursiveSkill, 1000); //Limit the number of skills shown in filter slish bucket to 1000
        const skillFilterEncodedQuery = 'active=true^sys_idIN' + Array.from(skillsMap.keys()).join(',');

        let filtersMap = {
            "Users": {
                "table": {
                    "id": "sys_user",
                    "label": "Users"
                },
                "encodedQuery": userFilterEncodedQuery,
                "field": {
                    "id": "sys_id",
                    "type": "string",
                    "label": "Sys ID"
                }
            },
            "Skills": {
                "table": {
                    "id": "cmn_skill",
                    "label": "Skills"
                },
                "field": {
                    "id": "sys_id",
                    "type": "string",
                    "label": "Sys ID"
                },
                "encodedQuery": skillFilterEncodedQuery,
            },
            "Location": {
                "table": {
                    "id": "sys_user",
                    "label": "Location"
                },
                "field": {
                    "id": "location.city",
                    "type": "string",
                    "label": "City"
                },
                "encodedQuery": userFilterEncodedQuery
            }
        };

        for (var key in filtersMap) {
            var filterProps = {
                "filterName": key,
                "dataSource": {
                    ...filtersMap[key],
                    "type": "table"

                },
                "targets": [{
                    "type": "table",
                    "table": filtersMap[key].table,
                    "field": filtersMap[key].field
                }]
            };
            results.push(filterProps);
        }

        return results;
    },

    type: 'ManageSkillsExtnPtDefault'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-10 22:50:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7e200bf9b7102110045b59fd2e11a97d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;52&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ManageSkillsExtnPtDefault&lt;/sys_name&gt;
        &lt;sys_package display_value="Manage Skills Configurable Page" source="sn_skill_cfg_page"&gt;4208aef477331110045b526faa106102&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Manage Skills Configurable Page"&gt;4208aef477331110045b526faa106102&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7e200bf9b7102110045b59fd2e11a97d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-15 23:32:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:19</sys_created_on>
        <sys_id>c227309d83f01210c6695855eeaad317</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ManageSkillsExtnPtDefault</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c227309d83f01210c6695855eeaad317</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
