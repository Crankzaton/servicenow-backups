<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>aaf7634ec3c13010a9f5e548fa40dd5d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_collab_request.CollabTaskUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CollabTaskUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CollabTaskUtils = (function() {
    return {
        /*
        	Generates collaboration task record for the passed user or group data
        */
        generateCollaborationTaskRecord: function(
            inviteeId,
            isGroup,
            appId,
            descriptorId,
            shouldInsert,
            feature,
            sourceStudioName,
            optionalMessage
        ) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.collabTask;
            var roles = CollabTaskConstants.roles;
            var errors = CollabTaskConstants.errors;
            var collaborationFeature = CollabTaskConstants.collaborationFeature;

            var result = {
                inviteeId: inviteeId,
                errorDetails: []
            };

            if (!descriptorId) {
                result.errorDetails.push(errors.MISSING_DESCRIPTOR);
            }

            if (!inviteeId) {
                result.errorDetails.push(errors.MISSING_INVITEE);
            }

            // Check if 'feature' is defined INVITE or JOIN. If not return error. 
            if (feature &amp;&amp; feature !== collaborationFeature[feature]) {
                result.errorDetails.push(errors.INVALID_FEATURE);
            }

            if (result.errorDetails.length) {
                return result;
            }

            var collabTaskRecord = new GlideRecord(tables.COLLABORATION_TASK);

            collabTaskRecord.initialize();

            // descriptor fields
            var descriptorDetails = this.getCollabDescriptorDetails(descriptorId);

            collabTaskRecord.setValue(fields.COLLAB_DESCRIPTOR, descriptorId);
            collabTaskRecord.setValue(fields.COLLAB_DESCRIPTOR_SYS_ID, descriptorId);
            collabTaskRecord.setValue(fields.COLLAB_DESCRIPTOR_URL, descriptorDetails.descriptorUrl);
            collabTaskRecord.setValue(fields.COLLAB_DESCRIPTOR_NAME, descriptorDetails.descriptorName);

            //requestor field
            var requestorSysId = gs.getUser().getID();

            collabTaskRecord.setValue(fields.REQUESTOR, requestorSysId);
            collabTaskRecord.setValue(fields.REQUESTOR_SYS_ID, requestorSysId);
            collabTaskRecord.setValue(fields.REQUESTOR_NAME, gs.getUser().getDisplayName());
            collabTaskRecord.setValue(fields.REQUESTOR_EMAIL, gs.getUser().getEmail());

            // instance data
            var instanceId = this.getCurrentInstanceId();
            var isAESInstalledOnInstance = this.isAesInstalled();

            collabTaskRecord.setValue(fields.ORIGINATING_INSTANCE_ID, instanceId);
            collabTaskRecord.setValue(fields.ORIGINATING_INSTANCE_HAS_AES_INSTALLED, isAESInstalledOnInstance);

            // app details
            var appName = this.getAppName(appId);

            collabTaskRecord.setValue(fields.APP_NAME, appName);
            collabTaskRecord.setValue(fields.APP_SYS_ID, appId);
            collabTaskRecord.setValue(fields.APP_URL, this.getAppUrl(appId, isAESInstalledOnInstance, sourceStudioName));

            // general record details
            var inviteeDetails = this.getInviteeDetails(inviteeId, isGroup) || {};
            var description = 'Collaboration Request for ' + inviteeDetails.name + ' - ' + appName;

            collabTaskRecord.setValue(fields.SHORT_DESCRIPTION, description);

            // invitee details
            // get role sys_ids 
            var roleDetails = this.getRoleDetails([roles.AES_ROLE, roles.DELEGATED_DEVELOPER_ROLE]);

            // check if invitee has the below roles
            var doesCollaboratorHaveAESRole = this.doesInviteeHaveRole(inviteeId, roleDetails[roles.AES_ROLE], isGroup);
            var doesCollaboratorHaveDelegatedDevRole = this.doesInviteeHaveRole(inviteeId, roleDetails[roles.DELEGATED_DEVELOPER_ROLE], isGroup);

            collabTaskRecord.setValue(fields.IS_INVITEE_GROUP, isGroup);

            //if feature is not JOIN, Auto approve field should not be updated because self requesting always go for an approval
            if (feature !== collaborationFeature.JOIN)
		collabTaskRecord.setValue(fields.AUTO_APPROVE,doesCollaboratorHaveAESRole || doesCollaboratorHaveDelegatedDevRole);

            if (optionalMessage)
                collabTaskRecord[fields.WORK_NOTES] = optionalMessage;

            if (isGroup) {
                // group invitee fields
                collabTaskRecord.setValue(fields.GROUP_INVITEE, inviteeId);
                collabTaskRecord.setValue(fields.GROUP_INVITEE_SYS_ID, inviteeId);
                collabTaskRecord.setValue(fields.GROUP_INVITEE_NAME, inviteeDetails.name);
                collabTaskRecord.setValue(fields.GROUP_INVITEE_EMAIL, inviteeDetails.email);
                collabTaskRecord.setValue(fields.GROUP_INVITEE_HAS_AES_ROLE, doesCollaboratorHaveAESRole);
                collabTaskRecord.setValue(fields.GROUP_INVITEE_HAS_DDD_ROLE, doesCollaboratorHaveDelegatedDevRole);
            } else {
                // user invitee fields
                collabTaskRecord.setValue(fields.INVITEE, inviteeId);
                collabTaskRecord.setValue(fields.INVITEE_SYS_ID, inviteeId);
                collabTaskRecord.setValue(fields.INVITEE_NAME, inviteeDetails.name);
                collabTaskRecord.setValue(fields.INVITEE_EMAIL, inviteeDetails.email);
                collabTaskRecord.setValue(fields.INVITEE_HAS_AES_ROLE, doesCollaboratorHaveAESRole);
                collabTaskRecord.setValue(fields.INVITEE_HAS_DD_ROLE, doesCollaboratorHaveDelegatedDevRole);
            }

            if (shouldInsert) {
                var insertedId = collabTaskRecord.insert();
                result.collaborationTaskId = insertedId || null;
                result.errorOnInsert = !insertedId;

            } else {
                result.collaborationTaskRecord = collabTaskRecord;
            }

            return result;
        },
        /*
        	Returns if user or group has the passed role
        */
        doesInviteeHaveRole: function(inviteeId, role, isGroup) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.common;

            var result = false;

            var sourceTable = isGroup ? tables.GROUP_HAS_ROLE : tables.USER_HAS_ROLE;
            var sourceInviteeField = isGroup ? fields.GROUP : fields.USER;

            var inviteeHasRole = new GlideRecord(sourceTable);

            inviteeHasRole.addQuery(sourceInviteeField, inviteeId);
            inviteeHasRole.addQuery(fields.ROLE, role);

            inviteeHasRole.query();

            while (inviteeHasRole.next()) {
                result = true;
                break;
            }

            return result;
        },
        getInviteeDetails: function(inviteeId, isGroup) {
            var tables = CollabTaskConstants.tables;

            var sourceTable = isGroup ? tables.SYS_USER_GROUP : tables.SYS_USER;

            var sysUserOrGroupGR = new GlideRecord(sourceTable);
            sysUserOrGroupGR.get(inviteeId);

            return {
                name: sysUserOrGroupGR.getValue('name'),
                email: sysUserOrGroupGR.getValue('email')
            };
        },
        /*
        	Returns a map of role name with the role sys_id
        */
        getRoleDetails: function(roleList) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.common;

            var roleDetails = {};
            var roles = new GlideRecord(tables.USER_ROLE);


            roles.addQuery(fields.NAME, 'IN', roleList.join(','));

            roles.query();

            while (roles.next()) {
                var name = roles.getValue(fields.NAME);

                roleDetails[name] = roles.getValue(fields.SYS_ID);
            }

            return roleDetails;
        },
        /*
        	Returns the app's name based on the sys_id passed
        */
        getAppName: function(appId) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.common;

            var app = new GlideRecord(tables.SYS_APP);

            if (app.get(appId)) {
                return app.getValue(fields.NAME);
            } else {
                var storeApp = new GlideRecord("sys_store_app");
                storeApp.get(appId);
                return storeApp.getValue(fields.NAME);
            }
        },
        /*
        	Returns current instance id
        */
        getCurrentInstanceId: function(appId) {
            return gs.getProperty(CollabTaskConstants.INSTANCE_ID);
        },
        /*
        	Returns if AES is installed on instance
        */
        isAesInstalled: function(appId) {
            return GlidePluginManager.isActive(CollabTaskConstants.AES_PLUGIN_ID);
        },
        getAppUrl: function(appId, isAESInstalledOnInstance, sourceStudioName) {
            var path = "";
            if (CollabTaskConstants.paths[sourceStudioName]) {
                path = CollabTaskConstants.paths[sourceStudioName];
            } else if (isAESInstalledOnInstance) {
                path = CollabTaskConstants.paths.AES_APP_HOME;
            } else {
                path = CollabTaskConstants.paths.DEV_STUDIO_APP;
            }

            return this.getCurrentInstanceUrl() + path + appId;
        },
        getCollabDescriptorDetails: function(descriptorId) {
            var descriptorUrl = this.getCurrentInstanceUrl() + CollabTaskConstants.paths.COLLAB_DESCRIPTOR + descriptorId;
            var descriptorName = "";
            var descriptorRecord = new GlideRecord(CollabTaskConstants.tables.COLLAB_DESCRIPTOR);
            if (descriptorRecord.get(descriptorId)) {
                descriptorName = descriptorRecord.getDisplayValue("name");
            }

            return {
                descriptorUrl: descriptorUrl,
                descriptorName: descriptorName
            };
        },
        getCurrentInstanceUrl: function(appId) {
            var instanceUrl = gs.getProperty("glide.servlet.uri");

            if (!instanceUrl) {
                return;
            }

            return instanceUrl.replace(this.getTrailingSlashRegex(), "");
        },
        getTrailingSlashRegex: function() {
            return /\/+$/;
        },
        getCollaborationRequestsInScope: function(appId, recordState) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.collabTask;
            var collabReqUtils = new CollabReqUtils();
            var requests = [];

            var collabTaskRecord = new GlideRecord(tables.COLLABORATION_TASK);
            collabTaskRecord.addQuery(fields.APP_SYS_ID, appId);
            collabTaskRecord.addQuery(fields.STATE, recordState);
            collabTaskRecord.query();

            while (collabTaskRecord.next()) {
                var isInviteeGroup = collabTaskRecord.getValue(fields.IS_INVITEE_GROUP) === "1";

                var collabTasksFieldsList = [
                    fields.IS_INVITEE_GROUP,
                    fields.INVITEE,
                    fields.INVITEE_NAME,
                    fields.INVITEE_EMAIL,
                    fields.INVITEE_SYS_ID,
                    fields.GROUP_INVITEE,
                    fields.GROUP_INVITEE_NAME,
                    fields.GROUP_INVITEE_EMAIL,
                    fields.GROUP_INVITEE_SYS_ID,
                    fields.COLLAB_DESCRIPTOR,
                    fields.COLLAB_DESCRIPTOR_NAME,
                    fields.COLLAB_DESCRIPTOR_SYS_ID
                ];

                var collabTaskRecordInvitee = collabReqUtils.getObjectFromGlideRecord(collabTaskRecord, collabTasksFieldsList);
                collabTaskRecordInvitee[fields.IS_INVITEE_GROUP] = isInviteeGroup;
                requests.push(collabTaskRecordInvitee);
            }

            return requests;
        },
        getPendingUserCollabRecords: function(appSysIDs, recordState, user) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.collabTask;
            var collabReqUtils = new CollabReqUtils();
            var collabTasksFieldsList = [
                fields.APP_SYS_ID,
                fields.SYS_ID
            ];
            var pendingTasks = [];
            var collabTask = new GlideRecord(tables.COLLABORATION_TASK);
            appSysIDs &amp;&amp; collabTask.addQuery('app_sys_id', 'IN', appSysIDs);
            collabTask.addQuery(fields.STATE, recordState);
            collabTask.addQuery(fields.INVITEE, user);
            collabTask.query();
            while (collabTask.next()) {
                var collabTaskRecord = collabReqUtils.getObjectFromGlideRecord(collabTask, collabTasksFieldsList);
                pendingTasks.push(collabTaskRecord);
            }
            return pendingTasks;
        },

        createCollaborationTaskRecordsInController: function(collabTasks, controllerEnv) {
            var inputs = {
                url: controllerEnv.getValue('instance_url'),
                credential: controllerEnv.instance_credential.getRefRecord(),
                collaboration_tasks: JSON.stringify(collabTasks)
            };

            var result = sn_fd.FlowAPI.getRunner()
                .action("sn_collab_request.create_collaboration_task_records_in_environment")
                .inForeground()
                .withInputs(inputs)
                .run();

            var outputs = result.getOutputs() || {};
            if (outputs.__action_status__ &amp;&amp; outputs.__action_status__.code === 0) { // action ran successfully
                var collabReqUtils = new CollabReqUtils();
                return {
                    users: outputs.users.filter(collabReqUtils.objectNotAllNil),
                    groups: outputs.groups.filter(collabReqUtils.objectNotAllNil)
                };
            } else {
                var message = outputs.__action_status__ ? outputs.__action_status__.message : gs.getMessage("Something went wrong when creating task records in controller");
                throw message;
            }
        },
        getCollaborationTaskRecordsFromController: function(appId, recordState, controllerEnv) {
            var fields = CollabTaskConstants.fields.collabTask;
            var statusCodes = CollabTaskConstants.statusCodes;
            var collabTasksFieldsList = [
                fields.IS_INVITEE_GROUP,
                fields.INVITEE,
                fields.INVITEE_NAME,
                fields.INVITEE_EMAIL,
                fields.INVITEE_SYS_ID,
                fields.GROUP_INVITEE,
                fields.GROUP_INVITEE_NAME,
                fields.GROUP_INVITEE_EMAIL,
                fields.GROUP_INVITEE_SYS_ID,
                fields.COLLAB_DESCRIPTOR,
                fields.COLLAB_DESCRIPTOR_NAME,
                fields.COLLAB_DESCRIPTOR_SYS_ID
            ];
            if (!appId) {
                throw new sn_ws_err.ServiceError()
                    .setStatus(statusCodes.BAD_REQUEST)
                    .setMessage(gs.getMessage("Missing App Id"));
            }
            var query = fields.STATE + "IN" + recordState + "^" + fields.APP_SYS_ID + "=" + appId; //query to get pending collaboration tasks
            var inputs = {
                url: controllerEnv.getValue('instance_url'),
                credential: controllerEnv.instance_credential.getRefRecord(),
                query: query,
                collaboration_task_fields: collabTasksFieldsList.join()
            };

            var result = sn_fd.FlowAPI.getRunner()
                .action("sn_collab_request.get_collaboration_tasks")
                .inForeground()
                .withInputs(inputs)
                .run();

            var outputs = result.getOutputs() || {};

            if (outputs.__action_status__ &amp;&amp; outputs.__action_status__.code !== 0) { // action failed
                var message = outputs.__action_status__ ? outputs.__action_status__.message : gs.getMessage("Something went wrong when fetching task records from controller");
                return {
                    hasError: true,
                    statusCode: 500,
                    errorMessage: message
                };
            }

            var statusCode = outputs.status_code;

            if (statusCode !== 200) {
                return {
                    hasError: true,
                    statusCode: statusCode,
                    errorMessage: outputs.error_message
                };
            }

            var responseBody = JSON.parse(outputs.response_body);
            var collabTasksInScope = (responseBody || {}).result;

            return {
                hasError: false,
                statusCode: 200,
                collabTasksInScope: collabTasksInScope.map(function(task) {
                    var isInviteeGroup = global.JSUtil.toBoolean(task[fields.IS_INVITEE_GROUP]);
                    task[fields.IS_INVITEE_GROUP] = isInviteeGroup;
                    return task;
                })
            };
        },
        getUserCollaborationTaskRecordsFromController: function(appSysIDs, recordState, controllerEnv) {
            var fields = CollabTaskConstants.fields.collabTask;
            var statusCodes = CollabTaskConstants.statusCodes;
            var collabTasksFieldsList = [
                fields.SYS_ID,
                fields.APP_SYS_ID
            ];
            var inputs;
            var result;
            var query = fields.STATE + "IN" + recordState +
                "^" + fields.INVITEE + "=" + gs.getUserID();
            if (appSysIDs) {
                query += "^" + fields.APP_SYS_ID + "IN" + appSysIDs;
            }
            inputs = {
                url: controllerEnv.getValue('instance_url'),
                credential: controllerEnv.instance_credential.getRefRecord(),
                query: query,
                collaboration_task_fields: collabTasksFieldsList.join(),
            };

            result = sn_fd.FlowAPI.getRunner()
                .action("sn_collab_request.get_collaboration_tasks")
                .inForeground()
                .withInputs(inputs)
                .run();

            var outputs = result.getOutputs() || {};
            if (outputs.__action_status__ &amp;&amp; outputs.__action_status__.code !== 0) { // action failed
                var message = outputs.__action_status__ ? outputs.__action_status__.message : gs.getMessage("Something went wrong when fetching task records from controller");
                throw new sn_ws_err.ServiceError()
                    .setStatus(500)
                    .setMessage(gs.getMessage(message));
            }
            var statusCode = outputs.status_code;
            if (statusCode !== statusCodes.SUCCESS) {
                throw new sn_ws_err.ServiceError()
                    .setStatus(statusCode)
                    .setMessage(gs.getMessage(outputs.error_message));
            }
            var responseBody = JSON.parse(outputs.response_body);
            var collabTasks = (responseBody || {}).result;
            return {
                hasError: false,
                statusCode: statusCodes.SUCCESS,
                collabTasks: collabTasks
            };
        },
        cancelCollaborationTaskFromController: function(taskID, controllerEnv) {

            var recordState = CollabTaskConstants.collabTaskStates;
            var inputs = {
                url: controllerEnv.getValue('instance_url'),
                credential: controllerEnv.instance_credential.getRefRecord(),
                task_id: taskID,
                request_body: JSON.stringify({
                    "state": recordState.CANCELLED
                })
            };
            var result = sn_fd.FlowAPI.getRunner()
                .action("sn_collab_request.update_collaboration_task")
                .inForeground()
                .withInputs(inputs)
                .run();

            var outputs = result.getOutputs() || {};

            // error handling for failed action 
            if (outputs.__action_status__ &amp;&amp; outputs.__action_status__.code !== 0) {
                var message = outputs.__action_status__ ? outputs.__action_status__.message : gs.getMessage("Something went wrong when updating task record in controller");
                return {
                    hasError: true,
                    statusCode: 500,
                    errorMessage: message
                };
            }
            var statusCode = outputs.status;

            if (statusCode !== 200) {
                return {
                    hasError: true,
                    statusCode: statusCode,
                    errorMessage: outputs.error
                };
            } else {
                return {
                    hasError: false,
                    statusCode: statusCode,
                };
            }
        },
        cancelCollaborationTask: function(taskID, loggedInUser) {
            var tables = CollabTaskConstants.tables;
            var fields = CollabTaskConstants.fields.collabTask;
            var commonFields = CollabTaskConstants.fields.common;
            var recordState = CollabTaskConstants.collabTaskStates;
            var collabTaskRecord = new GlideRecord(tables.COLLABORATION_TASK);
            collabTaskRecord.addQuery(commonFields.SYS_ID, taskID);
            collabTaskRecord.addQuery(fields.INVITEE, loggedInUser);
            collabTaskRecord.addQuery(fields.STATE, recordState.NEW);
            collabTaskRecord.query();
            if (collabTaskRecord.next()) {
                collabTaskRecord.setValue(fields.STATE, recordState.CANCELLED);
                return collabTaskRecord.update();
            }

            return;

        }
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-01 14:36:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;aaf7634ec3c13010a9f5e548fa40dd5d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;146&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CollabTaskUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Collaboration Request" source="sn_collab_request"&gt;f6ad5d41c3222010a9f5e548fa40dd69&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Collaboration Request"&gt;f6ad5d41c3222010a9f5e548fa40dd69&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_aaf7634ec3c13010a9f5e548fa40dd5d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-12-12 08:57:49&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:39</sys_created_on>
        <sys_id>a3ef349d83341210c6695855eeaad304</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CollabTaskUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a3ef349d83341210c6695855eeaad304</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:39</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
