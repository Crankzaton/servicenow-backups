<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>16d7112b07c2a01028ef0a701ad300f2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLUTranslateUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NLUTranslateUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUTranslateUtil = Class.create();

(function() {
    var tables = NLUConstants.tables;
    var constants = NLUConstants.constants;

    NLUTranslateUtil.canRequestTranslations = function(modelId) {
        return !NLUModel.isInCloneOrTranslation(modelId);
    };

    NLUTranslateUtil.getTranslatedRecord = function(tableName, modelId, primaryId) {
        var primaryField = NLUImportUtil.FIELDS_DATA[tableName].primaryField;
        var gr = null;
        if (tableName === tables.SYS_NLU_ENTITY) {
            gr = new NLUModel(modelId).getEntities(primaryField + '=' + primaryId);
        } else {
            gr = new GlideRecord(tableName);
            gr.addQuery(primaryField, primaryId);
            gr.addQuery((tableName === tables.SYS_NLU_UTTERANCE ? 'intent.' : '') + 'model', modelId);
            gr.query();
        }
        return gr &amp;&amp; gr.next() &amp;&amp; gr;
    };

    NLUTranslateUtil.getTranslationOptions = function(languages) {
        var translationOptions = [];
        try {
            if (!languages) languages = NLUParloIntegrator.getSupportedLanguageCodes();
            if (!GlidePluginManager.isActive("com.glide.localization_framework")) return translationOptions;
            var lfAPI = new global.LocalizationFrameworkAPIV2();
            var result = lfAPI.getTranslationPreferences(constants.NLU_ARTIFACT_NAME, {
                "targetLanguages": languages
            });
            Object.keys(result).forEach(function(langCode) {
                var langOption = result[langCode];
                translationOptions.push({
                    code: langCode,
                    thirdPartyTranslate: langOption.exists,
                    machineTranslate: langOption.machineTranslate ? langOption.machineTranslate.isEnabled : false,
                    exportImport: langOption.exportImport ? langOption.exportImport.isEnabled : false
                });
            });
        } catch (e) {
            gs.error('Error while getting getTranslationPreferences: ' + e.message);
        }
        return translationOptions;
    };

    NLUTranslateUtil.getLfRequestedItemGr = function(details) {
        var tableName = tables.SN_LF_REQUESTED_ITEM;
        if (details.number &amp;&amp; details.number.includes("LFTASK")) tableName = tables.SN_LF_TASK;
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', details.sysId);
        gr.query();
        return gr.next() &amp;&amp; gr;
    };

    NLUTranslateUtil.getLfRequestedItemDetails = function(sysIds, languages) {
        var lfRequestedItemDetails = [];
        var canRead = false;
        try {
            if (!GlidePluginManager.isActive("com.glide.localization_framework")) return lfRequestedItemDetails;
            var lfAPI = new global.LocalizationFrameworkAPIV2();
            var result = lfAPI.getRequestedItemDetails(sysIds, {
                "targetLanguages": languages
            });
            Object.keys(result).forEach(function(modelId) {
                var _result = result[modelId];
                Object.keys(_result).forEach(function(langCode) {
                    var details = _result[langCode].details;
                    if (details) {
                        var lfRequestedItemGr = NLUTranslateUtil.getLfRequestedItemGr(details);
                        canRead = lfRequestedItemGr.canRead();
                    }
                    lfRequestedItemDetails.push({
                        modelSysId: modelId,
                        language: langCode,
                        exists: _result[langCode].exists,
                        canRead: canRead,
                        details: details,
                    });
                });

            });
        } catch (e) {
            gs.error('Error while getting requested item details: ' + e.message);
        }
        return lfRequestedItemDetails;

    };

    NLUTranslateUtil.prototype = {
        initialize: function(tgtNluModel) {
            this.dataMap = {};
            this.tgtNluModel = tgtNluModel;
        },

        loadPrimaryTranslatedData: function() {
            this.dataMap[tables.SYS_NLU_MODEL] = {};
            var primaryField = NLUImportUtil.FIELDS_DATA[tables.SYS_NLU_MODEL].primaryField;
            var translatableFields = NLUImportUtil.FIELDS_DATA[tables.SYS_NLU_MODEL].translatableFields;
            this._populateRecord(tables.SYS_NLU_MODEL, this.tgtNluModel.getGR(),
                primaryField, translatableFields);

            this._populateDataMap(tables.SYS_NLU_VOCABULARY, this.tgtNluModel.getVocabulary());
            this._populateDataMap(tables.SYS_NLU_ENTITY, this.tgtNluModel.getModelEntities());
            this._populateDataMap(tables.SYS_NLU_ENTITY, this.tgtNluModel.getEntities());
            this._populateDataMap(tables.SYS_NLU_INTENT, this.tgtNluModel.getIntents());
            this._populateDataMap(tables.SYS_NLU_UTTERANCE, this.tgtNluModel.getUtterances());

            return this.dataMap;
        },

        getTgtData: function(tableName, srcSysId) {
            return this.dataMap.hasOwnProperty(tableName) &amp;&amp;
                this.dataMap[tableName].hasOwnProperty(srcSysId) &amp;&amp;
                this.dataMap[tableName][srcSysId];
        },

        getTgtValue: function(tableName, srcSysId, field) {
            var tgtData = this.getTgtData(tableName, srcSysId);
            return tgtData &amp;&amp; tgtData[field];
        },

        getTgtSysId: function(tableName, srcSysId) {
            return this.getTgtValue(tableName, srcSysId, 'sys_id');
        },

        setTgtSysId: function(tableName, srcSysId, tgtSysId) {
            if (!this.dataMap.hasOwnProperty(tableName)) this.dataMap[tableName] = {};
            if (!this.dataMap[tableName].hasOwnProperty(srcSysId)) this.dataMap[tableName][srcSysId] = {};
            this.dataMap[tableName][srcSysId]['sys_id'] = tgtSysId;
        },

        _populateDataMap: function(tableName, gr) {
            if (!this.dataMap.hasOwnProperty(tableName)) this.dataMap[tableName] = {};
            var primaryField = NLUImportUtil.FIELDS_DATA[tableName].primaryField;
            var translatableFields = NLUImportUtil.FIELDS_DATA[tableName].translatableFields;
            while (gr.next()) {
                this._populateRecord(tableName, gr, primaryField, translatableFields);
            }
        },

        _populateRecord: function(tableName, gr, primaryField, translatableFields) {
            var tgtData = {
                sys_id: gr.getUniqueValue()
            };
            translatableFields &amp;&amp; translatableFields.forEach(function(field) {
                tgtData[field] = gr.getValue(field);
            });
            this.dataMap[tableName][gr.getValue(primaryField)] = tgtData;
        },


        type: 'NLUTranslateUtil'
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-06 16:57:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;16d7112b07c2a01028ef0a701ad300f2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;50&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUTranslateUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;302438683c31311068bcf327dfe37f2f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_16d7112b07c2a01028ef0a701ad300f2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-08 11:51:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:51</sys_created_on>
        <sys_id>8da0b8d583b01210c6695855eeaad3e6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NLUTranslateUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8da0b8d583b01210c6695855eeaad3e6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
