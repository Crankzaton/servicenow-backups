<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>98a071de77a2511031e3b3c64b5a9943</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_prfrd_tables.SysDBObject&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SysDBObject&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SysDBObject = Class.create();
SysDBObject.prototype = {
    
    initialize: function(options, additionalArgs) {
		this.options = options;
		this.gr = new GlideRecord('sys_db_object');
		this.rotatedTables = [];
		this.additionalArgs = additionalArgs || {};
    },

    getName: function() {
        return this.gr.getValue('name');
    },

    _isExcludedRotation: function (name) {
        return this.rotatedTables.indexOf(name) &gt; -1;
    },

    _getRotatedTables: function () {
        var rotatedList = [];
        var rotations = [];
        var rotatedTable = new GlideRecord("sys_table_rotation");
        rotatedTable.query();

        while (rotatedTable.next())
            rotatedList.push(rotatedTable.getValue("name"));

        var rotatedExtension = new GlideRecord("sys_table_rotation_schedule");
        rotatedExtension.query();

        while (rotatedExtension.next()) {
            if (rotatedList.indexOf(rotatedExtension.getValue("table_name")) === -1)
                rotations.push(rotatedExtension.getValue("table_name"));
        }
        return rotations;
    },

    _startsWith: function (str, word) {
        return str.lastIndexOf(word, 0) === 0;
    },

    _shouldExcludeTable: function(tableName) {
        if (this._isExcludedRotation(tableName))
            return true;

        if (
            this._startsWith(tableName, 'v_') ||
            this._startsWith(tableName, 'sysx_') ||
            this._startsWith(tableName, 'var__') ||
            this._startsWith(tableName, 'ts_')

        )
            return true;
		
		if(this.additionalArgs.preferredTbNames &amp;&amp; this.additionalArgs.preferredTbNames.indexOf(tableName) &gt;= 0)
			return true;

        return false;
    },

    _addAdditionalQueries: function () {
        var queryParams = this.options;
        var gr = this.gr;
        if (queryParams.context &amp;&amp; queryParams.context.toLowerCase() === 'extension')
            gr.addQuery('is_extendable', 'true');
        if (this.additionalArgs) {
			if (this.additionalArgs.inScope) {
				gr.addQuery('sys_scope', queryParams.app_scope);
			} else if (!this.additionalArgs.inScope) {
				gr.addQuery('sys_scope', '!=', queryParams.app_scope);
			}
		}
        if (queryParams.order_by &amp;&amp; typeof queryParams.order_by === 'string')
            gr.orderBy(queryParams.order_by);
        if (queryParams.limit &amp;&amp; typeof queryParams.limit === 'string')
            gr.setLimit(queryParams.limit);
        if (queryParams.search_query &amp;&amp; typeof queryParams.search_query === 'string') {
            gr.addEncodedQuery(queryParams.search_query);
        }
    },
    build: function() {
        var tables_output = [];
		var sysIds = [];
        this._addAdditionalQueries();
        this.gr.query();
        this.rotatedTables = this._getRotatedTables();
        while (this.gr.next()) {
            var tableName = this.gr.getValue('name');
    
            if (this._shouldExcludeTable(tableName))
                continue;
    
            var table = {
                name: tableName,
                sys_id: this.gr.getUniqueValue(),
                label: this.gr.getDisplayValue('label'),
                is_extendable: this.gr.getDisplayValue('is_extendable')
            };
			if (this.additionalArgs &amp;&amp; this.additionalArgs.inScope) {
				sysIds.push(table.sys_id);
			}
            tables_output.push(table);
        }
        return {'tables': tables_output, 'sysIds': sysIds} ;
    },

    type: 'SysDBObject'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-17 06:29:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;98a071de77a2511031e3b3c64b5a9943&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SysDBObject&lt;/sys_name&gt;
        &lt;sys_package display_value="Preferred tables" source="sn_prfrd_tables"&gt;de7c09b877e2111031e3b3c64b5a994a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Preferred tables"&gt;de7c09b877e2111031e3b3c64b5a994a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_98a071de77a2511031e3b3c64b5a9943&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-01 18:36:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:59</sys_created_on>
        <sys_id>37a87c5183341210c6695855eeaad3ba</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SysDBObject</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_37a87c5183341210c6695855eeaad3ba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:59</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
