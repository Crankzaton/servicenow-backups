<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>sc_req_item_stageGetChoices</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
 * Return the list of stages for a Request Item as a choice list
 * 
 * We first determine if the item has a workflow or a delivery plan. For
 * delivery plans, we create the stages from the delivery plan tasks. For
 * workflows, we create the stages from the workflow stages.
 */
function sc_req_item_stageGetChoices() {
 if (JSUtil.nil(answer)) {
  // answer is a Java Object hence do not use typeof check. As this will throw error. JSUtil.nil will check nullability for java objects.
  // answer is not set then return immediately as there is no placeholder for choicelist.
  return;
 }
 var wfs = new WorkflowStages();
 var pendingChoice = new GlideChoice("not_started", gs.getMessage("Not Started"));
 // Fix for Service Catalog Overview homepage We do not have current or we have bad defined current object
 if (typeof current == "undefined" || JSUtil.nil(current) || !current || JSUtil.nil(current.sys_id)) {
  try {
   // get most up-to-date list of options. 
   // answer is a GLOBAL variable, and is populated by a Choice list.
   // see SysChoice.java method: getChoicesFunction
    answer.add(pendingChoice);
    wfs.getSimpleChoiceList('sc_req_item', 'stage', answer);
  } catch (e) {
   gs.log("Error generating stage choices: " + e);
   return;
  }
 }

 if ( typeof current != "undefined" && !JSUtil.nil(current) && !JSUtil.nil(current.sys_id) && (JSUtil.nil(current.cat_item) || JSUtil.nil(current.cat_item.name))) {
  addErrorChoice(gs.getMessage("Catalog item removed"));
  return;
 }

 if (typeof current == "undefined" || !current) 
  return;

 if (current.cat_item && current.cat_item.workflow != null && !current.cat_item.workflow.nil()) {
  // Create the choices from the workflow stages
  var version;
  
  // We have already started a workflow for the item, use its version
  if (current.context)
   version = current.context.workflow_version;
  else {
   // We have not started a workflow for the item yet (pending request
   // approval) so determine the version we will eventually be using
   version = new Workflow().getVersion(current.cat_item.workflow);
   if (!version || version.nil()) 
    return;
   
   version = version.sys_id + '';
  }
  wfs.setWorkflowVersion(version, current.context + '');
  wfs.getChoices(current.stage, answer);
  
  if (!answer.getChoice("request_approved")) {
   addRequestApprovedChoice();
  }
 } 
 else if (current.cat_item && current.cat_item.flow_designer_flow != null && !current.cat_item.flow_designer_flow.nil()) {
               // Create the choices from the Flow Designer stages
   var choice = new GlideChoice("waiting_for_approval", gs.getMessage("Request Approval"));
   answer.add(choice);
   var flowStages = GlideappCalculationHelper.getFlowStages(current.cat_item.flow_designer_flow);
   for (var i = 0; i < flowStages.getSize(); i++) {
    var c = flowStages.getChoice(i);
    answer.add(c);
   }
    }
 else {
  // Create the choices from the delivery plan tasks
  sc_req_item_stage_DeliveryPlanChoices(answer);
 }

 if (JSUtil.notNil(current.order_guide) && JSUtil.notNil(current.order_guide.sequencing_process) && !answer.getChoice("not_started"))
  answer.addFirst("not_started", gs.getMessage("Not Started"));

 function addErrorChoice(label) {
  answer.add('error', label).image = "images/workflow_rejected.gifx";
 }

 function addRequestApprovedChoice() {
  var numberofChoices = answer.getSize();
  for (var i = 0; i < numberofChoices; i++) {
   var retrievedChoice = answer.get(i);
   if (retrievedChoice.getValue() == 'waiting_for_approval' || retrievedChoice.getValue() == 'approved') {
    var choice = new GlideChoice("request_approved", gs.getMessage("Request Approved"));
    answer.add(i+1, choice);
    return;
   }
  }
 }
}

// Choices include the Delivery Plan steps if a DP is specified
function sc_req_item_stage_DeliveryPlanChoices(answer) {
 // always add this
 var choices = new GlideChoiceList();
 choices.add("waiting_for_approval", gs.getMessage("Request Approval"));
 if (typeof current != "undefined" && !JSUtil.nil(current) && current.cat_item != null && !current.cat_item.nil()) {
  // there is a catalog item
  var planID = GlideappDeliveryPlan.resolvePlanID(current);

  var plan = GlideAbstractExecutionPlan.get(planID);
  if (plan != null) {
   var tokens = plan.getSortedTokenList();

   for (var x = 0; x < tokens.size(); x++) {
    var tt = tokens.get(x);
    choices.add(tt.getName(), gs.getMessage(tt.getName()));
   }
  }
 }
 answer.addAll(new GlideappRequestItemWorkflow(current).generateChoices(choices));
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>3d8bec9183701210c6695855eeaad3b5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sc_req_item_stageGetChoices</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_3d8bec9183701210c6695855eeaad3b5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:31</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=3d8bec9183701210c6695855eeaad3b5"/>
</record_update>
