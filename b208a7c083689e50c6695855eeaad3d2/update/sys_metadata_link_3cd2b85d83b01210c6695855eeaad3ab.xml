<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3a69ae4843b4a110d1a45ec6dab8f2ee</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;The main purpose of the script is to revert updates to use config view, if there are any customizations present on the legacy icon section.&lt;/description&gt;
        &lt;name&gt;Revert legacy icon section in FSM&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var output = {};
output.msg = "";
addMsg("Start process FSM Mobile upgrade fix to avoid overriding customized records at " + getCurrentTimestamp());
output.customizedSections = [];
//initializing gcd
var cdd =new global.CollisionDetectorDelegate();
var legacy_icon_section_table = "sys_sg_icon_section";
var applet_launcher_m2m_section_table = "sys_sg_applet_launcher_m2m_section";
var navigation_section_table = "sys_sg_navigation_section";
var screens_table = "sys_sg_screen";
var legacyIconsObject = [
    {
        "Title" : "",
        "legacy_icon_section_id" : "0bdcaf83b3b0330048106ad4c6a8dc45",
        "applet_launcher_id" : "dced6bc3b3b0330048106ad4c6a8dce4",
        "navigation_section_id" : "bbe4fbb043e8a510d1a45ec6dab8f207"
    }
];
startProcess();
function startProcess(){
    if (global.FSMUtil.isZboot())
        return;
    if (!cdd.isGcdLoaded()) {
        addMsg("Error in initiating GlideCollisionDetector.");
        addMsg("Ended.");
        printMsg();
        return;
    }
    addMsg("Started processing of collision detection");
    for(var i=0;i&lt;legacyIconsObject.length;i++){
        var legacyIcon = legacyIconsObject[i];
        //Check if the legacy_icon card provided is valid or not
        var legacyIconGr = new GlideRecord(legacy_icon_section_table);
        if (!legacyIconGr.get(legacyIcon["legacy_icon_section_id"])) {
            addMsg("The legacy icon section card is invalid: " + legacy_icon_section_table + '|' + legacyIcon["legacy_icon_section_id"]);
            continue;
        }
        //Check if the applet_launcher is valid or not
        var appletLauncherGr = new GlideRecord(applet_launcher_m2m_section_table);
        if(!appletLauncherGr.get(legacyIcon["applet_launcher_id"])) {
            addMsg("The applet launcher card is invalid: " + applet_launcher_m2m_section_table + '|' + legacyIcon["applet_launcher_id"]);
            continue;
        }
        addMsg("&gt;" + getRecordInformation(legacyIconGr));
        //if there are customizations then proceed further
        if(isCustomized(legacyIconGr) || isScreensCustomized(legacyIconGr)){
            output.customizedSections.push(legacyIconGr.sys_update_name+"");
            //check for source record and if it is not customized then proceed
            var sourceGr = new GlideRecord(navigation_section_table);
            if (!sourceGr.get(legacyIcon["navigation_section_id"])) {
                addMsg("The source record is invalid: " + legacyIcon["navigation_section_table"] + '|' + legacyIcon["navigation_section_id"]);
                continue;
            }
            addMsg("Source record details: " + getRecordInformation(sourceGr));
            addMsg("Reverting the view config change on " + sourceGr.sys_update_name);
            var hasChanges = false;
            appletLauncherGr.addQuery("sys_id", legacyIcon["applet_launcher_id"]);
            appletLauncherGr.query();
            if(appletLauncherGr.next()){
                appletLauncherGr.setValue("section", legacyIcon["legacy_icon_section_id"]);
                hasChanges = true;
            }
            if (hasChanges) {
                appletLauncherGr.update();
            }
        }
    }
    addMsg("!All Cards processing completed");
    printStringsFromList(output.customizedSections, "customized records");
    addMsg("End process FSM Mobile upgrade fix to avoid overriding customized records at " + getCurrentTimestamp());
    printMsg();
}
function getCurrentTimestamp() {
    var d = new GlideDateTime();
    var ms = d.getNumericValue();
    return (d+'('+ms+')');
}
function addMsg(msg) { output.msg += msg + "\n"; }
function printMsg(msg) {
    gs.info("FSM Mobile upgrade fix output at " + getCurrentTimestamp()+"\n" + (msg ? msg : output.msg));
    output.msg = "";
}
function printStringsFromList(arry, recordName) {
    addMsg("Total number of " + recordName + ": " + arry.length);
    for (var i=0; i&lt;arry.length; i++) {
        addMsg(arry[i]);
    }
}
function getRecordInformation(gr) {
    var res = [
        gr.sys_class_name,
        gr.sys_id,
        gr.sys_created_by,
        gr.sys_updated_by,
        gr.name
    ];
    return res.join("|");
}
function isCustomized(gr) {
    var updateName = gr.sys_update_name+"";
    if (cdd.containsKey(updateName)) {
        addMsg("!Detected customization in " + updateName);
        return true;
    }
    addMsg("!No customization detected in " + updateName);
    return false;
}

function isScreensCustomized(gr) {
    var screens = gr.getValue("applets");
    if(screens){
        screens = screens.split(",");
        for (var i=0; i&lt;screens.length; i++){
            var uiScreenRecordGr = new GlideRecord(screens_table);
            if (!uiScreenRecordGr.get(screens[i])) {
                addMsg("The Screen is invalid: " + screens_table + '|' + screens[i]);
                continue;
            }
            if (isCustomized(uiScreenRecordGr)){
                return true;
            }
        }
    }
    return false;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-30 07:17:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3a69ae4843b4a110d1a45ec6dab8f2ee&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Revert legacy icon section in FSM&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Mobile" source="sn_fsm_mobile"&gt;5d66b0fbe770230003cd6188d2f6a976&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Field Service Mobile"&gt;5d66b0fbe770230003cd6188d2f6a976&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_3a69ae4843b4a110d1a45ec6dab8f2ee&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-30 09:54:53&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:20:23</sys_created_on>
        <sys_id>3cd2b85d83b01210c6695855eeaad3ab</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Revert legacy icon section in FSM</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3cd2b85d83b01210c6695855eeaad3ab</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:20:23</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
