<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>05b0c68867732200b133956c33415a9e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_global_searchui.SearchMetadata&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SearchMetadata&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SearchMetadata = (function() {
	
	var getSearchGroups = function() {
		var groups = loadGroups();
		attachSearchedTables(groups);
		return groups;
	};
	
	var getShowGroupsUserPreference = function() {
		var perferenceName = 'ts.show_empty_groups';
		var showGroups = '';
		var userPreferenceTable = new GlideRecord("sys_user_preference");
		userPreferenceTable.addActiveQuery();
		userPreferenceTable.addQuery("name", perferenceName);
		userPreferenceTable.addQuery("user", gs.getUserID());
		userPreferenceTable.query();

		if (userPreferenceTable.next()) {
			showGroups = userPreferenceTable.getValue("value");
		} else {
			showGroups = gs.getUser().getPreference(perferenceName) || "true";
		}
		return showGroups;
	};

	var getSysSearchProperties = function() {
		var hideResultProperty = 'sn_global_searchui.hide_results_count';
		var rowLimitProperty = 'glide.ui.text_search.rowcount';
		var showRedactWarningProperty = 'sn_global_searchui.show_redact_warning'
		var properties = {};
		// Defaults
		properties[hideResultProperty] = undefined;
		properties[rowLimitProperty] = undefined;
		properties[showRedactWarningProperty] = undefined;
		var hideResultsCount = '';
		var sysPropertiesTable = new GlideRecord("sys_properties");
		var propOr = sysPropertiesTable.addQuery('name', hideResultProperty);
		propOr.addOrCondition('name', rowLimitProperty);
		propOr.addOrCondition('name', showRedactWarningProperty);
		sysPropertiesTable.query();
		while (sysPropertiesTable.next())
			properties[sysPropertiesTable.getValue('name')] = sysPropertiesTable.getValue('value');
		return properties;
	};
	
	function loadGroups() {
		var tsGroup = new GlideRecord("ts_group");
		tsGroup.addActiveQuery();
		tsGroup.orderBy("order");
		tsGroup.addQuery("searched", true);
		tsGroup.query();
		
		var groups = [];
		while (tsGroup.next()) {
			if (gs.getUser().hasRole(tsGroup.getValue("roles") || '') &amp;&amp;
				(gs.nil(tsGroup.getValue("group")) ||
					gs.getUser().isMemberOf(tsGroup.getValue("group"))))
				groups.push({
					id: tsGroup.getValue("sys_id"),
					name : tsGroup.getDisplayValue("name"),
					description : tsGroup.getValue("description"),
					tables : []
				});
		}
		return groups;
	}
	
	function attachSearchedTables(groups) {
		var groupIds = groups.map(function(group) { return group.id; });
		var groupsBySysId = groups.reduce(function(memo, group, idx) {
			memo[group.id] = group;
			return memo;
		}, {});
		var tsTable = new GlideRecord("ts_table");
		tsTable.addActiveQuery();
		tsTable.addQuery("group", "IN", groupIds);
		tsTable.orderBy("group.order");
		tsTable.orderBy("order");
		tsTable.query();
		
		while (tsTable.next()) {
			var group = groupsBySysId[tsTable.getValue("group")];
			addTableToGroup(group, tsTable);
		}
	}
	
	function addTableToGroup(group, tsTable) {
		var tableName = tsTable.getDisplayValue("name");
		var tableGr = new GlideRecord(tableName); // Needed to check validity and get table label
		var tableLabel, tablePluralLabel, optionalLabel;
		
		if (!tableGr.isValid())
			return; // Skip invalid tables
		
		tableLabel = tableGr.getED().getLabel(); // Ew, but no access to TD in scope
		tablePluralLabel = tableGr.getED().getPlural();
		optionalLabel = tsTable.getDisplayValue("label");

		group.tables.push({
			id : tsTable.getUniqueValue(),
			name : tableName,
			label : tableLabel,
			label_plural : tablePluralLabel,
			optional_label : optionalLabel,
			conditionQuery : tsTable.getValue("condition"),
			conditions : tsTable.getDisplayValue("condition"), // not marked READABLE at present, so ugly
			searched : tsTable.getValue("searched") === "1"
		});
	}
	
	return {
		/**
		 * Get the search groups for the current user.
		 *
		 * Includes details about the group itself and the tables that comprise that group.
		 */
		getSearchGroups : getSearchGroups,
		getShowGroupsUserPreference: getShowGroupsUserPreference,
		getSysSearchProperties: getSysSearchProperties
	};
	
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-12-15 05:30:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;05b0c68867732200b133956c33415a9e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SearchMetadata&lt;/sys_name&gt;
        &lt;sys_package display_value="Enhanced Global Search UI" source="sn_global_searchui"&gt;dc1fcaa2c3032200f7d1ca3adfba8f1a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Enhanced Global Search UI"&gt;dc1fcaa2c3032200f7d1ca3adfba8f1a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_05b0c68867732200b133956c33415a9e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-01-09 15:00:00&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:19</sys_created_on>
        <sys_id>ea40fc5583b01210c6695855eeaad35f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SearchMetadata</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ea40fc5583b01210c6695855eeaad35f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
