<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>66453a26c724301066492f3bf4c260e0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.SessionService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This service will provide user, session and environment info&lt;/description&gt;
        &lt;name&gt;SessionService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var validVersions = ["vancouver", "utah", "tokyo",];
var fallBackVersion = "vancouver";
var familyVersionMap = {
    'vancouver': 24,
	'utah': 23,
	'tokyo': 22,
};

/**
 * Removes spacial characters, changes toLowerCase and trims trailing and leading whitespace
 * @param {string} familyVersion
 */
function scrubFamilyVersion(familyVersion) {
    var specialCharactersRemoved = familyVersion.replace(/[^\w\s]/gi, "");
    return specialCharactersRemoved.trim().toLowerCase();
}

/**
 * Tries to match the scrubbed family version against our list of validVersions.
 * If there is no match then it defaults to our fallBackVersion.
 * @param {string} familyVersion
 * @returns {string} validFamilyVersion
 */
function determineFamilyVersion(familyVersion) {
    var scrubbedFamilyVersion = scrubFamilyVersion(familyVersion);
    for (var i = 0; i &lt; validVersions.length; i++) {
        var validVersion = validVersions[i];
        if (scrubbedFamilyVersion.includes(validVersion)) return validVersion;
    }
    return fallBackVersion;
}

var SessionService = Class.create();
SessionService.prototype = {
    initialize: function () {},

    type: "SessionService",

    mabApiPropertyNamePrefix: "sn_mab_api.",
    mabApiAllowedPropertyNames: [
        "glide.appcreator.company.code",
        "glide.appcreator.company.friendly_name",
        "instance_name",
        "glide.sg.image_recognition.search.enable",
        "glide.ui.polaris.experience",
    ],

    getFamilyVersion: function () {
        var rawFamilyVersion = gs.getProperty('glide.buildname');
        return determineFamilyVersion(rawFamilyVersion);
    },

    getSessionInfo: function (requestedData) {
        var propertyKeys = requestedData.propertyKeys;
        var preferenceNames = requestedData.preferenceNames;
        var buildNameKey = "glide.buildname";
		var familyVersionNumberKey = "glide.familyVersionNumber";
        var sessionInfo = {};

        sessionInfo.userId = gs.getUserID();
        sessionInfo.firstName = gs.getUser().getFirstName();
        sessionInfo.lastName = gs.getUser().getLastName();
        sessionInfo.fullName = gs.getUser().getDisplayName();
        sessionInfo.roles = gs.getUser().getRoles();

        if (propertyKeys &amp;&amp; propertyKeys.length &gt; 0)
            sessionInfo.propertyValues = this._getPropertyValues(propertyKeys);
        else sessionInfo.propertyValues = {};

        if (preferenceNames &amp;&amp; preferenceNames.length &gt; 0)
            sessionInfo.preferenceValues =
                this._getUserPreferenceValues(preferenceNames);

        var rawFamilyVersion = gs.getProperty(buildNameKey);
        var familyVersion = determineFamilyVersion(rawFamilyVersion);
        sessionInfo.propertyValues[buildNameKey] = familyVersion;
		sessionInfo.propertyValues[familyVersionNumberKey] = familyVersionMap[familyVersion];
        return sessionInfo;
    },

    _getPropertyValues: function (propertyKeys) {
        var propertyValues = {};

        propertyKeys.forEach(function (key) {
            if (
                key &amp;&amp;
                (key.startsWith(this.mabApiPropertyNamePrefix) ||
                    this.mabApiAllowedPropertyNames.indexOf(key) != -1)
            ) {
                var propertyValue = gs.getProperty(key);
                if (propertyValue) propertyValues[key] = propertyValue;
            } else gs.warn(gs.getMessage("{0} property is not accessible through the MAB API", key));
        }, this);

        return propertyValues;
    },

    _getUserPreferenceValues: function (preferenceNames) {
        var preferenceValues = {};

        preferenceNames.forEach(function (name) {
            var preferenceValue = gs.getUser().getPreference(name);
            if (preferenceValue) preferenceValues[name] = preferenceValue;
        }, this);

        return preferenceValues;
    },
};

module.exports = {
    scrubFamilyVersion: scrubFamilyVersion,
    determineFamilyVersion: determineFamilyVersion,
    fallBackVersion: fallBackVersion,
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-06-08 03:43:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;66453a26c724301066492f3bf4c260e0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SessionService&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_66453a26c724301066492f3bf4c260e0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-10 22:10:15&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:02</sys_created_on>
        <sys_id>1bd6f81d83f01210c6695855eeaad3b8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SessionService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1bd6f81d83f01210c6695855eeaad3b8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:02</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
