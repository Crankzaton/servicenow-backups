<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2a7aeab4b7d220108223e126de11a9e1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.TreeConfigurationNode&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TreeConfigurationNode&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TreeConfigurationNode = Class.create();

TreeConfigurationNode.prototype = {
    /**
     * @param gr {GlideRecord}
     */
    initialize: function (gr) {
        this.relationships = [];
        this.references = [];
        this.configKey = '__EMPTY_CONFIGMETADATA';
        this.compatible = null;

        //Create empty Configuration Node
        if (!gr)
            return;

        this.configKey = gr.getValue('config_key');
        this.compatible = gr.getValue('compatible');
        if (!this.configKey)
            new ErrorHandler().throwBadConfigError('Invalid configKey retrieved for TreeConfigurationNode');

        if (gr.getValue('relationship_config'))
            this.relationships = this._createRelationships(this._toObject(gr.getValue('relationship_config')));

        if (gr.getValue('reference_config'))
            this.references = this._createReferences(this._toObject(gr.getValue('reference_config')));
    },

    /**
     * Returns the configKey
     * @return {String}
     */
    getConfigKey: function() {
        return this.configKey;
    },

    /**
     * Returns a map that meets json spec for tree configs
     * @return {*|{TreeConfigurationNode}}
     */
    getFormattedNode: function() {
        var node = {};

        node[this.configKey] = {
            relationships: this.relationships,
            references: this.references
        };

        return node;
    },

    _createRelationships: function(relationshipJSON) {
        var relationships = [];
        if (relationshipJSON.length &gt; 0) {
            relationshipJSON.forEach(function(relationship) {
                relationships.push(new Relationship(relationship));
            });
        }
        return relationships;
    },

    _createReferences: function(referenceJSON) {
        var references = [];
        if (referenceJSON.length &gt; 0) {
            referenceJSON.forEach(function(reference) {
                references.push(new Reference(reference));
            });
        }
        return references;
    },

    _toObject: function(json) {
        try {
            return JSON.parse(json);
        } catch (e) {
            gs.error(gs.getMessage('Unable to parse Json from TreeConfigurationNode for configKey: {0}', this.configKey));
            return null;

        }
    },

    type: 'TreeConfigurationNode',
};

function Relationship(relationshipJSON) {
    if (!relationshipJSON.remoteTableName)
        new ErrorHandler().throwBadConfigError('Relationship not defined correctly, no remoteTableName');

    if (!relationshipJSON.remoteRefFieldName)
        new ErrorHandler().throwBadConfigError('Relationship not defined correctly, no remoteRefFieldName');

    this.remoteTableName = relationshipJSON.remoteTableName;
    this.remoteRefFieldName = relationshipJSON.remoteRefFieldName;
    if (relationshipJSON.localRefFieldName)
        this.localRefFieldName = relationshipJSON.localRefFieldName;

    if (relationshipJSON.conditional)
        this.conditional = relationshipJSON.conditional;
}

function Reference(referenceJSON) {
    if (!referenceJSON.name)
        new ErrorHandler().throwBadConfigError('ReferenceField not defined correctly, no field name');

    this.name = referenceJSON.name;

    if (referenceJSON.conditional)
        this.conditional = referenceJSON.conditional;
}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-10 20:20:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2a7aeab4b7d220108223e126de11a9e1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TreeConfiguration&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2a7aeab4b7d220108223e126de11a9e1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-02-11 02:02:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:55</sys_created_on>
        <sys_id>1311bc5983b01210c6695855eeaad36a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TreeConfigurationNode</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1311bc5983b01210c6695855eeaad36a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
