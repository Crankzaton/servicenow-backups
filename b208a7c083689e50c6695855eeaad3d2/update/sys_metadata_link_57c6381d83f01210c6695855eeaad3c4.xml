<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>61034fcc87122010c84e4561d5cb0ba3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CatalogServiceFulfillmentStepUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CatalogServiceFulfillmentStepUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CatalogServiceFulfillmentStepUtil = Class.create();
CatalogServiceFulfillmentStepUtil.prototype = {

    initialize: function() {

    },

    parseJson: function(value) {
        var jsonObj;
        try {
            if (typeof value === 'string')
                jsonObj = JSON.parse(value);
            else if (typeof value === 'object')
                jsonObj = value;
        } catch (e) {
            gs.log(e);
        }

        if (!jsonObj || !jsonObj.hasOwnProperty('sys_class_name'))
            return null;

        var gr = new GlideRecord(jsonObj['sys_class_name']);
        gr.initialize();

        var list = gr.getElements();
        for (var i = 0; i &lt; list.size(); i++) {
            var ele = list.get(i);
            if (jsonObj.hasOwnProperty(ele.getName()))
                gr.setValue(ele.getName(), jsonObj[ele.getName()]);

        }
        gr.makeReadonly();
        return gr;
    },

    buildJson: function(gr) {
        var jsonObj = {};
        if (!gr || !gr.instanceOf('sc_service_fulfillment_step'))
            return jsonObj;

        var list = gr.getElements();

        for (var i = 0; i &lt; list.size(); i++)
            jsonObj[list.get(i).getName()] = gr.getValue(list.get(i).getName());

        return jsonObj;
    },

    createStep: function(request) {
        return this.populateStepPayloadAndSubmit(request, 'execute_producer');
    },

    updateStep: function(request) {
        return this.populateStepPayloadAndSubmit(request, 'save_producer');
    },

    populateStepPayloadAndSubmit: function(request, producerAction) {
        var requestBody = request.body.nextEntry();

        if (!requestBody.variables)
            throw new sn_ws_err.BadRequestError("Variables field is missing in request payload");

        var recordProducerId = requestBody.producer_id;

        if (!GlideStringUtil.isEligibleSysID(recordProducerId))
            throw new sn_ws_err.BadRequestError("Record producer id is not valid.");

        var catalogItem = new sn_sc.CatItem(recordProducerId);

        if (!catalogItem.canView())
            throw new sn_ws_err.BadRequestError("Security Constraints prevent access to the item");

        if (!requestBody.variables.service_fulfillment_step_configuration)
            throw new sn_ws_err.BadRequestError("Service fulfillment step configuration is missing in variables");

        var action = requestBody.variables.service_fulfillment_step_configuration;

        for (var key in requestBody.variables)
            if (requestBody.variables.hasOwnProperty(key) &amp;&amp; requestBody.variables[key] != null &amp;&amp; typeof(requestBody.variables[key]) !== 'string')
                requestBody.variables[key] = requestBody.variables[key].toString();

        requestBody.sysparm_id = recordProducerId;
        requestBody.sysparm_action = producerAction;

        if (!requestBody.sysparm_item_guid)
            requestBody.sysparm_item_guid = gs.generateGUID('');

        var stepInfo = {};
        var responseBody = this.submitStepRecordProducer(requestBody);

        if (!responseBody.errMsg &amp;&amp; responseBody.result) {
            stepInfo.stage_id = responseBody.stage_id;
            stepInfo.step_id = responseBody.result.sys_id;
            stepInfo.action_id = action;
			stepInfo.step_label = responseBody.result.step_label;
            stepInfo.producer_id = recordProducerId;
        }

        return {
            "step_info": stepInfo,
            "response_body": responseBody
        };
    },

    submitStepRecordProducer: function(requestBody) {
        var responseBody = {};
        try {
            responseBody = sn_sc.ServiceFulfillment.submitStepRecordProducer(requestBody);
        } catch (e) {
            gs.debug(e);
            var catalogExceptionUtils = new global.CatalogExceptionUtils();
            if (catalogExceptionUtils.isValveException(e))
                responseBody = catalogExceptionUtils.handleValveExceptionInPortal(e);
            else
                throw sn_ws_err.ServiceError("Invalid request");
        }

        return responseBody;
    },
	
	//Evaluates the Calculated Title for a given Service fulfillment step
	getStepTitle: function(current) {
		//Get the actual Service Fulfillment Step Record by Instance.
		if (!current.service_fulfillment_step_configuration)
			return '';
		
		var actionTitle = current.service_fulfillment_step_configuration.dynamic_title.getDisplayValue();
		var actionName  = current.service_fulfillment_step_configuration.name.getDisplayValue();
		var length = 200;
		if (GlideStringUtil.nil(actionTitle))
			return this.truncateValue(actionName, length);
		
		var stepFields = actionTitle.match(/\$\{\w+(?=\})/g) || [];
		if (stepFields.length === 0)
			return this.truncateValue(actionTitle, length);
				
		var actualRecord = current;
		var recordClassName = current.getRecordClassName();
		var currentTableName = current.getTableName();
		if (recordClassName !== currentTableName) {
			actualRecord = new GlideRecord(recordClassName);
			actualRecord.get(current.getUniqueValue());
		}
		
		var props = {};
		for (var field in stepFields) {
			var fieldName = stepFields[field].substring(2);
			if (!GlideStringUtil.nil(fieldName) &amp;&amp; !GlideStringUtil.nil(actualRecord.getDisplayValue(fieldName)))
				props[fieldName] = actualRecord.getDisplayValue(fieldName);
		}
		
		var dynamicTitle = GlideappScriptHelper.substituteVariables(actionTitle, props) + '';
		if (GlideStringUtil.nil(dynamicTitle))
			dynamicTitle = actionName;
		return this.truncateValue(dynamicTitle, length);
	},
	
	getApprovalTitle: function(current) {
		var actualRecord = current;
		if (current.getTableName() !== 'sc_service_fulfillment_approval_step') {
			actualRecord = new GlideRecord('sc_service_fulfillment_approval_step');
			actualRecord.get(current.getUniqueValue());
		}
		
		var users = GlideStringUtil.nil(actualRecord.getValue("users")) ? [] : GlideappScriptHelper.getDisplayValues(actualRecord, "users");
		var groups = GlideStringUtil.nil(actualRecord.getValue("groups")) ? [] : GlideappScriptHelper.getDisplayValues(actualRecord, "groups");
		var totalAssignes = users.length + groups.length;
		var viewRecords = [];
	
		for (var userIdx = 0 ; userIdx &lt; users.length &amp;&amp; viewRecords.length &lt; 2; userIdx++)
			viewRecords.push(users[userIdx]);
	
		for (var groupIdx = 0 ; groupIdx &lt; groups.length &amp;&amp; viewRecords.length &lt; 2; groupIdx++)
			viewRecords.push(groups[groupIdx]);
	
		if (totalAssignes === 1)
			return viewRecords[0];
		else if (totalAssignes === 2)
			return gs.getMessage("{0} and {1}", [viewRecords[0], viewRecords[1]]);
		else if (totalAssignes &gt; 2) 
			return gs.getMessage("{0}, {1} +{2} others", [viewRecords[0], viewRecords[1], (totalAssignes - 2).toString()]);
		else 
			return '';
	},
	
	truncateValue : function(value, length) {
		var ending = "...";
		if (value.length &gt; length)
			value = value.substring(0, length - ending.length) + ending;
		return value;
	},

    type: 'CatalogServiceFulfillmentStepUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-08 14:32:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;61034fcc87122010c84e4561d5cb0ba3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CatalogServiceFulfillmentStepUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Fulfillment Steps" source="com.glideapp.servicecatalog.service_fulfillment_steps"&gt;868bb0643c35311068bcf327dfe37fc7&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_61034fcc87122010c84e4561d5cb0ba3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-12-03 17:59:40&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:45</sys_created_on>
        <sys_id>57c6381d83f01210c6695855eeaad3c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CatalogServiceFulfillmentStepUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_57c6381d83f01210c6695855eeaad3c4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:45</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
