<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3d73f7aa772230106a9e78adaf5a99c1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_docker_spoke.DockerWebhookAuthenticator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The purpose of this class is to authenticate Docker webhook request received. Look at authenticate().&amp;#13;
Input: Query params in the form of object&amp;#13;
Output: status (success / failure), errorMessage, statusCode wrapped in an object&lt;/description&gt;
        &lt;name&gt;DockerWebhookAuthenticator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DockerWebhookAuthenticator = Class.create();
DockerWebhookAuthenticator.prototype = {
    initialize: function(params) {
		//ni.nolog prefix is used to prevent the query params from being logged at Load Balancer
        this.id = params['ni.nolog.id'].toString();
        this.token = params['ni.nolog.token'].toString();
    },

	authenticate: function() {
        if (this._isTokenAbsent()) {
            return this._prepareTokenMissingResponse();
        }
        return this._checkWebhookRegistration();
    },

    _isTokenAbsent: function() {
        return !this.id || !this.token;
    },

    _checkWebhookRegistration: function() {
        var response = {};
        var token = decodeURIComponent(this.token);
        var registry = new GlideRecord("sn_docker_spoke_docker_webhook_registry");
        if (registry.get(this.id)) {
            response = (token != registry.token.token.toString()) ? this._prepareTokenMismatchResponse() : this._prepareAuthSuccessResponse();
        } else {
            response = this._prepareUnRegisteredWebhookResponse(this.id);
        }
        return response;
    },

    _prepareTokenMissingResponse: function() {
        gs.error("id or token of webhook is not present");
        var response = {};
        response.status = "failure";
        response.errorMessage = "id or token of webhook is not present";
        response.statusCode = 400;
        return response;
    },

    _prepareUnRegisteredWebhookResponse: function(id) {
        gs.error("Webhook with id: " + id + " is not registered");
        var response = {};
        response.status = "failure";
        response.errorMessage = "Webhook with id: " + id + " is not registered";
        response.statusCode = 400;
        return response;
    },

    _prepareTokenMismatchResponse: function() {
        gs.error("Bad token");
        var response = {};
        response.status = "failure";
        response.errorMessage = "Bad token";
        response.statusCode = 401;
        return response;
    },

    _prepareAuthSuccessResponse: function() {
        var response = {};
        response.status = "success";
        response.statusCode = 200;
        return response;
    },
	
    type: 'DockerWebhookAuthenticator'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-15 18:17:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3d73f7aa772230106a9e78adaf5a99c1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DockerWebhookAuthenticator&lt;/sys_name&gt;
        &lt;sys_package display_value="Docker Spoke" source="sn_docker_spoke"&gt;dcb0e1e4db075300dd14596e5e9619ca&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Docker Spoke"&gt;dcb0e1e4db075300dd14596e5e9619ca&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3d73f7aa772230106a9e78adaf5a99c1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-15 18:17:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:04</sys_created_on>
        <sys_id>5266fc9983f01210c6695855eeaad329</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DockerWebhookAuthenticator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5266fc9983f01210c6695855eeaad329</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:04</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
