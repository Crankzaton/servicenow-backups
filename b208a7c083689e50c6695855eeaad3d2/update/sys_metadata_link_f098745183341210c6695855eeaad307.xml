<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>90c2699d87ae7d1096dd31550cbb3537</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WFCoreCountUtils_1&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;WFCoreCountUtils_1&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WFCoreCountUtils_1 = Class.create();
WFCoreCountUtils_1.prototype = {
    /**
     * Description: Initialize the threads, the csv bucket, and start datetime.
     * Return: None
     * Params: None
     */
    initialize: function() {
        this.threads = [0, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000];
        this.gdt = new GlideDateTime();
        this.bucketNum;
        this.headers = ["Name", "Count", "ID", "Date Time"];
        this.attachToRecord = "";
    },
    /**
     * Description: Initialize the threads, the csv bucket, and start datetime.
     * Return: None
     * Params: None
     */
    logger: function(data, number) {
        var gdt = new GlideDateTime();
        var gt = gdt.getLocalTime();
        var gd = gdt.getLocalDate();

        var formattedDateTime = gd.getByFormat('yyyyMMdd') + "_" + gt.getByFormat('hhmm');

        var grRec = new GlideRecord("sys_script_fix");
        grRec.get(this.attachToRecord); // &lt;-- Single point of isolation for attachment output.

        if (grRec.isValidRecord()) {
            var grAttachment = new GlideSysAttachment();
            grAttachment.write(grRec, "Table_Row_Count_" + number + "_" + formattedDateTime + ".csv", 'application/csv', data);
        }
    },
    /**
     * Description: Initialize the threads, the csv bucket, and start datetime.
     * Return: None
     * Params: None
     */
    process: function(thisBucketNum, attachTo) {
        this.attachToRecord = attachTo;
        var bucketCount = this.threads.length;
        this.bucketNum = thisBucketNum;

        // check that the bucket num is inside the array boundary
        if (thisBucketNum &lt; bucketCount) {
            var startTabNum = 0;
            var endTabNum = 0;

            for (var i = 0; i &lt; bucketCount &amp;&amp; i &lt; thisBucketNum; i++) {
                // Accumluate the start and end table counts.
                startTabNum += this.threads[i];
                endTabNum += this.threads[i + 1];
            }

            var data = this.rowCount(startTabNum, endTabNum, thisBucketNum);
            data = this.generateCSV(data);
            this.logger(data, thisBucketNum);
        }
    },
    /**
     * Description: Initialize the threads, the csv bucket, and start datetime.
     * Return: CSV Data Object
     * Params: String Data
     */
    generateCSV: function(data) {
        var dataObj = '';
        var count = this.headers.length;

        for (var i = 0; i &lt; count; i++) {
            dataObj += '"' + this.headers[i] + '"' + ',';
        }

        return dataObj + "\r\n" + data;
    },
    /**
     * Description: Initialize the threads, the csv bucket, and start datetime.
     * Return: Formatted datetime for the csv data in the file
     * Params: None
     */
    getDateTimeString: function() {
        var gdt = new GlideDateTime();
        var gt = gdt.getLocalTime();
        var gd = gdt.getLocalDate();

        return gd + " " + gt.getByFormat('hh:mm:ss');
    },

    rowCount: function(startTabNum, endTabNum, thisBucketNumber) {
        var tabNum = 0;
        var csvData = "";

        var dictionary = new GlideRecord('sys_db_object');
        dictionary.addEncodedQuery('nameNOT LIKEts_c_^name!=incident^name!=incident_task^name!=task_ci^name!=task_cmdb_ci_service^name!=task_sla^name!=sys_activity^name!=sys_audit_relation^name!=sys_ux_banner_announcement^name!=sys_ux_m2m_banner_announcement');
        
		if (thisBucketNumber &amp;&amp; thisBucketNumber === 10) {
            dictionary.addEncodedQuery('^ORname=sys_audit^ORname=sys_journal_field'); // If 10, then get the sys_audit.
        } else {
            dictionary.addEncodedQuery('^name!=sys_audit^name!=sys_journal_field');
        }
		
        dictionary.orderBy("name");
        dictionary.query();

        while (dictionary.next() &amp;&amp; dictionary.isValidRecord()) {
            tabNum++;
            tabName = dictionary.getValue("name");

            id = dictionary.getValue("sys_id");
            try {
                if (tabNum &gt;= startTabNum &amp;&amp; tabNum &lt; endTabNum) {
                    aggregate = new GlideAggregate(tabName);
                    aggregate.addAggregate('COUNT');
                    aggregate.query();

                    if (aggregate.next() &amp;&amp; tabName) {
                        csvData += ("\"" + tabName + "\"" + "," + aggregate.getAggregate('COUNT') + "," + id + "," + this.getDateTimeString());
                        csvData += "\r\n";
                    }
                }
            } catch (err) {


            }
        }

        return csvData;
    },
    type: 'WFCoreCountUtils_1'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;K090243&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-11-15 19:18:05&lt;/sys_created_on&gt;
        &lt;sys_id&gt;90c2699d87ae7d1096dd31550cbb3537&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WFCoreCountUtils_1&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_90c2699d87ae7d1096dd31550cbb3537&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:25:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:31</sys_created_on>
        <sys_id>f098745183341210c6695855eeaad307</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFCoreCountUtils_1</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f098745183341210c6695855eeaad307</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:31</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
