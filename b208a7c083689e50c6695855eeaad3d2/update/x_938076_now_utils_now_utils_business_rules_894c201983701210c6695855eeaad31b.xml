<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Generate / Update Variables</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var rawPayload = current.getValue("payload_template");
 var payload = JSON.parse(rawPayload);
 var generatedPayloadKeys = generateVariables(payload, '');
 var flattenedKeys = flatten(generatedPayloadKeys);
 var deletedKeys = deleteVariables(flattenedKeys);
 updateMapRecord(deletedKeys, flattenedKeys);

 // generate variable record and prepopulate fields
 function generateVariable(fieldLabel, pathPrefix, defaultValue) {
  var variable = new GlideRecord('sys_declarative_action_payload_field');

  variable.addQuery('element', pathPrefix);
  variable.addQuery('model', current.getUniqueValue());
  variable.query();

  // check if variable record already exists
  // just update default value  
  if (variable.next()) {
   variable.setValue('default_value', defaultValue);
   variable.update();
   return variable.getValue('configurable') == true;
  }
  
  variable.initialize();
  variable.setValue('label', fieldLabel);
  variable.setValue('element', pathPrefix);
  variable.setValue('internal_type', 'string');
  variable.setValue('default_value', defaultValue);
  variable.setValue('model', current.getUniqueValue());
  variable.setValue('max_length', 100);
  variable.setValue('configurable', true);
  variable.insert();
  return false;
 }
 
 // iterate over payload template and create variable records for non-objects
 // nested objects are separated by @ character
 // client code interprets this to assign values to object
 function generateVariables(payload, pathPrefix) {
  var payloadKeys = Object.keys(payload).map(function(key) {
   var newPath = (pathPrefix) ? pathPrefix + '@' + key : key;
   if (payload[key] instanceof Object) {
    return generateVariables(payload[key], newPath);
   }
   
   var configurable = generateVariable(key, newPath, payload[key]);
   return { label: key, value: payload[key], element: newPath, configurable: configurable };
  });
  return payloadKeys;
 }
 
 // Delete lingering variable records that are no longer needed
 function deleteVariables(payloadKeysList) {
  var variable = new GlideRecord('sys_declarative_action_payload_field');
  variable.addQuery('model', current.getUniqueValue());
  payloadKeysList.map(function(keyObj) {
   variable.addQuery('element', '!=', keyObj.element);
  });

  variable.query();
  var deletedKeys = [];
  while (variable.next()) {
   deletedKeys.push(variable.getValue('element'));
   variable.deleteRecord();
  }

  return deletedKeys;
 }

 // Update map record's query string using the list of 
 // new variables and deleted variables
 function updateMapRecord(deletedKeys, newKeys) {
  var mapping = new GlideRecord('sys_declarative_action_payload_mapping');
  mapping.addQuery('action_payload_definition', current.getUniqueValue());
  mapping.query();

  while(mapping.next()) {
   var query = mapping.getValue('payload_map');
   var queryString = new GlideQueryString(query);
   queryString.deserialize();
   var terms = queryString.getTerms();
   var updatedMap = '';
   var existingTerms = [];

   // update 
   for (var i = 0; i < terms.size(); i++) {
    var queryPart = terms.get(i);
    var term = queryPart.getTermField();
    var operator = queryPart.getOperator();
    var value = queryPart.getValue();
    if (!includes(deletedKeys, term) && term) {
     updatedMap += term + operator + value + "^";
     existingTerms.push(term);
    }
   }

   // add new keys
   newKeys.map(function(keyObj) {
    if (!includes(existingTerms, keyObj.element) && !keyObj.configurable) {
     updatedMap += keyObj.element + "=" + keyObj.value + "^";
    }
   });
   
   updatedMap += 'EQ';
   mapping.setValue('payload_map', updatedMap);
   mapping.update();
  }
 }
 
 function includes(arr, key) {
  return arr.filter(function(el) {
   return String(el) === String(key);
  }).length > 0;
 }

 // flatten array to be 1-d
 function flatten(arr) {
  return arr.reduce(function(flatList, el) {
   if (Array.isArray(el))
    return flatList.concat(flatten(el));
   return flatList.concat(el);
  }, []);
 }
 
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:44</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>894c201983701210c6695855eeaad31b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Generate / Update Variables</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_894c201983701210c6695855eeaad31b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:44</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=894c201983701210c6695855eeaad31b"/>
</record_update>
