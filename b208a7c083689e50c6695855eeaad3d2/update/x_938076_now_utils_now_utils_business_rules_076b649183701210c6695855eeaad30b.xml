<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.name.startsWith('password_reset')</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Password Reset Property Validation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[// make sure request expiry is greater than sms expiry
// num_enroll >= num_reset
validateProperties();
 
function validateProperties() {
 var nonNegative = gs.getMessage('pwd_non_negative', current.name);
 var reqAndSms = gs.getMessage('The number of minutes before a password reset request expires cannot be less than the number of minutes before the SMS code expires');
 var enrollAndReset = gs.getMessage('pwd_cannot_be_less_than', ['password_reset.qa.num_enroll',  'password_reset.qa.num_reset']);
        enrollAndReset += gs.getMessage(' If you are trying to change both values, change one value at a time');
 var positive = gs.getMessage('pwd_cannot_be_less_than', [current.name, 1]);
 var defaultSoftPINMinimumLength = 6;
 var softpinMinLengthErr = gs.getMessage('pwd_cannot_be_less_than', [current.name, defaultSoftPINMinimumLength]);
 var SOFTPIN_HISTORY_LIMIT_PROP = 'password_reset.softpin.history_limit';
 var SOFTPIN_EXPIRATION_DAYS_PROP = 'password_reset.softpin.expiration_days';
 var SOFTPIN_EXPIRATION_REMINDER_TIME_PROP = 'password_reset.softpin.expiration_reminder_time';
 var SOFTPIN_EXPIRATION_REMINDER_WARN_DAYS_PROP = 'password_reset.softpin.expiration_reminder_warn_days';
 var MAX_RESET_REQUEST_EMAIL_PROP = 'password_reset.request.max_email';
 var message;
 if (current.name == 'password_reset.request.expiry') {
  assertGreaterOrEqual(current.value, '0', nonNegative);
  
  var sms_expiry = getPropertyValue('password_reset.sms.expiry');
  assertGreaterOrEqual(current.value, sms_expiry, reqAndSms);
  
  var max_sms_expiry = getMaxExpiryParam();
  assertGreaterOrEqual(current.value, max_sms_expiry, gs.getMessage('The number of minutes before a password reset request expires cannot be less than the number of minutes for any SMS parameter setting'));  
  
 }
 if (current.name == 'password_reset.sms.expiry') {
  var request_expiry = getPropertyValue('password_reset.request.expiry');
  assertGreaterOrEqual(request_expiry, current.value, reqAndSms);
  
  assertGreaterOrEqual(current.value, '0', nonNegative);
 }
 
 if (current.name == 'password_reset.qa.num_enroll') {
  var num_reset = getPropertyValue('password_reset.qa.num_reset');
  assertGreaterOrEqual(current.value, num_reset, enrollAndReset);
  
  assertGreaterOrEqual(current.value, '0', nonNegative);
 }
 
 if (current.name == 'password_reset.qa.num_reset') {
  var num_enroll = getPropertyValue('password_reset.qa.num_enroll');
  assertGreaterOrEqual(num_enroll, current.value, enrollAndReset);
  
  assertGreaterOrEqual(current.value, '1', positive);
 }
 
 if (current.name == 'password_reset.sms.default_complexity')
  assertGreaterOrEqual(current.value, '1', nonNegative);
 
 if (current.name == 'password_reset.activity_monitor.incident_threshold') {
  if (assertGreaterOrEqual(current.value, '1', positive))
   expireActivityMonitor();
 }
 
 if (current.name == 'password_reset.activity_monitor.incident_window') { 
  if (assertGreaterOrEqual(current.value, '1', positive))
   expireActivityMonitor();
 }

 if (current.name == 'password_reset.history.limit') {
  assertGreaterOrEqual(current.value, '1', positive);
 }

 if (current.name == 'password_reset.softpin.min_length'){
  assertGreaterOrEqual(current.value, defaultSoftPINMinimumLength, softpinMinLengthErr);
 }
 
 if (current.name == 'password_reset.enroll_reminder.email_template') {
  var emailTemplateId = verifyEmailTemplate(current.value);
  if(gs.nil(emailTemplateId)){
   current.setAbortAction(true);
   gs.addErrorMessage(gs.getMessage('Could not find the \'{0}\' email template for enrollment reminder emails.', current.value));
   return;
  } 
  new pwdEnrollmentReminder().updateEnrollmentReminderEmailTemplate(emailTemplateId);
 }

 if (current.name == SOFTPIN_HISTORY_LIMIT_PROP) {
  message = gs.getMessage('The Soft PIN history limit must be any positive integer from 1 to 30.');
  if (checkPositiveIntegerInput(current.value,message)) {
   assertGreaterOrEqual(current.value, '1', message);
   assertGreaterOrEqual('30', current.value, message);
  }
 }

 if (current.name == SOFTPIN_EXPIRATION_DAYS_PROP) {
  message = gs.getMessage('The number of Soft PIN expiration days must be any positive integer greater than 30.');
  if(checkPositiveIntegerInput(current.value,message)) {
   assertGreaterOrEqual(current.value, '30', message);
  }
 }

 if (current.name == SOFTPIN_EXPIRATION_REMINDER_TIME_PROP) {
  message = gs.getMessage('Enter the Soft PIN reminder time in the HH:MM format.');
  if (isTimeFormatInHHMM(current.value, message)) {
   new SoftPINExpiration().updateExpirationJobExecutionTime(current.value);
  }
 }

 if (current.name == SOFTPIN_EXPIRATION_REMINDER_WARN_DAYS_PROP) {
  message = gs.getMessage('The value of the Soft PIN expiration reminder must be any positive integer less than or equal to 14.');
  if(checkPositiveIntegerInput(current.value,message)) {
   assertGreaterOrEqual('14', current.value, message);
   assertGreaterOrEqual(current.value, '0', message);
  }
 }

 if (current.name == MAX_RESET_REQUEST_EMAIL_PROP) {
  message = gs.getMessage('The maximum number of times that a user can receive "Reset Password" link via email, in a span of 24 hours should be less than or equal to 5.');
  assertGreaterOrEqual('5', current.value, message);
 }
}

function checkPositiveIntegerInput(value, message) {
 var utilitity = new PwdVerificationParameterUtility();
 if (!utilitity.isPositiveInteger(value)) {
  gs.addErrorMessage(message);
  current.setAbortAction(true);
  return false;
 }
 return true;
}

// return the max sms expiry parameter
// set for sms verifications..
// this is done in linearly..
// TODO: there may be better ways to do this
function getMaxExpiryParam() {
 var max = 0;
    var pr = new GlideRecord('pwd_verification_param');
 pr.addQuery('name','expiry');
 pr.addNotNullQuery('verification');
    pr.query();
 while(pr.next()) {
  var verificationId = pr.getValue('verification');
  var vr = new GlideRecord('pwd_verification');
        vr.addQuery('sys_id', verificationId);
  vr.addNotNullQuery('type');
  vr.query();
  if(vr.next()) {
   var typeId = vr.getValue('type');
   var tr = new GlideRecord('pwd_verification_type');
   tr.addQuery('sys_id', typeId);
   tr.query();
   if (tr.next()) {
    var paramValue = pr.getValue('value');
    if (parseInt(paramValue) > max)
     max = parseInt(paramValue); 
   }
   tr.close();
  }
  vr.close();
 }
 pr.close();
 return max;
}


// if propLarger >= propSmaller we are good
// otherwise do not allow
function assertGreaterOrEqual(propLarger, propSmaller, errMsg) {
 if (parseInt(propLarger) < parseInt(propSmaller)) {
  gs.addErrorMessage(errMsg);
  current.setAbortAction(true);
  return false;
 }
 return true;
}

function getPropertyValue(prop) {
 var val = '0';
    var gr = new GlideRecord('sys_properties');
 gr.addActiveQuery();
 gr.addQuery('name',prop);
 gr.query();
 if (gr.next())
  val = gr.getValue('value');

 gr.close(); 
 return val;
}

// in case of activity monitor parameters change, expire all rows
// whose expiration time is greater than current time
function expireActivityMonitor() {
 if (previous.value != current.value) {
  var now = GlideDateTime();
  var expiration = GlideDateTime();
  expiration.addSeconds(-2);
  
  var gr = new GlideRecord('pwd_activity_monitor');
  gr.addQuery('expiration', '>=', now.getValue());
  gr.query();
  while (gr.next()) {
   gr.setValue('expiration', expiration.getValue());
   gr.update();
  }
 }
}

function verifyEmailTemplate(name){
 var gr = new GlideRecord('sysevent_email_template');
 gr.addQuery('name', name);
 gr.query();
 if(gr.next())
  return gr.sys_id;
 return null;
}

function isTimeFormatInHHMM(time, errMsg) {
 var regex = /^([01]\d|2[0-3]):[0-5]\d$/;
 if (!regex.test(time)) {
  gs.addErrorMessage(errMsg);
  current.setAbortAction(true);
  return false;
 }
 return true;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:02</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>076b649183701210c6695855eeaad30b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Password Reset Property Validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_076b649183701210c6695855eeaad30b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:02</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=076b649183701210c6695855eeaad30b"/>
</record_update>
