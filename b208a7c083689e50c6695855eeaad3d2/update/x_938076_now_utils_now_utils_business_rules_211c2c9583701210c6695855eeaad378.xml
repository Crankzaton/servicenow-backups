<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Allow only leaf domains</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, _previous) {
 var getChildrenIds = function (domainId) {
  var children = {};
  var domainGr = new GlideRecord('domain');
  domainGr.addQuery('active', true);
  domainGr.addQuery('parent', domainId);
  domainGr.query();
  while (domainGr.next()) {
   children[domainGr.getUniqueValue()] = true;
  }
  return children;
 };

 var getDescendents = function (parentDomainId, descendents) {
  var children = getChildrenIds(parentDomainId);

  for (var child in children) {
   descendents[child] = true;
   var descendents = getDescendents(child, descendents);
   for (var d in descendents) {
    descendents[d] = true;
   }
  }
  return descendents;
 };

 var getAncestors = function (domainId) {
  var ancestors = {};
  var domainGr = new GlideRecord('domain');
  domainGr.get(domainId);
  var parentId = domainId;

  while (parentId && domainGr.get(parentId)) {
   ancestors[parentId] = true;
   parentId = domainGr.getValue('parent');
  }
  return ancestors;
 };

 var currentId = current.getValue('sys_domain');
 var descendentDomains = getDescendents(currentId, {});
 var ancestors = getAncestors(currentId);

 var coreDomainGr = new GlideRecord('sn_imt_core_domain');
 coreDomainGr.query();

 while (coreDomainGr.next()) {
  var domainId = coreDomainGr.getValue('sys_domain');
  var domainName = (coreDomainGr.sys_domain.name + '') || 'global'

  if (currentId === domainId) {
   gs.addErrorMessage(gs.getMessage("Domain '{0}' already exists", [domainName]));
   current.setAbortAction(true);
   break;
  }

  if (ancestors[domainId]) {
   gs.addErrorMessage(gs.getMessage("Parent or ancestor domain '{0}' already exists", [domainName]));
   current.setAbortAction(true);
   break;
  }

  if (descendentDomains[domainId]) {
   gs.addErrorMessage(gs.getMessage("Child or descendent domain '{0}' already exists", [domainName]));
   current.setAbortAction(true);
   break;
  }
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>211c2c9583701210c6695855eeaad378</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Allow only leaf domains</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_211c2c9583701210c6695855eeaad378</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:57</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=211c2c9583701210c6695855eeaad378"/>
</record_update>
