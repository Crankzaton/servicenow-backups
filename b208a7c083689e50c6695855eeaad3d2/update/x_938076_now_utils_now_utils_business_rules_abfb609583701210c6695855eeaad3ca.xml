<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>sys_trigger_system_idGetChoices()</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function sys_trigger_system_idGetChoices() {
 try {
  // if g_sys_trigger_sys_id_choices exists, it is a ChoiceList Java object,
  // so doing a "typeof" on it throws an error. Instead, try to compare it to something.
  // if we error, fall out of this TRY block and do the GlideRecord query.
  // if we don't error, use the ChoiceList we already built in a previous call into this function
  if (g_sys_trigger_sys_id_choices != "something") {
   for (var i = 0; i < g_sys_trigger_sys_id_choices.size(); i++) {
    var choice = g_sys_trigger_sys_id_choices.get(i);
    answer.add(choice.getValue(), choice.getValue());
   }
   return;
  }
 } catch(e) {
 }
 
 answer.add("ALL NODES", "All Nodes");
 answer.add("PRIMARY NODES", "Primary Nodes");
 answer.add("ACTIVE NODES","Active Nodes");
 var nd = new GlideRecord("sys_cluster_state");
 nd.query();
 while (nd.next())
  answer.add(nd.system_id, nd.system_id);
 
 g_sys_trigger_sys_id_choices = new GlideChoiceList();
 g_sys_trigger_sys_id_choices = answer;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:32</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>abfb609583701210c6695855eeaad3ca</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sys_trigger_system_idGetChoices()</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_abfb609583701210c6695855eeaad3ca</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:32</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=abfb609583701210c6695855eeaad3ca"/>
</record_update>
