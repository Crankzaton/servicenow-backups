<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>24838ee9770561109c62f5f3cb5a995e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.CustomTableInventoryDAO&lt;/api_name&gt;
        &lt;caller_access&gt;2&lt;/caller_access&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO class to retrieve data related to custom table inventory table&lt;/description&gt;
        &lt;name&gt;CustomTableInventoryDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CustomTableInventoryDAO = Class.create();
CustomTableInventoryDAO.prototype = {
    initialize: function() {
        this.logger = new LoggingUtil();
    },

    // returns true if table is present in CTI and allotment type is not grandfather
    isLicensableCustomTable: function(tableName) {
        var ctiGR = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        if (ctiGR.isValid() &amp;&amp; ctiGR.isValidField(LicensingEngineDBConstants.TABLE_NAME)) {
            ctiGR.addQuery(LicensingEngineDBConstants.TABLE_NAME, tableName);
            ctiGR.query();
            if (ctiGR.next()) {
                if (LicensingEngineDBConstants.ALLOTMENT_TYPE_GRANDFATHER != ctiGR.getValue(LicensingEngineDBConstants.ALLOTMENT_TYPE))
                    return true;
            }
        }
        return false;
    },

    // returns sys_id of the active subscription associated with the given custom table
    getActiveSubscriptionSysId: function(tableName) {
        var ctiGR = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        // As part of EPIC1061693, a new field called 'subscription_entitlement' has been added to the ua_custom_table_inventory which serves as the reference
        // of subscription_entitlement table, thus using the field 'subscription_entitlement' to get the associated subscription_entitlement record
        if (ctiGR.isValid() &amp;&amp; ctiGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT) &amp;&amp; ctiGR.isValidField(LicensingEngineDBConstants.TABLE_NAME)) {
            ctiGR.addQuery(LicensingEngineDBConstants.TABLE_NAME, tableName);
            var subscriptionStatusField = LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
            ctiGR.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);
            ctiGR.query();
            if (ctiGR.next())
                return ctiGR.getValue(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);

            if (this.logger.isEntitlementLoggingEnabled()) {
                const conditionsString = LicensingEngineDBConstants.TABLE_NAME.concat(LicensingEngineConstants.COMMA).concat(tableName).concat(LicensingEngineConstants.COMMA)
                    .concat(subscriptionStatusField).concat(LicensingEngineConstants.COMMA).concat(LicensingEngineConstants.ACTIVE_STATUS);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.CUSTOM_TABLE_INVENTORY_DAO, LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY, conditionsString);
            }
        }
        this.logger.logCouldNotDetermine(LicensingEngineConstants.CUSTOM_TABLE_INVENTORY_DAO, LicensingEngineConstants.GET_ACTIVE_SUBSCRIPTION_SYS_ID,
            LicensingEngineConstants.ACTIVE_ASSOCIATED_SUBSCRIPTIONS);
        return null;
    },

    /**
     * @returns Array{objects} returns array of objects with sys_id of UA Unmapped custom table records in global scope and no subscription attached
     */
    getUnmappedGlobalCustomTables: function() {
        const ctiGR = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        ctiGR.addQuery(LicensingEngineDBConstants.TABLE_REF_DOT_SYS_SCOPE, LicensingEngineDBConstants.GLOBAL_SCOPE);
        ctiGR.addNullQuery(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        ctiGR.query();
        const result = [];
        while (ctiGR.next()) {
            result.push({
                'custom_table_inventory_sys_id': ctiGR.getUniqueValue(),
                'table_sys_db_object_id': ctiGR.table_ref.toString(),
                'table_name': ctiGR.table_ref.name.toString()
            });
        }
        return result;
    },

    /**
     * @returns Array{objects} returns array of unmapped custom applications
     */
    getUnmappedCustomApplicationDetails: function() {
        const ctiGR = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        ctiGR.addNotNullQuery(LicensingEngineDBConstants.APP_NAME);
        ctiGR.addNotNullQuery(LicensingEngineDBConstants.TABLE_REF);
        ctiGR.addNullQuery(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        ctiGR.addNullQuery(LicensingEngineDBConstants.TABLE_REF_DOT_SYS_SCOPE_DOT_SUBSCRIPTION_ENTITLEMENT);
        ctiGR.addQuery(LicensingEngineDBConstants.TABLE_REF_DOT_SYS_SCOPE, '!=', LicensingEngineDBConstants.GLOBAL_SCOPE);
        ctiGR.query();
        const result = {};
        while (ctiGR.next()) {
            const scope = ctiGR.app_scope.toString();
            if (!result.hasOwnProperty(scope)) {
                result[scope] = [];
            }
            const table_name = ctiGR.table_ref.name.toString();
            result[scope].push(table_name);
        }
        return result;
    },

    /**
     *
     * @returns {string} returns the subscription_entitlement details for given table
     */
    getSubscriptionIdByTableName: function(tableName) {
        const ctiGR = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        ctiGR.addQuery(LicensingEngineDBConstants.TABLE_REF_DOT_NAME, tableName);
        ctiGR.query();
        if (ctiGR.next()) {
            return ctiGR.subscription_entitlement.sys_id.toString();
        }
    },

    /**
     *
     * @param {guid} subEntSysId The subscription_entitlement.sys_id to retrieve allocated tables count
     * @returns {number} returns the aggregated table count for the given subscription_entitlement record
     */
    getAllocatedTableCount: function(subEntSysId) {
        const ctiGA = new GlideAggregate(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        if (ctiGA.isValid() &amp;&amp; !ctiGA.isValidField(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT))
            return 0;

        const subscriptionEntPrefix = LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT.concat(LicensingEngineConstants.DOT);

        const subscriptionStatusField = subscriptionEntPrefix.concat(LicensingEngineDBConstants.STATUS);
        ctiGA.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);

        const subscriptionEntSysIdField = subscriptionEntPrefix.concat(LicensingEngineDBConstants.SYS_ID);
        ctiGA.addQuery(subscriptionEntSysIdField, subEntSysId);

        ctiGA.addAggregate('COUNT');
        ctiGA.query();

        if (ctiGA.next()) {
            const count = parseInt(ctiGA.getAggregate('COUNT'));
            return !Number.isInteger(count) ? 0 : Number(count);
        }

        return 0;
    },

    /**
     * Used in data migration for mapping license_details reference to subscription_entitlement
     * Multiple tables can be mapped to a single subscription, mapping product code to list of custom tables
     * Load all product_code from ua_custom_table_inventory.license for global scope and for scope which is not global get from table_ref.sys_scope.license
     *
     * @returns {object} returns the product_code to list of custom tables map
     */
    getLicenseProductCodeToCustTblListMap: function() {
        const productCodeToCustTblListObj = {};
        const ctiGR = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        ctiGR.addNotNullQuery(LicensingEngineDBConstants.LICENSE);
        ctiGR.query();

        while (ctiGR.next()) {
            let licenseSysId = ctiGR.getValue(LicensingEngineDBConstants.LICENSE);
            let productCode = ctiGR.getElement(LicensingEngineDBConstants.LICENSE.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.PRODUCT_CODE));
            if (global.JSUtil.nil(productCode)) // In case!!!
                continue;

            let custTbl = {
                'uaCustTblSysId': ctiGR.getUniqueValue(),
                'licenseSysId': licenseSysId
            };
            if (productCode in productCodeToCustTblListObj) {
                productCodeToCustTblListObj[productCode].push(custTbl);
            } else {
                productCodeToCustTblListObj[productCode] = [];
                productCodeToCustTblListObj[productCode].push(custTbl);
            }
        }
        return productCodeToCustTblListObj;
    },

    /**
     * Updates a ua_custom_table_inventory record's subscription_entitlement field
     *
     * @param {guid} productId - the subscription_entitlement sys_id to set the reference field to
     * @param {guid} customTableId - the sys_id of the ua_custom_table_inventory record to update
     * @returns {guid} the sys_id of the udpated record or null
     */
    updateSubscriptionValueBySysId: function(productId, customTableId) {
        const gr = new GlideRecord(LicensingEngineDBConstants.UA_CUSTOM_TABLE_INVENTORY);
        if (!gr.get(customTableId))
            return null;

        gr.setValue(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT, productId);
        return gr.update();
    },

    type: 'CustomTableInventoryDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-24 07:34:33&lt;/sys_created_on&gt;
        &lt;sys_id&gt;24838ee9770561109c62f5f3cb5a995e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CustomTableInventoryDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_24838ee9770561109c62f5f3cb5a995e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-16 11:27:00&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:19</sys_created_on>
        <sys_id>aaf0345983b01210c6695855eeaad307</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CustomTableInventoryDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_aaf0345983b01210c6695855eeaad307</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
