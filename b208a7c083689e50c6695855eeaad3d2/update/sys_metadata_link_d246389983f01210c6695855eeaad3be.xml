<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3001f5964f01311054e85e8330ce0bcf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MigrateDashboardAjax&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;This script gets selected Core UI dashboards and migrates them to the next experience dashboards&lt;/description&gt;
        &lt;name&gt;MigrateDashboardAjax&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MigrateDashboardAjax = Class.create();
MigrateDashboardAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    migrateDashboardsToNextExperience: function() {
        var selectedSysIds = this.getParameter('sysparm_selected_dashboards').split(',');
        this._migrateDashboards(selectedSysIds);
    },

    _migrateDashboards: function(dashboardSysIdList) {
        var migrationService = new SNC.MigrationServiceScriptable();
        var newMigratedDashboardList = [];
        var errMessageList = [];
        for (var i = 0; i &lt; dashboardSysIdList.length; i++) {
            var res = migrationService.migrateDashboard(dashboardSysIdList[i]);
            this._processResponse(JSON.parse(res), dashboardSysIdList[i], newMigratedDashboardList, errMessageList);
        }
        this._displayMessage(newMigratedDashboardList, errMessageList);
    },

    _processResponse: function(res, legacyDashboardId, newMigratedDashboardList, errorMessageList) {
        var msg = '';
        if (gs.nil(res)) {
            msg = gs.getMessage('Migrating legacy dashboard with id:{0} return no response.\n', legacyDashboardId);
            errorMessageList.push(msg);
            return;
        }
        if (res.status == "Fail") {
            errorMessageList.push(res.message); //message comes from the server already translated
            return;
        }
        newMigratedDashboardList.push(res.id);
    },

    _displayMessage: function(newMigratedDashboardList, errMessageList) {
        var msg;
        var length = newMigratedDashboardList.length;
        if (length &gt; 0) {
            var tinyUrlDashboardOverview = new GlideTinyURL().createTinyURL("/now/platform-analytics-workspace/dashboard-library");
            var tinyUrlDashboardList = new GlideTinyURL().createTinyURL("par_dashboard_list.do?sysparm_query=sys_idIN" + newMigratedDashboardList);
            msg = gs.getMessage('Your &lt;a href="{0}"&gt;migrated dashboards&lt;/a&gt; are available on the Dashboard Overview &lt;a href="{1}"&gt;here&lt;/a&gt;.', [tinyUrlDashboardList, tinyUrlDashboardOverview]);
            gs.addInfoMessage(msg);
        }
        if (errMessageList.length &gt; 0) {
            msg = gs.getMessage('{0} dashboards failed to migrate with the following reasons:{1}', [errMessageList.length + '', errMessageList.join()]);
            gs.addErrorMessage(msg);
        }
    },

    rollback: function() {
        if (!gs.hasRole('admin,dashboard_admin'))
            gs.error('Insuffecient privillage to perform this action.');

        var selectedSysIds = this.getParameter('sysparm_selected_dashboards');
        return this._rollback(selectedSysIds);
    },

    _rollback: function(dashboardSysIdList) {
        var gr = new GlideRecord('par_coreui_migration_bridge_dashboard');
        gr.addQuery('par_dashboard', 'IN', dashboardSysIdList).addCondition('is_last', true);
        gr.addEncodedQuery('par_dashboard.active=true^pa_dashboard.active=false');
        gr.query();

        var totalRolledBackDashboards = gr.getRowCount();
        var isUnifiedAnalyticsEnabled = gs.getProperty('com.glide.par.unified_analytics.enabled', 'false') == 'true';
        var activeIn = isUnifiedAnalyticsEnabled ? 'core' : '';

        while (gr.next()) {
            gr.setValue('active', activeIn);
            gr.update();
            this._updateDashboardFlag('pa_dashboards', gr.getValue('pa_dashboard'), true);
            this._updateDashboardFlag('par_dashboard', gr.getValue('par_dashboard'), false);
        }
        gs.addInfoMessage(gs.getMessage('{0} dashboards were rolled back successfully.', totalRolledBackDashboards));
    },

    _updateDashboardFlag: function(table, id, flag) {
        var gr = new GlideRecord(table);
        if (gr.get(id)) {
            gr.setValue('active', flag);
            gr.update();
        }
    },

    isAllowedToRollBack: function(dashboardId) {
        if (gs.nil(dashboardId))
            return false;

        var prop = gs.getProperty("com.glide.par.unified_analytics.enabled", "");

        //As long as unified analytics property exists and have either true or false value, we will allow the rollback
        if (!gs.nil(prop) &amp;&amp; (prop == "true" || prop == "false"))
            return this._isCoreUiVersionAvailable(dashboardId);

        return false;
    },

    _isCoreUiVersionAvailable: function(nextExpDashboardId) {
        if (gs.nil(nextExpDashboardId))
            return false;

        var gr = new GlideRecord('par_coreui_migration_bridge_dashboard');
        if (!gr.get('par_dashboard', nextExpDashboardId))
            return false;

        //We don't rollback what is already rolledback
        if (gr.getValue('active') == "core")
            return false;


        var coreDashboardId = gr.getValue("pa_dashboard");
        return !gs.nil(coreDashboardId);
    },

    type: 'MigrateDashboardAjax'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-09-05 09:19:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3001f5964f01311054e85e8330ce0bcf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;48&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MigrateDashboardAjax&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide PAR CoreUI Migration" source="com.snc.par.coreui.migration"&gt;40e853db47220210cd4e1ce4316d4323&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3001f5964f01311054e85e8330ce0bcf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-12-29 15:51:09&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:31</sys_created_on>
        <sys_id>d246389983f01210c6695855eeaad3be</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MigrateDashboardAjax</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d246389983f01210c6695855eeaad3be</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:31</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
