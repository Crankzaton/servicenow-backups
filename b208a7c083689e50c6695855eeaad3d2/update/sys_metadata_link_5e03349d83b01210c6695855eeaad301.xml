<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5badab5e1b97ce10ff37eb14b24bcb6d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;//Working code
/*If user is GSC

Manager = My groups + Associated markets groups
Checker = My groups
Maker = My groups

If user is Onshore

Manager = My groups + Associated markets groups + group location != GSC
Checker = My groups 
Maker = My groups
*/


var logUser = '75f79e131bb64610ff37eb14b24bcb2f'; //change to gs.getUserID();
var gscUser = false; // GSC or Onshore user flag
var grpType = []; // fetching owning business group the logged in user is part of
var grpLocation = []; //fetching group location Onshor or GSC
var arrayUtil = new global.ArrayUtil(); //calling Arrayutil to filter duplicate array elements for optimization
var allowedGrps = [];
//var grpLocArr = ['Onshore', 'GSC'];

//Logged in User Group Types and Group Location
var myGroups = new GlideRecord('sys_user_grmember');
myGroups.addEncodedQuery('user.sys_id=' + logUser);
myGroups.query();
while (myGroups.next()) {
    grpType.push(myGroups.group.type.getDisplayValue());
    grpLocation.push(myGroups.group.u_group_location);
}
//Logged in User Group Types and Group Location

//Unique User Group Types and Group Location
var uniqGrpType = grpType.toString().split(","); //converting the type array to string
uniqGrpType = arrayUtil.unique(uniqGrpType); // Unique Groups Types
var uniqgrpLocation = grpLocation.toString().split(","); //converting the location array to string
uniqgrpLocation = arrayUtil.unique(uniqgrpLocation); //unique group locations
//Unique User Group Types and Group Location

gs.info("Group Types  " + uniqGrpType.toString());
gs.info("Group Location " + uniqgrpLocation.toString());
//gs.info("Group Types field " +      typeof(uniqGrpType));
//gs.info("Group Location field  " + typeof(uniqgrpLocation));

if ((uniqgrpLocation.indexOf('GSC') &amp;gt; -1) &amp;amp;&amp;amp; gs.getUser().getUserByID(logUser).hasRole('x_hsb11_mss_custod.custody_manager')) { //GSC Manager
    gs.info('User is a GSC Manager');
} else if ((uniqgrpLocation.indexOf('Onshore') &amp;gt; -1) &amp;amp;&amp;amp; gs.getUser().getUserByID(logUser).hasRole('x_hsb11_mss_custod.custody_manager')) { //Onshore Manager
    gs.info('User is a Onshore Manager');
} else if((gs.getUser().getUserByID(logUser).hasRole("x_hsb11_mss_custod.custody_checker")) || (gs.getUser().getUserByID(logUser).hasRole("x_hsb11_mss_custod.custody_maker"))){
    gs.info('User is a Maker or Checker');
}


//working code
&lt;/description&gt;
        &lt;name&gt;Check Onshore or GSC user&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[/*If user is GSC

Manager = My groups + Associated markets groups
Checker = My groups
Maker = My groups

If user is Onshore

Manager = My groups + Associated markets groups + group location != GSC
Checker = My groups 
Maker = My groups
*/

var logUser = '1bf856931bb64610ff37eb14b24bcb9c'; //change to gs.getUserID();
var gscUser = false; // GSC or Onshore user flag
var grpType = []; // fetching owning business group the logged in user is part of
var grpLocation = []; //fetching group location Onshor or GSC
var arrayUtil = new global.ArrayUtil(); //calling Arrayutil to filter duplicate array elements for optimization
var allowedGrps = [];
//var grpLocArr = ['Onshore', 'GSC'];

//Logged in User Group Location
var myGroups = new GlideRecord('sys_user_grmember');
myGroups.addEncodedQuery('user.sys_id=' + logUser);
myGroups.query();
while (myGroups.next()) {
    //grpType.push(myGroups.group.type);
    grpLocation.push(myGroups.group.u_group_location);
}
//Logged in User Group Location

//Logged in user Associated Markets
var userMarket = new GlideRecord('sys_user');
userMarket.get(logUser);
var currUserMarket = userMarket.u_associated_business_markets.split(",");
var userAssocMarket = new GlideRecord('sys_user_group_type');
userAssocMarket.addEncodedQuery('nameIN' + currUserMarket);
userAssocMarket.query();
while (userAssocMarket.next()) {
    grpType.push(userAssocMarket.sys_id + '');
}
//Logged in user Associated Markets


//Unique User Group Location
var uniqgrpLocation = grpLocation.toString().split(","); //converting the location array to string
uniqgrpLocation = arrayUtil.unique(uniqgrpLocation); //unique group locations
//Unique User Group Location

gs.info("Group Types  " + grpType.toString());
gs.info("Group Location " + uniqgrpLocation.toString());

var myGrps = gs.getUser().getUserByID(logUser).getMyGroups();
var grpQuery = '';

//Filter the groups based on persona

if ((uniqgrpLocation.indexOf('GSC') &gt; -1) &amp;&amp; gs.getUser().getUserByID(logUser).hasRole('x_hsb11_mss_custod.custody_manager')) { //GSC Manager

    grpQuery = 'user.sys_id=' + logUser + '^NQgroup.typeIN' + grpType.toString();
    gs.info("GSC Manager " + grpQuery);

    gs.info('User is a GSC Manager');
} else if ((uniqgrpLocation.indexOf('Onshore') &gt; -1) &amp;&amp; gs.getUser().getUserByID(logUser).hasRole('x_hsb11_mss_custod.custody_manager')) { //Onshore Manager

    grpQuery = 'user.sys_id=' + logUser + '^NQgroup.typeIN' + grpType.toString() + '^group.u_group_location!=GSC';
    gs.info("Onshore Manager " + grpQuery);
    gs.info('User is a Onshore Manager');
} else if ((gs.getUser().getUserByID(logUser).hasRole("x_hsb11_mss_custod.custody_checker")) || (gs.getUser().getUserByID(logUser).hasRole("x_hsb11_mss_custod.custody_maker"))) {

    grpQuery = 'user.sys_id=' + logUser;

    gs.info("Checker/Maker " + grpQuery);
    gs.info('User is a Maker or Checker');
}

var getAllowGrps = new GlideRecord('sys_user_grmember');
getAllowGrps.addEncodedQuery(grpQuery);
getAllowGrps.query();
while (getAllowGrps.next()) {
    allowedGrps.push(getAllowGrps.group.name);
}

gs.info("Hello " + allowedGrps.toString());
//Filter the groups based on persona

//gs.info(allowedGrps.toString());
//Filter the groups based on persona]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;45381533@hsbc.com&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-07-12 11:08:21&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5badab5e1b97ce10ff37eb14b24bcb6d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;64&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Check Onshore or GSC user&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_5badab5e1b97ce10ff37eb14b24bcb6d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;45381533@hsbc.com&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-07-15 08:11:06&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:19</sys_created_on>
        <sys_id>5e03349d83b01210c6695855eeaad301</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check Onshore or GSC user</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5e03349d83b01210c6695855eeaad301</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:19</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
