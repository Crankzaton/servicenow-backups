<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Playbook Activity UI</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var RECORD_ACTIVITY_TYPE = 'e12af577871333003058d1a936cb0ba4';
 var EXPERIENCE_TYPE = "experience_type";
 var DEPRECATED = "(DEPRECATED)";
 var model = current.model;
 var currentOperation = current.operation();
 
 var element = current.getValue("element");
 var defaultValue = current.getValue("default_value") || "";
 var label = current.getValue("label") || "";
 var internalReference = current.getValue("internal_type") || "string";
 var reference = current.getValue("reference") || null;
 
 var defaultValueProps = {
  value: defaultValue,
  elementData: {
   type: internalReference
  }
 };
 
 var schemaStructure = {
  "type": "object",
  "properties": {
   "value": {
    "type": "string"
   },
   "elementData": {
    "type": "object",
    "properties": {
     "type": {
      "type": "string"
     }
    }
   }
  }
 };
 
 if(internalReference !== "string") {
  defaultValueProps.displayValue = defaultValue;
  schemaStructure.properties.displayValue = {type: "string"};
 }
 
 if(internalReference === "reference") {
  defaultValueProps.elementData.reference = reference;
  schemaStructure.properties.elementData.properties.reference = {type: "string"};
 }
 
 if(currentOperation === "delete")
  defaultValueProps.label = label + " " + DEPRECATED;
 
 if(currentOperation === "update") {
  var previousDefaultValue = previous.getValue("default_value") || "";
  defaultValueProps.value = previousDefaultValue;
  defaultValueProps.displayValue = previousDefaultValue;
 }
 
 var activityUIGlideRecord = new GlideRecord("sys_playbook_experience_activity_ui");
 var activityUIGlideRecordQuery = activityUIGlideRecord.addQuery(EXPERIENCE_TYPE, model);
 // if model is Record also query for all Blank and Default Activity UIs for update
 if(model.toString() === RECORD_ACTIVITY_TYPE)
  activityUIGlideRecordQuery.addOrCondition(EXPERIENCE_TYPE, "");
 activityUIGlideRecord.query();
 
 while(activityUIGlideRecord.next()) {
  
  // Defensive check to make sure we have valid macroponent props
  var macroponentProps = JSON.parse((activityUIGlideRecord.macroponent && activityUIGlideRecord.macroponent.props).trim() || "[]")[0];
  
  // if macroponentProps are not found then skip iteration
  if(!macroponentProps) 
   continue;
  
  macroponentProps.typeMetadata.schema.properties[element] = schemaStructure;
  macroponentProps.defaultValue[element] = defaultValueProps;

  var sysUXMacroponentGlideRecord = new GlideRecord("sys_ux_macroponent");
  sysUXMacroponentGlideRecord.get(activityUIGlideRecord.macroponent);
  sysUXMacroponentGlideRecord.setValue("props", JSON.stringify([macroponentProps]));
  sysUXMacroponentGlideRecord.update();

  var screenMacroponentConfig = JSON.parse(activityUIGlideRecord.screen && activityUIGlideRecord.screen.macroponent_config);
  
  if(screenMacroponentConfig.experienceProperties && screenMacroponentConfig.experienceProperties.value)
   screenMacroponentConfig.experienceProperties.value[element] = defaultValueProps;
  
 
  var sysUXScreenGlideRecord = new GlideRecord("sys_ux_screen");
  sysUXScreenGlideRecord.get(activityUIGlideRecord.screen);
  sysUXScreenGlideRecord.setValue("macroponent_config", JSON.stringify(screenMacroponentConfig));
  sysUXScreenGlideRecord.update();
 }
 

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:00</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>3bdb645583701210c6695855eeaad34f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Playbook Activity UI</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_3bdb645583701210c6695855eeaad34f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:00</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=3bdb645583701210c6695855eeaad34f"/>
</record_update>
