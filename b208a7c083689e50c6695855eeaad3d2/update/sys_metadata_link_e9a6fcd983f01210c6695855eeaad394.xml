<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>52792b9b0f023010e6d4fd820b767e3e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_install_base.CSMRelationshipService_ConsumerSoldProduct&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.CSMRelationshipServiceEP for sold product consumer relationships.&amp;#13;
Extension point for CSM Relationship framework.&lt;/description&gt;
        &lt;name&gt;CSMRelationshipService_ConsumerSoldProduct&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CSMRelationshipService_ConsumerSoldProduct = Class.create();
CSMRelationshipService_ConsumerSoldProduct.prototype = Object.extendsObject(sn_install_base.CSMRelationshipService_SoldProductRelatedParty, {
	initialize: function() {
		sn_install_base.CSMRelationshipService_SoldProductRelatedParty.prototype.initialize.call(this);
		this.IBUtil = new sn_install_base.InstallBaseUtil();
	},
	
	canProcess: function(relationship, additionalParams) {
		if(gs.nil(relationship))
			return false;
		
		var isConsumerSoldProduct = gs.nil(additionalParams) ? false : additionalParams[global.CSMRelationshipConstants.IS_CONSUMER_SOLD_PRODUCT];
		if (isConsumerSoldProduct)
			return (relationship == global.CSMBaseConstants.SOLD_PRODUCT_RELATED_PARTY) || (relationship == global.CSMRelationshipConstants.RELATIONSHIP_CONSUMER_SOLDPRODUCT);

		// fallback to Tokyo implementation
		return relationship == global.CSMRelationshipConstants.RELATIONSHIP_CONSUMER_SOLDPRODUCT;
	},
	
	_addPersonaCriteria: function(relationshipGR) {
		relationshipGR.addNotNullQuery(global.CSMRelationshipConstants.FIELD_CONSUMER);
		relationshipGR.addQuery(global.CSMRelationshipConstants.FIELD_CONSUMER, this._getConsumerId());
	},
	
	_addAdditionalConsumerCriteria: function(relationshipGR) {
		if (this._getConsumerId()) {
			this.IBUtil.addHouseHoldRelatedQuery(relationshipGR, this._getConsumerId());
		}
	},
	
	_addAdditionalConsumerEntities: function(entities) {
		if (this.context.entityName &amp;&amp; this.context.entityName == global.CSMRelationshipConstants.FIELD_CONSUMER &amp;&amp; this.context.current &amp;&amp; this._isChildOf(global.CSMBaseConstants.CASE_TABLE, this.context.current.getTableName())) {
			// add current.sold_product.consumer
			if (!gs.nil(this.context.current[global.CSMRelationshipConstants.SOLD_PRODUCT])) {
				var consumerEntity = this.context.current[global.CSMRelationshipConstants.SOLD_PRODUCT][global.CSMRelationshipConstants.FIELD_CONSUMER] + '';
				if (!gs.nil(consumerEntity))
					entities[consumerEntity] = true;
			}
			return;
		}
		
		if (this._getConsumerId()) {
			this.IBUtil.getAdditionalValidSoldProducts(this._getConsumerId(), entities);
		}
	},
	
	getResponsibilities: function(relationship, accessLevel, respParams) {
		var responsibilities = this.__getAdditionalParam("responsibilities");
		if (!gs.nil(responsibilities))
			return responsibilities;
		var isSPViewer = (respParams &amp;&amp; respParams.isSPViewer) || this.__getAdditionalParam("isSPViewer");
		responsibilities = sn_install_base.CSMRelationshipService_SoldProductRelatedParty.prototype.getResponsibilities.call(this, relationship, accessLevel);
		if (isSPViewer &amp;&amp; accessLevel == global.CSMRelationshipConstants.ACCESS.READ)
			responsibilities = this._addSPViewerResponsibility(responsibilities);
		return responsibilities;
	},
	
	//adds consumer sold product viewer responsibility with out role check
	_addSPViewerResponsibility: function(responsibilities) {
		if (gs.nil(responsibilities))
			responsibilities = [];
		responsibilities.push(global.CSMRelationshipConstants.CONSUMER_SOLD_PRDOUCT_VIEWER);
		return responsibilities;
	},

	type: 'CSMRelationshipService_ConsumerSoldProduct'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-24 04:57:48&lt;/sys_created_on&gt;
        &lt;sys_id&gt;52792b9b0f023010e6d4fd820b767e3e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CSMRelationshipService_ConsumerSoldProduct&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Install Base Management" source="sn_install_base"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Service Install Base Management"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_52792b9b0f023010e6d4fd820b767e3e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-12 09:44:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:06</sys_created_on>
        <sys_id>e9a6fcd983f01210c6695855eeaad394</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CSMRelationshipService_ConsumerSoldProduct</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e9a6fcd983f01210c6695855eeaad394</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
