<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>12ce3fba53453110ac07ddeeff7b1262</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ProductInstanceUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ProductInstanceUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ProductInstanceUtil = Class.create();
ProductInstanceUtil.prototype = {
	initialize: function() {},
	type: 'ProductInstanceUtil',
};

ProductInstanceUtil.isProductInstance = function(modelCategoryId) {
	// eslint-disable-next-line
	return sn_cmdb.ProductInstance.isProductInstance(modelCategoryId);
};

ProductInstanceUtil.getPIDConfig = function(productInstanceClass, modelCategoryId) {
	// eslint-disable-next-line
	return sn_cmdb.ProductInstance.getPIDConfig(productInstanceClass, modelCategoryId);
};

ProductInstanceUtil.generatePIDForEntity = function(modelCategory, entityClassName, entityGr,
	valueHash) {
	var entityJson = ProductInstanceUtil.getPIDAttrForEntity(entityGr, valueHash);
	return ProductInstanceUtil.generatePID(entityClassName, modelCategory, entityJson);
};

ProductInstanceUtil.generatePID = function(productInstanceClass, modelCategoryId, columnHash) {
	try {
		// eslint-disable-next-line
		var result = sn_cmdb.ProductInstance.generatePID(productInstanceClass, modelCategoryId, columnHash);
		if (typeof result === 'string') {
			return result;
		}
		return result.product_instance_id;
	} catch (e) {
		gs.log('PID generation failed');
	}
	return '';
};

/**
 * Returns the sysId if a match is found with same entityGr
 */
ProductInstanceUtil.identifyEntityThroughIRE = function(entityGr) {
	var payload = {
		items: [{
			className: entityGr.getTableName(),
			values: ProductInstanceUtil.getEntityJson(entityGr),
		}],
	};

	var cmdbUtil = new AssetCMDBUtil();
	var checkResult = cmdbUtil.checkInsertOrUpdate(cmdbUtil.jsonApi.encode(payload));

	if (!checkResult.success) {
		throw new Error(gs.getMessage('CMDB Identification Error occured.'));
	}
	if (checkResult.success &amp;&amp; !checkResult.insert &amp;&amp; checkResult.sysId) {
		return checkResult.sysId;
	}
	return '';
};

ProductInstanceUtil.getEntityJson = function(entityGr) {
	var entityJson = {};
	var columnName;
	var fields = entityGr.getFields();
	for (var num = 0; num &lt; fields.size(); num++) {
		columnName = fields.get(num).getName();
		if (columnName.indexOf('sys_') !== 0) {
			entityJson[columnName] = entityGr.getValue(columnName);
		}
	}
	return entityJson;
};

/**
 * Returns true if PID regeneration is required
 */
ProductInstanceUtil.isPIDRegenerationRequired = function(productInstanceClass, modelCategoryId, entityGr) {
	var pidConfig = ProductInstanceUtil.getPIDConfig(productInstanceClass, modelCategoryId);
	for (var i = 0; i &lt; pidConfig.configs.length; i++) {
		for (var p = 0; p &lt; pidConfig.configs[i].parameters.length; p++) {
			var paramClassAttributeName = pidConfig.configs[i].parameters[p].parameter_class_attribute_name;
			if (entityGr[paramClassAttributeName].changes()) {
				return true;
			}
			if (paramClassAttributeName.contains('.')) {
				var dotWalkFields = paramClassAttributeName.split('.');
				if (entityGr[dotWalkFields[0]].changes()) {
					return true;
				}
			}
		}
	}
	return false;
};

ProductInstanceUtil.getPIDAttrForEntity = function(entityGr, valueHash, getByParamName) {
	var pidConfig = ProductInstanceUtil.getPIDConfig(entityGr.sys_class_name, entityGr.model_category);
	var entityJson = {};
	var configs = pidConfig.configs;
	if (gs.nil(configs)) {
		return entityJson;
	}
	for (var i = 0; i &lt; pidConfig.configs.length; i++) {
		for (var p = 0; p &lt; pidConfig.configs[i].parameters.length; p++) {
			var paramClassAttributeName = pidConfig.configs[i].parameters[p].parameter_class_attribute_name;
			var paramName = pidConfig.configs[i].parameters[p].parameter_name;
			var value;
			var jsonKey = getByParamName ? paramName : paramClassAttributeName;
			// If jsonKey is blank, paramName is considered
			if (gs.nil(jsonKey)) {
				jsonKey = paramName;
			}
			entityJson[jsonKey] = '';
			if (paramClassAttributeName.contains('.')) { // {parent.serial_number: '1234'} or {parent: {serial_number: }
				var dotWalkFields = paramClassAttributeName.split('.');
				if (valueHash) {
					value = valueHash[dotWalkFields[0]];
				}
				if (!value || !value[dotWalkFields[1]]) {
					value = entityGr[dotWalkFields[0]].getRefRecord();
				}
				entityJson[jsonKey] = value[dotWalkFields[1]];
			} else {
				var fieldType = '';
				if (entityGr.isValidField(jsonKey)) {
					fieldType = String(entityGr[jsonKey].getED().getInternalType());
				}
				entityJson[jsonKey] = (valueHash
				&amp;&amp; (valueHash[paramClassAttributeName] || valueHash[paramName]))
				|| entityGr[paramClassAttributeName].getValue() || entityGr[paramName].getValue();
				if (fieldType === 'reference' &amp;&amp; !gs.nil(entityJson[jsonKey]) &amp;&amp; typeof (entityJson[jsonKey]) === 'object') {
					entityJson[jsonKey] = entityJson[jsonKey].getUniqueValue();
				}
			}
		}
	}
	return entityJson;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-09-07 08:55:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;12ce3fba53453110ac07ddeeff7b1262&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;108&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ProductInstanceUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Asset Management" source="com.snc.asset_management"&gt;3e467ca03cb1311068bcf327dfe37f49&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_12ce3fba53453110ac07ddeeff7b1262&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-10 10:17:50&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:29</sys_created_on>
        <sys_id>6b80f0d583b01210c6695855eeaad30a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProductInstanceUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6b80f0d583b01210c6695855eeaad30a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
