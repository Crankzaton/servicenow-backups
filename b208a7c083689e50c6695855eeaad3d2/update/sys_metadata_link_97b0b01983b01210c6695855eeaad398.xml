<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1b689668b703011058db2c43ae11a9f4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RibbonDataUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;RibbonDataUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RibbonDataUtil = Class.create();
RibbonDataUtil.prototype = {
    initialize: function() {
    },
	
	getCustomer360Data: function(table, sysId, primaryUser, primaryFields, secondaryUser, secondaryFields, tertiaryUser, tertiaryFields) {
		var results = [];
		var gr = new GlideRecord(table);
		gr.get(sysId);
		if (!gr.canRead()) return results;
		
		this._addUserFieldsDataToResults(results, primaryUser, gr, primaryFields);
		if (results.length == 0) this._addUserFieldsDataToResults(results, secondaryUser, gr, secondaryFields);
		if (results.length == 0) this._addUserFieldsDataToResults(results, tertiaryUser, gr, tertiaryFields);
		if (results.length == 0) this._addHeaderLabelToResults(results, primaryUser, gr);

		return results;
		
	},

	_addHeaderLabelToResults: function(results, user, gr) {
		var item = {
			"userTypeLabel": gr.getElement(user).getLabel(),
			"hasValue": false
		};
		results.push(item);
	},
	
	_constructFieldList: function(parentRecord, userRecord, userFields) {
		var fields = [];
		var userFieldsArray = userFields.split(",");
		if (userFieldsArray.indexOf("first_name") &lt; 0)
			userFieldsArray.push("first_name");
		if (userFieldsArray.indexOf("last_name") &lt; 0)
			userFieldsArray.push("last_name");
		if (userFieldsArray.indexOf("title") &lt; 0)
			userFieldsArray.push("title");
		if (userRecord.getElement("vip") &amp;&amp; userFieldsArray.indexOf("vip") &lt; 0)
			userFieldsArray.push("vip");

		for (var i = 0; i &lt; userFieldsArray.length; i++) {
			var field = userFieldsArray[i];
			var fieldDetails = {};
			fieldDetails["value"] = userRecord.getElement(field).getValue();
			if (field == "time_zone" &amp;&amp; !userRecord.getElement(field).getValue()) {
    			   fieldDetails["displayValue"] = GlideUser.getSysTimeZone();
			} else if (field == "country" &amp;&amp; !userRecord.getElement(field).getValue()) {
    			   fieldDetails["displayValue"] = 'System (' + GlideLocale.get().getCurrent().getCountry() + ')';
			} else
    			   fieldDetails["displayValue"] = userRecord.getElement(field).getDisplayValue();
			fieldDetails["type"] = userRecord.getElement(field).getED().getInternalType();
			fieldDetails["label"] = userRecord.getElement(field).getED().getLabel();
			fieldDetails["name"] = field;
			fields.push(fieldDetails);
		}
		return fields;
	},
	
	_getAccountDetails: function(record, userType) {
		if (!this._shouldFetchAccountDetails(record, userType))
			return null;

		var accountInfo = {};
		if (!gs.nil(record.account)) {
			var accountRecord = record.account.getRefRecord();
			if (!accountRecord.canRead()) return accountInfo;
			accountInfo.id = accountRecord.sys_id + '';
			accountInfo.name = accountRecord.name + '';
			if (accountRecord.active_escalation) {
				accountInfo.activeEscalation = {};
				var escalationRecord = accountRecord.active_escalation.getRefRecord();
				if (!escalationRecord.canRead() || gs.nil(escalationRecord)) return accountInfo;
				accountInfo.activeEscalation.id = escalationRecord.sys_id + '';
				accountInfo.activeEscalation.number = escalationRecord.number + '';
				accountInfo.activeEscalation.state = {};
				accountInfo.activeEscalation.state.value = escalationRecord.getValue('state');
				accountInfo.activeEscalation.state.displayValue = escalationRecord.getDisplayValue('state');
			}
		}
		return accountInfo;
	},
	
	_shouldFetchAccountDetails: function(record, userType) {
		if (record.getTableName() == "sn_customerservice_case" &amp;&amp; (userType == 'contact' || userType == 'partner_contact'))
        return true;
		if (record.getTableName() == "customer_account" &amp;&amp; userType == "primary_contact")
			return true;
		if (record.getTableName() == "customer_contact")
			return true;

		return false;
	},
	
	_addUserFieldsDataToResults: function(results, user, gr, relatedFields) {
		if (!gs.nil(user) &amp;&amp; !gs.nil(gr.getElement(user))) {
			var fields = [];
			var userRecord = gr.getElement(user).getRefRecord();
			if (userRecord &amp;&amp; userRecord.canRead()) {
				fields = this._constructFieldList(gr, userRecord, relatedFields);
				var item = {
					"userType": user,
					"userTypeLabel": gr.getElement(user).getLabel(),
					"avatar": GlideAvatarFinder.getAvatarPath(userRecord.sys_id + ''),
					"hasValue": !gs.nil(user),
					"fields": fields,
					"accountDetails": this._getAccountDetails(gr, user)
				};
				results.push(item);
			}
		}
	},
	
	getTimelineData: function(table, sysId) {
		var timelineEntries = [];
		var ngStream = new GlideNGStreamAPI().getFormStreamData(table, sysId, null);
		var entries = ngStream.entries();
		var usersActiveOnRecord = [];
		
		for (var i = 0; i &lt; entries.size(); i++) {
			var timelineEntry = {};
			var entry = entries.get(i);
			timelineEntry.sysCreatedOn = entry.sys_created_on();
			timelineEntry.sysCreatedOnAdjusted = entry.sys_created_on_adjusted();
			timelineEntry.sysCreatedBy = entry.sys_created_by();
			timelineEntry.presenceUserId = entry.presence_user_id() + '';
			timelineEntry.type = entry.type();
			timelineEntry.initials = entry.initials();

			if (usersActiveOnRecord.indexOf(timelineEntry.presenceUserId) &lt; 0)
				usersActiveOnRecord.push(timelineEntry.presenceUserId);

			if (entry.type() == "JOURNAL") {
				var journal = entry.journal();
				var journalEntry = {};
				if (journal.field_name() != "comments")
					continue;
				journalEntry.fieldName = journal.field_name();
				journalEntry.fieldLabel = journal.field_label();
				journalEntry.newValue = journal.new_value();
				journalEntry.sysId = journal.sys_id();
				timelineEntry.journalEntry = journalEntry;
			} else if (entry.type() == "AUDIT") {
				var auditValues = entry.audit();
				var auditEntries = [];
				for (var j = 0; j &lt; auditValues.size(); j++) {
					var auditValue = auditValues.get(j);
					var auditEntry = {};
					auditEntry.fieldName = auditValue.field_name();
					auditEntry.fieldLabel = auditValue.field_label();
					auditEntry.newValue = auditValue.new_value();
					auditEntry.oldValue = auditValue.old_value();
					auditEntries.push(auditEntry);
				}
				timelineEntry.auditEntries = auditEntries;
			}
			timelineEntries.push(timelineEntry);
		}
		return {timelineEntries: timelineEntries, usersActiveOnRecord: usersActiveOnRecord};
	},
	
	getRSConfig: function (table) {
		var rsConfig = null;
		var tableHierarchy = GlideDBObjectManager.getTables(table).toArray().concat();
		var rsConfigRecord = new GlideRecord("sys_resolutionshaper_config");
		if (!rsConfigRecord.canRead()) return null;
		rsConfigRecord.addQuery("table", "IN", tableHierarchy);
		rsConfigRecord.query();
		while (rsConfigRecord.next()) {
			if (rsConfig == null || tableHierarchy.indexOf(rsConfigRecord.table + '') &lt; tableHierarchy.indexOf(rsConfig.table)) {
				rsConfig = {};
				rsConfig.table = rsConfigRecord.table + '';
				rsConfig.requestorStates = rsConfigRecord.requestor_states + '';
				rsConfig.newState = rsConfigRecord.new_state + '';
				rsConfig.closedState = rsConfigRecord.closed_state + '';
				rsConfig.fulfillerLabel = rsConfigRecord.fullfiller_label + '';
				rsConfig.callerLabel = rsConfigRecord.caller_label + '';
				rsConfig.requestLabel = rsConfigRecord.request_label + '';
			}
		}
		return rsConfig;
	},

    type: 'RibbonDataUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-20 23:29:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1b689668b703011058db2c43ae11a9f4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RibbonDataUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Agent Workspace - Ribbon" source="com.snc.agent_workspace.ribbon"&gt;9fea38203c35311068bcf327dfe37f81&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1b689668b703011058db2c43ae11a9f4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-04-03 20:13:46&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:16</sys_created_on>
        <sys_id>97b0b01983b01210c6695855eeaad398</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RibbonDataUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_97b0b01983b01210c6695855eeaad398</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:16</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
