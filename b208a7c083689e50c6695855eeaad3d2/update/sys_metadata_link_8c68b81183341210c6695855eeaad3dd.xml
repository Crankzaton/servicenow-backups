<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8375014b430121105f919cd82ab8f2e9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.SubscriptionHasFamilyDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO class to retrieve data related to subscription_has_family table&lt;/description&gt;
        &lt;name&gt;SubscriptionHasFamilyDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SubscriptionHasFamilyDAO = Class.create();
SubscriptionHasFamilyDAO.prototype = {
    initialize: function() {
        this.logger = new LoggingUtil();
    },

    getActiveSubscriptionsForFamily: function(familyId) {
        var activeSubscriptions = [];
        var familySubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY);
        if (familySubscriptionGR.isValid() &amp;&amp; familySubscriptionGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION) &amp;&amp;
            familySubscriptionGR.isValidField(LicensingEngineDBConstants.LICENSE_FAMILY)) {
            familySubscriptionGR.addQuery(LicensingEngineDBConstants.LICENSE_FAMILY, familyId);
            var subscriptionStatusField = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
            familySubscriptionGR.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);
            familySubscriptionGR.query();
            while (familySubscriptionGR.next())
                activeSubscriptions.push(familySubscriptionGR.getValue(LicensingEngineDBConstants.SUBSCRIPTION));
            if (activeSubscriptions.length === 0) {
                var conditionsString = LicensingEngineDBConstants.LICENSE_FAMILY.concat(LicensingEngineConstants.COMMA).concat(familyId).concat(LicensingEngineConstants.COMMA)
                    .concat(subscriptionStatusField).concat(LicensingEngineConstants.COMMA).concat(LicensingEngineConstants.ACTIVE_STATUS);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.SUBSCRIPTION_HAS_FAMILY_DAO, LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY, conditionsString);
            }
        }
        return activeSubscriptions;
    },

    getPaidStoreAppSubscriptionsByFamilies: function(familyIds) {
        var paidStoreAppFamilies = [];
        var familySubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY);
        if (familySubscriptionGR.isValid() &amp;&amp; familySubscriptionGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION) &amp;&amp;
            familySubscriptionGR.isValidField(LicensingEngineDBConstants.LICENSE_FAMILY)) {

            familySubscriptionGR.addQuery(LicensingEngineDBConstants.LICENSE_FAMILY, familyIds);

            var subscriptionStatus = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
            familySubscriptionGR.addQuery(subscriptionStatus, LicensingEngineConstants.ACTIVE_STATUS);

            var subscriptionCategory = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.CATEGORY);
            familySubscriptionGR.addQuery(subscriptionCategory, LicensingEngineDBConstants.CATEGORY_VALUE.STORE_APPLICATION);

            var subscriptionForFee = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.FOR_FEE);
            familySubscriptionGR.addQuery(subscriptionForFee, true);

            familySubscriptionGR.query();
            while (familySubscriptionGR.next())
                paidStoreAppFamilies.push(familySubscriptionGR.getValue(LicensingEngineDBConstants.LICENSE_FAMILY));
        }
        return paidStoreAppFamilies;
    },

    getSubscriptionIdByIsAppEngineV2: function() {
        const FAMILY_ID = LicensingEngineDBConstants.SUBSCRIPTION_FAMILY.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.FAMILY_ID);
        const SUBSCRIPTION_STATUS = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);

        const familySubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY);
        familySubscriptionGR.addQuery(FAMILY_ID, 'CONTAINS', 'app_engine_v2');
        familySubscriptionGR.addQuery(SUBSCRIPTION_STATUS, LicensingEngineConstants.ACTIVE_STATUS);
        familySubscriptionGR.query();
        return familySubscriptionGR.next() ? familySubscriptionGR.subscription.sys_id : '';

    },


	getActiveSubscriptionSysIdsForFamily: function(familyId) {
        var activeSubscriptions = [];
        var familySubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY);
        if (familySubscriptionGR.isValid() &amp;&amp; familySubscriptionGR.isValidField(LicensingEngineDBConstants.SUBSCRIPTION) &amp;&amp;
            familySubscriptionGR.isValidField(LicensingEngineDBConstants.LICENSE_FAMILY)) {
            familySubscriptionGR.addQuery(LicensingEngineDBConstants.LICENSE_FAMILY, familyId);
            var subscriptionStatusField = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.STATUS);
            familySubscriptionGR.addQuery(subscriptionStatusField, LicensingEngineConstants.ACTIVE_STATUS);
            familySubscriptionGR.query();
            while (familySubscriptionGR.next())
                activeSubscriptions.push(familySubscriptionGR.getElement(LicensingEngineDBConstants.SUBSCRIPTION_SYS_ID));
            if (activeSubscriptions.length === 0 &amp;&amp; this.logger.isEntitlementLoggingEnabled()) {
                var conditionsString = LicensingEngineDBConstants.LICENSE_FAMILY.concat(LicensingEngineConstants.COMMA).concat(familyId).concat(LicensingEngineConstants.COMMA)
                    .concat(subscriptionStatusField).concat(LicensingEngineConstants.COMMA).concat(LicensingEngineConstants.ACTIVE_STATUS);
                this.logger.logRecordDoesNotExists(LicensingEngineConstants.SUBSCRIPTION_HAS_FAMILY_DAO, LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY, conditionsString);
            }
        }
        return activeSubscriptions;
    },

    /**
     * Returns true if family is installable through atleast one subscription.
     */
    getLicensableStateForFamily: function(familyIds) {
        let isInstallable = true;
        if (global.JSUtil.nil(familyIds))
            return isInstallable;

        const familySubscriptionGR = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_HAS_FAMILY);
        familySubscriptionGR.addQuery(LicensingEngineDBConstants.LICENSE_FAMILY, LicensingEngineDBConstants.IN, familyIds);
        familySubscriptionGR.query();

        while (familySubscriptionGR.next()) {
            isInstallable = familySubscriptionGR.getValue(LicensingEngineDBConstants.INSTALLABLE) == 0 ? false : true;
            if (isInstallable)
                return true;
        }
        return isInstallable;
    },

    type: 'SubscriptionHasFamilyDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-20 17:54:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8375014b430121105f919cd82ab8f2e9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SubscriptionHasFamilyDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8375014b430121105f919cd82ab8f2e9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-08 18:21:44&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:39</sys_created_on>
        <sys_id>8c68b81183341210c6695855eeaad3dd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SubscriptionHasFamilyDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8c68b81183341210c6695855eeaad3dd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:39</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
