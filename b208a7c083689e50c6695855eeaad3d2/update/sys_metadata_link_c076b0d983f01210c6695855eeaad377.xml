<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3fa699224ff321103ff6502723ce0b8d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.HMACInternalHex&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;HMACInternalHex&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var HMACInternalHex = Class.create();
HMACInternalHex.prototype = {
    initialize: function(request, response, hmacAuthUtil, credential) {
      this.request = request;
      this.response = response;
      this.hmacAuthUtil = hmacAuthUtil;
      this.credential = credential;
    },

	buildHMACInfo: function() {
		var payload = this.hmacAuthUtil.getBodyAsString();

	    var dict = this.parseCredential();
		var keyId = dict["KEYID"];
		var signature = dict["SIGNATURE"];
		if (keyId)
			this.hmacAuthUtil.setKeyId(keyId);
		if (signature)
			this.hmacAuthUtil.setSignature(signature);
		if (payload)
			this.hmacAuthUtil.setContentToSign(payload);
	},

	/**
	 * Credential in format: keyId=myKeyId,signature=mySignature. This method parse
	 * credential and return a JavaScript dictionary.
	**/
	parseCredential: function() {
		var dict = {};
		const splitCredentialArray = this.credential.split(",");
		if (!splitCredentialArray || splitCredentialArray.length &lt; 1)
			return dict;

		for (var i = 0; i &lt; splitCredentialArray.length; i++) {
			var keyVal = splitCredentialArray[i].split("=");
			if (keyVal &amp;&amp; keyVal.length &gt; 1) {
				var val = keyVal[1];
				if (val)
					val = val.trim();
				var key = keyVal[0];
				if (key) {
					key = key.trim();
					key = key.toUpperCase();
				}
				dict[key] = val;
			}
		}

	    return dict;
	},

    type: 'HMACInternalHex'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-07-05 22:44:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3fa699224ff321103ff6502723ce0b8d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;82&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;HMACInternalHex&lt;/sys_name&gt;
        &lt;sys_package display_value="API Key and HMAC Authentication" source="com.glide.tokenbased_auth"&gt;8ed85f9b47220210cd4e1ce4316d43ad&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3fa699224ff321103ff6502723ce0b8d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-31 03:59:40&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:11</sys_created_on>
        <sys_id>c076b0d983f01210c6695855eeaad377</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>HMACInternalHex</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c076b0d983f01210c6695855eeaad377</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
