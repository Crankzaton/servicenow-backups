<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>472edd7deb116110506f7558b5522896</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAAISearchHelperVancouver&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VAAISearchHelperVancouver&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAAISearchHelperVancouver = Class.create();

VAAISearchHelperVancouver.processAllResults = function(searchResults, vaSystem, vaInputs, vaVars) {
	var results =  JSON.parse(searchResults);
	vaSystem.setAtlasSearchPerformed();

	var result = results.result[0];

	var errors = [];
	errors = results.result[0].errors;
	if ((gs.nil(errors) || errors.length == 0) &amp;&amp; (results.result[0].status != "200"))
		errors.push({"errorType" : "Return Status", "message": "Return status was not 200"});

	var executionResult = result.executionResult;

	var geniusSearchResults = null;
	var nonGeniusResults = null;
	var searchMetadata = {};
	
	if (errors.length == 0) {

		// genius results
		if (executionResult != null &amp;&amp; executionResult.geniusResultsTemplates != null 
			&amp;&amp; executionResult.geniusResultsTemplates.items != null &amp;&amp; executionResult.geniusResultsTemplates.items.length &gt; 0) {
			geniusSearchResults = executionResult.geniusResultsTemplates.items;
		}

		// regular results
		if (executionResult != null &amp;&amp; executionResult.searchResultsTemplates != null 
			&amp;&amp; executionResult.searchResultsTemplates.items != null &amp;&amp; executionResult.searchResultsTemplates.items.length &gt; 0) {
			var items = executionResult.searchResultsTemplates.items.slice(0,
				parseInt(gs.getProperty("com.glide.cs.ai_search.max_regular_result", global.AISearchConstants.AISearchConstants.DEFAULT_SEARCH_RESULT_LIMIT)));

			if (items.length &gt; 0)
				nonGeniusResults = items;
		}

		// search metadata
		var searchInfo = {
			search_id: global.VAClickMetrics.createGUID(),
			is_logged_in: vaVars.is_logged_in,
			user_id: vaVars.user_id,
			session_id: vaVars.session_id
		};
		searchMetadata = global.VAAISearchHelperUtah.buildSearchMetadata(result, searchInfo);

		// process the search result metrics.
		global.VAAISearchHelperTokyo.processSearchResultMetrics(searchMetadata, geniusSearchResults, nonGeniusResults, vaSystem, vaInputs, vaVars);
	}

	var searchMetadataStr = !gs.nil(searchMetadata) ? JSON.stringify(searchMetadata) : null ;
	var geniusResultsStr = !gs.nil(geniusSearchResults) ? JSON.stringify(geniusSearchResults) : null ;
	var nonGeniusResultsStr = !gs.nil(nonGeniusResults) ? JSON.stringify(nonGeniusResults) : null;
	var errorsStr = !gs.nil(errors) ? JSON.stringify(errors) : null;

	return {
		searchMetadata: searchMetadataStr,
		geniusSearchResults: geniusResultsStr,
		searchResults: nonGeniusResultsStr,
		errors: errorsStr
	};
};

VAAISearchHelperVancouver.filterInvalidGeniusResults = function(vaVars, vaContext) {
	if (gs.nil(vaVars.geniusResults))
		return null;

	var validGeniusResults = [];
	var geniusResultsJson = JSON.parse(vaVars.geniusResults);

	for (var i = 0; i &lt; geniusResultsJson.length; i++) {
		if (global.VAAISearchHelperVancouver.shouldDisplayGeniusResult(JSON.stringify(geniusResultsJson[i]), vaVars.loggingContext, vaContext))
			validGeniusResults.push(geniusResultsJson[i]);
	}

	return validGeniusResults.length &gt; 0 ? JSON.stringify(validGeniusResults) : null;
};

VAAISearchHelperVancouver.hasIntentSwitched = function(searchMetadata) {
	var hasIntentSwitched = false;
	if (gs.nil(searchMetadata))
		return hasIntentSwitched;

	var metadata = JSON.parse(searchMetadata);
	if (!gs.nil(metadata) &amp;&amp; !gs.nil(metadata.glide_signals) &amp;&amp; !gs.nil(metadata.glide_signals.searchResultMetadata) &amp;&amp; !gs.nil(metadata.glide_signals.searchResultMetadata.intentSwitch))
		hasIntentSwitched = metadata.glide_signals.searchResultMetadata.intentSwitch;

	return hasIntentSwitched;
};

/**
 * Generates Genius result card response 
 */
VAAISearchHelperVancouver.generateGeniusCardResponse = function(searchMetadata, geniusSearchResults, vaSystem, vaInputs, vaVars, vaContext, dynamicChoiceNodeName) {
    var logger = global.VAAISearchHelperTokyo.getLogger(vaVars.loggingContext);

    try {
        return global.VAAISearchHelperVancouver.generateSearchCardResponse(
            global.AISearchConstants.RESULT_TYPE_GENIUS, searchMetadata, geniusSearchResults, vaSystem, vaInputs, vaVars, vaContext, dynamicChoiceNodeName, 0);
    } catch (ex) {
        logger.error('VAAISearchHelperVancouver: Error generating genius card response: {0}', ex);
        return "";
    }
};

/**
 * Generates Regular result card response 
 */
VAAISearchHelperVancouver.generateSearchResultsResponse = function(searchMetadata, searchResults, vaSystem, vaInputs, vaVars, vaContext, dynamicChoiceNodeName) {
    var logger = global.VAAISearchHelperTokyo.getLogger(vaVars.loggingContext);
    logger.info('VAAISearchHelperVancouver: Generating search result response');

    try {
        var metadata = JSON.parse(searchMetadata);
        var response = JSON.parse(searchResults);

        // Only show first three search results - GroupedPartsOutMsg is limited to 3
        var maxResults = global.VAAISearchHelperUtah.getRegularSearchDisplaySize(response);

        var userChoice = "";
        if (!gs.nil(vaVars.is_now_assist_topic) &amp;&amp; vaVars.is_now_assist_topic.toString() == "true")
            userChoice = vaInputs.choice_regular_results_main_screen;
        else
            userChoice = vaInputs.display_options;

        for (var i = 0; i &lt; maxResults; i++) {
            var searchResult = response[i];
            var propValues = searchResult.propValues;
            var model = propValues.model;

            if (model.sysId == userChoice) {
                var result = global.VAAISearchHelperTokyo.stripHighlightTags(JSON.stringify(searchResult));

                return global.VAAISearchHelperVancouver.generateSearchCardResponse(
                    global.AISearchConstants.RESULT_TYPE_SEARCH, searchMetadata, result, vaSystem, vaInputs, vaVars, vaContext, dynamicChoiceNodeName, i);
            }
        }

        return "";
    } catch (ex) {
        logger.error('VAAISearchHelperVancouver: Error generating search response: {0}', ex);
        return "";
    }
};

VAAISearchHelperVancouver.generateSearchCardResponse = function(resultType, searchMetadata, searchResults, vaSystem, vaInputs, vaVars, vaContext, dynamicChoiceNodeName, order) {
    var metadata = JSON.parse(searchMetadata);
    var searchResponse = JSON.parse(searchResults);

    global.VAAISearchHelperTokyo.getLogger(vaVars.loggingContext).info('VAAISearchHelperVancouver: Generating search result - result type:{0}', resultType);

    var cardCreator = global.VASearchCardCreatorFactoryVancouver.getCreator(resultType, metadata, searchResponse, vaSystem, vaInputs, vaVars, vaContext, order, dynamicChoiceNodeName);

    // Special case for IAR
    if (!gs.nil(searchResponse.auto_resolution_url))
        cardCreator.setURL(searchResponse.auto_resolution_url);

    return cardCreator.createCard();
};

VAAISearchHelperVancouver.calculateResultsToDisplay = function(vaSystem, vaInputs, vaVars, vaContext) {
    var resultsToDisplay = "error";

    try {
        var errors = vaVars.errors;
        if (gs.nil(vaVars.errors))
            errors = [];
        else {
            errors = errors.split(',');
        }

        var isError = vaVars.didFdihInvocationTimeOut ||
            (gs.nil(vaVars.geniusResults) &amp;&amp; gs.nil(vaVars.searchResults)) || errors.length &gt; 0;

        var isGeniusResult = false;
        if (!gs.nil(vaVars.is_now_assist_topic) &amp;&amp; vaVars.is_now_assist_topic.toString() == "true") {
            if (!gs.nil(vaVars.geniusResults)) {
                var geniusResultsJson = JSON.parse(vaVars.geniusResults);
                isGeniusResult = geniusResultsJson.length &gt; 0;
            }
        } else 
            isGeniusResult = global.VAAISearchHelperVancouver.shouldDisplayGeniusResult(vaVars.geniusResults, vaVars.loggingContext, vaContext);

        var isRegularResult = !gs.nil(vaVars.searchResults);

        if (isError)
            resultsToDisplay = "error";
        else if (isGeniusResult)
            resultsToDisplay = "geniusResult";
        else if (isRegularResult)
            resultsToDisplay = "regularResult";
    } catch (e) {
        global.VAAISearchHelperTokyo.getLogger(vaVars.loggingContext).warn('Unable to calculate which results to display, falling back to error branch.');
    }

    return resultsToDisplay;
};

VAAISearchHelperVancouver.shouldDisplayGeniusResult = function(geniusSearchResults, loggingContext, vaContext) {
    try {
        if (gs.nil(geniusSearchResults))
            return false;

		var searchResponse = JSON.parse(geniusSearchResults);
		var model = searchResponse.propValues.model;

		if (searchResponse.template === 'sn-va-genius-person-card') {
			return !gs.nil(model["columns.table"]) &amp;&amp; !gs.nil(model["columns.sys_id"]);
		} else if (searchResponse.template === 'sn-va-genius-catalog-card') {
			return global.VAAISearchHelperVancouver.isCatalogOrKnowledgeSearchGeniusResultValid(searchResponse);
		} else if (searchResponse.template === 'sn-va-genius-qa-card') {
			// For GenAI results, additionally check if the device type is supported
			var cardName = searchResponse.propValues.cardName.toString();
			if (cardName == "GAIQACard") {
				var hasGenAISupport = global.VAAISearchHelperVancouver.isGenAIGeniusResultSupportedOnDevice(searchResponse, vaContext, loggingContext);
				if (!hasGenAISupport)
					return false;
			}

			return global.VAAISearchHelperVancouver.isCatalogOrKnowledgeSearchGeniusResultValid(searchResponse);
		} else {
			return false;
		}
    } catch (ex) {
        global.VAAISearchHelper.getLogger(loggingContext).error(
            'VAAISearchHelper: Error calculating whether to show genius result: {0}', ex);
        return false;
    }
};

VAAISearchHelperVancouver.isCatalogOrKnowledgeSearchGeniusResultValid = function(searchResponse) {
    var model = searchResponse.propValues.model;
    var header = searchResponse.propValues.identifier;
    var description = searchResponse.propValues.description;
    var table = model["columns.table"];
    var sys_id = model["columns.sys_id"];

    return (!gs.nil(table) &amp;&amp; !gs.nil(sys_id)) || !gs.nil(header) || !gs.nil(description);
};

VAAISearchHelperVancouver.isGenAIGeniusResultSupportedOnDevice = function(searchResponse, vaContext, loggingContext) {
    var hasGenAISupport = false;
    var extensionPoints = new GlideScriptedExtensionPoint().getExtensions("global.NowAssistDeviceSupportExtensionPoint");

    for (var i = 0; i &lt; extensionPoints.length; i++) {
        var currentResult = extensionPoints[i].isGenAIGeniusTemplateSupported(vaContext.deviceType);
        hasGenAISupport = hasGenAISupport || currentResult;
    }

    global.VAAISearchHelper.getLogger(loggingContext).info("VAAISearchHelperVancouver: GenAI results supported on deviceType {0} : {1}", vaContext.deviceType, hasGenAISupport);

    return hasGenAISupport;
};

VAAISearchHelperVancouver.createResultMap = function(searchMetadata, searchResults, vaSystem, vaInputs, vaVars, vaContext) {

    var logger = global.VAAISearchHelperTokyo.getLogger(vaVars.loggingContext);
    try {
        var response = JSON.parse(searchResults);
        var groupedResultsMap = {};
        var maxResults = global.VAAISearchHelperUtah.getRegularSearchDisplaySize(response);

        for (var i = 0; i &lt; maxResults; i++) {
            var sysId = response[i].propValues.model.sysId;
            var title = global.VAAISearchHelperVancouver.buildSearchTitle(response[i].propValues, vaContext);
            groupedResultsMap[sysId] = GlideStringUtil.unEscapeHTML(title);

            // create SEARCH_RESULT_DISPLAYED event.
            // This createResultMap method can be called multiple times. 
            // So, we need to rely on this flag to avoid sending the same payload multiple times.
            var shouldSend = vaVars.sendDisplayedSearchResultClickMetricsEvent;

            if (!gs.nil(shouldSend) &amp;&amp; shouldSend) {
                var searchResult = response[i];
                var metadata = JSON.parse(searchMetadata);
                global.VAAISearchClickMetricsURLHelper.createDisplayedSearchResultEventMetrics(metadata, searchResult, vaSystem, vaInputs, vaVars, i);
            }
        }

        return groupedResultsMap;
    } catch (ex) {
        logger.error('VAAISearchHelperVancouver: Error generating regular search result map: {0}', ex);
        // Return any links that have been successfully generated
        return groupedResultsMap;
    }

};

VAAISearchHelperVancouver.buildSearchTitle = function(props, vaContext) {
    var titleParts = [];
    var titleFields = [
        "prefix",
        "titleEmoji",
        "title"
    ];

    for (var i in titleFields) {
        var titleField = titleFields[i];
        var titleFieldValue = props[titleField];

        if (!gs.nil(titleFieldValue)) {
            // Translate the prefix field
            if (titleField == "prefix") {
                if (titleFieldValue == "(Catalog)")
                    titleFieldValue = gs.getMessageLang("(Catalog)", vaContext.getRequesterLang());
                if (titleFieldValue == "(People)")
                    titleFieldValue = gs.getMessageLang("(People)", vaContext.getRequesterLang());
                if (titleFieldValue == "(KB)")
                    titleFieldValue = gs.getMessageLang("(KB)", vaContext.getRequesterLang());
            }

            titleParts.push(titleFieldValue);
        }
    }

    var title = titleParts.join(" ");
    return global.VAAISearchHelperTokyo.stripHighlightTags(title);
};

VAAISearchHelperVancouver.processSearchHelpfulMetrics = function(searchMetadata, vaSystem, vaInputs, vaVars) {

    if (!global.VAClickMetrics.isAISearchClickMetricsAllowed())
        return {};

    var collector = new global.VAAISearchHelpfulMetricCollector(JSON.parse(searchMetadata), vaSystem, vaInputs, vaVars);

    collector.collect();

    collector.sendOutMetrics();
};

VAAISearchHelperVancouver.processSearchFallbackMetrics = function(searchMetadata, vaSystem, vaInputs, vaVars) {

    if (!global.VAClickMetrics.isAISearchClickMetricsAllowed())
        return {};

    var collector = new global.VAAISearchFallbackMetricCollector(JSON.parse(searchMetadata), vaSystem, vaInputs, vaVars);

    collector.collect();

    collector.sendOutMetrics();
};

VAAISearchHelperVancouver.processSearchCatalogRequestedMetrics = function(searchMetadata, vaSystem, vaInputs, vaVars) {

    if (!global.VAClickMetrics.isAISearchClickMetricsAllowed())
        return {};

    var collector = new global.VAAISearchCatalogRequestedMetricCollector(JSON.parse(searchMetadata), vaSystem, vaInputs, vaVars);

    collector.collect();

    collector.sendOutMetrics();
};

VAAISearchHelperVancouver.formatOutputForSemanticSearchResults = function(searchResults, geniusResults, searchContext, errors, loggingContext) {
    var result = {};
    result.status = '';
    result.message = '';
    result.results = [];
    result.search_context = searchContext? JSON.parse(searchContext) : {};
    result.errors = errors ? JSON.parse(errors) : [];
  
    if(result.errors.length &gt; 0){
        result.status = 'failure';
        result.message = errors[0].message;
    } else {   
        var results = [];  
        if(geniusResults) {
            results = global.VAAISearchHelperVancouver.mergeSearchResult(JSON.parse(geniusResults), results)
        }
        if(searchResults) {
            results = global.VAAISearchHelperVancouver.mergeSearchResult(JSON.parse(searchResults), results)
        }
        result.results = results;
        result.status = 'success';
        result.message = result.results.length &gt; 0 ? 'Semantic search results are successfully fetched.':
            'No semantic search results found for the given search term.';
    }
  
    var logger = global.VAAISearchHelperTokyo.getLogger(loggingContext);
    logger.info('Semantic search response: {0}', JSON.stringify(result));

    return result;
  };

VAAISearchHelperVancouver.mergeSearchResult = function(searchResults, mergedResults) {
    for (var i = 0; i &lt; searchResults.length; i++) {
        var item = {
            table: searchResults[i].propValues.model.table,
            sys_id: searchResults[i].propValues.model.sys_id,
			semantic_similarity: searchResults[i].propValues.model.semantic_similarity
        };
        if (!containsSearchResult(item, mergedResults))
            mergedResults.push(item);
    }
    return mergedResults;
};

function containsSearchResult(obj, results) {
    for (var i = 0; i &lt; results.length; i++) {
        if (results[i].table === obj.table &amp;&amp; results[i].sys_id === obj.sys_id) {
            return true;
        }
    }
    return false;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-01 08:44:40&lt;/sys_created_on&gt;
        &lt;sys_id&gt;472edd7deb116110506f7558b5522896&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;91&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAAISearchHelperVancouver&lt;/sys_name&gt;
        &lt;sys_package display_value="Virtual Agent Platform Topic Blocks" source="com.glide.cs.topic_blocks"&gt;289d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_472edd7deb116110506f7558b5522896&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-04-04 22:59:13&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:33</sys_created_on>
        <sys_id>6d86b4d983f01210c6695855eeaad392</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAAISearchHelperVancouver</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6d86b4d983f01210c6695855eeaad392</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
