<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b35328d473522010f14a063f34f6a7fd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AllowedHostnameHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AllowedHostnameHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AllowedHostnameHelper = Class.create();
AllowedHostnameHelper.prototype = {
	
	initialize: function() {
		this.ALLOWED_HOSTNAME_TABLE = "sys_cs_hostname_allow_list";
		this.existingHostnames = this._getExistingHostnamesFromAllowListTable();
		this.WILDCARD = '*.';
	},
	
	/*
	* Ex 1. url: https://www.abc.service-now.com
	* output hostname: abc.service-now.com
	*
	* Ex 2. url: https://support.microsoft.com
	* output hostname: *.microsoft.com
	*/
	extractHostnameFromURL: function(url) {
		var logUtil = new LinkUnfurlingLoggingUtils();
		if (gs.nil(url)) {
			logUtil.atWarn(url).log("The provided URL {0} for parsing is empty or invalid.", url);
			return;
		}				
		var hostname = this._stripProtocolFromURL(url);
		if (gs.nil(hostname)) {
			logUtil.atWarn(url).log("The hostname {0} in URL is empty or undefined.", hostname);
			return;
		}
		return this._processHostname(hostname);
	},

	/*
	 * Get the hostname from a given URL and always keep the http / https. e.g.
	 * Input url: https://www.service-now.com/docs/troubleshooting.html
	 * Output hostname: https://www.service-now.com
	 */
	extractHostnameFromURLWithProtocol: function(url) {
		if (gs.nil(url)) {
			new LinkUnfurlingLoggingUtils().atWarn(url).log("The provided URL {0} for parsing is empty or invalid.", url);
			return;
		}

		return this._removePathFromURL(url);
	},

	insertHostname: function(hostname) {
		if (gs.nil(hostname))
			return;
		
		var allowedDomainGr = new GlideRecord(this.ALLOWED_HOSTNAME_TABLE);
		allowedDomainGr.setValue('hostname', hostname);
		allowedDomainGr.setValue('active', true);
		allowedDomainGr.insert();
	},
	
	checkHostnameExists: function(hostname) {
		if (gs.nil(hostname))
			return false;
		return this.existingHostnames.indexOf(String(hostname)) &gt;= 0;
	},
	
	/*
	* Given a URL https://www.google.com
	* check if URL is in allow list
	* else get the hostname, check if hostname exists in the allow list with wildcard
	*/
	isURLAllowedForUnfurling: function(url) {
		if (gs.nil(url))
			return false;
		
		var hostname = '';
		
		hostname = this._stripProtocolFromURL(url);
		if (gs.nil(hostname))
			return false;
		
		if (this.checkHostnameExists(hostname))
			return true;
		else {
			hostname = this._processHostname(hostname);
			return this.checkHostnameExists(hostname);
		}
	},
	
	_getExistingHostnamesFromAllowListTable: function() {		
		var existingHostnames = [];
		var hostnameGr = new GlideRecord(this.ALLOWED_HOSTNAME_TABLE);
		hostnameGr.addActiveQuery();
		hostnameGr.addDomainQuery(this._getDomainQuery(gs.getUser().getDomainID()));
		hostnameGr.query();
		
		while (hostnameGr.next()) 
			existingHostnames.push(hostnameGr.getValue('hostname'));
		
		return existingHostnames;
	},
	
	_getDomainQuery: function(domainId) {
		/*If the user uses the domain picker to switch to the global domain, gs.getUser().getDomainID() returns the string "global". 
		For all other domains, the method returns the sys_id of that domain.*/
		if (gs.nil(domainId) || domainId === 'global')
			return 'global';
		else {
			var domainGr = new GlideRecord('domain');
			domainGr.get(domainId);
			return domainGr;
		}
	},
	
	_stripProtocolFromURL: function(url) {
		var urlParts = url.replace('http://','').replace('https://','').split(/[/?#]/);
		return urlParts[0];				
	},

	_removePathFromURL: function(url) {
		var urlParts = url.split(/[/?#]/);
		if (url.startsWith("http"))
			return urlParts[0] + "//" + urlParts[2];
		return urlParts[0];
	},
	
	_processHostname: function(hostname) {
		var parts = hostname.split('.');
		var domain = parts.slice(-2).join('.');
		
		if (domain.indexOf('service-now.com') === 0)
			return hostname;
		else
			return this.WILDCARD + domain; //append the wild card for domains
	},

	type: 'AllowedHostnameHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-08 20:56:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b35328d473522010f14a063f34f6a7fd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AllowedHostnameHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b35328d473522010f14a063f34f6a7fd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-22 13:18:42&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:18</sys_created_on>
        <sys_id>1910c99d83341210c6695855eeaad3c1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AllowedHostnameHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1910c99d83341210c6695855eeaad3c1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:18</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
