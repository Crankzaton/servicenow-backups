<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0c3f17359313120064f572edb67ffb96</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ResourceAllocationEngine&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ResourceAllocationEngine&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ResourceAllocationEngine = Class.create();
ResourceAllocationEngine.prototype = {
	initialize: function(grPlan) {
		this.grPlan = grPlan;
	},
	
	findUsersToAllocate: function(activeOnly) {
		var users = [];
		if(this.grPlan.getValue('resource_type') == 'user') {
			users.push(this.grPlan.getValue('user_resource'));
			if(JSUtil.notNil(activeOnly) &amp;&amp; activeOnly)
				return this._getActiveUsers(users);
			else
				return users;
		}
		
		// Otherwise resource type must be group
		var memberPreference = this.grPlan.getValue('members_preference');
		
		if (memberPreference == 'specific_members') {
			users = this.grPlan.members_list.toString().split(',');
			if(JSUtil.notNil(activeOnly) &amp;&amp; activeOnly)
				return this._getActiveUsers(users);
			return users;
		}
		
		if ( JSUtil.nil(this.grPlan.getValue('group_resource')) ) {
			var roleUsers = [];
			var gr = new GlideRecord('user_has_resource_role');
			gr.addQuery('role', this.grPlan.getValue('role'));
			if(JSUtil.notNil(activeOnly) &amp;&amp; activeOnly)
				gr.addQuery('user.active', true);
			gr.query();
			while ( gr.next() )
				if ( roleUsers.indexOf(gr.getValue('user')) &lt; 0 )
					roleUsers.push(gr.getValue('user'));
			var skillRule = new RMFilterUsersByAnySkillsRule(this.grPlan.skills.toString());
			users = skillRule.run(roleUsers);
		}
		else { 
			// When all members/any member run allocation rules
			var resourceGroup = new ResourceManagementGroup(this.grPlan.getValue('group_resource'));
			var allUsers;
			if (JSUtil.nil(activeOnly) || !activeOnly)
				allUsers = resourceGroup.getUserIds();
			else
				allUsers = resourceGroup.getActiveUserIds();
		
			users = this._runAllocationRules(allUsers);
		}
		
		users = ResourceManagementUtils.usersWithPPSResourceRole(users);
		return users;
	},
	
	_getActiveUsers: function(users) {
		
		var filteredUsers = [];
		var userRecord = new GlideRecord('sys_user');
		userRecord.addQuery('sys_id', 'IN', users.join(','));
		userRecord.addActiveQuery();
		userRecord.query();
		while (userRecord.next())
			filteredUsers.push(userRecord.getValue('sys_id'));
		
		return filteredUsers;
	},
	
	_runAllocationRules: function(users) {
		var filteredUsers = users;
		var rules = this._getAllocationRules();
		for (var i = 0; i &lt; rules.length; ++i) {
			filteredUsers = rules[i].run(filteredUsers);
		}
		return filteredUsers;
	},
	
	_getAllocationRules: function() {
		var rules  = [];
		rules.push(new RMFilterUsersByRoleRule(this.grPlan.getValue('role')));
		rules.push(new RMFilterUsersByAnySkillsRule(this.grPlan.skills.toString()));
		
		return rules;
	},
	
	type: 'ResourceAllocationEngine'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-05-11 07:30:19&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0c3f17359313120064f572edb67ffb96&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ResourceAllocationEngine&lt;/sys_name&gt;
        &lt;sys_package display_value="Resource Management" source="com.snc.resource_management"&gt;7200da2b47e64210cd4e1ce4316d438e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0c3f17359313120064f572edb67ffb96&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-07-02 13:44:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:53</sys_created_on>
        <sys_id>8760789583b01210c6695855eeaad341</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ResourceAllocationEngine</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8760789583b01210c6695855eeaad341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
