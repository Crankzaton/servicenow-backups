<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0fc2120677f23010d3ef07dc7d5a9901</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CSMContentAccess&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.CSMContentAccessEP&lt;/description&gt;
        &lt;name&gt;CSMContentAccess&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CSMContentAccess = Class.create();
CSMContentAccess.prototype = {
	/**
	* @tableName, required - the table name of the record on which requested access pattern is being evaluated
	* @current, required - the current object on which requested access pattern is being evaluated
	*/
	initialize: function(tableName, current) {
		this._setContext(tableName, current);
	},

	resetContext: function(tableName, current) {
		this._setContext(tableName, current);
	},

	canProcess: function(accessPattern) {
		return this.RESOURCE_TYPE=="TABLE" &amp;&amp; this.RESOURCE_NAME == this.tableName;
	},

	/**
	* @params, optional - additional parameters required to evalute the access
	*/
	canRead: function(params) {
		if(!this.__preProcess(params))
			return false;

		//Responsibilities are enforced through query-rules / QBR validations.
		return this.__canRead();
	},


	/**
	* @params, optional - additional parameters required to evalute the access
	*/
	canWrite: function(params) {
		if(!this.__preProcess(params))
			return false;

		if(this._enforceResponsibilities() &amp;&amp; this._hasValidResponsibility(this._getWritePermissionMap())) {
			return true;
		}
		return this._canWrite();
	},

	/**
	* @params, optional - additional parameters required to evalute the access
	*/
	canCreate: function(params) {
		if(!this.__preProcess(params))
			return false;

		if(this._enforceResponsibilities() &amp;&amp; this._hasValidResponsibility(this._getCreatePermissionMap())) {
			return true;
		}
		return this._canCreate();
	},

	/**
	* @params, optional - additional parameters required to evalute the access
	*/
	canDelete: function(params) {
		if(!this.__preProcess(params))
			return false;

		if(this._enforceResponsibilities() &amp;&amp; this._hasValidResponsibility(this._getDeletePermissionMap())) {
			return true;
		}
		return this._canDelete();
	},


	/** Private methods; do not override these methods. **/

	__isRestrictedAccessAccount: function(accountId) {
		if(!accountId)
			return false;

		var gr = new GlideRecord(global.CSMBaseConstants.ACCOUNT_ACCESS_TABLE);
		gr.addQuery('account', accountId);
		gr.addQuery('restrict_contact_access', true);
		gr.query();
		return gr.hasNext();
	},

	__preProcess: function(params) {
		if(gs.nil(this.current))
			return false;

		if(!gs.nil(params))
			this._setParams(params);

		return true;
	},

	__isQueryRulesEnabled: function() {
		return new global.CSMQueryRulesUtil().useQueryRules();
	},

	__canRead: function() {
		if(this.__isQueryRulesEnabled())
			return this._canRead_QR();

		return this._canRead_QBR();
	},


	/** Protected methods, allowed to overrride **/

	_setContext: function(tableName, current) {
		this.tableName = tableName || (!gs.nil(current)? current.getTableName(): null);
		this.current = current;
	},

	_setParams: function(params) {
		this.params = params;
	},

	/** 
	* Override _can*() methods only if 
	* 1) entity does not have separate ACLs for regular checks 
	* 2) and, entity security check depends on granular roles
	**/

	_canWrite: function() {
		return false;
	},

	_canCreate: function() {
		return false;
	},

	_canDelete: function() {
		return false;
	},

	_canRead_QR: function() {
		// TODO: Keep the filter in session variable for subsequent usages. And, make sure it is invalidated when config is changed
		// TODO: OR, use transaction cache.
		var filter;
		var qrRoles = this.__getParam("qr_roles");
		var qrGenerator = new sn_queryrules.QueryRuleGenerator();
		if (gs.nil(qrRoles))
			filter = qrGenerator.getEncodedQuery(this.tableName);
		else
			filter = qrGenerator.getEncodedQueryForRoles(this.tableName, qrRoles);
		return GlideFilter.checkRecord(this.current, filter);
	},

	_canRead_QBR: function() {
		return false;
	},

	_enforceResponsibilities: function() {
		return false;
	},

	_isChildOf: function(parent, tableName) {
		return new global.CSMRelationshipUtils().isChildOf(parent, tableName);
	},

	/** Permission maps for Responsibilities **/
	/**
	*
	* {
	*   relationship1: accessType,
	*   relationship2: accessType,
	*   ...
	* }
	*
	*/
	
	_getWritePermissionMap: function() {},

	_getCreatePermissionMap: function() {},

	_getDeletePermissionMap: function() {},

	
	// Access evalulation with the help of Permission Map
	_hasValidResponsibility: function(permissionMap) {
		if(gs.nil(permissionMap))
			return false;

		var _hasAccess = false;
		var relationships = Object.keys(permissionMap);
		var utils = new global.CSMRelationshipUtils();
		for(var p = 0, q = relationships.length; p &lt; q; p++) {
			var relationship = relationships[p];
			var accessType = permissionMap[relationship] || global.CSMRelationshipConstants.ACCESS.FULL;
			_hasAccess = utils.hasAccess(this.current, relationship, accessType, this.params);

			if(_hasAccess)
				return true;
		}

		return _hasAccess;
	},
	
	__getParam: function(key) {
		if (!key || !this.params)
			return null;

		return this.params[key];
	},
    
	// Always override these variables with right values.
	RESOURCE_NAME : "",
	RESOURCE_TYPE : "TABLE",

	type: 'CSMContentAccess'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-26 08:13:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0fc2120677f23010d3ef07dc7d5a9901&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CSMContentAccess&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Base Entities" source="com.snc.cs_base"&gt;4f2cce6b47664210cd4e1ce4316d43a4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0fc2120677f23010d3ef07dc7d5a9901&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-25 17:03:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:12</sys_created_on>
        <sys_id>bb7030d583b01210c6695855eeaad3f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CSMContentAccess</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bb7030d583b01210c6695855eeaad3f4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:12</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
