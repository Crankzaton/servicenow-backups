<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7fafdf6cb7f23010965e56bf7e11a980</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_chg.UpcomingLinkProvider_OverdueTasks&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point sn_sow.UpcomingLinkProvider&lt;/description&gt;
        &lt;name&gt;UpcomingLinkProvider_OverdueTasks&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UpcomingLinkProvider_OverdueTasks = Class.create();
UpcomingLinkProvider_OverdueTasks.prototype = {
    type: 'UpcomingLinkProvider_OverdueTasks',
    initialize: function() {},
    process: function(request, fromDateTime, toDateTime, assginToQuery) {
        // Return array of objects per the link set api
        // https://developer.servicenow.com/dev.do#!/reference/now-experience/quebec/shared-components/now-link-set/api
        var gdt = new GlideDateTime();
        var now = '"' + gdt.getLocalDate() + '", "' + gdt.getLocalTime().toString().split(" ")[1] + '"';
        var PREFIX_QUERY = 'sys_class_name=change_request^ORsys_class_name=sc_req_item^active=true^' + assginToQuery;
        var TODAY_QUERY = '^ref_change_request.start_date&lt;javascript:gs.dateGenerate(' + now + ')^ORdue_date&lt;javascript:gs.dateGenerate(' + now + ')';
        var encodedQuery = null;
        var listTitle = gs.getMessage("Tasks");
        if ('beginningOfToday' == request.from &amp;&amp; 'endOfToday' == request.to) {
            encodedQuery = PREFIX_QUERY + TODAY_QUERY;
        }
        var items = [];
        if (false == gs.nil(encodedQuery)) {
			var LIMIT = 10;
            var gr = new GlideRecordSecure('task');
            gr.addEncodedQuery(encodedQuery);
            gr.setLimit(LIMIT + 1);
            gr.query();
            var count = gr.next() ? gr.getRowCount() : 0;
            if (count &gt; 0) {
                var msg = null;
                if (1 == count) {
                    msg = gs.getMessage("{0} overdue task", [count]) + "";
                } else {
                    if (count &gt; LIMIT) {
                        msg = gs.getMessage("More than {0} overdue tasks", [LIMIT.toString()]) + "";
                    } else {
                        msg = gs.getMessage("{0} overdue tasks", [count]) + "";
                    }
                }
                var route = {
                    route: 'simplelist',
                    fields: {
                        table: gr.getTableName()
                    },
                    params: {
                        listTitle: listTitle,
                        query: gr.getEncodedQuery()
                    }
                };
                if (1 == count) {
                    route = {
                        route: 'record',
                        fields: {
                            table: gr.getTableName(),
                            sysId: gr.getUniqueValue()
                        }
                    };
                }
                var item = {
                    label: msg,
                    type: 'route',
                    value: route,
                    "startsWith": {
                        "icon": "checkbox-checked-outline",
                        "align": "center"
                    },
                    "opensWindow": false,
                    "configAria": {},
                    "download": false
                };
                items.push(item);
            }
        }

        return items;
    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-21 21:58:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7fafdf6cb7f23010965e56bf7e11a980&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UpcomingLinkProvider_OverdueTasks&lt;/sys_name&gt;
        &lt;sys_package display_value="Change Management for Service Operations Workspace" source="sn_sow_chg"&gt;bccbdbb023213010785ddc1756bf6579&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Change Management for Service Operations Workspace"&gt;bccbdbb023213010785ddc1756bf6579&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7fafdf6cb7f23010965e56bf7e11a980&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-24 07:52:08&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:24</sys_created_on>
        <sys_id>1727309d83f01210c6695855eeaad3d5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UpcomingLinkProvider_OverdueTasks</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1727309d83f01210c6695855eeaad3d5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:24</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
