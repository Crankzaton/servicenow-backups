<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>94a02eccdb35f9543269e4491396195f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WF_WSDCaseUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;WF_WSDCaseUtils- Utility class to create, process and cases and case tasks created for variase intake forms. &lt;/description&gt;
        &lt;name&gt;WF_WSDCaseUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WF_WSDCaseUtils = Class.create();
WF_WSDCaseUtils.prototype = {
    initialize: function() {
        this.LOCATION_UPDATE_REQUEST_CONSTANTS = {
            SPACE_DATA_UPDATE: 'space_data',
            BUILDING_DATA_UPDATE: 'building_data',
            DWG: 'DWG',

            TASK_TEMPLATES: {
                CHANGE_SPACE_TASK: gs.getProperty('sn_wsd_case.wf_wsd_intake_task_template_change_space'),
                SERRAVIEW_CONVERSION_TASK: gs.getProperty('sn_wsd_case.wf_wsd_intake_task_template_serraview_conversion'),
                EBTR_CHANGE_TASK: gs.getProperty('sn_wsd_case.wf_wsd_intake_task_template_ebtr_change'),
                MASTER_DATA_CHANGE_TASK: gs.getProperty('sn_wsd_case.wf_wsd_intake_task_template_master_data_change'),
                MASTER_DATA_CHANGE_FOR_SPACE_TASK: gs.getProperty('sn_wsd_case.wf_wsd_intake_task_template_master_data_change_space'),
                DWG_DRAWING_REQUEST_TASK: gs.getProperty('sn_wsd_case.wf_wsd_intake_task_template_dwg_drawing_request'),
            },
            CASE_TEMPLATES: {
                SERRAVIEW_CONVERSION_CASE: gs.getProperty('sn_wsd_case.wf_wsd_intake_case_template_serraview_conversion'),
                EBTR_CHANGE_CASE: gs.getProperty('sn_wsd_case.wf_wsd_intake_case_template_ebtr_change'),
            },

            WORKPLACE_SERVICES: gs.getProperty('sn_wsd_case.wf_wsd_intake_workplace_service_property_data_update'),


        };

        this.BASE_TASKS_CASES = {
            SPACE_UPDATE: {
                childTasks: [this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.CHANGE_SPACE_TASK]
            },
            BUILDING_UPDATE: {
                childTasks: [this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.MASTER_DATA_CHANGE_TASK],
            },
            BUILDING_UPDATE_WITH_SPACE_TASK: {
                childTasks: [this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.MASTER_DATA_CHANGE_TASK,
                    this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.MASTER_DATA_CHANGE_FOR_SPACE_TASK
                ],
            },
            DWG: {
                childTasks: [this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.DWG_DRAWING_REQUEST_TASK],
            }
        };
        this.REFERENCED_CASES = {
            SERRAVIEW_CONVERSION: {
                template: this.LOCATION_UPDATE_REQUEST_CONSTANTS.CASE_TEMPLATES.SERRAVIEW_CONVERSION_CASE,
                childTasks: [this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.SERRAVIEW_CONVERSION_TASK]
            },
            EBTR_CHANGE: {
                template: this.LOCATION_UPDATE_REQUEST_CONSTANTS.CASE_TEMPLATES.EBTR_CHANGE_CASE,
                childTasks: [this.LOCATION_UPDATE_REQUEST_CONSTANTS.TASK_TEMPLATES.EBTR_CHANGE_TASK]
            }
        };


        this.PROPERTY_LIFE_CYCLE_TASK = {

            TEMPLATE: {
                childTask: gs.getProperty('sn_wsd_case.business_partner_task_template'),
                parentCase: gs.getProperty('sn_wsd_case.business_partner_case_template')
            }
        };

    },

    /*****************************************************************************************
     * Creates the case task for the correspoding request 
     * @Parm {string} caseSysId -  sys_id of the case for the request being processed
     ***************************************************************************************/
    createCaseTasksFromCase: function(caseSysId) {

        var variables = this.getVariablesFromCase(caseSysId);


        var templates;
        if (variables.what_do_you_want_to_update.toString() === this.LOCATION_UPDATE_REQUEST_CONSTANTS.SPACE_DATA_UPDATE) {
            templates = this.getSpaceChangeCaseTemplates(variables);
        } else if (variables.what_do_you_want_to_update.toString() === this.LOCATION_UPDATE_REQUEST_CONSTANTS.BUILDING_DATA_UPDATE) {
            templates = this.getBuildingChangeCaseTemplates(variables);
        } else if (variables.what_do_you_want_to_update.toString() === this.LOCATION_UPDATE_REQUEST_CONSTANTS.DWG) {
            templates = this.getDWGCaseTemplates(variables);
        }

        if (!global.JSUtil.notNil(templates)) {
            return;
        }

        this.createChildCaseTasksFromTemplates(caseSysId, templates.childTasks);

        if (global.JSUtil.notNil(templates.referencedCases)) {

            var grWorkplaceCase = new GlideRecord(WSDCaseConstants.TABLES.CASE);

            var util = this;
            var refCaseIds = [];
            templates.referencedCases.forEach(function(refCase) {
                var glideTemplate = new GlideTemplate.get(refCase.template);
                grWorkplaceCase.initialize();
                if (global.JSUtil.notNil(glideTemplate)) {
                    glideTemplate.apply(grWorkplaceCase);
                    grWorkplaceCase.setValue("workplace_service", util.LOCATION_UPDATE_REQUEST_CONSTANTS.WORKPLACE_SERVICES);
                    grWorkplaceCase.setValue("correlation_id", caseSysId);
                    grWorkplaceCase.setWorkflow(false);
                    var refCaseSyId = grWorkplaceCase.insert();
                    //util.addOriginalCaseValiables(caseSysId, refCaseSyId);
                    util.createChildCaseTasksFromTemplates(refCaseSyId, refCase.childTasks);
                    refCaseIds.push(refCaseSyId);
                }

            });

            var comments;
            grWorkplaceCase.initialize();
            grWorkplaceCase.addQuery('sys_id', 'IN', refCaseIds);
            grWorkplaceCase.query();
            if (grWorkplaceCase.hasNext()) {
                grWorkplaceCase.next();
                comments = "Created Case(s):\n" + grWorkplaceCase.number + "-" + grWorkplaceCase.short_description;
            }
            while (grWorkplaceCase.next()) {
                comments = comments + "\n" + grWorkplaceCase.number + "-" + grWorkplaceCase.short_description;
            }
            gs.info(comments);
            if (global.JSUtil.notNil(comments)) {
                grWorkplaceCase.initialize();
                if (grWorkplaceCase.get(caseSysId)) {
                    grWorkplaceCase.work_notes = comments;
                    grWorkplaceCase.update();
                }

            }
        }



    },

    getBuildingFlagsByBuilding: function(buildingSysId) {
        var results = {
            isInSerraview: false,
            isEBTR: false
        };
        var grBuilding = new GlideRecord("sn_wsd_core_building");
        if (grBuilding.get(buildingSysId)) {
            results = this.getBuildingFlags(grBuilding);
        }


        return results;
    },
    getBuildingFlags: function(buildingGR) {
        var results = {
            isInSerraview: false,
            isEBTR: false
        };

        if (global.JSUtil.nil(buildingGR)) {
            return results;
        }
        results.isInSerraview = buildingGR.getValue('u_in_serraview') === "1";
        var primaryUse = buildingGR.getValue('u_primary_use');
        results.isEBTR = primaryUse === "30";
        return results;
    },
    getBuildingFlagsBySpace: function(spaceSysId) {
        var results = {
            isInSerraview: false,
            isEBTR: false
        };
        var grSpace = new GlideRecord(WSDCaseConstants.TABLES.SPACE);
        if (grSpace.get(spaceSysId)) {
            var buildingGr = grSpace.building.getRefRecord("building");
            if (buildingGr.isValidRecord) {
                results = this.getBuildingFlags(buildingGr);
            }
        }

        return results;
    },
    getDWGCaseTemplates: function(variables) {
        var dwgRequestData = this.getUpdateDataObject(variables);
        var templates = this.BASE_TASKS_CASES.DWG;
        templates.referencedCases = [];
        if (dwgRequestData.isDWGRequest &amp;&amp; dwgRequestData.drawingRequestType != 3) {
            var buildingSysId = dwgRequestData.buildingSysId;
            var flags = this.getBuildingFlagsByBuilding(buildingSysId);
            if (flags.isInSerraview) {
                templates.referencedCases.push(this.REFERENCED_CASES.SERRAVIEW_CONVERSION);
            }
            if (flags.isEBTR) {
                templates.referencedCases.push(this.REFERENCED_CASES.EBTR_CHANGE);
            }

        }

        return templates;
    },
    getSpaceChangeCaseTemplates: function(variables) {
        var spaceUpdateData = this.getUpdateDataObject(variables);
        var templates = this.BASE_TASKS_CASES.SPACE_UPDATE;
        templates.referencedCases = [];
        var spaceSysId = spaceUpdateData.isSingleSpaceUpdate ? spaceUpdateData["sys_id"] : spaceUpdateData.sys_ids[0];
        var flags = this.getBuildingFlagsBySpace(spaceSysId);
        if (flags.isInSerraview) {
            templates.referencedCases.push(this.REFERENCED_CASES.SERRAVIEW_CONVERSION);
        }
        if (flags.isEBTR) {
            templates.referencedCases.push(this.REFERENCED_CASES.EBTR_CHANGE);
        }
        return templates;
    },
    getBuildingChangeCaseTemplates: function(variables) {
        var buildingUpdateData = this.getBuildingUpdateData(variables);
        if (global.JSUtil.notNil(buildingUpdateData.updateFields.u_tenure_type) || (buildingUpdateData.updateFields.u_transactional_status === 40)) {
            return this.BASE_TASKS_CASES.BUILDING_UPDATE_WITH_SPACE_TASK;
        }
        return this.BASE_TASKS_CASES.BUILDING_UPDATE;
    },

    addOriginalCaseValiables: function(fromCaseSysId, toCaseSysId) {
        var questionGr = new GlideRecord('question_answer');
        questionGr.addQuery('table_name', sn_wsd_case.WSDCaseConstants.TABLES.CASE)
        questionGr.addEncodedQuery('^table_sys_id=' + fromCaseSysId);
        questionGr.orderBy('order');
        questionGr.query();
        while (questionGr.next()) {

            gs.info(questionGr.question.name)
            questionGr.setValue('table_sys_id', toCaseSysId);
            questionGr.setValue('table_name', sn_wsd_case.WSDCaseConstants.TABLES.CASE);
            questionGr.insert();
        }
    },
    createChildCaseTasksFromTemplates: function(parentCaseId, templatesIds) {
        if (global.JSUtil.notNil(templatesIds)) {

            var grWorkplaceTask = new GlideRecord(WSDCaseConstants.TABLES.WORKPLACE_TASK);
            templatesIds.forEach(function(taskTemplate) {
                grWorkplaceTask.initialize();
                var glideTemplate = new GlideTemplate.get(taskTemplate);
                if (global.JSUtil.notNil(glideTemplate)) {
                    glideTemplate.apply(grWorkplaceTask);
                    grWorkplaceTask.setValue('parent', parentCaseId);
                    grWorkplaceTask.insert();
                }

            });
        }
    },

    /*****************************************************************************************
     * Triggers the 'auto-fulfillment' process if all required tasks under the case are complete  
     * @Parm {string} caseSysId -  sys_id of the case for the request being processed
     *******************************************************************************************/
    fulfillPropertyUpdateRequestIfTasksComplete: function(caseSysId) {
        if (!global.JSUtil.notNil(caseSysId)) {
            return;
        }
        var grCase = new GlideRecord(WSDCaseConstants.TABLES.CASE);
        if (!grCase.get(caseSysId)) {
            return;
        }

        if (grCase.getValue("workplace_service") !== this.LOCATION_UPDATE_REQUEST_CONSTANTS.WORKPLACE_SERVICES) {
            return;
        }

        var grWorkplaceTask = new GlideRecord(WSDCaseConstants.TABLES.WORKPLACE_TASK);
        grWorkplaceTask.addQuery('parent', caseSysId);
        grWorkplaceTask.addQuery('state', 'NOT IN', [3, 4, 7]);
        grWorkplaceTask.addQuery('priority', '!=', 5);
        grWorkplaceTask.query();
        if (!grWorkplaceTask.hasNext()) {
            this.fulfillCaseRequest(caseSysId);
            grCase.setValue('state', 3);
            gs.info(grCase.update());
        }



    },

    /*****************************************************************************************
     * Auto-fulfills the request   
     * @Parm {string} caseSysId -  sys_id of the case for the request being processed
     *******************************************************************************************/
    fulfillCaseRequest: function(caseSysId) {
        gs.info('--&gt;case sysid=' + caseSysId);
        if (!global.JSUtil.notNil(caseSysId)) {
            return;
        }
        var variables = this.getVariablesFromCase(caseSysId);
        this.fulfillPropertyUpdateRequest(variables);

    },

    /*****************************************************************************************
     * Get question variables assocciated with a case    
     * @Parm {string} caseSysId -  sys_id of the case for the request being processed
     *******************************************************************************************/
    getVariablesFromCase: function(caseSysId) {
        var variables;
        var grCase = new GlideRecord("sn_wsd_case_workplace_case");
        if (grCase.get(caseSysId)) {
            variables = grCase.variables;
        }
        return variables;
    },
    getUpdateDataObject: function(variables) {
        var dataObject = {};

        var isBuildingUpdate = variables.what_do_you_want_to_update.toString() === this.LOCATION_UPDATE_REQUEST_CONSTANTS.BUILDING_DATA_UPDATE;
        var isSpaceUpdate = variables.what_do_you_want_to_update.toString() === this.LOCATION_UPDATE_REQUEST_CONSTANTS.SPACE_DATA_UPDATE;
        var isDWGRequest = variables.what_do_you_want_to_update.toString() === this.LOCATION_UPDATE_REQUEST_CONSTANTS.DWG;

        if (isBuildingUpdate) {
            dataObject = this.getBuildingUpdateData(variables);

        }
        if (isSpaceUpdate) {
            var isMultiSpaceUpdate = variables.update_multiple_spaces.toString() === 'true';
            var isSingleSpaceUpdate = variables.update_multiple_spaces.toString() === 'false';
            if (isSingleSpaceUpdate) {
                dataObject = this.getSingleSpaceUpdateData(variables);
            } else {
                dataObject = this.getMuliSpaceUpdateData(variables);
            }

            dataObject.isMultiSpaceUpdate = isMultiSpaceUpdate;
            dataObject.isSingleSpaceUpdate = isSingleSpaceUpdate;
        }

        if (isDWGRequest) {
            dataObject = this.getDWGRequestData(variables);
        }


        dataObject.isBuildingUpdate = isBuildingUpdate;
        dataObject.isSpaceUpdate = isSpaceUpdate;
        dataObject.isDWGRequest = isDWGRequest;

        return dataObject;
    },

    /*****************************************************************************************
     * Auto-fulfills the property attribute update request   
     * @Parm {Object} variables -  Question Variables assocciated with the case
     *******************************************************************************************/
    fulfillPropertyUpdateRequest: function(variables) {

        var updateObject = this.getUpdateDataObject(variables);

        if (updateObject.isBuildingUpdate) {
            this.updateBuildingFields(buildingInfo);
        }


        if (updateObject.isSpaceUpdate &amp;&amp; updateObject.isSingleSpaceUpdate) {
            this.updateSingleSpaceFields(updateObject);
        }

        if (updateObject.isSpaceUpdate &amp;&amp; updateObject.isMultiSpaceUpdate) {
            this.updateMultipleSpaceFields(updateObject);
        }

    },
    /*****************************************************************************************
     * Retrives the datails about the building update requerst   
     * @Parm {Object} variables -  Question Variables associated with the case
     *******************************************************************************************/
    getBuildingUpdateData: function(variables) {
        var buildingData = {
            sys_id: variables.building.toString()
        };

        buildingData.updateFields = {};
        if (global.JSUtil.notNil(variables.updated_building_type)) {
            buildingData.updateFields.cmn_location_type = variables.updated_building_type.value.toString();
        }
        if (global.JSUtil.notNil(variables.updated_transactional_status)) {

            buildingData.updateFields.u_transactional_status = variables.updated_transactional_status.value.toString();
        }

        if (global.JSUtil.notNil(variables.updated_tenure_type)) {
            buildingData.updateFields.u_tenure_type = variables.updated_tenure_type.value.toString();
        }


        return buildingData;
    },

    getDWGRequestData: function(variables) {
        var dwgRequestData = {
            buildingSysId: variables.building,
            drawingRequestType: variables.drawing_request_type
        };
        return dwgRequestData;
    },

    /*****************************************************************************************
     * Retrives the datails about a space update request    
     * @Parm {Object} variables -  Question Variables associated with the case
     *******************************************************************************************/
    getSingleSpaceUpdateData: function(variables) {

        var spaceData = {
            sys_id: variables.selected_single_location.toString()
        };
        spaceData.updateFields = {};


        if (global.JSUtil.notNil(variables.updated_space_type)) {
            spaceData.updateFields.location_type = variables.updated_space_type.toString();
        }
        if ((global.JSUtil.notNil(variables.updated_signage_name) &amp;&amp; variables.updated_signage_name.toString().trim().length &gt; 0)) {
            spaceData.updateFields.u_signage_name = variables.updated_signage_name.toString();
        }
        if (global.JSUtil.notNil(variables.updated_cpg_occupancy_status)) {
            spaceData.updateFields.u_cpg_occupancy_status = variables.updated_cpg_occupancy_status.value.toString();
        }
        if (global.JSUtil.notNil(variables.updated_cost_center)) {
            spaceData.updateFields.cost_center = variables.updated_cost_center.toString();
        }
        return spaceData;
    },

    /*****************************************************************************************
     * Retrives the datails about multi-space update request    
     * @Parm {Object} variables -  Question Variables associated with the case
     *******************************************************************************************/
    getMuliSpaceUpdateData: function(variables) {

        var spaceData = {
            sys_ids: variables.selected_spaces_data
        };
        spaceData.updateFields = {};

        if (variables.multi_space_attribute.toString() === 'space_type_multiple_spaces') {
            spaceData.updateFields.location_type = variables.updated_space_type_multiple.toString();
        }

        if (variables.multi_space_attribute.toString() === 'cpg_occupancy_status_multiple_spaces') {
            spaceData.updateFields.u_cpg_occupancy_status = variables.updated_cpg_occupancy_status_multipe.value.toString();
        }
        if (variables.multi_space_attribute.toString() === 'cost_center_multiple_spaces') {
            spaceData.updateFields.cost_center = variables.updated_cost_center_multiple;
        }
        return spaceData;
    },

    /*****************************************************************************************
     * Updates build fields   
     * @Parm {Object} buildingData - building fields and values to be updated
     *******************************************************************************************/
    updateBuildingFields: function(buildingData) {
        if (!global.JSUtil.notNil(buildingData)) {
            return;
        }

        if (!global.JSUtil.notNil(buildingData.sys_id)) {
            return;
        }

        if (!global.JSUtil.notNil(buildingData.updateFields)) {
            return;
        }


        var grBuilding = new GlideRecord('sn_wsd_core_building');
        gs.info("--&gt; attempting to update building" + buildingData.sys_id);
        if (!grBuilding.get(buildingData.sys_id)) {
            gs.info("--&gt; No building record found ");
            return;
        }


        for (var key in buildingData.updateFields) {
            if (key !== 'sys_id') {
                grBuilding.setValue(key, buildingData.updateFields[key]);
            }
        }
        var updated = grBuilding.update();
        gs.info("building updated?" + updated ? true : false);
    },

    /*****************************************************************************************
     * Updates fields   for a single space update request
     * @Parm {Object} spaceData - space fields and values to be updated
     *******************************************************************************************/
    updateSingleSpaceFields: function(spaceData) {

        if (!global.JSUtil.notNil(spaceData)) {
            return;
        }

        if (!global.JSUtil.notNil(spaceData.sys_id)) {
            return;
        }

        this.updateFields(spaceData.sys_id, spaceData.updateFields);

    },

    updateFields: function(spaceSysIds, fieldValues) {

        if (!global.JSUtil.notNil(fieldValues)) {
            return;
        }

        if (!global.JSUtil.notNil(spaceSysIds)) {
            return;
        }

        if (!global.JSUtil.notNil(spaceSysIds.toString().trim())) {
            return;
        }

        gs.info("--&gt; updateSpaceFields");
        var grSpace = new GlideRecord('sn_wsd_core_space');
        gs.info("--&gt; attempting to update space" + spaceSysIds);

        grSpace.addQuery('sys_id', 'IN', spaceSysIds);

        grSpace.query();
        if (!grSpace.hasNext()) {
            gs.info("--&gt; No space record found ");
            return;
        }



        gs.info("--&gt;  fieldValues" + JSON.stringify(fieldValues));

        for (var key in fieldValues) {
            if (key === 'cost_center') {
                this.addCostCenterSpaceRelationship(spaceSysIds, fieldValues[key]);
            } else if (key !== 'sys_id') {
                grSpace.setValue(key, fieldValues[key]);
            }
        }
        var updated = grSpace.updateMultiple();
        gs.info("space updated?" + updated ? true : false);



    },
    updateMultipleSpaceFields: function(spaceData) {
        this.updateFields(spaceData.sys_ids, spaceData.updateFields);
    },

    addCostCenterSpaceRelationship: function(spaceId, costCenter) {
        if (!global.JSUtil.notNil(costCenter)) {
            return;
        }

        if (!global.JSUtil.notNil(spaceId)) {
            return;
        }


        var grM2mCostCenter = new GlideRecord("sn_wsd_spcmgmt_location_cc_dept_map");
        grM2mCostCenter.addQuery('location', 'IN', spaceId);
        grM2mCostCenter.addQuery('type', 'cost_center');
        grM2mCostCenter.setValue("cost_center", '' + costCenter);
        var updateSysId = grM2mCostCenter.updateMultiple();
        if (!updateSysId) {
            grM2mCostCenter.initialize();
            grM2mCostCenter.setValue('type', 'cost_center');
            grM2mCostCenter.setValue("cost_center", '' + costCenter);
            grM2mCostCenter.setValue('location', spaceId);
            grM2mCostCenter.insert();
        }



    },

    // fetch users from group table based on grp type
    // @parm (string) : grpType : sys_id of the sys_user_group_type record.
    getMgrList: function(grpType) {

        try {
            var userIds = [];
            if (grpType) {
                var grpMemberGr = new GlideRecord("sys_user_grmember");
                //group.typeLIKE83280a2787ea71508d1065f70cbb3527
                grpMemberGr.addEncodedQuery("group.typeLIKE" + grpType);
                grpMemberGr.query();
                while (grpMemberGr.next()) {
                    userIds.push(grpMemberGr.getValue("user"));
                }

                return userIds.join(",");
            }
        } catch (error) {
            gs.info("Error caught " + error.message);
        }
    },


    /*
     @Parm (string) : buildingId - sys_id of the building record
    */

    createBusinessPartnerCase: function(buildingRec) {

        // create the case and subsequent tasks which needs to be created against business partner assign groups
        var bizPartnerGroups = gs.getProperty('sn_wsd_case.business_partner_assign_groups');
        var groupsArray = bizPartnerGroups.split(",");
		//https://now-dev.wf.com/nav_to.do?uri=sn_wsd_core_building.do?sys_id=000024cb1b2754107138748d9c4bcbf5
		var _recordURL = gs.getProperty('glide.servlet.uri')+buildingRec.getLink(true);

        var grWorkplaceCase = new GlideRecord(WSDCaseConstants.TABLES.CASE);
        grWorkplaceCase.newRecord();
		// retrieve the parent case template and apply
        var glideCaseTemplate = GlideTemplate.get(this.PROPERTY_LIFE_CYCLE_TASK.TEMPLATE.parentCase);
        if (global.JSUtil.notNil(glideCaseTemplate)) {

            glideCaseTemplate.apply(grWorkplaceCase);
            var _message = 'Building ' + buildingRec.getValue('name') + ' transasctional status is set to ' + buildingRec.getValue('u_transactional_status');
			_message += "\n" + 'Building Record :'+_recordURL;
            grWorkplaceCase.setValue('description', _message);
            var caseId = grWorkplaceCase.insert();
            if (global.JSUtil.notNil(caseId)) {
                // here create all the tasks for the business partner assignment groups
				var glideTaskTemplate = GlideTemplate.get(this.PROPERTY_LIFE_CYCLE_TASK.TEMPLATE.childTask)
                groupsArray.forEach(function(assignGroup) {
                    // here create the task and assign it to the groups.
					// task template : this.PROPERTY_LIFE_CYCLE_TASK.TEMPLATE.childTask
					var grCaseTask = new GlideRecord(WSDCaseConstants.TABLES.WORKPLACE_TASK);
					grCaseTask.newRecord();
					glideTaskTemplate.apply(grCaseTask);
					grCaseTask.setValue('assignment_group',assignGroup);
					grCaseTask.setValue('description',_message);
					grCaseTask.insert();
					
                });

            }


        }





    },

    type: 'WF_WSDCaseUtils'

};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;K094794&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-10-05 19:50:00&lt;/sys_created_on&gt;
        &lt;sys_id&gt;94a02eccdb35f9543269e4491396195f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;230&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WF_WSDCaseUtils&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;a1bd5de60f751010784dd2d92f767e96&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;a1bd5de60f751010784dd2d92f767e96&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_94a02eccdb35f9543269e4491396195f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:25:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:46</sys_created_on>
        <sys_id>60a8f85183341210c6695855eeaad3b9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WF_WSDCaseUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_60a8f85183341210c6695855eeaad3b9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:46</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
