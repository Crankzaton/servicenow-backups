<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>62f8b9e90f106010f4166fe7c4767ea5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;true&lt;/before&gt;
        &lt;description&gt;Remove the ACLs auto-generated via table attributes on sys_hub_category. New explicit ACLs will replace these.&lt;/description&gt;
        &lt;name&gt;Remove sys_hub_category ACLs&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[(function() {
    //This Fix script should only run for Upgrade not for Zboot.
    if (pm.isZboot())
        return;
    var aclGr = new GlideRecord('sys_security_acl');	
    aclGr.addQuery('name','sys_hub_category').addOrCondition('name','sys_hub_category.*').addOrCondition('name','sys_hub_category.sys_scope');
    aclGr.query();	
    while(aclGr.next()) {
    	var rolesUpdatedByCustomer = false;
        var roleGr = getRolesForAcl(aclGr);
        while(roleGr.next()){
        	if (SncAppFiles.hasCustomerUpdate(roleGr)) {
				gs.info('Customer update found for sys_security_acl_role ' + roleGr.getUniqueValue());
				rolesUpdatedByCustomer = true;
			}
        }
      
       	if (!rolesUpdatedByCustomer &amp;&amp; !SncAppFiles.hasCustomerUpdate(aclGr)) {
       		var rolesForDeletion = getRolesForAcl(aclGr);
       		while (rolesForDeletion.next()) {
				gs.info('Deleting sys_security_acl_role ' + rolesForDeletion.getUniqueValue());
       			rolesForDeletion.deleteRecord();
       		}
			gs.info('Deleting sys_security_acl ' + aclGr.getUniqueValue());
			aclGr.deleteRecord();
		} else {
			gs.info('Customer update found, skipping sys_security_acl ' + aclGr.getUniqueValue());
		}
    }
    
    function getRolesForAcl(aclGr) {
        var roleGr = new GlideRecord('sys_security_acl_role');
        roleGr.addQuery('sys_security_acl', aclGr.getValue('sys_id'));	
        roleGr.query();
        return roleGr;
    }
}());]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-11-05 14:27:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;62f8b9e90f106010f4166fe7c4767ea5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Remove sys_hub_category ACLs&lt;/sys_name&gt;
        &lt;sys_package display_value="Flow Designer Content Filtering" source="com.glide.hub.content_filtering"&gt;710a74a83cf1311068bcf327dfe37f21&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_62f8b9e90f106010f4166fe7c4767ea5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-11-05 20:49:38&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:30</sys_created_on>
        <sys_id>0513749d83b01210c6695855eeaad350</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Remove sys_hub_category ACLs</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0513749d83b01210c6695855eeaad350</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:30</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
