<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>new sn_ais.StatusApi().isAisQueueWritable() &amp;&amp; new sn_ais.AisUtil().isIndexAttachmentsEnabled(current.table_name)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>AIS index attachment</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var tableName = current.table_name; // the table owning the attachment
 
 // when we get summaries, they are represented as attachments on attachments
 if (tableName == 'sys_attachment')
  return;
 
 var sysId = current.sys_id;
 var aisConfig = new sn_ais.AisUtil();
 
 var op = current.operation();
 if (op == 'delete') {
  new sn_ais.IndexEvent().deleteAttachment(tableName, sysId);
  return;
 } else {
  var state = current.state;
  
  var nowAvailable = state == 'available' || state == 'available_conditionally' || state == '' || state =='pending';
  var prevAvailable = false;
  if (previous) {
   var prevState = previous.state;
   prevAvailable = prevState == 'available' || prevState == 'available_conditionally' || prevState == '' || prevState =='pending';
  }
  
  if (!nowAvailable && prevAvailable) {
   // e.g. virus scanner nuked this attachment
   // this should really be treated as deletion
   new sn_ais.IndexEvent().deleteAttachment(tableName, sysId);
   return;
  }
  
  if (!nowAvailable)
   return;
  
  if (op == 'update') {
   if (prevAvailable) {
    // if this looks like it's just a state change, e.g. from pending to
    //    available_conditionally / available...
    // ... we don't really want to re-index
    var triggerIndex = false;
    for (var k in current) {
     if (k != 'state' && k != 'sys_mod_count' && k != 'sys_updated_on' && current[k] != previous[k]) {
      triggerIndex = true;
     }
    }
    if (!triggerIndex) {
     return;
    }
   }
  }
  new sn_ais.IndexEvent().indexAttachment(sysId);
  return;
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>7d1c2c9583701210c6695855eeaad3cc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AIS index attachment</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_7d1c2c9583701210c6695855eeaad3cc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:58</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=7d1c2c9583701210c6695855eeaad3cc"/>
</record_update>
