<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0785387187b313003c1c8467a7cb0bc6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_cs_sm.ServiceManagementIncidentUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Util File for all the  Case to Incident Integration functions.&lt;/description&gt;
        &lt;name&gt;ServiceManagementIncidentUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ServiceManagementIncidentUtils = Class.create();
ServiceManagementIncidentUtils.prototype = {
    initialize: function() {
    },
	
	canUserAccessIncident: function(relatedRecordsCheck) {
		//If there is any other new extension instance other than the OOB one, concat them together
		//The extension instance with higher order number would overwrite the one with lower order number
		var ep = new GlideScriptedExtensionPoint().getExtensions(ServiceManagementIntegrationConstants.CASE_INC_EXTENSION_POINT);
		var incRoles = [];
		for(var i = 0; i &lt; ep.length; i++){
			var point = ep[i];
			if (!gs.nil(relatedRecordsCheck) &amp;&amp; relatedRecordsCheck === true) {
				incRoles = point.getRolesForIncidentRelatedRecord(incRoles);
			} else {
				incRoles = point.getRolesForIncidentIntegration(incRoles);
			}
		}

		var answer = false;
		for(var j = 0; j &lt; incRoles.length; j++){
			if(gs.hasRole(incRoles[j])) {
				answer = true;
				break;
			}
		}
		return answer;
	},
	
	canCreateIncident : function(caseGr) {
			var canCreateIncident = false;
			//if major case and logged in user doesnt have major issue manager role, then hide the Create Incident UI action
			if ((caseGr.major_case_state == ServiceManagementIntegrationConstants.MAJOR_CASE_ACCEPTED &amp;&amp; !gs.hasRole(ServiceManagementIntegrationConstants.MAJOR_ISSUE_MANAGER_ROLE)))
				return canCreateIncident;
			//For a child of a major case, hide the Create incident UI action
			if (!gs.nil(caseGr.parent) &amp;&amp; caseGr.parent.major_case_state == ServiceManagementIntegrationConstants.MAJOR_CASE_ACCEPTED)
				return canCreateIncident;
			if ((caseGr.state !=  ServiceManagementIntegrationConstants.CASE_STATE_CLOSED &amp;&amp; 
				 caseGr.state !=  ServiceManagementIntegrationConstants.CASE_STATE_RESOLVED &amp;&amp; 
				 caseGr.state !=  ServiceManagementIntegrationConstants.CASE_STATE_CANCELED) &amp;&amp; 
				caseGr.incident.nil() &amp;&amp; 
				this.canUserAccessIncident())
					canCreateIncident = true;
			
			return canCreateIncident;
	},
	
	createIncidentFromCase: function(caseGr, uiActionHandler) {
		var incGr = new GlideRecord("incident");
		var ep = new GlideScriptedExtensionPoint().getExtensions(ServiceManagementIntegrationConstants.CASE_INC_EXTENSION_POINT);
		//If there is any other new extension instance other than the OOB one, concat them together
		//The extension instance with higher order number would overwrite the one with lower order number
		for(var i = 0; i &lt; ep.length; i ++){
			var point = ep[i];
			point.copyFieldsFromCaseToIncident(incGr, caseGr);
		}
		
		var incSysId = incGr.insert();
		caseGr.incident = incSysId;
		caseGr.update();
		gs.addInfoMessage(gs.getMessage("Incident {0} created", incGr.number));
		uiActionHandler.openGlideRecord(incGr);
		uiActionHandler.setReturnURL(caseGr);
	},
	
	isValidCallerForIncNotif : function(userGr) {
		var ep = new GlideScriptedExtensionPoint().getExtensions(ServiceManagementIntegrationConstants.CASE_INC_EXTENSION_POINT);
		var answer = true;
		//If there is any other new extension instance other than the OOB one, concat them together
		//The extension instance with higher order number would overwrite the one with lower order number
		for(var i = 0; i &lt; ep.length; i ++){
			var point = ep[i];
			answer = point.isValidCallerForIncNotif(userGr);
			if (!answer)
				break;
		}
		return answer;
	},
	
	updateCaseWithIncAssociation: function(caseGr, incGr) {
		//If there is any other new extension instance other than the OOB one, concat them together
		//The extension instance with higher order number would overwrite the one with lower order number
		var ep = new GlideScriptedExtensionPoint().getExtensions(ServiceManagementIntegrationConstants.CASE_INC_EXTENSION_POINT);
		for(var i = 0; i &lt; ep.length; i++){
			var point = ep[i];
			point.updateCaseWithIncAssociation(caseGr, incGr);
		}
	},
	
	updateCaseWorkNotesWithIncState: function(incGr, field) {
			var caseGr = new GlideRecord("sn_customerservice_case");
			caseGr.addQuery("incident",incGr.sys_id);
			caseGr.addActiveQuery();
			caseGr.addQuery('state','NOT IN',ServiceManagementIntegrationConstants.NO_INC_SYNC_CASE_STATE.join());
			caseGr.query();
			
			while(caseGr.next()) {
				var _isValidChild = this._isValidChildOfMajorCase(caseGr);
				if (_isValidChild) {
					//If there is any other new extension instance other than the OOB one, concat them together
					//The extension instance with higher order number would overwrite the one with lower order number
					var ep = new GlideScriptedExtensionPoint().getExtensions(ServiceManagementIntegrationConstants.CASE_INC_EXTENSION_POINT);
					for(var i = 0; i &lt; ep.length; i++){
						var point = ep[i];
						point.updateCaseWithIncState(caseGr, incGr, field);
					}
					caseGr.update();
				}
			}
		},
	
	updateCaseWorkNotesWithIncComments: function(incGr) {
			var caseGr = new GlideRecord("sn_customerservice_case");
			caseGr.addQuery("incident",incGr.sys_id);
			caseGr.addActiveQuery();
			caseGr.addQuery('state','NOT IN',ServiceManagementIntegrationConstants.NO_INC_SYNC_CASE_STATE.join());
			caseGr.query();
			
			while(caseGr.next()) {
				var _isValidChild = this._isValidChildOfMajorCase(caseGr);
				if (_isValidChild) {
					//If there is any other new extension instance other than the OOB one, concat them together
					//The extension instance with higher order number would overwrite the one with lower order number
					var ep = new GlideScriptedExtensionPoint().getExtensions(ServiceManagementIntegrationConstants.CASE_INC_EXTENSION_POINT);
					for(var i = 0; i &lt; ep.length; i++){
						var point = ep[i];
						point.updateCaseWorkNotesWithIncComments(caseGr, incGr);
					}
					caseGr.update();
				}
			}
		},
	
	_isValidChildOfMajorCase : function(caseGr) {
			var _isValidChild = true;
			if (!gs.nil(caseGr.parent)) {
				//Check whether SM fields of Child case is same as major case, if so, dont update worknote of child case
				if (!gs.nil(caseGr.incident) &amp;&amp; 
					!gs.nil(caseGr.parent.incident) &amp;&amp; 
					(caseGr.parent.major_case_state == ServiceManagementIntegrationConstants.MAJOR_CASE_ACCEPTED) &amp;&amp; 
					(caseGr.incident == caseGr.parent.incident)) {
					_isValidChild = false;
				}
			}
			return _isValidChild;
		},

    type: 'ServiceManagementIncidentUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-08-08 22:44:31&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0785387187b313003c1c8467a7cb0bc6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;21&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ServiceManagementIncidentUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Management Integrations" source="sn_cs_sm"&gt;de5602cc8713130064048467a7cb0b41&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Service Management Integrations"&gt;de5602cc8713130064048467a7cb0b41&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0785387187b313003c1c8467a7cb0bc6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-08-13 22:22:00&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:27</sys_created_on>
        <sys_id>2050309583b01210c6695855eeaad392</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ServiceManagementIncidentUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2050309583b01210c6695855eeaad392</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:27</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
