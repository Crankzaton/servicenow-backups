<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1b1a3b5e47231100158b949b6c9a71c3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FinancialMgmtAJAX&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Contains AJAX Apis for use with Financial Management&lt;/description&gt;
        &lt;name&gt;FinancialMgmtAJAX&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[
			var FinancialMgmtAJAX = Class.create();
FinancialMgmtAJAX.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    revertRule: function() {
        var ruleId = this.getParameter('sysparm_ruleId');
        (new SNC.CostAllocation()).revertAllocationsByRule(ruleId);
    },

    putCostModelInSession: function() {
        var sysId = this.getParameter('sysparm_costModel');
        var name = 'cost_model';
        gs.getSession().putClientData(name, sysId);
        var result = this.newItem("data");
        result.setAttribute("key", name);
        result.setAttribute("value", sysId);
    },

    findAllocateToFields: function() {
        var id = this.getParameter('sysparm_id');
        var host = this.getParameter('sysparm_host');
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_to = this.getParameter('sysparm_allocate_to');
        var intermediary = this.getParameter('sysparm_intermediary');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        if (intermediary) {
            // Populate intermeidate to_field
            if (allocate_to)
                this._createListOfValidFields('to_field', intermediary, allocate_to, "", "", depth, strType);
        }

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_to_field', this.getParameter('sysparm_default_to_field'));

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'to_field');
    },
    getTransactionTable: function() {
        var biColumn = this.getParameter('sysparm_bi_column');
        var item = this.newItem('data');
        var gr = new GlideRecord('itfm_plan_item');
        var table = gr.getElement(biColumn).getED().getReference();
        item.setAttribute("table", table);

    },
    findAllocateFromFields: function() {
        var id = this.getParameter('sysparm_id');
        var host = this.getParameter('sysparm_host');
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_from = this.getParameter('sysparm_allocate_from');
        var intermediary = this.getParameter('sysparm_intermediary');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        if (intermediary) {
            // Populate intermediate from_field
            if (allocate_from)
                this._createListOfValidFields('from_field', intermediary, allocate_from, "", "", depth, strType);
        }

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_to_field', this.getParameter('sysparm_default_to_field'));

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'from_field');
    },

    findRelatedRelationshipFieldToReferences: function() {
        var id = this.getParameter('sysparm_id');
        var host = this.getParameter('sysparm_host');
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_to = this.getParameter('sysparm_allocate_to');
        var allocate_from = this.getParameter('sysparm_allocate_from');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        this._createListOfValidFields('rel_field_to', allocate_to, allocate_from, "", "", depth, strType);

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_rel_field_to', this.getParameter('sysparm_default_rel_field_to'));

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'rel_field_to');

    },

    findRelatedRelationshipFieldFromReferences: function() {
        var id = this.getParameter('sysparm_id');
        var host = this.getParameter('sysparm_host');
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_to = this.getParameter('sysparm_allocate_to');
        var allocate_from = this.getParameter('sysparm_allocate_from');
        var allocate_from_segment = this.getParameter('sysparm_allocate_from_segment');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        // Populate rel_field_from, rel_field_to and from_account
        if (allocate_from) {
            this._createListOfValidFields('rel_field_from', allocate_from, allocate_to, "", "", depth, strType);
            this._getAllFromAccounts(allocate_from_segment, fiscal_period);
        }

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_rel_field_from', this.getParameter('sysparm_default_rel_field_from'));

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'rel_field_from');
    },

    findRelatedReferenceAllocateToFields: function() {
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_to = this.getParameter('sysparm_allocate_to');
        var weight_table = this.getParameter('sysparm_weight_table');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        // Populate weight_reference_field_to
        this._createListOfValidFields('weight_reference_field_to', weight_table, allocate_to, '', '', depth, strType);

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_weight_reference_field_to', this.getParameter('sysparm_default_weight_reference_field_to'));

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'weight_reference_field_to');
    },

    findRelatedReferenceIntermediarySegmentsFields: function() {
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var intermediary_segment = this.getParameter('sysparm_intermediary_segment');
        var weight_table = this.getParameter('sysparm_weight_table');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        // Populate weight_reference_field_to
        this._createListOfValidFields('intermediary_segment_reference_weight_table', weight_table, intermediary_segment, '', '', depth, strType);

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_intermediary_segment_reference_weight_table', this.getParameter('sysparm_default_intermediary_segment_reference_to'));
        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'intermediary_segment_reference_weight_table');
    },

    findRelatedReferenceAllocateFromFields: function() {
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_from = this.getParameter('sysparm_allocate_from');
        var weight_table = this.getParameter('sysparm_weight_table');
        var depth = this.getParameter('sysparm_current_depth') || 2;
        var strType = this.getParameter('sysparm_stringtype');
        if (allocate_from &amp;&amp; weight_table)
            this._createListOfValidFields('weight_reference_field_from', weight_table, allocate_from, '', '', depth, strType);

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_weight_reference_field_from', this.getParameter('sysparm_default_weight_reference_field_from'));

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'weight_reference_field_from');
    },

    // Used by Metric standard form
    findRelatedFields: function() {
        var id = this.getParameter('sysparm_id');
        var host = this.getParameter('sysparm_host');
        var fiscal_period = this.getParameter('sysparm_fiscal_period_id');
        var allocate_to = this.getParameter('sysparm_allocate_to');
        var allocate_from = this.getParameter('sysparm_allocate_from');
        //var allocate_from_segment = this.getParameter('sysparm_allocate_from_segment');
        var weight_table = this.getParameter('sysparm_weight_table');
        var intermediary = this.getParameter('sysparm_intermediary');

        var metricGr = new GlideRecord('itfm_cost_allocation_metric');
        metricGr.get(id);


        // Populate rel_field_from, rel_field_to and from_account
        if (allocate_from) {
            this._createListOfValidFields('rel_field_from', allocate_from, allocate_to, '', '', '', 'false', this.getParameter('sysparm_default_rel_field_from'));
            this._createListOfValidFields('rel_field_to', allocate_to, allocate_from, '', '', '', 'false', metricGr.rel_field_to);
            this._getAllFromAccounts(allocate_from, fiscal_period);
        }

        // Populate weight_reference_field_from
        if (allocate_from &amp;&amp; weight_table)
            this._createListOfValidFields('weight_reference_field_from', weight_table, allocate_from, '', '', '', 'false', metricGr.weight_reference_field_from);

        // Populate weight weight_reference_field_to
        if (weight_table) {
            this._createListOfValidFields('weight_reference_field_to', weight_table, allocate_to, '', '', '', 'false', metricGr.weight_reference_field_to);
        }

        if (intermediary) {
            // Populate intermediate from_field
            if (allocate_from)
                this._createListOfValidFields('from_field', intermediary, allocate_from, '', '', '', 'false', metricGr.from_field);
            // Populate intermeidate to_field
            if (allocate_to)
                this._createListOfValidFields('to_field', intermediary, allocate_to, '', '', '', 'false', metricGr.to_field);
        }

        var def_item = this.newItem('default_value');
        var default_fields = ('' + this.getParameter('sysparm_default_field_list')).split(',');
        default_fields.forEach(function(field) {
            def_item.setAttribute('default_' + field, metricGr.getValue(field));
        });

        var fields = this.newItem('fields');
        fields.setAttribute('field_names', 'rel_field_from,rel_field_to,weight_reference_field_from,weight_reference_field_to,from_field,to_field');
    },

    findAggregateFields: function() {
        var weight_table = this.getParameter('sysparm_weight_table');

        var gr = new GlideRecord('sys_dictionary');
        gr.addQuery("name", "itfm_cost_allocation_metric");
        gr.addQuery("element", "aggregate_field");
        gr.query();

        if (gr.next()) {

            var grWeightTable = new GlideRecord(weight_table);
            grWeightTable.initialize();
            var grWeightTableFields = grWeightTable.getFields();

            var attributeListStr = gr.getValue("attributes");

            var attributeList = attributeListStr.split("=");
            var attributes = attributeList[1].split(";");

            for (var i = 0; i &lt; attributes.length; i++) {
                for (var x = 0; x &lt; grWeightTableFields.size(); x++) {

                    var glideElement = grWeightTableFields.get(x);
                    var descriptor = glideElement.getED();

                    if (descriptor.getInternalType() == attributes[i]) {
                        var item = this.newItem('aggregate_field');
                        item.setAttribute('display', glideElement.getLabel());
                        item.setAttribute('value', glideElement.getName());
                    }
                }
            }
        }

        var def_item = this.newItem('default_value');
        def_item.setAttribute('default_aggregate_field', this.getParameter('sysparm_default_value'));
    },

    findAllocationDateTimeFields: function() {
        var tableName = this.getParameter('sysparm_table_name');
        this._createListOfValidDateFields('time_field', tableName, 'glide_date_time', '', '');
    },

    _createListOfValidDateFields: function(label, host, type, path, labelPath) {
        var item;
        // Set up possibly undefined variables.
        if (!path || !labelPath) {
            path = '';
            labelPath = '';
        }
        if (path.split(".").length &gt; 2) {
            return;
        }
        var hostGr = new GlideRecord(host);
        hostGr.initialize();
        var grFields = hostGr.getFields();
        for (var x = 0; x &lt; grFields.size(); x++) {
            var glideElement = grFields.get(x);
            var descriptor = glideElement.getED();
            if (descriptor.getInternalType() == "glide_date_time") {
                // We found a matching reference, we add it to the result
                item = this.newItem(label);
                item.setAttribute('value', path + descriptor.getName());
                item.setAttribute('display', labelPath + descriptor.getLabel());
            } else if (descriptor.getInternalType() == "reference") {
                if (path.search(glideElement.getName()) == -1)
                    this._createListOfValidDateFields(label, descriptor.getReference(), type,
                        path + glideElement.getName() + '.', labelPath + glideElement.getLabel() + '.');
            }
        }
    },

    _createListOfValidFields: function(label, host, referenceTarget, path, labelPath, depth, strType, defaultValue) {
        var item;

        // Set up possibly undefined variables.
        if (!path || !labelPath) {
            path = '';
            labelPath = '';
        }

        // Limit dot walking to the depth passed or default it to 2 if depth is empty
        depth = depth || 2;
        if (defaultValue) {
            defaultValue = '' + defaultValue;
            depth = defaultValue.split('.').length;
        }

        if (path.split(".").length &gt; depth) {
            return;
        }

        var possibleTargets = GlideDBObjectManager.getTables(referenceTarget);

        var grAllocateTo = new GlideRecord(host);
        grAllocateTo.initialize();

        var grFields = grAllocateTo.getFields();
        for (var x = 0; x &lt; grFields.size(); x++) {
            var glideElement = grFields.get(x);
            var descriptor = glideElement.getED();
            if (descriptor.getInternalType() == "reference") {
                if (possibleTargets.contains(descriptor.getReference()) &amp;&amp; strType != 'true') {
                    // We found a matching reference, we add it to the result
                    item = this.newItem(label);
                    item.setAttribute('display', labelPath + glideElement.getLabel());
                    item.setAttribute('value', path + glideElement.getName());
                } else {
                    // Recursively look through this reference field for possible target (dot walk)
                    if (path.search(glideElement.getName()) == -1)
                        this._createListOfValidFields(label, descriptor.getReference(), referenceTarget,
                            path + glideElement.getName() + '.', labelPath + glideElement.getLabel() + '.', depth, strType);
                }
            } else if (descriptor.getInternalType() == "document_id") {
                // We will list Doc ids as potential targets
                item = this.newItem(label);
                item.setAttribute('display', labelPath + glideElement.getLabel());
                item.setAttribute('value', path + glideElement.getName());
            } else if (strType == 'true') {
                item = this.newItem(label);
                item.setAttribute('display', labelPath + glideElement.getLabel());
                item.setAttribute('value', path + glideElement.getName());
            }

        }

        if (host == referenceTarget) {
            item = this.newItem(label);
            item.setAttribute('display', 'Sys ID');
            item.setAttribute('value', 'sys_id');
        }
    },

    _getAllFromAccounts: function(fromSegment, fiscalPeriodID) {
        var accountsJSON = new SNC.WorkbenchScriptable().getTransactionalDataInFiscalPeriod(fromSegment, fiscalPeriodID);

        var accounts = JSON.parse(accountsJSON);
        var result, accountObj;
        for (var i = 0; i &lt; accounts.length; ++i) {
            result = this.newItem("from_account");
            accountObj = accounts[i];
            result.setAttribute('display', accountObj['name']);
            result.setAttribute("value", accountObj['sys_id']);
        }
    },

    createSegment: function() {
        var segment = this.getParameter('sysparm_segment');
        var tablename = this.getParameter('sysparm_tablename');
        var costModel = this.getSelectedCostModel();

        var itcoaSegmentDefinition = new GlideRecord("itfm_itcoa_definition");
        itcoaSegmentDefinition.addQuery('cost_model', costModel);
        itcoaSegmentDefinition.query();
        itcoaSegmentDefinition.next();
        itcoaSegmentDefinition.setValue(segment, tablename);
        itcoaSegmentDefinition.update();
    },

    validateSegments: function() {
        var segment = this.getParameter('sysparm_segment');
        var tablename = this.getParameter('sysparm_tablename');

        var errorMsg = (new SNC.SegmentDefinition()).validateSegments(segment, tablename);
        var result = this.newItem("error");
        result.setAttribute("message", errorMsg);
    },

    getSelectedCostModel: function() {
        return new FinancialMgmt().getSelectedCostModel();
    },
    getWeightMapExists: function() {
        var metricId = this.getParameter('sysparm_metric_id');
        var accountId = this.getParameter('sysparm_account_id');
        var fiscalPeriod = this.getParameter('sysparm_fiscal_period');
        return new SNC.WorkbenchScriptable().getWeightMapLastGeneratedOn(metricId, accountId, fiscalPeriod);
    },
    getDimensionRecords: function() {
        var segment = this.getParameter('sysparm_dimensionTable');
        var ids = "";
        var names = "";
        var costModel = this.getSelectedCostModel();

        var segmentToDmTableMap = new FinancialMgmt().getFinalSegmentToDmTableMap();

        var dm_table = segmentToDmTableMap[segment];

        if (dm_table) {
            var gr2 = new GlideRecord(dm_table);
            gr2.addQuery('current', true);
            gr2.orderBy("name");
            gr2.query();

            while (gr2.next()) {
                var gr3 = new GlideRecord('itfm_allocation_aggregate');
                gr3.addQuery("cost_model", costModel);
                gr3.addQuery(segment, gr2.original_id);
                gr3.addNotNullQuery('fiscal_period');
                gr3.setLimit(1);
                gr3.query();

                if (gr3.next()) {
                    ids += gr2.original_id + "|,";
                    var name = String(gr2.name);
                    names += name.replace(/\|/g, "|_") + "|,";
                }
            }
        } else {
            //hack
            var tableMap = {
                'vendor': 'core_company',
                'cost_center': 'cmn_cost_center',
                'location': 'cmn_location',
                'department': 'cmn_department'
            };

            var tableName = tableMap[segment];

            if (tableName) {
                var gr2 = new GlideRecord(tableName);
                gr2.orderBy("name");
                gr2.query();

                while (gr2.next()) {
                    var gr3 = new GlideRecord('itfm_allocation');
                    gr3.addQuery("cost_model", costModel);
                    gr3.addQuery(segment, gr2.getUniqueValue());
                    gr3.addNotNullQuery('fiscal_period');
                    gr3.setLimit(1);
                    gr3.query();

                    if (gr3.next()) {
                        ids += gr2.sys_id + "|,";
                        var name = String(gr2.name);
                        names += name.replace(/\|/g, "|_") + "|,";
                    }
                }
            }

        }

        var result = this.newItem("data");
        result.setAttribute("dimensionIds", ids);
        result.setAttribute("dimensionNames", names);
    },

    getDmTableforSegment: function(segment, costModel) {
        var gr = new GlideRecord('itfm_itcoa_definition');
        gr.get('cost_model', costModel);
        return gr[segment];
    },

    getOriginalTableforSegment: function(segment, costModel) {
        var dmTable = this.getDmTableforSegment(segment, costModel);

        var dmDef = new GlideRecord('dm_dimension_table_def');
        dmDef.get('dimension_table_name', dmTable);

        return dmDef.table;
    },

    getOriginalTableForDmTable: function(dmTable) {
        var dmDef = new GlideRecord('dm_dimension_table_def');
        dmDef.get('dimension_table_name', dmTable);

        return dmDef.table;
    },

    getProjectsDataForOverview: function() {
        var fiscalPeriod = this.getParameter('sysparm_fiscalPeriod');
        var recordId = this.getParameter('sysparm_recordId');
        var reportType = this.getParameter('sysparm_reportType');
        var costModel = this.getParameter('sysparm_costModel');
        var fiscalPeriodSet = this.getParameter('sysparm_fiscal_period_set');

        var dmTableToFinalSegmentMap = new FinancialMgmt().getDmTableToFinalSegmentMap();
        var projectField = dmTableToFinalSegmentMap.dm_table_pm_project;
        var bsField = dmTableToFinalSegmentMap.dm_table_cmdb_ci_service;
        var buField = dmTableToFinalSegmentMap.dm_table_business_unit;

        if (!projectField)
            return;

        var ga = new GlideAggregate("itfm_allocation_aggregate");
        ga.addNotNullQuery(projectField);

        var originalTable = this.getOriginalTableForDmTable('dm_table_pm_project');

        if (reportType == 'businessServiceOverview') {
            if (bsField) {
                ga.addNotNullQuery(bsField);
                if (recordId &amp;&amp; recordId != 'all')
                    ga.addQuery(bsField, recordId);
            } else
                return;
        } else {
            //reportType = 'businessUnitOverview'
            if (buField) {
                ga.addNotNullQuery(buField);
                if (recordId &amp;&amp; recordId != 'all')
                    ga.addQuery(buField, recordId);
            } else
                return;
        }

        ga.addQuery('cost_model', costModel);
        ga.groupBy(projectField);

        //last_5_years is used only for a set of years
        if (fiscalPeriod == "last_5_years") {
            ga.addQuery("fiscal_year", "IN", fiscalPeriodSet);
        } else {
            //otherwise query directly for fiscal_period
            ga.addQuery("fiscal_period", "IN", fiscalPeriodSet);
        }

        ga.query();

        var projects = [];

        //Get all projects
        while (ga.next()) {
            var projectOriginalId = ga.getValue(projectField);

            projects.push(projectOriginalId);
        }

        //Set data in the xml to return
        var item = this.newItem("data");
        item.setAttribute('project', originalTable);
        var sysIds = "";
        for (var i in projects) {
            if (sysIds.length &gt; 0)
                sysIds += ",";

            sysIds += projects[i];
        }
        item.setAttribute('sys_ids', sysIds);
    },


    getServersDataForOverview: function() {
        var fiscalPeriod = this.getParameter('sysparm_fiscalPeriod');
        var recordId = this.getParameter('sysparm_recordId');
        var reportType = this.getParameter('sysparm_reportType');
        var costModel = this.getParameter('sysparm_costModel');
        var fiscalPeriodSet = this.getParameter('sysparm_fiscal_period_set');

        var dmTableToFinalSegmentMap = new FinancialMgmt().getDmTableToFinalSegmentMap();
        var serverField = dmTableToFinalSegmentMap.dm_table_cmdb_ci_server;
        var bsField = dmTableToFinalSegmentMap.dm_table_cmdb_ci_service;
        var buField = dmTableToFinalSegmentMap.dm_table_business_unit;
        if (!serverField)
            return;

        var ga = new GlideAggregate("itfm_allocation_aggregate");
        ga.addNotNullQuery(serverField);

        var originalTable = this.getOriginalTableForDmTable('dm_table_cmdb_ci_server');

        if (reportType == 'businessServiceOverview') {
            if (bsField) {
                ga.addNotNullQuery(bsField);
                if (recordId &amp;&amp; recordId != 'all')
                    ga.addQuery(bsField, recordId);
            } else
                return;
        } else {
            //reportType = 'businessUnitOverview'
            if (buField) {
                ga.addNotNullQuery(buField);
                if (recordId &amp;&amp; recordId != 'all')
                    ga.addQuery(buField, recordId);
            } else
                return;
        }
        ga.addQuery('cost_model', costModel);
        ga.groupBy(serverField);

        //last_5_years is used only for a set of years
        if (fiscalPeriod == "last_5_years") {
            ga.addQuery("fiscal_year", "IN", fiscalPeriodSet);
        } else {
            //otherwise query directly for fiscal_period
            ga.addQuery("fiscal_period", "IN", fiscalPeriodSet);
        }

        ga.query();
        var servers = [];

        //Get all servers
        while (ga.next()) {
            var serverOriginalId = ga.getValue(serverField);

            servers.push(serverOriginalId);
        }

        //Set data in the xml to return
        var item = this.newItem("data");
        item.setAttribute('server', originalTable);
        var sysIds = "";
        for (var i in servers) {
            if (sysIds.length &gt; 0)
                sysIds += ",";

            sysIds += servers[i];
        }
        item.setAttribute('sys_ids', sysIds);
    },

    getFinalSegmentMap: function() {
        var dmTableToSegmentsMap = [];
        var segmentMap = new GlideRecord("itfm_ca_segment_map");
        segmentMap.query();
        while (segmentMap.next()) {
            var dmName = segmentMap.getValue('segment');
            dmTableToSegmentsMap[dmName] = segmentMap.getValue('final_segment');
        }

        for (var key in dmTableToSegmentsMap) {
            if (dmTableToSegmentsMap.hasOwnProperty(key)) {
                var item = this.newItem("data");
                item.setAttribute("segment", key);
                item.setAttribute("final_segment", dmTableToSegmentsMap[key]);
            }
        }
    },

    getDimensionsMap: function() {
        var dmTableToSegmentsMap = {};
        var segmentMap = new GlideRecord("dm_dimension_table_def");
        segmentMap.query();
        while (segmentMap.next()) {
            var obj = {};
            obj.name = segmentMap.getValue('name');
            obj.segment = segmentMap.getValue('table');
            obj.dimension_table = segmentMap.getValue('dimension_table_name');
            dmTableToSegmentsMap[obj.dimension_table] = obj;
        }

        var item = this.newItem("result");
        item.setAttribute("data", new JSON().encode(dmTableToSegmentsMap));
    },

    getCIOSegmentToDmTableMap: function() {
        var costModel = this.getParameter('sysparm_costModel');
        var map = new FinancialMgmt().getCIOSegmentToDmTableMapForCostModel(costModel);
        for (var key in map) {
            if (map.hasOwnProperty(key)) {
                var item = this.newItem("data");
                item.setAttribute("segment", key);
                item.setAttribute("table", map[key]);
            }
        }
    },

    getDimensionListForCostModel: function() {
        var costModel = this.getParameter('sysparm_costModel');
        var dimensionTables = new FinancialMgmt().getSegmentToDimensionsMapForCostModel(costModel);
        for (var i in dimensionTables) {
            var pair = dimensionTables[i];
            var item = this.newItem('data');
            item.setAttribute('name', pair.name);
            item.setAttribute('value', pair.value);
        }
    },

    getFiscalPeriodsForModel: function() {
        var costModel = this.getParameter('sysparm_costModel');
        var periods = new new FinancialMgmt().getFiscalPeriodsForModel(5, costModel);
        var hash = new FinancialMgmt().getFiscalYearsToUnitsMap();
        while (periods.next()) {
            var item = this.newItem('data');
            item.setAttribute('text', periods.getDisplayValue());
            item.setAttribute('sys_id', periods.getUniqueValue());
            item.setAttribute('type', periods.fiscal_type);
            if (hash[periods.getUniqueValue()])
                item.setAttribute('set', hash[periods.getUniqueValue()]);
            else
                item.setAttribute('set', periods.getUniqueValue());
        }
    },

    /* Get all Fiscal Units associated with current Finacial Calendar Type */
    getFiscalUnits: function() {
        var item = this.newItem('data');
        var fiscalUnit = gs.getProperty('com.glide.fiscal_calendar.fiscal_unit');
        item.setAttribute("fiscalUnits", new SNC.FiscalCalendar().getFiscalUnits());
        item.setAttribute("defaultUnit", fiscalUnit);
    },

    getMetricRecord: function() {
        var sys_id = this.getParameter('sysparm_sys_id');

        var gr = new GlideRecord('itfm_allocation_metric');
        gr.addQuery("sys_id", sys_id);
        gr.query();

        if (gr.next()) {
            var item = this.newItem('record');
            item.setAttribute('name', gr.name);
            item.setAttribute('allocation_group', gr.allocation_group.name);
            item.setAttribute('allocate_to', gr.allocate_to);
            if (gr.allocation_condition) {
                item.setAttribute('allocation_condition_filter', 'true');
                item.setAttribute('allocation_condition', gr.allocation_condition);
            } else {
                item.setAttribute('allocation_condition_filter', 'false');
            }
            item.setAttribute('allocation_condition', gr.allocation_condition);

            item.setAttribute('weight_table', gr.weight_table);

            if (gr.weight_reference_field_from !== '')
                item.setAttribute('weight_reference_field_from', gr.weight_reference_field_from);
            else
                item.setAttribute('weight_reference_field_from', 'no_reference');

            item.setAttribute('weight_reference_field_to', gr.weight_reference_field_to);
            if (gr.weight_condition) {
                item.setAttribute('weight_condition_filter', 'true');
                item.setAttribute('weight_condition', gr.weight_condition);
            } else {
                item.setAttribute('weight_condition_filter', 'false');
            }
            item.setAttribute('aggregate', gr.aggregate);
            item.setAttribute('aggregate_field', gr.aggregate_field);

            item.setAttribute('enforce_relationship', gr.enforce_relationship);

            item.setAttribute('allocate_from', gr.allocate_from);
            item.setAttribute('rel_type', gr.rel_type);

            item.setAttribute('rel_field_from', gr.rel_field_from);
            item.setAttribute('rel_field_to', gr.rel_field_to);

            if (gr.rel_condition_from) {
                item.setAttribute('rel_condition_from_filter', 'true');
                item.setAttribute('rel_condition_from', gr.rel_condition_from);
            } else {
                item.setAttribute('rel_condition_from_filter', 'false');
            }

            item.setAttribute('intermediary_table', gr.intermediary_table);

            item.setAttribute('from_field', gr.from_field);
            item.setAttribute('to_field', gr.to_field);

            if (gr.intermediary_condition) {
                item.setAttribute('intermediary_condition_filter', 'true');
                item.setAttribute('intermediary_condition', gr.intermediary_condition);
            } else {
                item.setAttribute('intermediary_condition_filter', 'false');
            }
        }
    },

    getMetricPreviewData: function() {
        var fiscalPeriodID = this.getParameter('sysparm_fiscal_period_id');
        var accountCode = this.getParameter('sysparm_account_code');
        var metricID = this.getParameter('sysparm_metric_json');
        var fromRow = this.getParameter('sysparm_from_index');
        var getAccounts = this.getParameter('sysparm_get_accounts');
        var result = new SNC.WorkbenchScriptable().getMetricPreviewData(metricID, accountCode, fiscalPeriodID, fromRow, getAccounts);
        var item = this.newItem('data');
        item.setAttribute('result', result);

    },

    getAccountsForMetric: function() {
        var fiscalPeriodID = this.getParameter('sysparm_fiscal_period_id');
        var metricID = this.getParameter('sysparm_metric_id');
        var fromRow = this.getParameter('sysparm_metric_from_row');
        var searchText = this.getParameter('sysparm_metric_search');
        var result = new SNC.WorkbenchScriptable().getAccountsForMetric(metricID, fiscalPeriodID, fromRow, "name", searchText);
        var item = this.newItem('data');
        item.setAttribute('result', result);

    },

    generateWeightMap: function() {
        var fiscalPeriodId = this.getParameter('sysparm_fiscal_period_id');
        var accountCode = this.getParameter('sysparm_account_code');
        var metricId = this.getParameter('sysparm_metric_id');
        var result = new SNC.WorkbenchScriptable().createGenerateWeightMapJob(fiscalPeriodId, metricId, accountCode);
        var item = this.newItem('data');
        item.setAttribute('result', result);
    },
    getFirstFilteredExpense: function() {

        var sys_id = this.getParameter('sysparm_sys_id');
        var table = this.getParameter('sysparm_table');
        var condition = this.getParameter('sysparm_condition');

        var expenses = new GlideRecord(table);
        expenses.addEncodedQuery(condition, true);
        expenses.addQuery('state', '1');
        expenses.orderBy('number');
        expenses.query();

        if (expenses.next()) {
            var item = this.newItem('record');
            item.setAttribute('sys_id', expenses.sys_id);
            item.setAttribute('state', expenses.state);
        }
    },

    isFirstSegmentRelationship: function() {
        var cost_model = this.getParameter('sysparm_cost_model');
        var relations = new GlideRecord('itfm_itcoa_hierarchy');
        relations.addQuery('cost_model', cost_model);
        relations.setLimit(1);
        relations.query();
        var item = this.newItem('data');
        item.setAttribute('result', relations.hasNext() ? '1' : '0');
    },
    getSegmentsInCostModel: function() {
        var costModelSysId = this.getParameter('sysparm_cost_model_sys_id');
        var segmentGR = new GlideRecord('itfm_ca_segment_map');
        segmentGR.query();

        var segmentName, finalSegment, allocations, item;
        while (segmentGR.next()) {
            segmentName = segmentGR.segment_name;
            finalSegment = segmentGR.final_segment;
            if (finalSegment) {
                allocations = new GlideRecord('itfm_allocation_aggregate');
                allocations.addQuery('cost_model', costModelSysId);
                allocations.addQuery('fiscal_period.fiscal_start_date_time', '&gt;', gs.yearsAgo(5));
                allocations.addNotNullQuery(finalSegment);
                allocations.setLimit(1);
                allocations.query();
                if (allocations.hasNext()) {
                    item = this.newItem('data');
                    item.setAttribute('sys_id', segmentGR.sys_id);
                    item.setAttribute('segment_name', segmentGR.segment_name);
                    item.setAttribute('final_segment', finalSegment);
                    item.setAttribute('txn_table', segmentGR.table);
                    item.setAttribute('primary_field', segmentGR.primary_field);
                }
            }
        }
    },

    hasRootSegmentRelationship: function() {
        var cost_model = this.getParameter('sysparm_cost_model');
        var relations = new GlideRecord('itfm_itcoa_hierarchy');
        relations.addQuery('cost_model', cost_model);
        relations.addQuery('root', '1');
        relations.setLimit(1);
        relations.query();
        var item = this.newItem('data');
        item.setAttribute('result', relations.hasNext() ? '1' : '0');
    },

    glSegments: {
        'GL Cost Center': {
            'final_segment': 'cost_center',
            'txn_table': '',
            'primary_field': ''
        },
        'GL Department': {
            'final_segment': 'department',
            'txn_table': '',
            'primary_field': ''
        },
        'GL Location': {
            'final_segment': 'location',
            'txn_table': '',
            'primary_field': ''
        },
        'GL Vendor': {
            'final_segment': 'vendor',
            'txn_table': '',
            'primary_field': ''
        }
    },

    getAllSegmentInCostModel: function() {
        var costModelSysId = this.getParameter('sysparm_cost_model_sys_id');
        var segmentGR = new GlideRecord('itfm_ca_segment_map');
        segmentGR.query();

        var segmentName, finalSegment, allocations, item;
        while (segmentGR.next()) {
            segmentName = segmentGR.segment_name;
            finalSegment = segmentGR.final_segment;
            if (finalSegment) {
                allocations = new GlideRecord('itfm_allocation_aggregate');
                allocations.addQuery('cost_model', costModelSysId);
                allocations.addQuery('fiscal_period.fiscal_start_date_time', '&gt;', gs.yearsAgo(5));
                allocations.addNotNullQuery(finalSegment);
                allocations.setLimit(1);
                allocations.query();
                if (allocations.hasNext()) {
                    item = this.newItem('data');
                    item.setAttribute('sys_id', segmentGR.sys_id);
                    item.setAttribute('segment_name', segmentGR.segment_name);
                    item.setAttribute('final_segment', finalSegment);
                    item.setAttribute('txn_table', segmentGR.table);
                    item.setAttribute('primary_field', segmentGR.primary_field);
                }
            }
            if (this.glSegments.hasOwnProperty('GL ' + segmentName)) {
                this.glSegments['GL ' + segmentName]['txn_table'] = segmentGR.getValue('table');
                this.glSegments['GL ' + segmentName]['primary_field'] = segmentGR.getValue('primary_field');
                this.glSegments['GL ' + segmentName]['sys_id'] = segmentGR.getValue("sys_id");
            }
        }
        for (segmentName in this.glSegments) {
            var segment = this.glSegments[segmentName];
            finalSegment = segment['final_segment'];
            allocations = new GlideRecord('itfm_allocation');
            allocations.addQuery('cost_model', costModelSysId);
            allocations.addQuery('fiscal_period.fiscal_start_date_time', '&gt;', gs.yearsAgo(5));
            allocations.addNotNullQuery(finalSegment);
            allocations.setLimit(1);
            allocations.query();
            if (allocations.hasNext()) {
                item = this.newItem('data');
                item.setAttribute('sys_id', segment['sys_id']);
                item.setAttribute('segment_name', segmentName);
                item.setAttribute('txn_table', segment['txn_table']);
                item.setAttribute('final_segment', finalSegment);
                item.setAttribute('primary_field', segment['primary_field']);
            }
        }
    },

    getAllAccountInSegment: function() {
        var costModelSysId = this.getParameter('sysparm_cost_model_sys_id');
        var segmentDisplayName = this.getParameter('sysparm_segment_display_name');
        var finalSegment = this.getParameter('sysparm_segment_final_segment');
        var txnTable = this.getParameter('sysparm_segment_txn_table');
        var primaryField = this.getParameter('sysparm_segment_primary_field');
        var allocationTable = 'itfm_allocation_aggregate';

        if (this.glSegments.hasOwnProperty(segmentDisplayName)) {
            finalSegment = this.glSegments[segmentDisplayName]['final_segment'];
            allocationTable = 'itfm_allocation';
        }

        var allocations = new GlideAggregate(allocationTable);
        allocations.addQuery('cost_model', costModelSysId);
        allocations.addNotNullQuery('fiscal_period');
        allocations.addNotNullQuery(finalSegment);
        allocations.groupBy(finalSegment);
        allocations.query();
        while (allocations.next()) {
            var item = this.newItem('data');
            item.setAttribute('display_name', allocations[finalSegment][primaryField]);
            item.setAttribute('sys_id', allocations.getValue(finalSegment));
        }
    },

    getAmountForAccount: function() {

        var costModelSysId = this.getParameter('sysparm_cost_model_sys_id');
        var finalSegment = this.getParameter('sysparm_segment_final_segment');
        var fiscalPeriod = this.getParameter('sysparm_segment_fiscal_period');
        var account = this.getParameter('sysparm_account_id');

        var amountAggregate = new GlideAggregate('itfm_allocation_aggregate');
        amountAggregate.addAggregate('SUM', 'precise_amount');
        amountAggregate.addQuery('cost_model', costModelSysId);
        amountAggregate.addQuery('fiscal_period', fiscalPeriod);
        amountAggregate.addQuery(finalSegment, account);
        amountAggregate.query();
        var amount = 0;
        while (amountAggregate.next()) {
            amount += parseFloat(amountAggregate.getAggregate('SUM', 'precise_amount'));
        }
        var item = this.newItem('data');
        item.setAttribute('amount', amount.toString());
    },

    getMetricDomain: function() {
        var metricId = this.getParameter('sysparm_metric_id');
        var result = new SNC.WorkbenchScriptable().getMetricDomain(metricId);
        var item = this.newItem('data');
        item.setAttribute('result', result);
    },

    hasCostTransparencyRoles: function() {
        return gs.hasRole('cost_transparency_admin') || gs.hasRole('cost_transparency_analyst');
    },
    checkJobExists: function() {
        var fiscalPeriodId = this.getParameter('sysparm_fiscal_period_id');
        var metricId = this.getParameter('sysparm_metric_id');
        var result = new SNC.WorkbenchScriptable().checkIfJobExists(fiscalPeriodId, metricId);
        var item = this.newItem('data');
        item.setAttribute('result', result);

    },
    getSegments: function() {
        var budgetModelId = this.getParameter('sysparm_cost_model');
        var result = new SNC.ChartOfAccountsConstroller().getAllSegments(budgetModelId);
        var item = this.newItem('data');
        item.setAttribute('result', result);
    },

    upgradeBudgetModel: function() {

        var metaInfo = this.getParameter('sysparm_meta_info');
        metaInfo = JSON.parse(metaInfo);
        var result = new ITFM_PlanningUpgrade().startPlanningUpgradeJob(metaInfo);
        var item = this.newItem('data');
        item.setAttribute('result', result);
    },
    hasHierarchy: function(costmodelid) {
        var gr = new GlideRecord("itfm_itcoa_hierarchy");
        gr.addQuery('root', true);
        gr.addQuery('cost_model', costmodelid);
        gr.query();
        if (gr.next()) {
            return true;
        } else {
            return false;
        }
    },

    getGlideSystemPropertyFMPremium: function() {

        var val = gs.getProperty('com.glide.financial_management.premium');

        var item = this.newItem('data');
        item.setAttribute('fm_premium_property', val);
    }

});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2014-03-21 22:34:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1b1a3b5e47231100158b949b6c9a71c3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;475&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FinancialMgmtAJAX&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Plugin For ITFM and Financial Planning" source="com.snc.itfm_core"&gt;8210166b47e64210cd4e1ce4316d4327&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1b1a3b5e47231100158b949b6c9a71c3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-03-07 10:07:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:15</sys_created_on>
        <sys_id>bab0b01983b01210c6695855eeaad377</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FinancialMgmtAJAX</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bab0b01983b01210c6695855eeaad377</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
