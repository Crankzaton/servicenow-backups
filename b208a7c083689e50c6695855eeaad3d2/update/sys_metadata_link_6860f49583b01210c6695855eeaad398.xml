<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0a92354293b33110b31a30dcebba10cb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.cfitTrigger&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;cfitTrigger&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var cfitTrigger = Class.create();
cfitTrigger.prototype = Object.extendsObject(AbstractAjaxProcessor, {


    asmtCreate: function() {

        //Working
        var demand = this.getParameter('sysparm_dmnID');
        //gs.addInfoMessage("The demand Sys ID " + demand);
        var cfitGrps = this.getParameter('sysparm_grpcode');
        var cfitGrpArr = cfitGrps.split(',');
        //gs.addInfoMessage("CFIT Groups " + cfitGrpArr.toString());
        var mgrList = [];

        for (var i = 0; i &lt; cfitGrpArr.length; i++) {
            //Check Group Memebers
            var grpMgr = new GlideRecord('sys_user_group');
            grpMgr.addQuery('sys_id', cfitGrpArr[i]);
            grpMgr.query();
            if (grpMgr.next()) {
                mgrList.push(grpMgr.manager); //Selected Group Managers
            }
        }

        gs.addErrorMessage(mgrList.toString()); // Group Managers

        //Working

        //Check Group Memebers
        if (mgrList.length &gt; 0) {
            gs.addErrorMessage('hello 0');

            for (var j = 0; j &lt; mgrList.length; j++) {
                gs.addErrorMessage('hello 1');
                //Creation of assessment instance record
                var typeSysID = 'b02f65fa47bc3510020ba9f8536d4340'; //The sys_id of the assessment, should be in published state
                var sourceRecordID = demand; //sys_id of the transaction record (Ex: sys_id of the IMS record)
                var userID = mgrList[j]; // sys_id in the opened_by field
                var result = new SNC.AssessmentCreation().createAssessments(typeSysID, sourceRecordID, userID); // successfully created the Survey instance record


                //Association of Trigger ID and Trigger Records
                var asmtGR = new GlideRecord("asmt_assessment_instance");
                asmtGR.get(result.split(",")[0]); // gets the sys_id of the newly created assessment record from the 'result' variable array
                asmtGR.setValue('trigger_table', 'dmn_demand'); //setting target table to demand
                asmtGR.setValue('task_id', demand); //sys_id of the task id to the current record
                asmtGR.setValue('trigger_id', demand);
                asmtGR.insert();
            }
        }


    },

    validateDemandManager: function(dmnRec) {

        var gr = new GlideRecord('dmn_demand');
        if (gr.get(dmnRec)) {
            if (gs.getUserID() == gr.getValue('demand_manager')) {
                return true;
            }
            return false;

        }

    },


    createSurvey: function() {

        var dmnRec = this.getParameter('sysparm_sysid');
        var typeSysID = '0556fa9a8f12110040f82ab2f0f923f8'; //The sys_id of an "Assessment Metric Type" record (asmt_metric_type)
        var createAssessmentOutput = (new SNC.AssessmentCreation()).createAssessments(typeSysID, "", gs.getUserID());
        var assessmentDetailsArray = createAssessmentOutput.split(',');
        var assessmentInstanceSysId = assessmentDetailsArray[0];
        var grAsmtInstance = new GlideRecord('asmt_assessment_instance');
        if (grAsmtInstance.get(assessmentInstanceSysId)) {
            grAsmtInstance.trigger_table = 'dmn_demand';
            grAsmtInstance.trigger_id = dmnRec;
            grAsmtInstance.task_id = dmnRec;
            grAsmtInstance.update();
            var asmtURL = 'assessment_take2.do?sysparm_assessable_sysid=' + grAsmtInstance.sys_id.toString() + '&amp;sysparm_assessable_type=' + grAsmtInstance.metric_type.toString();
			return asmtURL;


        }
    },






    type: 'cfitTrigger'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-01-19 07:48:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0a92354293b33110b31a30dcebba10cb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;107&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;cfitTrigger&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0a92354293b33110b31a30dcebba10cb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:22:49&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:44</sys_created_on>
        <sys_id>6860f49583b01210c6695855eeaad398</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>cfitTrigger</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6860f49583b01210c6695855eeaad398</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:44</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
