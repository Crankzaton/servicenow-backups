<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>GlideStringUtil.notNil(current.applies_to) &amp;&amp; GlideStringUtil.notNil(current.attributes)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Don't allow invalid rules/attributes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[// check for existing rules for attributes
// if one or more attributes are part of an existing rule already, abort action
checkForExistingRules('attributes', current.attributes.split(','));

// validate attributes for largest/smallest value
// any invalid attributes will be removed from the attribute list with info message pop up
if (current.rule_type == 'largest_value' || current.rule_type == 'smallest_value') {
 current.attributes = removeInvalidFields(current.attributes.split(','));
 
 if (!current.attributes) {
  gs.addInfoMessage(gs.getMessage("Attributes cannot be empty"));
  current.setAbortAction(true);
 }
}

function checkForExistingRules(column, attrs) {
 for (var i in attrs) {
  var gr = new GlideRecord('cmdb_dynamic_reconciliation_definition');
  gr.addQuery('applies_to', current.applies_to);
  gr.addEncodedQuery(column + 'CONTAINS'+ attrs[i]);
  gr.query();

  if(gr.next()) {
   if (gr.sys_id != current.sys_id) {
    gs.addInfoMessage(gs.getMessage("One or more attributes are already part of an existing rule."));
    current.setAbortAction(true);
   }
  }
 }
}

function removeInvalidFields(attrs) {
 var scanned = [];
 for (var i in attrs) {
  var field = attrs[i];
  var gr = new GlideRecord(current.applies_to);
  var fieldElement = gr.getElement(field);
  var ed = fieldElement.getED();
  if (ed == null) {
   gs.addInfoMessage(gs.getMessage("Error with the field {0}. Aborting action", field));
   current.setAbortAction(true);
  } else {
   if (!ed.isTrulyNumber()) {
    gs.addInfoMessage(gs.getMessage("{0} is not a numeric field. Removed from attribute list", field));
   } else {
    scanned.push(field);
   }
  }
 }
 return scanned.join(',');
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:06</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>59eb285583701210c6695855eeaad389</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Don't allow invalid rules/attributes</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_59eb285583701210c6695855eeaad389</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:06</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=59eb285583701210c6695855eeaad389"/>
</record_update>
