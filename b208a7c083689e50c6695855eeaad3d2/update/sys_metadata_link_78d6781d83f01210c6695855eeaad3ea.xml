<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>630e9bc4eb836110249e8d835d5228de</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_on_call.ExpertsOnCallTabConfigForIncident&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point sn_sow_on_call.ExpertsOnCallTabConfig&lt;/description&gt;
        &lt;name&gt;ExpertsOnCallTabConfigForIncident&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExpertsOnCallTabConfigForIncident = Class.create();
ExpertsOnCallTabConfigForIncident.prototype = {
    initialize: function() {},

    getTableName: function() {
        return 'incident';
    },

    getRecommendedFieldWatchList: function() {
        return [
            'assignment_group',
            'cmdb_ci',
            'business_service'
        ];
    },

    getRecommendedGroups: function(recordGr, fieldWatchList) {
        var ORDERS = {
            "business_service": 10,
            "cmdb_ci": 20,
            "impacted_services": 30,
            "affected_ci_services": 60,
            "assignment_group": 70
        };
        var sowUtil = new OnCallUtilsSow();
        var recommendedGroupsCount = 0;
        var primaryService = fieldWatchList.business_service;
        if (primaryService) {
            var primaryServiceSupportGroup = sowUtil.getSupportGroups(sowUtil.TABLES.CMDB_CI_SERVICE, primaryService);
            if (primaryServiceSupportGroup) {
                sowUtil.updateRecommendedGroups(primaryServiceSupportGroup, gs.getMessage("Recommended based on primary service"), ORDERS["business_service"]);
                recommendedGroupsCount++;
            }
        }

		if (recommendedGroupsCount &lt; sowUtil.MAX_RECOMMENDED_GROUPS_ALLOWED) {
            var impactedServicesSupportGroups = sowUtil.getImpactedServicesSupportGroups(recordGr);
            impactedServicesSupportGroups.forEach(function(supportGroup) {
                if (recommendedGroupsCount &lt; sowUtil.MAX_RECOMMENDED_GROUPS_ALLOWED) {
                    sowUtil.updateRecommendedGroups(supportGroup, gs.getMessage("Recommended based on impacted services"), ORDERS["impacted_services"]);
                    recommendedGroupsCount++;
                } else return;
            });
        }

        var primaryCI = fieldWatchList.cmdb_ci;
        if (primaryCI) {
            var primaryCISupportGroup = sowUtil.getSupportGroups(sowUtil.TABLES.CMDB_CI, primaryCI);
            if (primaryCISupportGroup) {
                sowUtil.updateRecommendedGroups(primaryCISupportGroup, gs.getMessage("Recommended based on primary CI"), ORDERS["cmdb_ci"]);
                recommendedGroupsCount++;
            }
        }

        if (recommendedGroupsCount &lt; sowUtil.MAX_RECOMMENDED_GROUPS_ALLOWED) {
            var affectedCISupportGroups = sowUtil.getAffectedCIsSupportGroups(recordGr);
            affectedCISupportGroups.forEach(function(supportGroup) {
                if (recommendedGroupsCount &lt; sowUtil.MAX_RECOMMENDED_GROUPS_ALLOWED) {
                    sowUtil.updateRecommendedGroups(supportGroup, gs.getMessage("Recommended based on affected CIs"), ORDERS["affected_ci_services"]);
                    recommendedGroupsCount++;
                } else return;
            });
        }

        var assignmentGroup = fieldWatchList.assignment_group;
        if (assignmentGroup &amp;&amp; recommendedGroupsCount &lt; sowUtil.MAX_RECOMMENDED_GROUPS_ALLOWED)
            sowUtil.updateRecommendedGroups(assignmentGroup, gs.getMessage("Recommended based on assignment group"), ORDERS["assignment_group"]);

        return sowUtil.recommendedGroups;
    },

    isExpertOnCallTabSupported: function(table, sysId) {

    },

    type: 'ExpertsOnCallTabConfigForIncident'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-05-22 07:23:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;630e9bc4eb836110249e8d835d5228de&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExpertsOnCallTabConfigForIncident&lt;/sys_name&gt;
        &lt;sys_package display_value="On Call Scheduling for Service Operations Workspace" source="sn_sow_on_call"&gt;7e3c2481539260100c54ddeeff7b127b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="On Call Scheduling for Service Operations Workspace"&gt;7e3c2481539260100c54ddeeff7b127b&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_630e9bc4eb836110249e8d835d5228de&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-21 17:25:58&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:52</sys_created_on>
        <sys_id>78d6781d83f01210c6695855eeaad3ea</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExpertsOnCallTabConfigForIncident</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_78d6781d83f01210c6695855eeaad3ea</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
