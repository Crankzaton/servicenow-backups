<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>true</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Prevent admin from snc_read_only</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function onBefore(current, previous) {
 var grUserRole = new GlideRecord("sys_user_role");
 grUserRole.addQuery("name", "admin");
 grUserRole.query();
 grUserRole.next();
 var adminRoleId = grUserRole.getValue("sys_id");
  
 grUserRole = new GlideRecord("sys_user_role");
 grUserRole.addQuery("name", "snc_read_only");
 grUserRole.query();
 grUserRole.next();
 var readOnlyRoleId = grUserRole.getValue("sys_id");
 
 if (current.role != adminRoleId && current.role != readOnlyRoleId && 
  current.contains != adminRoleId && current.contains != readOnlyRoleId) {
  return;
 }
 
 if ((current.role == adminRoleId && current.contains == readOnlyRoleId) || 
  (current.role == readOnlyRoleId && current.contains == adminRoleId)) {
  // case (direct): admin[->]snc_read_only OR: snc_read_only[->]admin
     postError();
 } else if (current.role == adminRoleId && roleContains(current.contains, readOnlyRoleId)) {
  // case (indirect): admin[->]ROLE->snc_read_only
     postError();
 } else if (current.contains == readOnlyRoleId && roleContains(adminRoleId, current.role)) {
  // case (indirect): admin->ROLE[->]snc_read_only
     postError();
 } else if (current.role == readOnlyRoleId && roleContains(current.contains, adminRoleId)) {
  // case (indirect): snc_read_only[->]ROLE->admin
     postError();
 } else if (current.contains == adminRoleId && roleContains(readOnlyRoleId, current.role)) {
  // case (indirect): snc_read_only->ROLE[->]admin
     postError();
 }
}

function roleContains(roleId, containsId) {
 var grURC = new GlideRecord("sys_user_role_contains");
 grURC.addQuery("role", roleId);
 grURC.addQuery("contains", containsId);
 grURC.query();
 if (grURC.hasNext())
  return true;
 return false;
}

function postError() {
 current.setAbortAction(true);
 gs.addErrorMessage(gs.getMessage("The admin role is not allowed to contain, directly or indirectly, the snc_read_only role!"));
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:45</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>225bac5183701210c6695855eeaad341</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prevent admin from snc_read_only</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_225bac5183701210c6695855eeaad341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:45</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=225bac5183701210c6695855eeaad341"/>
</record_update>
