<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5dc4666f8739b510fa0d64e60cbb356a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.wfSPMJDBCUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;This script include has functions to run insert and update SQL operations on the required database instances.&lt;/description&gt;
        &lt;name&gt;wfSPMJDBCUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var wfSPMJDBCUtil = Class.create();
wfSPMJDBCUtil.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    initialize: function() {
        this.driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
        this.sn_instance = gs.getProperty('instance_name', 'false');
        this.getMidServer = new JSON.parse(gs.getProperty('wf.spm.integration.midserver'));
        this.midServer = this.getMidServer[this.sn_instance].toString();
    },
    insertCSTCR: function(sqlTable, sqlOBJ, timeoutSec) {
        try {
            var status = {
                "result": "",
                "error": ""
            };
            if (this.sn_instance === 'wellsfargodev'||this.sn_instance === 'wfdev'||this.sn_instance === 'wellsfargotest'||this.sn_instance === 'wftest') {
                this.getConnectionString = new JSON.parse(gs.getProperty('wf.spm.cstcr.sit_connection_str'));
                this.dbPWD = gs.getProperty('wf.spm.cstcr.sit_credentials');
            }
            if (this.sn_instance === 'wellsfargoqa'||this.sn_instance === 'wfuat') {
                this.getConnectionString = new JSON.parse(gs.getProperty('wf.spm.cstcr.uat_connection_str'));
                this.dbPWD = gs.getProperty('wf.spm.cstcr.uat_credentials');
            }
            if (this.sn_instance === 'wellsfargoprod'||this.sn_instance === 'wellsfargo') {
                this.getConnectionString = new JSON.parse(gs.getProperty('wf.spm.cstcr.prod_connection_str'));
                this.dbPWD = gs.getProperty('wf.spm.cstcr.prod_credentials');
            }
            this.connection = "jdbc:sqlserver://" + this.getConnectionString['dbServer'] + ";instanceName=" + this.getConnectionString['dbInstance'] + ";databaseName=" + this.getConnectionString['database'] + ";user=" + this.getConnectionString['user'] + ";password=" + this.dbPWD;
            var fieldValxml = '';
            Object.keys(sqlOBJ).forEach(function(key) {
                fieldValxml += '&lt;' + key + '&gt;' + sqlOBJ[key] + '&lt;/' + key + '&gt;';
            });
			//fieldValxml+='&lt;Modified_Date&gt;'+new GlideDateTime()+'&lt;/Modified_Date&gt;';
            var xml = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;';
            xml += '&lt;parameters&gt;';
            xml += '&lt;parameter name="jdbc_driver" value="' + this.driver + '"/&gt;';
            xml += '&lt;parameter name="connection_string" value="' + this.connection + '"/&gt;';
            xml += '&lt;parameter name= "work"&gt;';
            xml += '&lt;insert table = "' + sqlTable + '"&gt;';
            xml += fieldValxml + '&lt;/insert&gt;&lt;/parameter&gt;&lt;/parameters&gt;';
            this.ecc_op_sysid = this.addQueryToEcc(xml);
            this.responsePayload = this.getResponseFromEcc(timeoutSec);
            if (!gs.nil(this.responsePayload["response_payload"]) &amp;&amp; this.responsePayload["server_responded"]) {
                var xmlDoc = new XMLDocument(this.responsePayload["response_payload"]);
                if (!gs.nil(xmlDoc.getNodeText("//results/result/insertResult")) &amp;&amp; xmlDoc.getNodeText("//results/result/insertResult") == '1 rows inserted') {
                    status["result"] = "success";
                }
                if (!gs.nil(xmlDoc.getAttribute("//results", "error"))) {
                    var error = xmlDoc.getAttribute("//results", "error").substring(0, 199);
                    status["result"] = "failed";
                    status["error"] = error;
                }				
                return status;
            } else if (!this.responsePayload["server_responded"]) {
                status["result"] = "failed";
                status["error"] = "No response in ECC queue";
                return status;
            }
        } catch (e) {			
			var emailBody={
							"subject": "An exception occured in the script include function insertCSTCR of wfSPMJDBCUtil",
							"record":JSON.stringify(sqlOBJ),
							"error":e.message.toString()
							};
			gs.eventQueue("wf.spm.notifyproductteam", null, JSON.stringify(emailBody));
		}
    },
	updateCSTCR: function(sqlTable, sqlOBJ, condition, timeoutSec) {
        try {
            var status = {
                "result": "",
                "error": ""
            };
            if (this.sn_instance === 'wellsfargodev'||this.sn_instance === 'wfdev'||this.sn_instance === 'wellsfargotest'||this.sn_instance === 'wftest') {
                this.getConnectionString = new JSON.parse(gs.getProperty('wf.spm.cstcr.sit_connection_str'));
                this.dbPWD = gs.getProperty('wf.spm.cstcr.sit_credentials');
            }
            if (this.sn_instance === 'wellsfargoqa'||this.sn_instance === 'wfuat') {
                this.getConnectionString = new JSON.parse(gs.getProperty('wf.spm.cstcr.uat_connection_str'));
                this.dbPWD = gs.getProperty('wf.spm.cstcr.uat_credentials');
            }
            if (this.sn_instance === 'wellsfargoprod'||this.sn_instance === 'wellsfargo') {
                this.getConnectionString = new JSON.parse(gs.getProperty('wf.spm.cstcr.prod_connection_str'));
                this.dbPWD = gs.getProperty('wf.spm.cstcr.prod_credentials');
            }
            this.connection = "jdbc:sqlserver://" + this.getConnectionString['dbServer'] + ";instanceName=" + this.getConnectionString['dbInstance'] + ";databaseName=" + this.getConnectionString['database'] + ";user=" + this.getConnectionString['user'] + ";password=" + this.dbPWD;
            var fieldValxml = '';
            Object.keys(sqlOBJ).forEach(function(key) {
                fieldValxml += '&lt;' + key + '&gt;' + sqlOBJ[key] + '&lt;/' + key + '&gt;';
            });
			fieldValxml+='&lt;Modified_Date&gt;'+new GlideDateTime()+'&lt;/Modified_Date&gt;';
            var xml = '&lt;?xml version="1.0" encoding="UTF-8"?&gt;';
            xml += '&lt;parameters&gt;';
            xml += '&lt;parameter name="jdbc_driver" value="' + this.driver + '"/&gt;';
            xml += '&lt;parameter name="connection_string" value="' + this.connection + '"/&gt;';
            xml += '&lt;parameter name= "work"&gt;';
            xml += '&lt;update table = "' + sqlTable +'" where = "'+condition+'"&gt;';
            xml += fieldValxml + '&lt;/update&gt;&lt;/parameter&gt;&lt;/parameters&gt;';
            this.ecc_op_sysid = this.addQueryToEcc(xml);
            this.responsePayload = this.getResponseFromEcc(timeoutSec);
            if (!gs.nil(this.responsePayload["response_payload"]) &amp;&amp; this.responsePayload["server_responded"]) {
                var xmlDoc = new XMLDocument(this.responsePayload["response_payload"]);
                if (!gs.nil(xmlDoc.getNodeText("//results/result/updateResult"))) {
                    status["result"] = "success";
                }
                if (!gs.nil(xmlDoc.getAttribute("//results", "error"))) {
                    var error = xmlDoc.getAttribute("//results", "error").substring(0, 199);
                    status["result"] = "failed";
                    status["error"] = error;
                }
                return status;
            } else if (!this.responsePayload["server_responded"]) {
                status["result"] = "failed";
                status["error"] = "No response in ECC queue";
                return status;
            }
        } catch (e) {
			sqlOBJ.where=condition;
			var emailBody={
							"subject": "An exception occured in the script include function updateCSTCR of wfSPMJDBCUtil.",
							"record":JSON.stringify(sqlOBJ),
							"error":e.message.toString()
							};
			gs.eventQueue("wf.spm.notifyproductteam", null, JSON.stringify(emailBody));
		}
    },
    addQueryToEcc: function(xmlPayload) {
        var ecc = new GlideRecord("ecc_queue");
        ecc.initialize();
        ecc.agent = "mid.server." + this.midServer;
        ecc.topic = "JDBCProbe";
        ecc.payload = xmlPayload;
        ecc.queue = "output";
        ecc.state = "ready";
        ecc.insert();
        return ecc.sys_id.toString();
    },
    getResponseFromEcc: function(timeoutSec) {
        var return_obj = {
            response_payload: "",
            server_responded: false
        };
        var response;
        var counter = 0;
        do {
            gs.sleep(1000);
            response = new GlideRecord("ecc_queue");
            response.addQuery("response_to", this.ecc_op_sysid);
            response.addQuery("queue", "input");
            response.query();
            if (response.hasNext()) {
                response.next();
                break;
            }
            counter++;
        } while (gs.nil(response.sys_id) &amp;&amp; counter &lt; timeoutSec);

        if (!gs.nil(response.sys_id)) {
            return_obj["server_responded"] = true;
            return_obj["response_payload"] = response.payload.toString();
        }
        return return_obj;
    },
    type: 'wfSPMJDBCUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;k095817&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-10-16 17:29:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5dc4666f8739b510fa0d64e60cbb356a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;125&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;wfSPMJDBCUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5dc4666f8739b510fa0d64e60cbb356a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:24:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:36</sys_created_on>
        <sys_id>38c6f41d83f01210c6695855eeaad30d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>wfSPMJDBCUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_38c6f41d83f01210c6695855eeaad30d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
