<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>61cab34d77fe5510c918256a5b5a990b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_appclient.ProductsDao&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;for all CRUD operations on products table&lt;/description&gt;
        &lt;name&gt;ProductsDao&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ProductsDao = Class.create();
ProductsDao.prototype = {
    initialize: function() {
        this.appsData = new AppsData();
    },

    getProducts: function(searchExpression, filterParams, apiUtil) {
        var products = [];
        var gr = new GlideRecord("sn_appclient_product");
        var encodedQuery = "";
        if (searchExpression)
            encodedQuery = CommonUtils.getEncodedQueryFromExpression(searchExpression, "name");
        var productFamily = this.getProductFamily(filterParams);
        if (productFamily &amp;&amp; productFamily.length &gt; 0)
            encodedQuery = CommonUtils.appendEncodedQueryFromproductFamily(searchExpression, encodedQuery, productFamily);
        if (encodedQuery.length !== 0) {
            gr.addEncodedQuery(encodedQuery);
            gr.query();
            while (gr.next()) {
                var productId = gr.getValue("id");
                var productName = gr.getValue("name");
                var family = gr.getValue("family");
                products.push({
                    productId: productId,
                    productName: productName,
                    productFamily: family,
                    source: 'store'
                });
            }
        }
        var productsForFilters = this.getProductForApps(apiUtil);
        var filteredProducts = CommonUtils.getUnionOfProducts(products, productsForFilters);
        return filteredProducts;
    },
    getProductFamily: function(filterParams) {
        var productFamily = [];
        if (filterParams.hasOwnProperty('productFamily'))
            productFamily = filterParams['productFamily'];
        return productFamily;
    },
    getProductForApps: function(appManagerAPIUtil) {
        var args = {};
        args.searchTerm = appManagerAPIUtil.getSearchTerm();
        args.filterParams = appManagerAPIUtil.getRequestBody();
        args.encodedQuery = this._getEncodedQueryBySearchContext(args);
        var gr = new GlideRecord('sys_remote_app');
        gr.addEncodedQuery(args.encodedQuery);
        gr.query();
        var productsForFilters = [];
        var productIdMap = {};
        while (gr.next()) {
            var products = JSON.parse(gr.products);
            if (products &amp;&amp; products.length &gt; 0)
                for (var i = 0; i &lt; products.length; i++) {
                    var productFamily = products[i];
                    var productList = productFamily.productList;
                    for (var proIndex = 0; proIndex &lt; productList.length; proIndex++) {
                        var newProduct = productList[proIndex];
                        if (!productIdMap.hasOwnProperty(newProduct.productId)) {
                            productIdMap[newProduct.productId] = newProduct;
                            productsForFilters.push({
                                productId: newProduct.productId,
                                productName: newProduct.productName,
                                productFamily: newProduct.product_family,
                                source: 'store'
                            });
                        }
                    }
                }
        }
        return productsForFilters;
    },
    _getEncodedQueryBySearchContext: function(args) {
        var encodedQuery = "shared_internally=" + !!args.sharedInternally;
        if (args.searchTerm)
            encodedQuery += "^GOTO123TEXTQUERY321=" + args.searchTerm;
        if (args.filterParams &amp;&amp; Object.keys(args.filterParams).length &gt; 0)
            encodedQuery = this._appendEncodedQueryByFilterParams(encodedQuery, args.filterParams);
        if (!gs.getUser().hasRole("maint"))
            encodedQuery += "^hide_on_ui=false";
        return encodedQuery;
    },
    _appendEncodedQueryByFilterParams: function(encodedQuery, filterParams) {
        var LOBs = [];
        var productFamily = [];
        var adoptionBluePrint = [];
        var offeredBy = [];
        var listings = [];
        if (filterParams.hasOwnProperty('productFamily'))
            LOBs = filterParams['productFamily'];
        if (filterParams.hasOwnProperty('productFamily'))
            productFamily = filterParams['productFamily'];
        if (filterParams.hasOwnProperty('offeredBy'))
            offeredBy = filterParams['offeredBy'];
        if (filterParams.hasOwnProperty('adoptionBlueprint'))
            adoptionBluePrint = filterParams['adoptionBlueprint'];
        if (filterParams.hasOwnProperty('listings'))
            listings = filterParams['listings'];

        var isfreeToTryPresent = listings.indexOf('free_to_try') != -1;
        if (isfreeToTryPresent) {
            encodedQuery += "^price_type=free";
        }
        if (offeredBy != null &amp;&amp; offeredBy.length == 1)
            if (offeredBy[0] === 'partners')
                encodedQuery += "^vendor!=" + 'servicenow';
            else
                encodedQuery += "^vendor=" + offeredBy[0];

        if (LOBs != null &amp;&amp; LOBs.length &gt; 0)
            for (i = 0; i &lt; LOBs.length; i++) {
                if (i &gt; 0) encodedQuery += "^OR";
                else encodedQuery += "^";
                encodedQuery += "lobLIKE" + LOBs[i];
            }
        if (productFamily != null &amp;&amp; productFamily.length &gt; 0)
            for (i = 0; i &lt; productFamily.length; i++) {
                if (i &gt; 0 || (LOBs &amp;&amp; LOBs.length &gt; 0)) encodedQuery += "^OR";
                else encodedQuery += "^";
                encodedQuery += "productsLIKE" + productFamily[i];
            }
        if (adoptionBluePrint != null &amp;&amp; adoptionBluePrint.length &gt; 0) {
            adoptionBluePrintQuery = this.getEncodedQueryByAdoptionBluePrint(adoptionBluePrint);
            appNames = new AppManagerFiltersUtil().getFilteredIdsWithAdoptionBluePrint(adoptionBluePrintQuery);
            if (appNames != null &amp;&amp; appNames.length &gt; 0)
                for (i = 0; i &lt; appNames.length; i++) {
                    if (i &gt; 0) encodedQuery += "^OR";
                    else encodedQuery += "^";
                    encodedQuery += "name=" + appNames[i];
                }
        }
        return encodedQuery;
    },
    getEncodedQueryByAdoptionBluePrint: function(adoptionBluePrint) {
        var adoptionBluePrintQuery = "";
        for (var i = 0; i &lt; adoptionBluePrint.length; i++) {
            if (i &gt; 0) adoptionBluePrintQuery += "^OR";
            adoptionBluePrintQuery += "objective.sys_id=" + adoptionBluePrint[i];
        }
        return adoptionBluePrintQuery;
    },
    getAllAppsByProductId: function(productId) {
        // get Installed apps
        var gr = new GlideRecord("sys_store_app");
        gr.addEncodedQuery('active=true^products!=[]^productsLIKE' + productId);
        gr.query();
        var installedAppsMap = {};
        while (gr.next()) {
            var sourceAppId = gr.sys_id;
            var app = this.appsData.getAppInfoFromInstance(sourceAppId, gr, true);
            app.hide_on_ui = gr.getValue('hide_on_ui');
            app.licensable = gr.getValue('licensable');
            app.isUpdateAvailable = app.version != app.latest_version ? true : false;
            if (this.appsData.isVisible(gr)) installedAppsMap[sourceAppId] = app;
        }

        // get available apps
        gr = new GlideRecord("sys_remote_app");
        gr.addEncodedQuery('products!=[]^productsLIKE' + productId);
        gr.query();
        var availableAppsMap = {};
        while (gr.next()) {
            sourceAppId = gr.source_app_id;
            if (!installedAppsMap[sourceAppId]) {
                app = this.appsData.getAppInfoFromInstance(sourceAppId, gr, true);
                app.hide_on_ui = gr.getValue('hide_on_ui');
                app.licensable = gr.getValue('licensable');
                if (this.appsData.isVisible(gr)) availableAppsMap[sourceAppId] = app;
            }
        }
        var installedApps = CommonUtils.getValues(installedAppsMap);
        var availableApps = CommonUtils.getValues(availableAppsMap);
        return installedApps.concat(availableApps);
    },
    _getAppDetails: function( /*GlideRecord sys_remote_app | sys_store_app */ gr) {
        var app = {};
        app.block_install = gr.getValue('block_install');
        app.compatibilities = gr.getValue('compatibilities');
        app.dependencies = gr.getValue('dependencies');
        app.enforce_license = gr.getValue('enforce_license');
        app.hide_on_ui = gr.getValue('hide_on_ui');
        app.source_app_id = gr.getValue('source_app_id');
        app.installed_as_dependency = gr.getValue('installed_as_dependency');
        app.is_store_app = gr.getValue('is_store_app');
        app.licensable = gr.getValue('licensable');
        app.logo = this.appsData.getLogo(gr);
        app.short_description = gr.getValue('short_description');
        app.needs_app_engine_licensing = gr.getValue('needs_app_engine_licensing');
        app.name = gr.getValue('name');
        app.price_type = gr.getValue('price_type');
        app.latest_version = gr.getValue('latest_version');
        app.uninstall_blocked = gr.getValue('uninstall_blocked');
        app.product = JSON.parse(gr.getValue('products'));
        app.scope = gr.getValue('scope');
        return app;
    },

    /**
     * Synchronize products data from sys_remote_app, and sys_store_app tables
     */
    syncProductsData: function() {
        gs.debug("Running Product Data Sync");
        //prepare product map from sys_remote_app table
        var encodedQuery = 'products!=[]';
        var map = this._getProductMap(Constants.TABLE_SYS_REMOTE_APP, encodedQuery, {});
        //prepare product map from sys_store_app table
        encodedQuery = 'active=true^products!=[]';
        map = this._getProductMap(Constants.TABLE_SYS_STORE_APP, encodedQuery, map);
        //reset products data table with product map
        gr = new GlideRecord("sn_appclient_product");
        gr.query();
        var deleteCount = 0;
        var insertCount = 0;
        while (gr.next()) {
            var productId = gr.getValue("id");
            if (map[productId]) {
                delete map[productId];
            } else {
                gr.deleteRecord();
                deleteCount++;
            }
        }
        for (var key in map) {
            gr.setValue("id", key);
            gr.setValue("name", map[key].productName);
            gr.setValue("family", map[key].product_family);
            gr.insert();
            insertCount++;
        }
        gs.debug("Completed Product Data Sync with {0} insertions, and {1} deletions", insertCount, deleteCount);
    },

    _getProductMap: function(table, encodedQuery, productMap) {
        var map = productMap || {};
        var gr = new GlideRecord(table);
        gr.addEncodedQuery(encodedQuery);
        gr.query();
        while (gr.next()) {
            productFamilies = JSON.parse(gr.getValue("products"));
            productFamilies.forEach(function(family) {
                var productList = family.productList || [];
                productList.forEach(function(product) {
                    map[product.productId] = product;
                });
            });
        }
        return map;
    },

    type: 'ProductsDao'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-26 05:40:18&lt;/sys_created_on&gt;
        &lt;sys_id&gt;61cab34d77fe5510c918256a5b5a990b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ProductsDao&lt;/sys_name&gt;
        &lt;sys_package display_value="Scoped App Client" source="sn_appclient"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Scoped App Client"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_61cab34d77fe5510c918256a5b5a990b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-28 05:01:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:48</sys_created_on>
        <sys_id>40d6781d83f01210c6695855eeaad304</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProductsDao</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_40d6781d83f01210c6695855eeaad304</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:48</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
