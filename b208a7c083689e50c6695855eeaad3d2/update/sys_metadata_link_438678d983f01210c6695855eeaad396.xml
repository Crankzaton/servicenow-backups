<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>490a25e1c375151085c091294440dd45</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AppCollabPermissionResynchronizer&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Recreate records from collaboration tables&lt;/description&gt;
        &lt;name&gt;AppCollabPermissionResynchronizer&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AppCollabPermissionResynchronizer = Class.create();
AppCollabPermissionResynchronizer.prototype = {
    initialize: function() {
		this.constants = {
			users: {
				tableName: "sys_appcollab_user",
				columnName: "user",
				syncMethod: "syncUserPermissions"
			},
			groups: {
				tableName: "sys_appcollab_group",
				columnName: "group",
				syncMethod: "syncGroupPermissions"
			}
		};

		this.appCollabRecords = {
			users: {
				valid: [],
				invalid: [],
			},
			groups:  {
				valid: [],
				invalid: [],
			},
		};
		
		this.logs = {
			success: [],
			error: []
		};
	},
	
	/**
	* Returns an object that can be used to display information for
	* app collaborator records that are valid and invalid (i.e. contain empty record fields)
	* If first param (execute) is true, permissions are synced and logs added
	* @param {Boolean} execute, optional param to determine whether to sync permissions
	* @param {String} sys_id of the app, optional table query filter
	* @return {Object} appCollabRecords: {users: {}, groups: {} }
	*/
	syncCollaborators: function(execute, appSysId) {
		this._syncCollaboratorByType("users", execute, appSysId);
		this._syncCollaboratorByType("groups", execute, appSysId);
		
		if (execute) {
			var logPrefix = "AppCollabPermissionResynchronizer syncCollaborators: \n\n";
			var successMessages = "Success: " + JSON.stringify(this.logs.success, null , "\t");
			var errorMessages = "Failed: " + JSON.stringify(this.logs.error, null , "\t");
			gs.log(logPrefix + successMessages + "\n\n" + errorMessages);
		}
		
		return this.appCollabRecords;
	},
	
	/**
	* Sets app collaborator user records that are valid and invalid (i.e. contain empty record fields)
	* in appCollabRecords class variable
	* @param {String} type of collaborator - "users" or "groups"
	* @param {Boolean} execute, optional param to determine whether to sync permissions
	* @param {String} sys_id of the app, optional table query filter
	*/
	_syncCollaboratorByType: function(type, execute, appSysId) {
		var typeConstants = this.constants[type];
		
		if (!typeConstants) {
			return;
		}

		var glideRecord = new GlideRecordSecure(typeConstants.tableName);
		if (appSysId) { glideRecord.addQuery('application', appSysId); }
		glideRecord.query();
		
		while(glideRecord.next()) {
			var collabTypeRefRecord = glideRecord.getElement(typeConstants.columnName).getRefRecord();
			var descriptorRefRecord = glideRecord.getElement("descriptor").getRefRecord();
			var appRefRecord = glideRecord.getElement("application").getRefRecord();
			
			var link = '&lt;a target="_blank" href="' + glideRecord.getLink() + '"&gt;' + glideRecord.getClassDisplayValue() + '&lt;/a&gt;';

			if( collabTypeRefRecord.isValidRecord() &amp;&amp; descriptorRefRecord.isValidRecord() &amp;&amp; appRefRecord.isValidRecord() ) {
				this.appCollabRecords[type].valid.push(glideRecord.getElement("sys_id"));

				if (execute) {
					try {
						var synchronizer = new sn_appcollab.CollabPermissionSynchronizer(descriptorRefRecord.getValue("sys_id"));
						synchronizer[typeConstants.syncMethod](collabTypeRefRecord.getValue("sys_id"), appRefRecord.getValue("sys_id"));
						
						this.logs.success.push({
							message: gs.getMessage("Synced permissions for {0} with {1} descriptor for {2} application.", [collabTypeRefRecord.getDisplayValue(), descriptorRefRecord.getDisplayValue(), appRefRecord.getDisplayValue()]),
							link: link,
						});
					
					} catch(error) {
						this.logs.error.push({
							message: gs.getMessage("Error syncing permissions for {0} with {1} descriptor for {2} application.", [collabTypeRefRecord.getDisplayValue(), descriptorRefRecord.getDisplayValue(), appRefRecord.getDisplayValue()]),
							link: link,
							details: error
						});
					}
				}
			} else {
				this.appCollabRecords[type].invalid.push(glideRecord.getElement("sys_id"));
				this.logs.error.push({
					message: gs.getMessage("Unable to sync permissions due to missing references."),
					link: link,
					details: {
						sysId: glideRecord.getUniqueValue(),
						table: glideRecord.getTableName(),
						isValidUserOrGroup: collabTypeRefRecord.isValidRecord(),
						isValidApp: appRefRecord.isValidRecord(),
						isValidDescriptor: descriptorRefRecord.isValidRecord(),
					}
				});
			}
		}
	},

    type: 'AppCollabPermissionResynchronizer'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-07 15:18:36&lt;/sys_created_on&gt;
        &lt;sys_id&gt;490a25e1c375151085c091294440dd45&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AppCollabPermissionResynchronizer&lt;/sys_name&gt;
        &lt;sys_package display_value="App Collaboration" source="com.glide.app_collaboration"&gt;2fe9b79b472a0210cd4e1ce4316d435b&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_490a25e1c375151085c091294440dd45&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-20 15:57:14&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:39</sys_created_on>
        <sys_id>438678d983f01210c6695855eeaad396</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AppCollabPermissionResynchronizer</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_438678d983f01210c6695855eeaad396</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:39</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
