<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>10346c32d713310092610eca5e6103ef</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_appauthor.DependencyFinder&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DependencyFinder&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DependencyFinder = Class.create();
DependencyFinder.prototype = {
	_EXCLUSION_LIST: {
			'com.glide.core':true,
			'com.glide.core.scripts':true,
			'com.glide.script.whitelist.0':true,
			'com.glide.core_new':true,
			'com.snc.core':true, 
			'com.snc.core_new':true, 
			'com.glide.extended.core':true,
			'com.glide.pass.core':true,			
			'com.glide.text_index':true, 
			'com.glide.package':true, 
			'com.glide.metadata':true,
			'com.glide.metadata_delete':true,			
			'com.snc.apps':true,
			'com.snc.apps_complete':true
	},

    initialize: function() {
    },

	getDependencies: /*[]*/ function(/*sys_app*/ sys_app, /*{}*/ options) {
		var dependencies = [];
		var dependency;
		if (!options)
			options = {};
		
		var isFormatString = options.hasOwnProperty("format") ? options.format : 'string';
		
		var packageM2M = new GlideRecord("sys_package_dependency_m2m");
		packageM2M.addQuery("sys_package", sys_app.sys_id);
		packageM2M.addNotNullQuery("dependency");
		packageM2M.query();
		
		while (packageM2M.next()) {
			if (packageM2M.dependency.sys_class_name == "sys_app" || packageM2M.dependency.sys_class_name == "sys_store_app")
				dependency = this._getScopeDependency(packageM2M, isFormatString);
			
			else
				dependency = this._getPluginDependency(packageM2M, isFormatString);
			
			if (dependency)
				dependencies.push(dependency);
		}
		
		return dependencies;
	},
	
	_getScopeDependency: /*{} or ''*/ function(/*GlideRecord*/ packageDependency, /*string*/ isFormatString) {
		//see if we depend on a scoped app installed via plugin
		var packageDepDep = packageDependency.dependency.getRefRecord();
		var scope =  packageDepDep.getValue("scope");
		var appId = packageDepDep.getValue("sys_id");
		if (scope != "global") { // scope app installed via plugin does not come with global scope
			var vPlugin = new GlideRecord("v_plugin");
			vPlugin.addQuery("scope", scope);
			vPlugin.query();

			if (vPlugin.next()) {
			  var sysPlugin = new GlideRecord("sys_plugins");
			  sysPlugin.addQuery("source", vPlugin.getValue("id"));
			  sysPlugin.query();

			  if (sysPlugin.next())
				  return this._getSysPluginDependency(sysPlugin, isFormatString);
			  else {
				  gs.debug("Dependency on plugin-installed scoped app missing sys_plugin record! No dependency recorded for {0}", scope);
				  return;
			  }
			}
		}
		
		//not a plugin-installed scoped app, so use app values
		if (isFormatString == 'string')
			if (scope == 'global')
				return scope + ":" + packageDependency.getValue("min_version") + ":" + appId;
			else
				return scope + ":" + packageDependency.getValue("min_version");
		else
			return { 
				"package": scope,
				"type": packageDepDep.getValue("sys_class_name"),
				"sys_id": packageDepDep.getValue("sys_id"),
				"min_version": packageDepDep.getValue("min_version") ? packageDepDep.getValue("min_version") : packageDependency.getValue("min_version"),
				"trackable": true
			};
			
	},
	
	_getPluginDependency /*{} or ''*/: function(/*GlideRecord*/ packageDependency, /*boolean*/ isFormatString) {
		var packageDepDep = packageDependency.dependency.getRefRecord();
		var name = packageDepDep.getValue("source");
		
        if (gs.nil(name) || name.startsWith("apps/") || name.startsWith("glidesoft") || typeof this._EXCLUSION_LIST[name] !== 'undefined' || name === "global") {
			gs.debug("Skipping dependency: " + name);
			return;
		}
		
		if (isFormatString == 'string')
			return name + ":sys";
		
		else
			return { 
				"package": name,
				"type": packageDepDep.getValue("sys_class_name"),
				"sys_id": packageDepDep.getValue("sys_id"),
				"min_version": "sys",
				"trackable": packageDepDep.licensable == true
			};
	},
	
	_getSysPluginDependency /*{} or ''*/: function(/*GlideRecord*/ sysPlugin, /*boolean*/ isFormatString) {
		if (isFormatString == 'string')
			return sysPlugin.getValue("source") + ":sys";
		
		else
			return { 
				"package": sysPlugin.getValue("source"),
				"type": sysPlugin.getValue("sys_class_name"),
				"sys_id": sysPlugin.getValue("sys_id"),
				"min_version": "sys",
				"trackable": sysPlugin.licensable == true
			};
	},
	
    type: 'DependencyFinder'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-04-12 02:38:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;10346c32d713310092610eca5e6103ef&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DependencyFinder&lt;/sys_name&gt;
        &lt;sys_package display_value="Scoped App Author" source="sn_appauthor"&gt;893ea311d71321004f6a0eca5e6103e6&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Scoped App Author"&gt;893ea311d71321004f6a0eca5e6103e6&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_10346c32d713310092610eca5e6103ef&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-08-21 07:20:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:15</sys_created_on>
        <sys_id>188070d583b01210c6695855eeaad33c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DependencyFinder</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_188070d583b01210c6695855eeaad33c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
