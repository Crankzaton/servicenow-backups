<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8478746fffd9a110468365d7d3b8fecf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UserHasSubscriptionDao&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UserHasSubscriptionDao&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UserHasSubscriptionDao = Class.create();
UserHasSubscriptionDao.prototype = {
    initialize: function() {
        this._table = 'user_has_subscription';
    },

    /**
     * Counts the number of user_has_subscription records that match the subscription and the user is active
     *
     * @param {guid} subscriptionId The subscription_entitlement.sys_id to filter records by
     * @returns {number} A number 0 or greater indicating the number of rows that match
     */
    getCountBySubscriptionIdAndUserIsActive: function(subscriptionId) {
        const gr = new GlideRecord('user_has_subscription');
        gr.addQuery('subscription', subscriptionId);
        gr.addQuery('user.active', true);
        gr.addQuery('active', 'true');
        gr.query();
        return gr.getRowCount();
    },

    /**
     * Get list of users subscribed to the subscription id
     *
     * @param {guid} subscriptionId The subscription_entitlement.sys_id to filter records by
     * @returns {array} sys_user.sys_id array subscribed to the subscription
     */
    getUserIdsBySubscriptionId: function(subscriptionId) {
        const gr = new GlideRecord(this._table);
        gr.addQuery('subscription', subscriptionId);
        gr.addQuery('active', 'true');
        gr.query();
        const ids = new Set();
        while (gr.next()) {
            ids.add(String(gr.getValue('user')));
        }
        return ids;
    },



    /**
     * Persists an user subscription mapping entry enabling user access to the subscription
     *
     * @param {guid} userId
     * @param {guid} subscriptionId
     * 
     * @returns {string} The sysId of the entry inserted
     */
    insert: function(userId, subscriptionId) {
        const gr = new GlideRecord(this._table);
        gr.setWorkflow(false);
        gr.setValue('user', userId);
        gr.setValue('subscription', subscriptionId);
        return gr.insert();
    },

    /**
     * Deletes user subscription mapping entry when user is no longer entitled to the subscription
     *
     * @param {guid} userId
     * @param {guid} subscriptionId
     * 
     * @returns {string} The sysId of the entry inserted
     */
    delete: function(userId, subscriptionId) {
        const gr = new GlideRecord(this._table);
        gr.addQuery('subscription', subscriptionId);
        gr.addQuery('user', userId);
        gr.addQuery('active', 'true');
        gr.query();
        if (gr.next())
            gr.deleteRecord();
    },

    /**
     * Update all records for soft delete.
     */
    updateAllRecordsForDelete: function() {
        const gr = new GlideRecord(this._table);
        gr.addQuery('active', 'true');
        gr.query();
        while (gr.next()) {
            gr.setValue("active", 'false');
            gr.setWorkflow(false);
            gr.update();
        }


    },



    type: 'UserHasSubscriptionDao'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-06 16:33:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8478746fffd9a110468365d7d3b8fecf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;57&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UserHasSubscriptionDao&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8478746fffd9a110468365d7d3b8fecf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-23 15:21:03&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:42</sys_created_on>
        <sys_id>f468f81183341210c6695855eeaad382</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UserHasSubscriptionDao</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f468f81183341210c6695855eeaad382</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:42</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
