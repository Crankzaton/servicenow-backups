<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>new StdChangeUtils().hasPropertyFieldChanged(current) || new StdChangeTaskUtils().hasPropertyFieldChanged(current)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check conflicts in field configurations</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*undefined when async or display*/) {
 function checkIntersection(what, checkIn) {
  var common = [];
  for (var i = 0; i < what.length; i++) {
   if (util.contains(checkIn, what[i])) {
    common.push(gr[what[i]].getLabel());
   }
  }
  return common;
 }
 var gr = new GlideRecord('change_request');
 gr.initialize();
 var util = new ArrayUtil();

 var mandatory = current.getValue('mandatory_fields').split(',');
 var fixed = current.getValue('restricted_fields').split(',');
 var toCopy = current.getValue('fields_to_copy').split(',');
 var defaultValues = current.getValue('default_values').split(',');
 var hasErr = false;

 var common = checkIntersection(fixed, mandatory);
 if (common.length > 0) {
  if (common.length == 1) {
   common = common[0];
  } else {
   common = common.join(', ');
  }
  gs.addErrorMessage(gs.getMessage("You cannot specify the same fields ({0}) in both Mandatory and Restricted fields.", common));
  hasErr = true;
 }

 common = checkIntersection(fixed, toCopy);
 if (common.length > 0) {
  if (common.length == 1) {
   common = common[0];
  } else {
   common = common.join(', ');
  }
  gs.addErrorMessage(gs.getMessage("You cannot specify the same fields ({0}) in both Restricted field and Fields to copy.", common));
  hasErr = true;
 }

 common = new StdChangeUtils().checkFieldsToCopyWithMandatory(mandatory, defaultValues, toCopy);
 if (common.length > 0) {
  gs.addErrorMessage(gs.getMessage("The combination of fields listed in <b>Default Change values</b> and <b>Change Fields to copy</b> must include all <b>Mandatory Change fields</b>.<br/>The missing fields are: {0}", common.join(", ")));
  hasErr = true;  
 }

 gr = new GlideRecord('change_task');
 gr.initialize();
 var taskMandatory = current.getValue('mandatory_task_fields').split(',');
 var taskFixed = current.getValue('restricted_task_fields').split(',');
 var taskToCopy = current.getValue('task_fields_to_copy').split(',');
 var defaultTaskValues = current.getValue('default_task_values').split(',');

 common = checkIntersection(taskFixed, taskMandatory);
 if (common.length > 0) {
  if (common.length == 1) {
   common = common[0];
  } else {
   common = common.join(', ');
  }
  gs.addErrorMessage(gs.getMessage("You cannot specify the same fields ({0}) in both Mandatory Change Task fields and Restricted Change Task fields.", common));
  hasErr = true;
 }

 common = checkIntersection(taskFixed, taskToCopy);
 if (common.length > 0) {
  if (common.length == 1) {
   common = common[0];
  } else {
   common = common.join(', ');
  }
  gs.addErrorMessage(gs.getMessage("You cannot specify the same fields ({0}) in both Restricted Change Task fields and Change Task Fields to copy.", common));
  hasErr = true;
 }

 common = new StdChangeTaskUtils().checkFieldsToCopyWithMandatory(taskMandatory, defaultTaskValues, taskToCopy);
 if (common.length > 0) {
  gs.addErrorMessage(gs.getMessage("The combination of fields listed in <b>Default Change Task values</b> and <b>Change Task Fields to copy</b> must include all <b>Mandatory Change Task fields</b>.<br/>The missing fields are: {0}", common.join(", ")));
  hasErr = true;  
 }
 
 if (hasErr)
  current.setAbortAction(true);

})(current, typeof previous != 'undefined' ?  previous : null);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>163ce8d583701210c6695855eeaad323</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check conflicts in field configurations</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_163ce8d583701210c6695855eeaad323</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:33</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=163ce8d583701210c6695855eeaad323"/>
</record_update>
