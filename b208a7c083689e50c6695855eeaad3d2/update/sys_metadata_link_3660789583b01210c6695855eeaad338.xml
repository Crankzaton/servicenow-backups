<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0c370f970a0a0b5e00c99c151beb0f13</documentkey>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.XMLHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Helper methods for with XML.  Has the following methods:&#13;
    toObject:  converts an XML string (given in the constructor or as an argument) into a JavaScript object.&#13;
    toXML:     converts a JavaScript object (given as the argument) to an XML string.  This is the inverse of toObject(), above.&#13;
&#13;
The JavaScript object produced or interpreted by the methods above is hierarchical, matching the hierarchy of the equivalent XML document.&#13;
Property names have three flavors:&#13;
-- alphanumeric (like "dog", "bogus3", etc.) correspond to an XML tag.  The value of these properities is either an object or an array of objects,&#13;
   each of which contains other tags, attributes, or text.&#13;
-- alphanumeric with leading "@" (like "@name", "@id", etc.) correspond to attribute names (without the "@").  The value of these properties is&#13;
   the value of the attribute.&#13;
-- "#text" corresponds to single text field enclosed within a tag.  The value of these properties is the value of the enclosed text.&#13;
&#13;
&#13;
&#13;
Example:&#13;
&#13;
var xmlhelp = new XMLHelper("&lt;xml&gt;&lt;tag&gt;body&lt;/tag&gt;&lt;/xml&gt;");&#13;
var x = xmlhelp.toObject();&#13;
gs.log("tag is: " + x.tag);</description>
        <name>XMLHelper</name>
        <script>var XMLHelper = Class.create();&#13;
XMLHelper.prototype = {&#13;
&#13;
    initialize : function(xml) {&#13;
        this.setXML(xml);&#13;
        this.trim = JSUtil.toBoolean(gs.getProperty("glide.xmlhelper.trim.enable", "false"));&#13;
    },&#13;
&#13;
    setXML : function(xmlParam) {&#13;
         this.xml = xmlParam;&#13;
&#13;
        // if xml is string, or it looks like a string (has trimLeft function and is object)&#13;
        // then we want to parse it as a string&#13;
        if (typeof xmlParam == 'string' || (typeof xmlParam == 'object' &amp;&amp; xmlParam &amp;&amp; xmlParam.trimLeft))&#13;
            this.xml = GlideXMLUtil.parse(xmlParam);&#13;
    },&#13;
&#13;
    // Set whether or not to trim the xml values when going through the toObject method.&#13;
    setTrim : function(value) {&#13;
        this.trim = value;&#13;
    },&#13;
&#13;
    // convert XML to Javascript Object... Use the format specified on&#13;
    // http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html&#13;
    toObject : function(xmlParam) {&#13;
        if (xmlParam)&#13;
            this.setXML(xmlParam);&#13;
        if (!this.xml)&#13;
            return;&#13;
&#13;
        // borrowed and modified from: http://goessner.net/download/prj/jsonxml/xml2json.js&#13;
        var X = {&#13;
            toObj : function(xml) {&#13;
                var o = {};&#13;
                if (xml.getNodeType() == 1) { // element node ..&#13;
                    if (xml.attributes.length) // element with attributes ..&#13;
                        for ( var i = 0; i &lt; xml.attributes.length; i++) {&#13;
                            var nName = xml.attributes.item(i).nodeName;&#13;
                            var nValue = '' + xml.attributes.item(i).nodeValue;&#13;
                            if (this.trim) nValue = JSUtil.nil(nValue)? "" : nValue.trim();&#13;
                            o["@" + nName] = (nValue || "");&#13;
                        }&#13;
                    if (xml.firstChild) { // element has child nodes ..&#13;
                        var textChild = 0, cdataChild = 0, hasElementChild = false;&#13;
                        for ( var n = xml.firstChild; n; n = n.nextSibling) {&#13;
                            if (n.getNodeType() == 1)&#13;
                                hasElementChild = true;&#13;
                            else if (n.getNodeType() == 3 &amp;&amp; n.nodeValue.match(/[^ \f\n\r\t\v]/))&#13;
                                textChild++; // non-whitespace text&#13;
                            else if (n.getNodeType() == 4)&#13;
                                cdataChild++; // cdata section node&#13;
                        }&#13;
                        if (hasElementChild) {&#13;
                            if (textChild &lt; 2 &amp;&amp; cdataChild &lt; 2) { // structured element with evtl. a single text or/and cdata node ..&#13;
                                X.removeWhite(xml);&#13;
                                for ( var n = xml.firstChild; n; n = n.nextSibling) {&#13;

                                    if (n.getNodeType() == 3) // text node&#13;
                                        o["#text"] = X.escape(n.nodeValue);&#13;
                                    else if (n.getNodeType() == 4) // cdata node&#13;
                                        o["#cdata"] = X.escape(n.nodeValue);&#13;
                                    else if (o[n.nodeName]) { // multiple occurence of element ..&#13;
                                        if (o[n.nodeName] instanceof Array)&#13;
                                            o[n.nodeName][o[n.nodeName].length] = X.toObj(n);&#13;
                                        else&#13;
                                            o[n.nodeName] = [ o[n.nodeName], X.toObj(n) ];&#13;
                                    }
                                    //PRB1475522: adding the condition to skip comment node in xml
                                    else if (n.getNodeType() != 8) {
                                        // first occurence of element..&#13;
                                        o[n.nodeName] = X.toObj(n);&#13;
                                    } 
                                }
                            } else { // mixed content&#13;
                                if (!xml.attributes.length)&#13;
                                    o = X.escape(X.innerXml(xml));&#13;
                                else&#13;
                                    o["#text"] = X.escape(X.innerXml(xml));&#13;
                            }&#13;
                        } else if (textChild) { // pure text&#13;
                            if (!xml.attributes.length)&#13;
                                o = X.escape(X.innerXml(xml));&#13;
                            else&#13;
                                o["#text"] = X.escape(X.innerXml(xml));&#13;
                        } else if (cdataChild) { // cdata&#13;
                            if (!xml.attributes.length)&#13;
                                o = X.escape(xml.firstChild.nodeValue);&#13;
                            else&#13;
                                for ( var n = xml.firstChild; n; n = n.nextSibling)&#13;
                                    o["#cdata"] = X.escape(n.nodeValue);&#13;
                        }&#13;
                    }&#13;
                    if (!xml.attributes.length &amp;&amp; !xml.firstChild)&#13;
                        o = null;&#13;
                } else if (xml.getNodeType() == 9) { // document.node&#13;
                    o = X.toObj(xml.documentElement);&#13;
                } else&#13;
                    gs.log("unhandled node type: " + xml.getNodeType());&#13;
                return o;&#13;
            },&#13;
&#13;
            innerXml : function(node) {&#13;
                var s = "";&#13;
                if ("innerHTML" in node)&#13;
                    s = node.innerHTML;&#13;
                else {&#13;
                    var asXml = function(n) {&#13;
                        var s = "";&#13;
                        if (n.getNodeType() == 1) {&#13;
                            s += "&lt;" + n.nodeName;&#13;
                            for ( var i = 0; i &lt; n.attributes.length; i++)&#13;
                                s += " " + n.attributes.item(i).nodeName + "=\""&#13;
                                        + (n.attributes.item(i).nodeValue || "").toString() + "\"";&#13;
                            if (n.firstChild) {&#13;
                                s += "&gt;";&#13;
                                for ( var c = n.firstChild; c; c = c.nextSibling)&#13;
                                    s += asXml(c);&#13;
                                s += "&lt;/" + n.nodeName + "&gt;";&#13;
                            } else&#13;
                                s += "/&gt;";&#13;
                        } else if (n.getNodeType() == 3)&#13;
                            s += n.nodeValue;&#13;
                        else if (n.getNodeType() == 4)&#13;
                            s += "&lt;![CDATA[" + n.nodeValue + "]]&gt;";&#13;
                        return s;&#13;
                    };&#13;
                    for ( var c = node.firstChild; c; c = c.nextSibling)&#13;
                        s += asXml(c);&#13;
                }&#13;
                return s;&#13;
            },&#13;
&#13;
            escape : function(txt) {&#13;
                var escapedTxt = '' + txt.replaceAll(/[\\]/g, "\\\\").replaceAll(/[\"]/g, '\\"').replaceAll(/[\n]/g, '\\n').replaceAll(/[\r]/g, '\\r');&#13;
&#13;
                if (this.trim) &#13;
                    return JSUtil.nil(escapedTxt)? "" : escapedTxt.trim();&#13;
&#13;
                return escapedTxt;&#13;
            },&#13;
&#13;
            removeWhite : function(e) {&#13;
                e.normalize();&#13;
                for ( var n = e.firstChild; n;) {&#13;
                    if (n.getNodeType() == 3) { // text node&#13;
                        if (!n.nodeValue.match(/[^ \f\n\r\t\v]/)) { // pure whitespace text node&#13;
                            var nxt = n.nextSibling;&#13;
                            e.removeChild(n);&#13;
                            n = nxt;&#13;
                        } else&#13;
                            n = n.nextSibling;&#13;
                    } else if (n.getNodeType() == 1) { // element node&#13;
                        X.removeWhite(n);&#13;
                        n = n.nextSibling;&#13;
                    } else&#13;
                        // any other node&#13;
                        n = n.nextSibling;&#13;
                }&#13;
                return e;&#13;
            },&#13;
&#13;
            setTrim : function(value) {&#13;
                this.trim = value;&#13;
            }&#13;
        };&#13;
&#13;
        var xml = this.xml;&#13;
        X.setTrim(this.trim);&#13;
        return X.toObj(X.removeWhite(xml));&#13;
    },&#13;
&#13;
    // borrowed and modified from: http://goessner.net/download/prj/jsonxml/json2xml.js&#13;
    toXMLDoc : function(o, leaveBlanks) {&#13;
       return GlideXMLUtil.parse(this.toXMLStr(o, leaveBlanks));&#13;
    },&#13;
&#13;
    toXMLStr : function(o, leaveBlanks) {&#13;
        var toXml = function(v, name, ind) {&#13;
		   if (typeof(v) == "function")&#13;
			  return "";&#13;
		   &#13;
            var xml = "";&#13;
            if (v instanceof Array) {&#13;
                for ( var i = 0, n = v.length; i &lt; n; i++)&#13;
                    xml += ind + toXml(v[i], name, ind + "\t") + "\n";&#13;
            } else if (typeof (v) == "object") {&#13;
                var hasChild = false;&#13;
                xml += ind + "&lt;" + name;&#13;
                for ( var m in v) {&#13;
                    if (m.charAt(0) == "@")&#13;
                        xml += " " + m.substr(1) + "=\"" + v[m].toString() + "\"";&#13;
                    else&#13;
                        hasChild = true;&#13;
                }&#13;
                xml += hasChild ? "&gt;" : "/&gt;";&#13;
                if (hasChild) {&#13;
                    for ( var m in v) {&#13;
                        if (m == "#text")&#13;
                            xml += v[m];&#13;
                        else if (m == "#cdata")&#13;
                            xml += "&lt;![CDATA[" + v[m] + "]]&gt;";&#13;
                        else if (m.charAt(0) != "@")&#13;
                            xml += toXml(v[m], m, ind + "\t");&#13;
                    }&#13;
                    xml += (xml.charAt(xml.length - 1) == "\n" ? ind : "") + "&lt;/" + name + "&gt;";&#13;
                }&#13;
            } else {&#13;
                xml += ind + "&lt;" + name + "&gt;" + v.toString() + "&lt;/" + name + "&gt;";&#13;
            }&#13;
            return xml;&#13;
        };&#13;
&#13;
        xml = "";&#13;
        for ( var m in o)&#13;
            xml += toXml(o[m], m, "");&#13;
		&#13;
		if (leaveBlanks)&#13;
			return xml;&#13;
		&#13;
        return xml.replace(/\t|\n/g, "");&#13;
    },&#13;
&#13;
    type : "XMLHelper"&#13;
}</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>glide.maint</sys_created_by>
        <sys_created_on>2008-04-01 23:00:07</sys_created_on>
        <sys_id>0c370f970a0a0b5e00c99c151beb0f13</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>XMLHelper</sys_name>
        <sys_package display_value="System (glidesoft)" source="glidesoft">5113bc203c31311068bcf327dfe37f8c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global">global</sys_scope>
        <sys_update_name>sys_script_include_0c370f970a0a0b5e00c99c151beb0f13</sys_update_name>
        <sys_updated_by>pooja.halemani@snc</sys_updated_by>
        <sys_updated_on>2021-03-05 06:57:16</sys_updated_on>
    </sys_script_include>
</record_update>
]]></payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:53</sys_created_on>
        <sys_id>3660789583b01210c6695855eeaad338</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>XMLHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3660789583b01210c6695855eeaad338</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
