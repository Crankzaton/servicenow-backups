<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6cb9e3866b35011050bdc141ee44af0c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_ex_sp.TopicServiceUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TopicServiceUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TopicServiceUtilSNC = Class.create();
TopicServiceUtilSNC.prototype = {
    initialize: function () {
        this.SORT_BY_FIELD_ORDER = 'order';
        this.SORT_BY_FIELD_POPULARITY = 'popularity';
    },
    /*
     * Check if article is in user preferred language or Glide system language(fallback)
     */
    isValidArticleLanguage: function (m2mGr) {
        var kbGr = new GlideRecord('kb_knowledge');
        if (kbGr.get(m2mGr.getValue('knowledge'))) {
            var articleLanguage = kbGr.getValue('language');
            var userPreferredLanguage = gs.getSession().getLanguage();
            var systemFallbackLanguage = gs.getProperty('glide.sys.language');

            var validLanguages = [];
            validLanguages.push(userPreferredLanguage);
            validLanguages.push(systemFallbackLanguage);
            if (articleLanguage === userPreferredLanguage)
                return true;
            if (validLanguages.indexOf(articleLanguage) == -1) {
                return false;
            } else if (articleLanguage.equals(systemFallbackLanguage)) {
                if (this.hasTranslatedArticleInUPL(kbGr, userPreferredLanguage, m2mGr.getValue('topic')))
                    return false;
            }
            return true;
        }
        else {
            return false;
        }
    },
    hasTranslatedArticleInUPL: function (currentGr, language, topicId) {
        var kbGr = new KBContentTranslationUtil().getTranslatedVersionsFromGr(currentGr, language);
        if (kbGr.next() &amp;&amp; kbGr.getValue('workflow_state') === 'published' &amp;&amp; this.isKBPresentInTopic(kbGr, topicId)) {
            return true;
        }
        return false;
    },
    getTranslatedArticleInSelectedLanguage: function (m2mGr) {
        var kbGr = new GlideRecord('kb_knowledge');
		
        if (kbGr.get(m2mGr.getValue('knowledge'))) {
            var articleLanguage = kbGr.getValue('language');
            var userPreferredLanguage = gs.getSession().getLanguage();
            var systemFallbackLanguage = gs.getProperty('glide.sys.language');
            if (articleLanguage === userPreferredLanguage) {
                return kbGr;
            }
            var kbGrUPL = new KBContentTranslationUtil().getTranslatedVersionsFromGr(kbGr, userPreferredLanguage);
            if (kbGrUPL.next() &amp;&amp; kbGrUPL.getValue('workflow_state') === 'published' &amp;&amp; this.isKBPresentInTopic(kbGrUPL, m2mGr.getValue('topic'))) {
                return kbGrUPL;
            }
            else {
                if (articleLanguage === systemFallbackLanguage) {
                    return kbGr;
                }
                var kbGrFallback = new KBContentTranslationUtil().getTranslatedVersionsFromGr(kbGr, systemFallbackLanguage);
                if (kbGrFallback.next() &amp;&amp; kbGrFallback.getValue('workflow_state') === 'published' &amp;&amp; this.isKBPresentInTopic(kbGrFallback, m2mGr.getValue('topic'))) {
                    return kbGrFallback;
                }
            }
            return null;
        }
        else {
            return null;
        }
    },
    /*
     * Wrapper for getContent function in Topic API
     */
    getContent: function (topicId, includeChildTopics, limit, isMobile, excludeItems, contentConfigIds) {
        return this.filterContentByLanguage(topicId, includeChildTopics, limit, isMobile, excludeItems, contentConfigIds, this.SORT_BY_FIELD_ORDER);
    },
    /*
     * Wrapper for getContentByPopularity function in  Topic API
     */
    getContentByPopularity: function (topicId, includeChildTopics, limit, isMobile, excludeItems, contentConfigIds) {
        return this.filterContentByLanguage(topicId, includeChildTopics, limit, isMobile, excludeItems, contentConfigIds, this.SORT_BY_FIELD_POPULARITY);
    },
    /*
     * Wrapper for getFeaturedContent function 
     */
    getFeaturedContent: function (topicId, featuredContentCount, isMobileApp, filterBy) {
        var taxonomyUtil = new global.TaxonomyPortalUtil();
        var featuredContent = taxonomyUtil.getFeaturedContent(topicId, featuredContentCount, isMobileApp, filterBy);
        if (GlidePluginManager.isActive('com.glideapp.knowledge.i18n2')) {
            return this.filterFeaturedContentByLanguage(featuredContent);
        } else {
            return featuredContent;
        }

    },
    filterContentByLanguage: function (topicId, includeChildTopics, limit, isMobile, excludeItems, contentConfigIds, sortByField) {
        var KB_CONTENT_TYPE = '4c32a92153622010069addeeff7b12a3';
        var topicJs = new sn_taxonomy.Topic(topicId);
        var contentArr = [];
        var translatedArr = [];

        while (translatedArr.length &lt; limit &amp;&amp; (contentArr.length === 0 || contentArr.length === limit)) {
            if (sortByField === this.SORT_BY_FIELD_ORDER) {
                contentArr = topicJs.getContent(includeChildTopics, limit, isMobile, excludeItems, contentConfigIds);
            }
            else {
                contentArr = topicJs.getContentByPopularity(includeChildTopics, limit, isMobile, excludeItems, contentConfigIds);
            }
            if (!contentArr || contentArr.length === 0) {
                break;
            }
            if (!GlidePluginManager.isActive('com.glideapp.knowledge.i18n2') || gs.getProperty('taxonomy.knowledge.translation.tokyo')) {
                return contentArr;
            }

            for (var i = 0; i &lt; contentArr.length; i++) {
                var content = contentArr[i];
                if (content.content_type === KB_CONTENT_TYPE) {
                    var contentGr = new GlideRecord('m2m_connected_content');
                    contentGr.get(content.sys_id);
                    if (contentGr &amp;&amp; this.isValidArticleLanguage(contentGr)) {
                        translatedArr.push(content);
                    }
                }
                else {
                    translatedArr.push(content);
                }
                if (translatedArr.length === limit) {
                    break;
                }
            }

            var sysIdArr = [];
            for (var j = 0; j &lt; contentArr.length; j++) {
                sysIdArr.push(contentArr[j].content);
            }
            excludeItems = excludeItems.concat(sysIdArr);
        }
        return translatedArr;
    },
    filterFeaturedContentByLanguage: function (featuredContent) {
        var translatedArr = [];
        featuredContent.forEach(function (content) {
            if (content.content_table === 'kb_knowledge') {
                var contentGr = new GlideRecord('m2m_connected_content');
                contentGr.get(content.sys_id);
                var kbInSelectedLang = this.getTranslatedArticleInSelectedLanguage(contentGr);
                if (kbInSelectedLang) {
                    translatedArr.push(this.getContentFromKB(kbInSelectedLang, contentGr.getValue('topic')));
                }
            }
            else {
                translatedArr.push(content);
            }
        }, this);
        return translatedArr;
    },
    getContentFromKB: function (kbGr, topic) {
        var contentObj = {};
        var m2mGr = new GlideRecord('m2m_connected_content');
        m2mGr.addQuery('knowledge', kbGr.getUniqueValue());
        m2mGr.addQuery('topic', topic);
        m2mGr.query();
        if (m2mGr.next()) {
            contentObj.sys_id = m2mGr.getUniqueValue();
            contentObj.content_table = 'kb_knowledge';
            contentObj.content = kbGr.getUniqueValue();
            contentObj.topic = topic;
            contentObj.popularity = m2mGr.getValue('popularity');
            return contentObj;
        }
        return null;
    },
    isKBPresentInTopic: function (kbGr, topicId) {
        var contentGr = new GlideRecord('m2m_connected_content');
        contentGr.addQuery('topic', topicId);
        contentGr.addQuery('knowledge', kbGr.getUniqueValue());
        contentGr.query();
        if (contentGr.hasNext()) {
            return true;
        }
        else {
            return false;
        }
    },
    type: 'TopicServiceUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-02-22 17:43:22&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6cb9e3866b35011050bdc141ee44af0c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;61&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TopicServiceUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Employee Center" source="sn_ex_sp"&gt;4249e63a28d54d61bb6fbf61fd86cccb&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Employee Center"&gt;4249e63a28d54d61bb6fbf61fd86cccb&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6cb9e3866b35011050bdc141ee44af0c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-07-26 05:38:57&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:22</sys_created_on>
        <sys_id>ccf6705d83f01210c6695855eeaad3cc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TopicServiceUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ccf6705d83f01210c6695855eeaad3cc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:22</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
