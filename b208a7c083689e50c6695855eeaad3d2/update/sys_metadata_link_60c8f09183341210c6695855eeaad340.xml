<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9fceb8f35357011039acddeeff7b1269</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_oe_sfs.FetchRecommendationDetails&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This script holds the functionality to fetch recommended topics.&amp;#13;
&amp;#13;
&amp;#13;
Following are the steps to get top 3 recommended topics: &amp;#13;
1. Generate a list of intent-topic associations.&amp;#13;
2. Get the request ID of the latest analysis ran.&amp;#13;
3. Get the report for the corresponding request ID. &amp;#13;
4. The report holds the recommendations; sort the recommendations by matches in descedning fashion.&amp;#13;
5. Iterate through that sorted list and select the top 3 that have associate topic Ids (based on intent property) from step 1&lt;/description&gt;
        &lt;name&gt;FetchRecommendationDetails&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FetchRecommendationDetails = Class.create();
FetchRecommendationDetails.prototype = {
    initialize: function() {},

	//This will generate a list of intent-topic associations.
    getIntentTopicAssociations: function() {
        return new sn_oe_sfs.CITopicRecommendationsUtil().getTaxonomyIntentTopics();
    },

	//This will fetch the latest analysis record ID
    getLatestRequestId: function() {
        var nluDiscoveryReport = new GlideRecord('sn_nlu_discovery_report_definition');
        nluDiscoveryReport.addEncodedQuery('statusINcompleted,solution_complete');
        nluDiscoveryReport.orderByDesc('sys_created_on');
        nluDiscoveryReport.setLimit(1);
        nluDiscoveryReport.query();
        nluDiscoveryReport.next();
        return nluDiscoveryReport.getUniqueValue();
    },

	//This will fetch the report for the corresponding request ID
    getReport: function(requestId) {
        var reports = new sn_oe_sfs.CITopicRecommendationsUtil().generateReports();
        var report = {};
        reports.forEach(function(rep) {
            if (rep.requestId === requestId)
                report = rep;
        });
        return report;
    },

	//Sorts the recommendations by matches (descending)
    sortRecommendationsBasedOnMatches: function(recommendations) {
        recommendations.sort(function(a, b) {
            return b.matches - a.matches;
        });
    },

    getTotalRequestsCount: function() {
        var requestId = this.getLatestRequestId();
        var report = this.getReport(requestId);
        return report.totalRequests;
    },

    getRequestsHandledCount: function(topThreeRecommendations) {
        var requestsHandled = 0;
        topThreeRecommendations.forEach(function(rec) {
            requestsHandled += rec.matchCount;
        });
        return requestsHandled;
    },

    getPercentageOfRequestsBotCanSolve: function(requestsHandled, totalRequests) {
        return ((requestsHandled / totalRequests) * 100).toFixed(2);
    },

    getTopThreeRecommendations: function() {
        if (!this.isAnalysisSuccessfulAtleastOnce())
            return [];
        var intentTopicAssociations = this.getIntentTopicAssociations();
        var requestId = this.getLatestRequestId();
        var report = this.getReport(requestId);
        var recommendations = report.recommendations;
        this.sortRecommendationsBasedOnMatches(recommendations);
        var topThreeRecommendations = [];
        var self = this;
        recommendations.forEach(function(recommendation) {
            Object.keys(intentTopicAssociations).forEach(function(itaKey) {
                var current = intentTopicAssociations[itaKey];
                Object.keys(current).forEach(function(currentKey) {
                    if (recommendation.intent === currentKey &amp;&amp; topThreeRecommendations.length &lt; 3) {
                        var finalItem = {};
                        finalItem.matchCount = recommendation.matches;
                        finalItem.topicName = current[currentKey].languages.en.topicName;
                        if (!self.isMatchingTopicAlreadyFound(topThreeRecommendations, finalItem))
                            topThreeRecommendations.push(finalItem);
                    }
                });
            });
        });
        return topThreeRecommendations;
    },

    isRecommendationsAvailable: function() {
        var recommendationsList = this.getTopThreeRecommendations();
        return recommendationsList.length ? true : false;
    },

    isMatchingTopicAlreadyFound: function(recommendationsArray, item) {
        var isElementExist = false;
        for (var i = 0; i &lt; recommendationsArray.length; i++) {
            if (recommendationsArray[i].topicName === item.topicName) {
                isElementExist = true;
            }
        }
        return isElementExist;
    },

    isAnalysisSuccessfulAtleastOnce: function() {
        var nluDiscoveryReport = new GlideRecord('sn_nlu_discovery_report_definition');
        nluDiscoveryReport.addEncodedQuery('statusINcompleted,solution_complete');
        nluDiscoveryReport.orderByDesc('sys_created_on');
        nluDiscoveryReport.setLimit(1);
        nluDiscoveryReport.query();
        return nluDiscoveryReport.hasNext();
    },

    getDaysPastRecentAnalysis: function() {
        var nluDiscoveryReport = new GlideRecord('sn_nlu_discovery_report_definition');
        nluDiscoveryReport.addEncodedQuery('statusINcompleted,solution_complete');
        nluDiscoveryReport.orderByDesc('sys_created_on');
        nluDiscoveryReport.setLimit(1);
        nluDiscoveryReport.query();
        if (nluDiscoveryReport.next()) {
            var createdOn = nluDiscoveryReport.getValue('sys_created_on');
            return new sn_oe_sfs.CIUtil().getDaysPastDateTime(createdOn);
        }
        return -1;
    },

    type: 'FetchRecommendationDetails'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-13 05:22:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9fceb8f35357011039acddeeff7b1269&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FetchRecommendationDetails&lt;/sys_name&gt;
        &lt;sys_package display_value="Omni-Experience Standard Feature Set" source="sn_oe_sfs"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Omni-Experience Standard Feature Set"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9fceb8f35357011039acddeeff7b1269&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-09 19:39:46&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:19</sys_created_on>
        <sys_id>60c8f09183341210c6695855eeaad340</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FetchRecommendationDetails</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_60c8f09183341210c6695855eeaad340</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
