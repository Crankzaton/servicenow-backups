<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2742eb0737333200d62004368e41f108</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;sys_platform_encryption_configuration&lt;/collection&gt;
        &lt;condition&gt;true&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Validate Field/Attachment based on type&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (current.isActionAborted())
        return;
    var KMFCleProp = gs.getProperty('glide_encryption.cle_replatforming_with_kmf');

    if (KMFCleProp == "opt_in" &amp;&amp; current.type == 'Attachment') {
        // column should be empty
        if (!current.column.nil()) {
            current.column = '';
        }

        if (current.active == true) {
            // abort if attachments already encrypted for current table
            var gr = new GlideRecord('sys_platform_encryption_configuration');
            gr.addQuery('table', current.table);
            gr.addQuery('type', 'Attachment');
            gr.addQuery('active', true);
            gr.addQuery('sys_id', '!=', current.sys_id);
            gr.query();
            if (gr.next()) {
                gs.addErrorMessage(gs.getMessage('Attachments are already encrypted for table {0} ', gr.table));
                current.setAbortAction(true);
                return;
            }
        }
    } else if (KMFCleProp != "opt_in" || current.type == 'Column') {
        // column can't be empty
        if (current.column.nil()) {
            gs.addErrorMessage(gs.getMessage('Choose a field to encrypt'));
            current.setAbortAction(true);
            return;
        }

        var tableName = current.table;
        var fieldName = current.column;
        var gr = new GlideRecord(tableName);

        // abort if field is invalid
        if (!gr.isValidField(fieldName)) {
            gs.addErrorMessage(gs.getMessage('Invalid column {0} for table {1}', [fieldName, tableName]));
            current.setAbortAction(true);
            return;
        }

        var ge = gr.getElement(fieldName);
        var ed = ge.getED();
        // abort if selected field does not support encryption
        // abort if it is a sys field, choice field, virtual field or number field
        if (isFieldEncryptable(ed, ge, fieldName)) {
            gs.addErrorMessage(gs.getMessage('Field {0} in table {1} does not support encryption', [fieldName, tableName]));
            current.setAbortAction(true);
            return;
        }

        // Allow columns to be marked as false independent of encryptions in hierarchy
        if (current.active == true) {
            // abort if column is already encrypted for current table or any ancestor
            var configuration = new GlideRecord('sys_platform_encryption_configuration');
			if (gs.getCurrentScopeName() != 'rhino.global') {
				configuration.addQuery('table', 'IN', (new GlideTableHierarchy(tableName)).getHierarchy());
			} else {
				// convert to js Array, otherwise our 'IN' query will not process first and last items properly
				var relatedTableNames = j2js(GlideDBObjectManager.get().getHierarchy(tableName));
				configuration.addQuery('table', 'IN', relatedTableNames);
			}
            configuration.addQuery('column', fieldName);
            configuration.addQuery('sys_id', '!=', current.sys_id);
            configuration.addActiveQuery();
            configuration.query();
            if (configuration.next()) {
                gs.addErrorMessage(gs.getMessage('The selected field already has an encryption configuration for table {0} or its extensions', tableName));
                current.setAbortAction(true);
                return;
            }
        }
    } else {
        gs.addErrorMessage(gs.getMessage('Unknown type : {0}', current.type));
        current.setAbortAction(true);
        return;
    }
})(current, previous);

function isFieldEncryptable(ed, ge, fieldName) {
    if (fieldName == 'number' ||
        fieldName.startsWith('sys') ||
        ed.isVirtual() || ed.isChoiceTable() ||
        ge.getBooleanAttribute('glide_encrypted_excluded'))
        return true;
    else
        return false;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-07-11 16:12:46&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;2742eb0737333200d62004368e41f108&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Validate Field/Attachment based on type&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Column Level Encryption" source="com.glide.encryption"&gt;837b12fb4722c210cd4e1ce4316d43e4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_2742eb0737333200d62004368e41f108&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-08-24 16:49:34&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=2742eb0737333200d62004368e41f108"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:58:25</sys_created_on>
        <sys_id>0fcd28dd83701210c6695855eeaad3f5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Field/Attachment based on type</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0fcd28dd83701210c6695855eeaad3f5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:58:25</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
