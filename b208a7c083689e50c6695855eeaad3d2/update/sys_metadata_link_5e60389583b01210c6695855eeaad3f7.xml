<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0be0966553c23010a487ddeeff7b129c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_collab.SowCollabUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SowCollabUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SowCollabUtils = Class.create();
SowCollabUtils.prototype = {
    initialize: function() {},

    SOW_CONTEXTUAL_PANEL_VISIBILITY_HANDLER: "sn_sow_collab.SOWContextualPanelVisibility",

    contextPanelConfigHandler: function(context, requestPayload) {
        var sectionProps = [];

        var SOW_CONTEXTUAL_PANEL_PROPS_HANDLER = "sn_sow_collab.SOWContextualPanelConfig";
        var exPointImplementations = new GlideScriptedExtensionPoint().getExtensions(SOW_CONTEXTUAL_PANEL_PROPS_HANDLER);
        if (exPointImplementations) {
            for (i = 0; i &lt; exPointImplementations.length; i++) {
                var handler = exPointImplementations[i];
                if (context === "dropDown")
                    handler.getPanelDropdownPayload().forEach(function(content) {
                        sectionProps.push(content);
                    });
                else if (context === "cardProps")
                    handler.fetchPanelCardProps(requestPayload.recordSysId, requestPayload.chatSysId, requestPayload.chatsLimit).forEach(function(prop) {
                        sectionProps.push(prop);
                    });
                else if (context === "recommendedUsers")
                    handler.getRecommendedUsers(requestPayload.recordSysId, requestPayload.tableName).forEach(function(recommendedUser) {
                        sectionProps.push(recommendedUser);
                    });
                else if (context === "handleChannelRedirect") {
                    var handleChannelRedirectOutput = handler.handleChannelRedirect(requestPayload.recordSysId, requestPayload.tableName, requestPayload.requestorData);
                    if (handleChannelRedirectOutput.errorMsg)
                        return handleChannelRedirectOutput;
                    else
                        handleChannelRedirectOutput.forEach(function(channelData) {
                            sectionProps.push(channelData);
                        });
                } else if (context === "getChannelConfigData") sectionProps.push(handler.getChannelConfigData(requestPayload.methodName, requestPayload.params));
                else if (context === "refreshUserPreference")
                    handler.refreshUserPreference(requestPayload.recommendedParticipants).forEach(function(data) {
                        sectionProps.push(data);
                    });
            }
        }

        return sectionProps;
    },

    buildDropDownPanelPayload: function(content) {
        var payload = {};
        payload.id = content.id;
        payload.label = content.label;
        payload.icon = content.icon;
        return payload;
    },

    getDropDownPanelContents: function() {
        var that = this;
        var contentsArr = this.contextPanelConfigHandler("dropDown", {});

        if (!contentsArr.length)
            return [];

        var sectionsMap = {};

        contentsArr.forEach(function(content) {
            if (!sectionsMap[content.sectionId]) {
                var section = {};
                section.id = content.sectionId;
                section.label = content.sectionLabel;
                section.children = [];
                sectionsMap[content.sectionId] = section;
            }
            sectionsMap[content.sectionId].children.push(that.buildDropDownPanelPayload(content));
        });
        var sections = [];
        Object.keys(sectionsMap).forEach(function(s) {
            sections.push(sectionsMap[s]);
        });
        return sections;
    },

    getPanelCardProps: function(recordSysId, chatSysId, chatsLimit) {
        var payload = {
            recordSysId: recordSysId,
            chatSysId: chatSysId,
			chatsLimit: chatsLimit
        };

        var contentsArr = this.contextPanelConfigHandler("cardProps", payload);
        return contentsArr;
    },

    getRecommededUsers: function(recordSysId, tableName) {
        var payload = {
            recordSysId: recordSysId,
            tableName: tableName
        };
        var recommendedUsersArr = this.contextPanelConfigHandler("recommendedUsers", payload);
        return recommendedUsersArr;
    },

    handleChannelRedirect: function(recordSysId, tableName, requestorData) {
        var payload = {
            recordSysId: recordSysId,
            tableName: tableName,
            requestorData: requestorData
        };

        try {
            return this.contextPanelConfigHandler("handleChannelRedirect", payload);
        } catch (e) {
            return {
                errorMsg: e.message
            };
        }
    },

    refreshUserPreference: function(recommendedParticipants) {
        var payload = {
            recommendedParticipants: recommendedParticipants,
        };

        var recommendedUsersArr = this.contextPanelConfigHandler("refreshUserPreference", payload);
        return recommendedUsersArr;
    },

    getChannelConfigData: function(methodName, params) {
        var payload = {
            methodName: methodName,
            params: params ? params : ''
        };

        var channelConfigData = this.contextPanelConfigHandler("getChannelConfigData", payload);

        if (methodName === 'fetchRefreshDuration') channelConfigData = Math.min.apply(null, channelConfigData);

        return channelConfigData;
    },

    isTokenAvailable: function() {
        if (GlidePluginManager.isActive('com.snc.tcm_collab_hook')) {
            var msTeamsCredentialsHelper = new sn_tcm_collab_hook.MSTeamsCredentialsHelper();
            return msTeamsCredentialsHelper.isAccessTokenOrRefreshTokenAvailable();
        }
        return false;
    },

    canViewChats: function(table, sysId) {
        var exPointImplementations = new GlideScriptedExtensionPoint().getExtensions(this.SOW_CONTEXTUAL_PANEL_VISIBILITY_HANDLER);
        if (exPointImplementations) {
            for (i = 0; i &lt; exPointImplementations.length; i++) {
                var handler = exPointImplementations[i];
                if (handler.canLaunchChat(sysId, table))
                    return true;
            }
        }
        return false;
    },

    canViewCalls: function(table, sysId) {
        if (GlidePluginManager.isActive('com.snc.notify'))
            return new sn_uib_notify.NotifyUXFConferenceUtil().canViewCalls(table, sysId);
        return false;
    },

    getNumberOfChats: function(table, sysId) {
        if (!this.isTeamsITPluginActive())
            return 0;
        var teamsChatGa = new GlideAggregate('sn_tcm_collab_hook_ms_teams_chat');
        teamsChatGa.addAggregate('COUNT');
        teamsChatGa.addQuery('source_table', table);
        teamsChatGa.addQuery('source', sysId);
        teamsChatGa.query();
        if (teamsChatGa.next())
            return teamsChatGa.getAggregate('COUNT');
        return 0;
    },

    isTeamsITPluginActive: function() {
        return GlidePluginManager.isActive('com.snc.ms_teams.it');
    },

    type: 'SowCollabUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-18 12:06:22&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0be0966553c23010a487ddeeff7b129c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;61&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SowCollabUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Collaboration Services for Service Operations Workspace" source="sn_sow_collab"&gt;fa27a0dd53423010bf68ddeeff7b12ac&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Collaboration Services for Service Operations Workspace"&gt;fa27a0dd53423010bf68ddeeff7b12ac&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0be0966553c23010a487ddeeff7b129c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-27 13:48:32&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:51</sys_created_on>
        <sys_id>5e60389583b01210c6695855eeaad3f7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SowCollabUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5e60389583b01210c6695855eeaad3f7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
