<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0a35d1750f803010c0774ee7c8767ee7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFVATopicProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Script that is used while processing or translating an artifact&lt;/description&gt;
        &lt;name&gt;LFVATopicProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFVATopicProcessor = Class.create();
LFVATopicProcessor.prototype = Object.extendsObject(LFArtifactProcessorSNC, {
    category: 'localization_framework', // DO NOT REMOVE THIS LINE!

    /**********
     * Returns LFDocumentContent object for the given artifact record
     * 
     * @param params.tableName The table name of the artifact record
     * @param params.sysId The sys-id of the artifact record 
     * @param params.language Language into which the artifact has to be translated into (Target language)
     * @return LFDocumentContent object
     **********/
    getTranslatableContent: function(params) {
        var tableName = params.tableName;
        var sysId = params.sysId;
        var language = params.language;
        var designDefinition, groupedChoiceNodeIdNameMap = {},
            label, groupName, nodes = [];
        var lfDocumentContentBuilder = new global.LFDocumentContentBuilder("v1", language, sysId, tableName);
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', sysId);
        gr.query();
        if (gr.next()) {
            setTopicNameAndKeywords(gr);
            var sysCBDesignTopicGR = new GlideRecord("sys_cb_design_topic");
            sysCBDesignTopicGR.addQuery("compiled_topic", sysId);
            sysCBDesignTopicGR.orderByDesc("sys_updated_on");
            sysCBDesignTopicGR.query();
            if (!sysCBDesignTopicGR.hasNext()) {
                return lfDocumentContentBuilder.build();
            }
            sysCBDesignTopicGR.next();
            designDefinition = JSON.parse(sysCBDesignTopicGR.getValue('design_definition'));
            if (Object.keys(designDefinition).length === 0 || !designDefinition.hasOwnProperty("goals")) {
                return lfDocumentContentBuilder.build();
            }
            nodes = designDefinition.goals[0].nodes;
            //Iterating through each node of the topic's workflow to extract all translatable strings
            for (i in nodes) {
                groupName = nodes[i].name;
                // Check for Start Node
                if (nodes[i].greeting_msg &amp;&amp; nodes[i].greeting_msg.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].greeting_msg.value, groupName, "Greeting Response");
                }
                // Check for End Node
                if (nodes[i].confirmation_msg &amp;&amp; nodes[i].confirmation_msg.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].confirmation_msg.value, groupName, "Confirmation Message");
                }
                // If the format type is Custom for the 'User Input' - Text Node
                if (nodes[i].type === "InputPrompt" &amp;&amp; nodes[i].formatType === "Custom") {
                    lfDocumentContentBuilder.processScript(nodes[i].validationScript, groupName, "Text Input Format - Custom");
                }
                // Check for 'Script Action'/'Choice Value Expression' fields
                if (nodes[i].script) {
                    label = (nodes[i].type === "ScriptedAction") ? "Action Expression" : "Choice Value Expression";
                    lfDocumentContentBuilder.processScript(nodes[i].script, groupName, label);
                }
                // Check for 'Header' field
                if (nodes[i].header &amp;&amp; nodes[i].header.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].header.value, groupName, "Header");
                }
                // Check for 'Label' field
                if (nodes[i].label &amp;&amp; nodes[i].label.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].label.value, groupName, "Label");
                }
                // Check for 'Link List Value Expression' field
                if (nodes[i].multi_link_script) {
                    lfDocumentContentBuilder.processScript(nodes[i].multi_link_script, groupName, "Link List Value Expression");
                }
                // Check for 'Carousel Item Expression' field
                if (nodes[i].carousel_options_script) {
                    lfDocumentContentBuilder.processScript(nodes[i].carousel_options_script, groupName, "Carousel Item Expression");
                }
                // Check for 'Prompt' field
                if (nodes[i].message &amp;&amp; nodes[i].message.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].message.value, groupName, "Prompt");
                }
                // Check for 'Acknowledge Message' field
                if (nodes[i].acknowledgement &amp;&amp; nodes[i].acknowledgement.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].acknowledgement.value, groupName, "Acknowledge Message");
                }
                // Check for 'Confirmation Message' field
                if (nodes[i].confirmation &amp;&amp; nodes[i].confirmation.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].confirmation.value, groupName, "Confirmation Message");
                }
                // Check for 'Default Value' field
                if (nodes[i].default_value &amp;&amp; nodes[i].default_value.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].default_value.value, groupName, "Default Value");
                }
                // Check for 'No records response message' field
                if (nodes[i].no_options_found_message &amp;&amp; nodes[i].no_options_found_message.value) {
                    lfDocumentContentBuilder.processScript(nodes[i].no_options_found_message.value, groupName, "No records response message");
                }
                // Check for 'Script Response Message'/'Response Message' fields
                var nodeToProcess = nodes[i].value;
                label = (nodes[i].type === "ScriptOutputPrompt") ? "Script Response Message" : "Response Message";
                if (nodeToProcess &amp;&amp; nodeToProcess.value) {
                    processStringsToBeTranslated(nodeToProcess.value, groupName, label);
                } else if (nodeToProcess &amp;&amp; nodeToProcess.constructor === Array) {
                    //process input completion confirmation message for grouped choice
                    var nodeName = nodes[i].name;
                    var nodeId = nodeName.substring(0, nodeName.indexOf('_'));
                    var groupedChoiceNodeName = groupedChoiceNodeIdNameMap[nodeId];
                    if (groupedChoiceNodeName) {
                        groupName = groupedChoiceNodeName;
                        label = 'Input completion confirmation';
                    }
                    nodeToProcess.forEach(function(responseMessage) {
                        if (responseMessage.value &amp;&amp; responseMessage.type === "String") {
                            processStringsToBeTranslated(responseMessage.value, groupName, label);
                        }
                    });
                }
                switch (nodes[i].type) {
                    // Check for 'Multi-flow Output' Node
                    case "MultiPartOutputPrompt":
                        setMultiFlowOutputNodeInfo(nodes[i], groupName);
                        break;
                        // Check for 'Static Choice' Node's choices
                    case "ChoiceInputPrompt":
                        setStaticChoicesNodeInfo(nodes[i], groupName, nodes[i].variable_id);
                        break;
                        // Check for "Topic Block" Node
                    case "LibraryCall":
                        //check for "Grouped Choice" Node
                        if (nodes[i].library_topic_name === 'Grouped List Input') {
                            groupedChoiceNodeIdNameMap[nodes[i].id] = nodes[i].name;
                            setGroupedChoiceNodeInfo(nodes[i], groupName);
                        } else {
                            setTopicBlockNodeInfo(nodes[i], groupName);
                        }
                        break;
                        // Check for "Table output" Node
                    case "TableOutput":
                        setTableOutputNodeInfo(nodes[i], groupName);
                        break;
                        // Check for "Utility Action" Node
                    case "FDIHPasswordInvocationDto":
                        setUtilityActionNodeInfo(nodes[i], groupName);
                        break;
                        // Check for "Utility Action" Node
                    case "CardOutputPrompt":
                        setCardOutputNodeInfo(nodes[i], groupName);
                        break;
                }
            }
        }

        // populate translations for AI StaticChoices by looking in glide_variables
        setAIStaticChoicesNodeInfo();

        // Setting details for the Topic Title &amp; Keywords
        function setTopicNameAndKeywords(topicGR) {
            lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(topicGR, "Basic Info", {
                "fieldsToExclude": ["metaphone"]
            });
        }

        // Add translatable fields from CB topic. Currently just "description"
        function setTranslatableFieldsFromCbTopic(topicGR) {
            var cbTopicGr = new GlideRecord("sys_cb_topic");
            if (cbTopicGr.get(topicGR.getValue("cb_topic_id"))) {
                lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(cbTopicGr, "Basic Info", {
                    "fieldsToExclude": []
                });
            }
        }

        function setGroupedChoiceNodeInfo(node, groupName) {
            var inputMappings = node["parameter-mappings"];
            var inputItems = [];
            for (j in inputMappings) {
                if (inputMappings[j]["parameter-name"] === "inputs") {
                    inputItems = inputMappings[j].metadata.items;
                }
            }
            inputItems.forEach(function(responseMessage) {
                if (responseMessage.value &amp;&amp; responseMessage.type === "String") {
                    processStringsToBeTranslated(responseMessage.value, groupName, "input");
                }
            });
        }

        function setMultiFlowOutputNodeInfo(node, groupName) {
            if (node.label) {
                lfDocumentContentBuilder.processScript(node.label, groupName, "Navigation Label");
            }
            var parts = node.parts;
            for (j = 0; j &lt; parts.length; j++) {
                if (parts[j].type === "OutputPrompt" &amp;&amp; parts[j].value.value) {
                    lfDocumentContentBuilder.processScript(parts[j].value.value, groupName, "Response type as Text");
                } else if (parts[j].type === "LinkOutputPrompt") {
                    if (parts[j].header.value)
                        lfDocumentContentBuilder.processScript(parts[j].header.value, groupName, "Response type as Link - Header");
                    if (parts[j].label.value)
                        lfDocumentContentBuilder.processScript(parts[j].label.value, groupName, "Response type as Link - Label");
                }
            }
        }

        function setAIStaticChoicesNodeInfo() {
            var glideVariables = designDefinition.glide_variables;
            for (var j in glideVariables) {
                if (glideVariables[j].type === "Choice" &amp;&amp; glideVariables[j].translation) {
                    var choiceNames = [];
                    var choices = glideVariables[j].choices;
                    for (var k in choices) {
                        choiceNames.push(choices[k].name);
                    }
                    if (choiceNames.length &gt; 0) {
                        lfDocumentContentBuilder.processStringArray(choiceNames, glideVariables[j].label, "Static Choices");
                    }
                }
            }
        }

        function setStaticChoicesNodeInfo(node, groupName, variableId) {
            var choiceNames = [];
            var glideVariables = designDefinition.glide_variables;
            for (var j in glideVariables) {
                if (glideVariables[j].type === "Choice" &amp;&amp; glideVariables[j].id === variableId) {
                    var choices = glideVariables[j].choices;
                    for (var k in choices) {
                        choiceNames.push(choices[k].name);
                    }
                }
            }
            if (choiceNames.length &gt; 0) {
                lfDocumentContentBuilder.processStringArray(choiceNames, groupName, "Static Choices");
            }
        }

        function setTopicBlockNodeInfo(node, groupName) {
            var topicBlock = node["parameter-mappings"];
            for (j in topicBlock) {
                var inputObj = topicBlock[j].value || topicBlock[j].metadata.items;
                if (inputObj.value &amp;&amp; inputObj.mode === "script") {
                    lfDocumentContentBuilder.processScript(inputObj.value, groupName, topicBlock[j]["parameter-name"]);
                } else if (inputObj &amp;&amp; inputObj.constructor === Array) {
                    inputObj.forEach(function(inputItem) {
                        if (inputItem.value &amp;&amp; inputItem.mode === "script") {
                           lfDocumentContentBuilder.processScript(inputItem.value, groupName, topicBlock[j]["parameter-name"]);
                        }
                    });
                }
            }
        }

        function setTableOutputNodeInfo(node, groupName) {
            if (node.title &amp;&amp; node.title.value)
                lfDocumentContentBuilder.processScript(node.title.value, groupName, "Header");
            if (node.noResultsMessage &amp;&amp; node.noResultsMessage.value)
                lfDocumentContentBuilder.processScript(node.noResultsMessage.value, groupName, "No records response message");
            if (node.columns) {
                var columnLabels = [];
                var columns = node.columns;
                for (var k in columns) {
                    columnLabels.push(columns[k].label);
                }
                lfDocumentContentBuilder.processStringArray(columnLabels, groupName, "Display Names");
            }
        }

        function setUtilityActionNodeInfo(node, groupName) {
            if (node.confirmation_message &amp;&amp; node.confirmation_message.value)
                lfDocumentContentBuilder.processScript(node.confirmation_message.value, groupName, "Confirmation prompt");
            if (node.non_secure_channel_message &amp;&amp; node.non_secure_channel_message.value)
                lfDocumentContentBuilder.processScript(node.non_secure_channel_message.value, groupName, "Non-secure channel response message");
        }

        function setCardOutputNodeInfo(node, groupName) {
            if (node.fields) {
                var fields = node.fields;
                for (var k in fields) {
                    if (fields[k].value.value)
                        lfDocumentContentBuilder.processScript(fields[k].value.value, groupName, fields[k].name);
                }
            }
        }

        function processStringsToBeTranslated(scriptContent, groupName, label) {
            var fields = [];
            var response = getStringsToBeTranslated(scriptContent);
            var stringsToBeTranslated = response.stringsToBeTranslated;
            for (var idx = 0; idx &lt; stringsToBeTranslated.length; idx++) {

                // Get the key display value from sys_ui_message table for the given hash key and English language
                var originalValue = getKeyDisplayValue(stringsToBeTranslated[idx].originalValue, "en");
                originalValue = originalValue ? originalValue : stringsToBeTranslated[idx].originalValue;
                // Get the translated value from sys_ui_message table for the given original value and target language
                var translatedValue = getKeyDisplayValue(stringsToBeTranslated[idx].originalValue, language);
                // For messages that are not stored in sys_ui_message, translated value is assumed to be the same as original value
                if (language === "en") {
                    translatedValue = translatedValue ? translatedValue : stringsToBeTranslated[idx].originalValue;
                }
                var field = LFDocumentContentHelper.createField(originalValue, translatedValue);
                field.setAdditionalParameters({
                    key: stringsToBeTranslated[idx].originalValue
                });
                fields.push(field);
            }

            if (fields.length &gt; 0) {
                // Creating custom element with internal as false since the strings to be translated from the script contains hash key
                var element = LFDocumentContentHelper.createElement(groupName, label);
                element.setFields(fields);
                lfDocumentContentBuilder.processElement(element);
            }
        }

        function getStringsToBeTranslated(scriptContent) {
            var text, regex = /getMessage/gi,
                indices = [],
                stringsToBeTranslated = [];
            var scriptContentWithOutComments = ignoreComments(scriptContent);
            //getting the indices of all the getMessage/getMessageLang in a given script
            while (text = regex.exec(scriptContentWithOutComments)) {
                indices.push(text.index);
            }
            var firstIndex, lastIndex;
            for (var index = 0; index &lt; indices.length; index++) {
                firstIndex = indices[index];
                lastIndex = (indices[index + 1]) ? indices[index + 1] : scriptContentWithOutComments.length;

                //regex to get the translatable string enclosed in getMessage/gs.getMessage
                var pattern = /[getMessage|getMessageLang][\s]*\([\s]*([\\\s+]?['"])(.*)\1\s*[,)}]/g;
                var match = pattern.exec(scriptContentWithOutComments.substring(firstIndex, lastIndex));
                if (!match || match.length &lt; 3)
                    continue;

                stringsToBeTranslated.push({
                    'originalValue': match[2]
                });
            }
            return {
                'stringsToBeTranslated': stringsToBeTranslated
            };
        }

        function ignoreComments(scriptContent) {
            //Remove both multi line and single line comments
            return scriptContent.replace(/\/\*[\s\S]*?\*\/|\/\/[\s\S]*?[\n\r]/g, '\n').trim();
        }

        function getKeyDisplayValue(messageKey, language) {
            var uiMessageGR = new GlideRecord("sys_ui_message");
            uiMessageGR.addQuery("language", language);
            uiMessageGR.addQuery("key", messageKey);
            uiMessageGR.query();
            if (uiMessageGR.next()) {
                return uiMessageGR.getValue("message");
            }
        }

        return lfDocumentContentBuilder.build();
    },

    /**********
     * Uncomment the saveTranslatedContent function definition to write a custom save script
     * Stores translations into standard tables by default
     *
     * Optional Return
     *
     * @param documentContent LFDocumentContent object that can be parsed to obtain translated values
     * @return
     **********/

        saveTranslatedContent: function(documentContent) {
            // Calling to store translations for all the elements with internal as true into standard tables
            LFArtifactProcessorSNC.prototype.saveTranslatedContent.call(this, documentContent);
            // Custom save script to store translations for all the elements that contains hash key
            var version = documentContent.getVersion();
            var targetLanguage = documentContent.getLanguage();
            if (version == 'v1' &amp;&amp; targetLanguage) {
                var elements = documentContent.getElements();
                for (var elementIdx = 0; elementIdx &lt; elements.length; elementIdx++) {
                    var eachElement = elements[elementIdx];
                    // Checking whether each element contains hash key or not by looking at the value of isInternal field as false
                    if (eachElement &amp;&amp; !eachElement.isInternal()) {
                        var fields = eachElement.getFields();
                        for (var fieldIdx = 0; fieldIdx &lt; fields.length; fieldIdx++) {
                            saveTranslationsInSysUiMessage(fields[fieldIdx], targetLanguage);
                        }
                    }
                }
            }

            function saveTranslationsInSysUiMessage(field, targetLanguage) {
                var translatedValue = field.getTranslatedValue();
                var additionalParameters = field.getAdditionalParameters() || {};
                var originalValue = additionalParameters['key'];
                var hasTranslatedValue = translatedValue &amp;&amp; translatedValue !== '';
                var gr = new GlideRecord('sys_ui_message');
                gr.addQuery('key', originalValue);
                gr.addQuery('language', targetLanguage);
                gr.query();
                // Update or Delete the record if exists
                if (gr.next()) {
                    if (hasTranslatedValue) {
                        gr.setValue('message', translatedValue);
                        gr.update();
                    } else {
                        gr.deleteRecord();
                    }
                } else if (hasTranslatedValue) {
                    gr.initialize();
                    gr.setValue('key', originalValue);
                    gr.setValue('language', targetLanguage);
                    gr.setValue('message', translatedValue);
                    gr.insert();
                }
            }
        },

    type: 'LFVATopicProcessor'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-05-11 16:14:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0a35d1750f803010c0774ee7c8767ee7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFVATopicProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework for Virtual Agent Topic" source="com.glide.localization_framework.va"&gt;2c9d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0a35d1750f803010c0774ee7c8767ee7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-12-15 22:35:05&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:42</sys_created_on>
        <sys_id>1060f49583b01210c6695855eeaad374</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFVATopicProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1060f49583b01210c6695855eeaad374</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:42</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
