<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Security Attribute Lifecycle</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var api = new SNC.SecurityAttributeAPI();

 // update
 if (current.operation() === 'update') {

  // check if script contains 'current'
  // API takes care of NULL
  if (api.isScriptUsingCurrent(current.script) == true) {
   var msg = gs.getMessage("Using 'current' in the script or included script-includes is not allowed.");
   gs.addErrorMessage(msg);
   current.setAbortAction(true);
   return;
  }
  
  // check if attribute gets inactivated
  if (previous.active == true && current.active == false) {
   
   // check if it is part of other attribute condition
   var inUse = api.checkSecurityAttributeIsUsed(current.name);
   if (inUse == true) {
    var msg = gs.getMessage('Security Attribute is being used in other attributes and cannot be deactivated');
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }

   // check if attribute is attached to ACL, DF, ...
   inUse = usedInRules(current.sys_id);
   if (inUse == true) {
    var msg = gs.getMessage('Security Attribute is being used in security rules and cannot be inactivated');
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }
  }

  // check if "local"
  if (current.is_localized == true)
   return;

  // now check if condition was changed
  if (previous.condition != current.condition) {

   // check if similar condition already exists
   var result = api.checkIfConditionExists(current.condition);
   if (result !== '') {
    var msg = gs.getMessage('Security Attribute with such condition already exists');
    msg = msg + ': ' + result;
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }

   // check for recurrent terms in the attribute
   result = api.detectCrossTermInAttribute(current.name, current.condition);
   if (result !== '') {
    var msg = gs.getMessage('Security Attribute contains recurrent security attribute term: ');
    msg = msg + current.name + ' <--> ' + result;
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }
  }

  return;
 } // end of "update"
 
 // "insert"

 // check if script contains 'current'
 // API takes care of NULL
 if (api.isScriptUsingCurrent(current.script) == true) {
  var msg = gs.getMessage("Using 'current' in the script or included script-includes is not allowed.");
  gs.addErrorMessage(msg);
  current.setAbortAction(true);
  return;
 }

 // check for duplicate condition
 // never returns NULL
 var result = api.checkIfConditionExists(current.condition);

 if (result !== '' && current.is_localized != true) {
 
  var msg = gs.getMessage('Security Attribute with such condition already exists');
  msg = msg + ': ' + result;
  gs.addErrorMessage(msg);
  current.setAbortAction(true);
 }

 // check for recurrent terms in the attribute
 result = api.detectCrossTermInAttribute(current.name, current.condition);
 if (result !== '') {
 
  var msg = gs.getMessage('Security Attribute contains recurrent security attribute term: ');
  msg = msg + current.name + ' <--> ' + result;
  gs.addErrorMessage(msg);
  current.setAbortAction(true);
 }
 
})(current, previous);

function usedInRules(attrSysId) {
 var gr = new GlideRecord('v_security_attribute_audit');

 gr.addQuery('security_attribute', attrSysId);
 gr.addQuery('table_name', '!=', 'sys_security_attribute');
 gr.query();

 return gr.hasNext();
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>148b6c9183701210c6695855eeaad380</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Security Attribute Lifecycle</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_148b6c9183701210c6695855eeaad380</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:24</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=148b6c9183701210c6695855eeaad380"/>
</record_update>
