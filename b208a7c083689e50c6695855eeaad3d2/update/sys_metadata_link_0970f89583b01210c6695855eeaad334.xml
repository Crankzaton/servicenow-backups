<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0e1e124f673012006cc295f557415adf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_devstudio.VCSAppAccessCheck&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VCSAppAccessCheck&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VCSAppAccessCheck = (function() {

    return {
        verifyReadAccess: function(appId) {
            // If the application is app customization capable read access is allowed.
            if (_isAppCustomizationCapableApp(appId))
                return true;

            var gr = attemptAppLoad(appId);
            return gr.canRead();
        },

        verifyWriteAccess: function(appId) {
            // If the application is app customization capable write access is allowed.
            if (_isAppCustomizationCapableApp(appId))
                return true;

            var gr = attemptAppLoad(appId);

            // PRB683568 : For delegated developers canWrite always gives false
            // PRB1365169 : modified the temporary fix originally made for PRB683568 
            //              which was calling canRead() for all users
            if (isDelegatedDeveloper() &amp;&amp; !gr.canRead())
                return false;

            if (!isDelegatedDeveloper() &amp;&amp; !gr.canWrite())
                return false;

            return true;
        },

        verifyPublishAccess: function(appId) {
            return canPublishApp(appId);
        },

        verifyCreateAccess: function() {
            var gr = new GlideRecord("sys_app");
            return gr.canCreate();
        },

        verifyVersionControlAccess: function(appId) {
            return canAccessVersionControl(appId);
        },

        isGACOrSourceControlUser: function() {
            // This provides backward compatibility and handles the case where 
            // the user does not have the collaboration plugin installed
            var user = gs.getUser();
            var hasGACRole = user.hasRole('sn_g_app_creator.app_creator');
            var hasSourceControlRole = user.hasRole('source_control');
            if (hasGACRole || hasSourceControlRole)
                return true;
        },
		
		canAccessCredentials: function() {
			return gs.hasRightsTo('record/discovery_credentials/read') || gs.hasRole("source_control");
		},

        throwAccessDenied: function(appId) {
            throw new sn_ws_err.ServiceError()
                .setStatus(403)
                .setMessage(appId ? gs.getMessage("Access denied to application {0}", appId) : gs.getMessage("Access denied to create a new application"));
        }
    };

    function _isAppCustomizationCapableApp(appId) {
        return sn_app_customization.AppCustomizationAPI.isAppCustomizationFeatureEnabled() &amp;&amp; sn_app_customization.AppCustomizationAPI.isAppCustomizationCapableById(appId) &amp;&amp; (gs.getUser().hasRole("admin") || isDelegatedDeveloper());
    }

    function attemptAppLoad(appId) {
        var gr = new GlideRecord("sys_app");
        if (!gr.get(appId))
            throw new sn_ws_err.NotFoundError("Invalid application id " + appId);

        return gr;
    }

    function isDelegatedDeveloper() {
        return gs.hasRole('delegated_developer') &amp;&amp; !gs.hasRole('admin');
    }

    function canPublishApp(appId) {
        return sn_app_api.AppStoreAPI.canPublishToAppRepo(appId) || sn_app_api.AppStoreAPI.canPublishToAppStore(appId);
    }

    function canAccessVersionControl(appId) {
        return gs.hasRightsTo("api/now.vcs/allow", {
            scopeId: appId
        });
    }

})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-01-11 15:42:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0e1e124f673012006cc295f557415adf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VCSAppAccessCheck&lt;/sys_name&gt;
        &lt;sys_package display_value="Studio" source="sn_devstudio"&gt;5d9789f3eb51310007e48c1cf106fe9e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Studio"&gt;5d9789f3eb51310007e48c1cf106fe9e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0e1e124f673012006cc295f557415adf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-12 17:48:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:01</sys_created_on>
        <sys_id>0970f89583b01210c6695855eeaad334</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VCSAppAccessCheck</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0970f89583b01210c6695855eeaad334</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:01</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
