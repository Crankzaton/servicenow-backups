<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>60a8fa20c3e13010f208ce72a740dd6d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_inc.SOWUpcomingSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SOWUpcomingSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SOWUpcomingSNC = Class.create();
SOWUpcomingSNC.prototype = {
	ACTIVE_RECORD: "active=true",
	ASSIGNED_TO_ME: "assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe",
	ON_TODAY: "ONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()",
	ON_TOMORROW: "ONTomorrow@javascript:gs.beginningOfTomorrow()@javascript:gs.endOfTomorrow()",
	TABLE: {
		CHANGE_REQUEST: "change_request",
		INCIDENT: "incident",
		SC_REQ_ITEM: "sc_req_item",
		TASK: "task"
	},

	initialize: function() {
	},

	getCounts: function() {
		this._total = {'today': 0, 'tomorrow': 0};
		this._change = this._getChangeRequestCount();
		this._task_sla_at_risk = this._getIncidentWithSLAAtRisk();
		this._task_sla_breached = this._getIncidentWithSLABreached();
		this._requested_item = this._getRequestedItems();
		this._overdue = this._getOverdueTasks();
		return {
			"change": this._change,
			"task_sla_at_risk": this._task_sla_at_risk,
			"task_sla_breached": this._task_sla_breached,
			"requested_item": this._requested_item,
			"overdue": this._overdue,
			"total": this._total
		};
	},

	/*

	- Change Requests that are due today
	- Incidents with SLA at risk
	- Incidents with breached SLA
	- Requested Items that are due today
	- Overdue tasks (requested items and change requests only)

	*/
	_getChangeRequestCount: function() {
		var encodedQueryToday = [this.ACTIVE_RECORD, this.ASSIGNED_TO_ME, this._getTodayDateQuery("start_date")].join("^");
		var encodedQueryTomorrow = [this.ACTIVE_RECORD, this.ASSIGNED_TO_ME, this._getTomorrowDateQuery("start_date")].join("^");
		var todayValue = this._getTableCount(this.TABLE.CHANGE_REQUEST, encodedQueryToday);
		var tomorrowValue = this._getTableCount(this.TABLE.CHANGE_REQUEST, encodedQueryTomorrow);
		this._addToTotal(todayValue, tomorrowValue);
		var result = {
			"label": {
				"value": gs.getMessage("change"),
				"plural": gs.getMessage("changes"),
			},
			"title": {
				"value": gs.getMessage("Change"),
				"plural": gs.getMessage("Changes"),
			},
			"today": { "value": todayValue },
			"tomorrow": { "value": tomorrowValue }
		};
		if (todayValue === 1)
			result.today.sysId = this._getRecordSysId(this.TABLE.CHANGE_REQUEST, encodedQueryToday);
		else
			result.today.encodedQuery = encodedQueryToday;
		if (tomorrowValue === 1)
			result.tomorrow.sysId = this._getRecordSysId(this.TABLE.CHANGE_REQUEST, encodedQueryTomorrow);
		else
			result.tomorrow.encodedQuery = encodedQueryTomorrow;	
		return result;
	},

	_getIncidentWithSLAAtRisk: function() {
		var encodedQueryToday = [
			this.ACTIVE_RECORD, this.ASSIGNED_TO_ME,
			"JOINincident.sys_id=task_sla.task!" + this._getTodayDateQuery("planned_end_time"),
			"JOINincident.sys_id=task_sla.task!has_breached=false"
		].join("^");
		var encodedQueryTomorrow = [
			this.ACTIVE_RECORD, this.ASSIGNED_TO_ME,
			"JOINincident.sys_id=task_sla.task!" + this._getTomorrowDateQuery("planned_end_time")
		].join("^");
		var todayValue = this._getTableCount(this.TABLE.INCIDENT, encodedQueryToday);
		var tomorrowValue = this._getTableCount(this.TABLE.INCIDENT, encodedQueryTomorrow);
		this._addToTotal(todayValue, tomorrowValue);
		var result = {
			"label": {
				"value": gs.getMessage("incident with SLA at risk"),
				"plural": gs.getMessage("incidents with SLA at risk"),
			},
			"title": {
				"value": gs.getMessage("Incident"),
				"plural": gs.getMessage("Incidents"),
			},
			"today": { "value": todayValue },
			"tomorrow": { "value": tomorrowValue }
		};
		if (todayValue === 1)
			result.today.sysId = this._getRecordSysId(this.TABLE.INCIDENT, encodedQueryToday);
		else
			result.today.encodedQuery = encodedQueryToday;
		if (tomorrowValue === 1)
			result.tomorrow.sysId = this._getRecordSysId(this.TABLE.INCIDENT, encodedQueryTomorrow);
		else
			result.tomorrow.encodedQuery = encodedQueryTomorrow;	
		return result;
	},

	// Only today's required
	_getIncidentWithSLABreached: function() {
		var encodedQuery = [this.ACTIVE_RECORD, this.ASSIGNED_TO_ME, "JOINincident.sys_id=task_sla.task!has_breached=true"].join("^");
		var incidentsCount = this._getTableCount(this.TABLE.INCIDENT, encodedQuery);
		this._addToTotal(incidentsCount, 0);
		var result = {
			"label": {
				"value": gs.getMessage("incident with breached SLA"),
				"plural": gs.getMessage("incidents with breached SLA"),
			},
			"title": {
				"value": gs.getMessage("Incident"),
				"plural": gs.getMessage("Incidents"),
			},
			"today": { "value": incidentsCount }
		};
		if (incidentsCount === 1)
			result.today.sysId = this._getRecordSysId(this.TABLE.INCIDENT, encodedQuery);
		else
			result.today.encodedQuery = encodedQuery;
		return result;
	},

	_getRequestedItems: function() {
		var encodedQueryToday = [this.ACTIVE_RECORD, this.ASSIGNED_TO_ME, this._getTodayDateQuery("due_date")].join("^");
		var encodedQueryTomorrow = [this.ACTIVE_RECORD, this.ASSIGNED_TO_ME, this._getTomorrowDateQuery("due_date")].join("^");
		var todayValue = this._getTableCount(this.TABLE.SC_REQ_ITEM, encodedQueryToday);
		var tomorrowValue = this._getTableCount(this.TABLE.SC_REQ_ITEM, encodedQueryTomorrow);
		this._addToTotal(todayValue, tomorrowValue);
		var result = {
			"label": {
				"value": gs.getMessage("requested item"),
				"plural": gs.getMessage("requested items"),
			},
			"title": {
				"value": gs.getMessage("Requested item"),
				"plural": gs.getMessage("Requested items"),
			},
			"today": { "value": todayValue },
			"tomorrow": { "value": tomorrowValue }
		};
		if (todayValue === 1)
			result.today.sysId = this._getRecordSysId(this.TABLE.SC_REQ_ITEM, encodedQueryToday);
		else
			result.today.encodedQuery = encodedQueryToday;
		if (tomorrowValue === 1)
			result.tomorrow.sysId = this._getRecordSysId(this.TABLE.SC_REQ_ITEM, encodedQueryTomorrow);
		else
			result.tomorrow.encodedQuery = encodedQueryTomorrow;	
		return result;
	},

	// Only today's required
	_getOverdueTasks: function() {
		var gdt = new GlideDateTime();
		var now = '"' +gdt.getLocalDate() + '", "' + gdt.getLocalTime().toString().split(" ")[1] + '"';
		var encodedQuery = [
			"sys_class_name=change_request",
			"OR" + "sys_class_name=sc_req_item",
			this.ACTIVE_RECORD, this.ASSIGNED_TO_ME,
			"ref_change_request.start_date&lt;javascript:gs.dateGenerate(" + now + ")",
			"OR" + "due_date&lt;javascript:gs.dateGenerate(" + now + ")"
		].join("^");
		var tasksCount = this._getTableCount(this.TABLE.TASK, encodedQuery);
		this._addToTotal(tasksCount, 0);
		var result = {
			"label": {
				"value": gs.getMessage("overdue task"),
				"plural": gs.getMessage("overdue tasks"),
			},
			"title": {
				"value": gs.getMessage("Overdue task"),
				"plural": gs.getMessage("Overdue tasks"),
			},
			"today": { "value": tasksCount }
		};
		if (tasksCount === 1)
			result.today.sysId = this._getRecordSysId(this.TABLE.TASK, encodedQuery);
		else
			result.today.encodedQuery = encodedQuery;
		return result;
	},

	_getTableCount: function(tableName, encodedQuery) {
		var ga = new GlideAggregate(tableName);
		ga.addEncodedQuery(encodedQuery);
		ga.addAggregate('COUNT');
		ga.query();
		var count = 0;
		if (ga.next())
			count = parseInt(ga.getAggregate('COUNT'));
		return count;
	},

	_getTodayDateQuery: function(fieldName) {
		return fieldName + this.ON_TODAY;
	},

	_getTomorrowDateQuery: function(fieldName) {
		return fieldName + this.ON_TOMORROW;
	},

	_addToTotal: function(todayValue, tomorrowValue) {
		this._total.today += todayValue;
		this._total.tomorrow += tomorrowValue;
	},

	_getRecordSysId: function(tableName, encodedQuery) {
		var gr = new GlideRecord(tableName);
		gr.addEncodedQuery(encodedQuery);
		gr.setLimit(1);
		gr.query();
		if (gr.next())
			return gr.getValue('sys_id');
		return '';
	},

	type: 'SOWUpcomingSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-21 15:49:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;60a8fa20c3e13010f208ce72a740dd6d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SOWUpcomingSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Incident Management for Service Operations Workspace" source="sn_sow_inc"&gt;49aff4bb733320103e366238edf6a70f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Incident Management for Service Operations Workspace"&gt;49aff4bb733320103e366238edf6a70f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_60a8fa20c3e13010f208ce72a740dd6d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-28 10:35:04&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:44</sys_created_on>
        <sys_id>72c6381d83f01210c6695855eeaad384</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SOWUpcomingSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_72c6381d83f01210c6695855eeaad384</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:44</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
