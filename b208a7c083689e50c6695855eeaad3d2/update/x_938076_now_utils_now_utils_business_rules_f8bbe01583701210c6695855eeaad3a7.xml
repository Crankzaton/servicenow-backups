<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create Appointment</name>
        <order>10000</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 // appointment creation logic //
 var sn_appointment = current.variables.sn_appointment;
 var helper = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT_BOOKING_IMPL);
 if (helper.validateAppointment(sn_appointment)) {
  var max = parseInt(gs.getProperty('sn_apptmnt_booking.user_max_new_appointments_daily', 100));
        var canBookAppointment = new sn_apptmnt_booking.AppointmentBookingUtil().canBookAppointment(max);
  var sn_appointmentJSON = JSON.parse(sn_appointment);
  
  var platform = sn_appointmentJSON.config.view;
  var url;
  
  if (!canBookAppointment) {
   current.setAbortAction(true);
   // redirecting user to the same record producer
   if(platform == 'platform'){
    url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_catalog_view=catalog_field_service_catalog&sysparm_error_code=LIMIT_REACHED";
   }else{
    url = "?id=sc_cat_item&sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_error_code=LIMIT_REACHED";
   } 
  } 

  var appointmentConfig = new GlideRecord(sn_apptmnt_booking.AppointmentBookingConstants.CONFIG_TABLE);
  appointmentConfig.get(sn_appointmentJSON.config.service_config.appointment_booking_config);
  
  //Checking and updating Capacity Usage, if availaibility is based on capacity
  var capacityMode = (appointmentConfig.availability_method == "capacity_based" && GlidePluginManager.isActive("com.snc.fsm_capacity_management"));
  if(capacityMode){
   var capacityObj = new DynamicSchedulingCapacityManagement().updateUsageWithoutTask(sn_appointmentJSON, current);
   if(gs.nil(capacityObj) || !capacityObj.hasCapacity){
    current.setAbortAction(true);
    if(platform == 'platform'){
     url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_catalog_view=catalog_field_service_catalog&sysparm_error_code=LIMIT_REACHED";
    }else{
     url = "?id=sc_cat_item&sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_error_code=LIMIT_REACHED";
    } 
   }
  }
  
  // creating an appointment
  var appointmentId = helper.submitAppointmentFromPortal(sn_appointment, current, sn_appointmentJSON.config.opened_for, sn_appointmentJSON.config.location, current.short_description, current.description);
  
  if(gs.nil(appointmentId)){
   if(capacityMode && !gs.nil(capacityObj)){
    //Reducing the usage for the usageId on capacity with the amount of capacity used.
    var capacityQuery = new sn_fsm_capacity_mg.FSMCapacityQueryUtil();
    for(var i=0; i<capacityObj.usages; i++){
     var usageObj = capacityObj.usages[i];
     capacityQuery.updateUsage(usageObj.usageId, -usageObj.usedCapacity);
    }
   }
   
   current.setAbortAction(true);
   if(platform == 'platform'){
    url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_catalog_view=catalog_field_service_catalog&sysparm_error_code=CREATION_FAILED";
   }else{
    url = "?id=sc_cat_item&sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_error_code=CREATION_FAILED";
   } 
   
  }
  
  if(appointmentId){
   if(capacityMode && !gs.nil(capacityObj) && !gs.nil(capacityObj.task)){
    capacityObj.task.insert(); //Creating the appointment task used in Capacity
    current.task_created = true;
   }
   
   if(platform == 'platform'){
    url = "/wm_order.do?sys_id="+current.sys_id;
   }
   else{
    url = "";
   }  
   
  }
  
  //redirecting to the appropriate page
  if (pm.isActive('com.glide.service-portal.customer-portal'))
   gs.setRedirect(url);
  
  if(platform == 'platform'){
   url = "/wm_order.do?sys_id="+current.sys_id;
  }else{
   url = "/csm?id=fsm_ticket&table=wm_order&sys_id="+current.sys_id+"&view=csp";
  } 
  var message = 'Please track your appointment request here <a href="'+url+'">'+current.number+'</a>';
  //Do not want to show error message since we are already redirecting to the work order page.
  //gs.addInfoMessage(message);
 }
 
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f8bbe01583701210c6695855eeaad3a7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Appointment</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_f8bbe01583701210c6695855eeaad3a7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:15</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=f8bbe01583701210c6695855eeaad3a7"/>
</record_update>
