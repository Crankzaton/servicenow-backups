<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b015c16beb3120105de665fcc85228b3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NLUModelTranslator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Translate a selected model in the selected language. It creates stub model along with all the artificats like intent and entity and maps them to corresponding primary fields.&lt;/description&gt;
        &lt;name&gt;NLUModelTranslator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUModelTranslator = Class.create();

(function() {
    var tables = NLUConstants.tables;
    var constants = NLUConstants.constants;
    var stateTypes = NLUConstants.MODEL_STATE_TYPES;

    var TRANSLATE_MODES = {
        MACHINE: 'machineTranslate',
        EXPORT_IMPORT: 'exportImport',
        THIRDPARTY: 'thirdPartyTranslate'
    };

    NLUModelTranslator.machineTranslate = function(artifactName, modelId, language, params, stubModelId) {
        var result = {};
        try {
            new global.LocalizationFrameworkAPIV2().machineTranslate(artifactName, modelId, language, JSON.parse(params));
        } catch (e) {
            gs.debug('Model translation failed for' + modelId + 'with error' + e.message);
            global.NLUModel.updateModelStatus(stubModelId, stateTypes.error_while_translating);
            result.status = 'failure';
            result.message = e.message;
        }
        return result;
    };

    NLUModelTranslator.prototype = {
        initialize: function(modelId, language) {
            this.modelId = modelId;
            this.language = language;
            this.nluModel = new NLUModel(modelId);
            this.importUtil = new NLUImportUtil(modelId, true);
        },

        createStubModel: function() {
            var srcModelGr = this.nluModel.getGR();
            var stubModelDisplayName = srcModelGr.display_name + ' ' + this.language.toUpperCase();
            var newProps = {
                language: this.language,
                display_name: stubModelDisplayName
            };
            var newModelId = this.importUtil.createRecord(tables.SYS_NLU_MODEL, srcModelGr, newProps);
            if (!newModelId) return;
            newProps = {
                model: newModelId
            };
            var intentProps = {
                model: newModelId,
                origin: null
            };
            var srcIntentGr = this.nluModel.getIntents();
            var intentIdsMap = new NLUImportUtil(newModelId, true).createIntents(srcIntentGr, intentProps);
            var newNLUModel = new NLUModel(newModelId);
            if (NLUParloIntegrator.isEntitiesEnabled(this.language, newNLUModel.getVersion())) {
                newProps.sysEntities = newNLUModel.getSystemEntities();
                var entityMap = this.importUtil.createModelEntities(this.nluModel.getModelEntities(), newProps);
                this.importUtil.createIntentEntities(intentIdsMap, newProps, entityMap);
            }

            return newModelId;
        },

        translate: function(mode) {
            var result = {};
            var errorMessage = null;
            try {
                var srcModelGr = this.nluModel.getGR();
                var tgtModelGr = this.nluModel.getTranslatedModels(this.language);
                var doesModelExist = tgtModelGr.next();
                var modelId = doesModelExist ? tgtModelGr.getUniqueValue() : this.createStubModel();
                if (!modelId) {
                    if (NLUSystemUtil.getCurrentDomain() != srcModelGr.getValue('sys_domain'))
                        errorMessage = gs.getMessage('Cannot create secondary model in domain different from primary model');
                    return {
                        status: 'failure',
                        message: errorMessage || gs.getMessage('Failed to create model')
                    };
                }
                if (!GlidePluginManager.isActive("com.glide.localization_framework")) return {
                    status: 'success',
                    sysId: modelId
                };
                this.lfApi = new global.LocalizationFrameworkAPIV2();
                this.srcLangugage = NLUModel.getLanguage(this.nluModel.getGR());

                result.sysId = modelId;
                switch (mode) {
                    case TRANSLATE_MODES.MACHINE:
                        var params = {
                            sourceLanguage: this.srcLangugage,
                            overrideExistingTranslations: false
                        };
                        var script = "global.NLUModelTranslator.machineTranslate('" + constants.NLU_ARTIFACT_NAME + "','" + this.modelId + "', '" + this.language + "', '" + JSON.stringify(params) + "', '" + modelId + "')";
                        NLUWorkbenchGlobalScript.scheduleScript(script, tables.SYS_NLU_MODEL, this.modelId);
                        global.NLUModel.updateModelStatus(modelId, stateTypes.translating);
                        break;
                    case TRANSLATE_MODES.THIRDPARTY:
                        result.data = this.thirdPartyTranslate();
                        global.NLUModel.updateModelStatus(modelId, stateTypes.translating);
                        break;
                }
                result.status = 'success';
            } catch (e) {
                //Prevent deletion of model if the translate is called for delta changes.
                if (!doesModelExist) this.cleanUp(modelId);
                result.status = 'failure';
                result.message = e.message;
            }
            return result;
        },

        cleanUp: function(modelId) {
            global.NLUModel.deleteModel(modelId);
        },

        thirdPartyTranslate: function() {
            return this.lfApi.requestTranslations(constants.NLU_ARTIFACT_NAME, [this.modelId], [this.language], {
                sourceLanguage: this.srcLangugage
            });
        },

        type: 'NLUModelTranslator'
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-25 08:57:37&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b015c16beb3120105de665fcc85228b3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;110&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUModelTranslator&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Core" source="com.glide.nlu"&gt;302438683c31311068bcf327dfe37f2f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b015c16beb3120105de665fcc85228b3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-20 09:40:16&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:02</sys_created_on>
        <sys_id>d500c59d83341210c6695855eeaad3bf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NLUModelTranslator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d500c59d83341210c6695855eeaad3bf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:02</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
