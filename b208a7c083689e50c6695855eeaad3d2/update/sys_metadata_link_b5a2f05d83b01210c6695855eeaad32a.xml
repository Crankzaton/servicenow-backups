<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>21588bf7c301011082c603db7940ddaf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Updates the internal type on Activity related tables &lt;/description&gt;
        &lt;name&gt;Activity Form Dictionary Updates&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[(function() {
    if (pm.isZboot())
        return;

    var activityTables = getActivityTables();
    gs.log('Running fix script "Activity Form Dictionary Updates"', 'ActivityFormDictionaryUpdates');

    activityTables.forEach(updateActivityShard);

    function updateActivityShard(shardName) {
        truncateTable(shardName);
        updateDocumentId(shardName);
        updateEventCreatedBy(shardName);
        updatePayload(shardName);
    }

    function updateDocumentId(table) {
        var docIdDictionary = getDictionary(table, 'document_id');
        if (docIdDictionary) {
            gs.log('Updating document_id internal type to Document ID on shard ' + table, 'ActivityFormDictionaryUpdates');
            docIdDictionary.setValue('internal_type', 'document_id');
            docIdDictionary.setValue('use_dependent_field', true);
            docIdDictionary.setValue('dependent', 'document_table');
            docIdDictionary.update();
        }
    }

    function updateEventCreatedBy(table) {
        var eventCreatedByDictionary = getDictionary(table, 'event_created_by');
        if (eventCreatedByDictionary) {
            gs.log('Updating field event_created_by internal type to String on shard ' + table, 'ActivityFormDictionaryUpdates');
            eventCreatedByDictionary.setValue('internal_type', 'string');
            eventCreatedByDictionary.setValue('max_length', 100);
            eventCreatedByDictionary.update();
        }
    }

    function updatePayload(table) {
        var payloadDictionary = getDictionary(table, 'payload');
        if (payloadDictionary) {
            gs.log('Updating field payload internal type to String on shard ' + table, 'ActivityFormDictionaryUpdates');
            payloadDictionary.setValue('internal_type', 'string');
            payloadDictionary.setValue('max_length', 8000);
            payloadDictionary.update();
        }
    }

    var userSysIdDictionary = getDictionary('sys_activity_supplemental', 'user_sys_id');
    if (userSysIdDictionary) {
        gs.log('Updating field user_sys_id internal type to Reference', 'ActivityFormDictionaryUpdates');
        userSysIdDictionary.setValue('internal_type', 'reference');
        userSysIdDictionary.setValue('reference', 'sys_user');
        userSysIdDictionary.update();
    }

    var suppPayloadDictionary = getDictionary('sys_activity_supplemental', 'payload');
    if (suppPayloadDictionary) {
        gs.log('Updating field payload internal type to String', 'ActivityFormDictionaryUpdates');
        suppPayloadDictionary.setValue('internal_type', 'string');
        suppPayloadDictionary.setValue('max_length', 4000);
        suppPayloadDictionary.update();
    }

    function getDictionary(table, field) {
        var dictionaryGr = new GlideRecord('sys_dictionary');
        dictionaryGr.addQuery('name', table);
        dictionaryGr.addQuery('element', field);
        dictionaryGr.query();

        return dictionaryGr.next() ? dictionaryGr : null;
    }

    function truncateTable(table) {
        var tableRotation = new SncTableRotation(table);
        tableRotation.truncateTable(table);
    }

    function getActivityTables() {
        var tableRotation = new SncTableRotation('sys_activity');
        var tables = tableRotation.getTablesInRotation();

        var tablesArray = ['sys_activity'];

        for (var i = 0; i &lt; tables.size(); i++) {
            tablesArray.push(tables.get(i));
        }
        return tablesArray;
    }
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-01-21 19:02:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;21588bf7c301011082c603db7940ddaf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Activity Form Dictionary Updates&lt;/sys_name&gt;
        &lt;sys_package display_value="Activity Stream" source="com.glide.activity"&gt;c2f6fce43cb1311068bcf327dfe37fd8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_21588bf7c301011082c603db7940ddaf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-21 19:58:30&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:19:38</sys_created_on>
        <sys_id>b5a2f05d83b01210c6695855eeaad32a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Activity Form Dictionary Updates</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b5a2f05d83b01210c6695855eeaad32a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:19:38</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
