<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>148b6c9183701210c6695855eeaad380</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules"&gt;
    &lt;x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection/&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Security Attribute Lifecycle&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {

 var api = new SNC.SecurityAttributeAPI();

 // update
 if (current.operation() === 'update') {

  // check if script contains 'current'
  // API takes care of NULL
  if (api.isScriptUsingCurrent(current.script) == true) {
   var msg = gs.getMessage("Using 'current' in the script or included script-includes is not allowed.");
   gs.addErrorMessage(msg);
   current.setAbortAction(true);
   return;
  }
  
  // check if attribute gets inactivated
  if (previous.active == true &amp;&amp; current.active == false) {
   
   // check if it is part of other attribute condition
   var inUse = api.checkSecurityAttributeIsUsed(current.name);
   if (inUse == true) {
    var msg = gs.getMessage('Security Attribute is being used in other attributes and cannot be deactivated');
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }

   // check if attribute is attached to ACL, DF, ...
   inUse = usedInRules(current.sys_id);
   if (inUse == true) {
    var msg = gs.getMessage('Security Attribute is being used in security rules and cannot be inactivated');
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }
  }

  // check if "local"
  if (current.is_localized == true)
   return;

  // now check if condition was changed
  if (previous.condition != current.condition) {

   // check if similar condition already exists
   var result = api.checkIfConditionExists(current.condition);
   if (result !== '') {
    var msg = gs.getMessage('Security Attribute with such condition already exists');
    msg = msg + ': ' + result;
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }

   // check for recurrent terms in the attribute
   result = api.detectCrossTermInAttribute(current.name, current.condition);
   if (result !== '') {
    var msg = gs.getMessage('Security Attribute contains recurrent security attribute term: ');
    msg = msg + current.name + ' &lt;--&gt; ' + result;
    gs.addErrorMessage(msg);
    current.setAbortAction(true);
    return;
   }
  }

  return;
 } // end of "update"
 
 // "insert"

 // check if script contains 'current'
 // API takes care of NULL
 if (api.isScriptUsingCurrent(current.script) == true) {
  var msg = gs.getMessage("Using 'current' in the script or included script-includes is not allowed.");
  gs.addErrorMessage(msg);
  current.setAbortAction(true);
  return;
 }

 // check for duplicate condition
 // never returns NULL
 var result = api.checkIfConditionExists(current.condition);

 if (result !== '' &amp;&amp; current.is_localized != true) {
 
  var msg = gs.getMessage('Security Attribute with such condition already exists');
  msg = msg + ': ' + result;
  gs.addErrorMessage(msg);
  current.setAbortAction(true);
 }

 // check for recurrent terms in the attribute
 result = api.detectCrossTermInAttribute(current.name, current.condition);
 if (result !== '') {
 
  var msg = gs.getMessage('Security Attribute contains recurrent security attribute term: ');
  msg = msg + current.name + ' &lt;--&gt; ' + result;
  gs.addErrorMessage(msg);
  current.setAbortAction(true);
 }
 
})(current, previous);

function usedInRules(attrSysId) {
 var gr = new GlideRecord('v_security_attribute_audit');

 gr.addQuery('security_attribute', attrSysId);
 gr.addQuery('table_name', '!=', 'sys_security_attribute');
 gr.query();

 return gr.hasNext();
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;x_938076_now_utils_now_utils_business_rules&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-09-21 07:48:24&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;148b6c9183701210c6695855eeaad380&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Security Attribute Lifecycle&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Now Utils" source="x_938076_now_utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Now Utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;x_938076_now_utils_now_utils_business_rules_148b6c9183701210c6695855eeaad380&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-09-21 07:48:24&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/x_938076_now_utils_now_utils_business_rules&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=148b6c9183701210c6695855eeaad380"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:56:51</sys_created_on>
        <sys_id>047d209d83701210c6695855eeaad355</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Security Attribute Lifecycle</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_047d209d83701210c6695855eeaad355</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:56:51</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
