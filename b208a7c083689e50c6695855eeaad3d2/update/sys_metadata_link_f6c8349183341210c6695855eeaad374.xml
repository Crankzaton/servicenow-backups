<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a333bec977e0a1108188ceec8e5a99f5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PDLaneRepository&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PDLaneRepository&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PDLaneRepository = Class.create();
PDLaneRepository.prototype = {
    initialize: function() {},
    type: 'PDLaneRepository',

    insertLane: function(fields) {
        fields = fields || {};
        var sysId = fields.sysId;
        var processDefinition = fields.processDefinition;
        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_LANE);
        gr.initialize();
        if (!processDefinition)
            throw gs.getMessage('Missing process definition id');

        if (sysId)
            gr.setNewGuidValue(sysId);

        this._setFieldsOnGr(fields, gr);

        var insertedId = gr.insert();

        if (!insertedId) {
            var errorRecordId = sysId || '';
            throw gs.getMessage('Unable to insert lane {0}: {1}', [errorRecordId, gr.getLastErrorMessage()]);
        }

        return this._getLaneFromGR(gr);
    },

    updateLane: function(fields) {
        fields = fields || {};

        var sysId = fields['sysId'];

        if (!sysId)
            throw (gs.getMessage('Missing required field: sysId'));

        var startDelay = fields['startDelay'];
        startDelay = PDUtils.updateStartWithDelay(startDelay);

        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_LANE);
        var laneGr = gr.get(sysId);

        if (!laneGr)
            throw (gs.getMessage('Unable to find lane with id: {0}', sysId));

        this._setFieldsOnGr(fields, gr);

        if (!gr.update())
            throw gs.getMessage('Unable to update lane {0}: {1}', [sysId, laneGr.getLastErrorMessage()]);

        var lane = this._getLaneFromGR(gr);
        lane.startDelay = {
            timerAttributes: startDelay
        };
        return lane;
    },

    deleteLanes: function(laneIdsStr) {
        if (!(laneIdsStr || '').length)
            throw (gs.getMessage('No lane ids provided for deletion'));

        var laneGr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_LANE);

        laneGr.addQuery(PDConstants.FIELDS.SYS_ID, 'IN', laneIdsStr);
        laneGr.query();
        laneGr.deleteMultiple();
    },

    _setFieldsOnGr: function(fields, gr) {
        for (var fieldName in fields) {
            var fieldValue = fields[fieldName];
            var snakeCaseFieldName = PDUtils.camelcaseToSnakecase(fieldName);
            switch (snakeCaseFieldName) {
                case PDConstants.FIELDS.SYS_ID: //we never want to set the sys id of an update
                    continue;
                case PDConstants.FIELDS.START_RULE:
                    this._handleStartRuleChange(fieldValue, gr);
                    break;
                case PDConstants.FIELDS.PROCESS_SCHEMA_VERSION:
                    gr[PDConstants.FIELDS.PROCESS_SCHEMA_VERSION] = fields['processSchemaVersion']; //gr.setValue doesn't work here because schema_version is not a valid field
                    break;
                default:
                    PDUtils.setGlideRecordFieldValue(gr, snakeCaseFieldName, fieldValue);
            }
        }
    },

    _handleStartRuleChange: function(startRulePayload, gr) {
        var definition = startRulePayload.definition;
        gr.setValue(PDConstants.FIELDS.START_RULE, definition);
        if (definition === PDConstants.START_RULES.AFTER_LANES) {
            var lanes = (startRulePayload.vars || {}).lanes || [];
            gr.getElement(PDConstants.FIELDS.START_RULE_VAR_AFTER_LANES).setValue(lanes);
        }
    },
    _getLaneFromGR: function(gr) {
        var FIELDS = PDConstants.FIELDS;
        var getStartRuleVarsLanes =
            gr.getElement(PDConstants.FIELDS.START_RULE_VAR_AFTER_LANES);
        var startRuleVarValueLanes = getStartRuleVarsLanes &amp;&amp; getStartRuleVarsLanes.getValue();
        if (startRuleVarValueLanes)
            startRuleVarValueLanes = getStartRuleVarsLanes.split(',');

        return {
            sys_id: PDUtils.getFieldReturnValue(gr, FIELDS.SYS_ID),
            label: PDUtils.getFieldReturnValue(gr, FIELDS.LABEL),
            color: PDUtils.getFieldReturnValue(gr, FIELDS.COLOR),
            active: PDUtils.getFieldReturnValue(gr, FIELDS.ACTIVE),
            description: PDUtils.getFieldReturnValue(gr, FIELDS.DESCRIPTION),
            process_definition: PDUtils.getFieldReturnValue(gr, FIELDS.PROCESS_DEFINITION),
            sys_created_on: PDUtils.getFieldReturnValue(gr, FIELDS.SYS_CREATED_ON),
            sys_updated_on: PDUtils.getFieldReturnValue(gr, FIELDS.SYS_UPDATED_ON),
            startRule: {
                definition: gr.getValue(FIELDS.START_RULE),
                vars: {
                    lanes: startRuleVarValueLanes || []
                }
            },
            restart_rule: PDUtils.getFieldReturnValue(gr, FIELDS.RESTART_RULE)
        };

    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-21 00:44:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a333bec977e0a1108188ceec8e5a99f5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PDLaneRepository&lt;/sys_name&gt;
        &lt;sys_package display_value="Process Automation Designer Core - Model" source="com.glide.pad.core.model"&gt;0ae817db47220210cd4e1ce4316d431f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a333bec977e0a1108188ceec8e5a99f5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-06 03:53:18&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:28</sys_created_on>
        <sys_id>f6c8349183341210c6695855eeaad374</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PDLaneRepository</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f6c8349183341210c6695855eeaad374</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
