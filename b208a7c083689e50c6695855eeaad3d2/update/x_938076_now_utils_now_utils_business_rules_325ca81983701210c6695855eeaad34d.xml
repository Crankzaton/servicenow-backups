<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message><![CDATA[<p>Table Name is already defined for this Workspace.</p>]]></message>
        <name>Sanitize Renderer configuration</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var isRecordType = current.getValue('renderer_type') == "record" ||
  current.getDisplayValue('type_ext').toLowerCase() === "record";
 var fixFieldsForRecordType = function () {
  // Clear render_type if type_ext is set
  if (current.type_ext)
   current.renderer_type = "";

  // make sure only either custom renderer or workspace module is provided
  // based on the module flag for 'record' renderer type
  if (current.module_flag) {
   // empty custom_renderer if module_flag is true
   current.custom_renderer = "";
   current.custom_renderer_tag = "";
  } else {
   // empty workspace_module if module_flag is false
   current.workspace_module = "";
  }
 };
 var fixFieldsForNonRecordType = function () {
  if (current.type_ext)
   current.renderer_type = "";

  // explicitly set table to null in case of improper table updates
  if (current.table)
   current.table = "";

  // empty workspace_module if module_flag is false
  if (!current.module_flag)
   current.workspace_module = "";
 };
 var enforceUniqueForNonRecordType = function () {
  var wsConfig = current.workspace_config;
  var isUpdate = current.operation() == 'update';
  var isInsert = current.operation() == 'insert';
  var typeChanged = current.renderer_type != previous.renderer_type;
  var typeExists = false;
  var renderers = new GlideRecord('sys_aw_renderer');
  if (current.type_ext)
   renderers.addQuery('type_ext', current.type_ext);
  else
   renderers.addQuery('renderer_type', current.renderer_type);
  renderers.addQuery('workspace_config', wsConfig);
  renderers.query();
  typeExists = renderers.hasNext();

  // if it is an update with renderer type changed to an existing one, then abort
  if (isUpdate && typeExists && typeChanged) {
   gs.addErrorMessage(gs.getMessage(
    "Renderer Type '{0}' is already configured for this workspace.",
    current.getDisplayValue('type_ext')));
   current.setAbortAction(true);
  }
  // if it is an insert with renderer type that already exists, then abort
  else if (isInsert && typeExists) {
   gs.addErrorMessage(gs.getMessage(
    "Renderer Type '{0}' is already configured for this workspace.",
    current.getDisplayValue('type_ext')));
   current.setAbortAction(true);
  }
 };

 if (isRecordType) {
  fixFieldsForRecordType();
 } else {
  fixFieldsForNonRecordType();
  enforceUniqueForNonRecordType();
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:07</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>325ca81983701210c6695855eeaad34d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Sanitize Renderer configuration</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_325ca81983701210c6695855eeaad34d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:07</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=325ca81983701210c6695855eeaad34d"/>
</record_update>
