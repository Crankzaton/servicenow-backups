<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Clear Conflicts</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*undefined when async or display*/) {

 // Preconditions for running conflict detection satisfied so return
 if (ChangeCheckConflicts.allowConflictDetection(current, previous))
  return;
  
 // Update conflict fields for current change_request record
 current.conflict_status = 'Not Run';
 current.conflict_last_run = "";
 
 var currentChgSysId = current.getUniqueValue();
 var chgSysIds = {};
 var conflictGR = new GlideRecord("conflict");
 conflictGR.addQuery("change", currentChgSysId).addOrCondition("conflicting_change", currentChgSysId);
 conflictGR.query();
 while (conflictGR.next()) {
  var changeSysId = conflictGR.getValue("change");
  if (!gs.nil(changeSysId))
   chgSysIds[changeSysId] = null;
  var conflictChangeSysId = conflictGR.getValue("conflicting_change");
  if (!gs.nil(conflictChangeSysId))
   chgSysIds[conflictChangeSysId] = null;
  conflictGR.deleteRecord();
 }

 delete chgSysIds[currentChgSysId];

 // Update associated change_request conflict information
 for (var chgSysId in chgSysIds) {
  conflictGR = new GlideAggregate("conflict");
  conflictGR.addQuery("change", chgSysId).addOrCondition("conflicting_change", chgSysId);
  conflictGR.addAggregate("COUNT");
  conflictGR.query();
  conflictGR.next();
  if (parseInt(conflictGR.getAggregate("COUNT")) === 0) {
   var chgGR = new GlideRecord("change_request");
   if (chgGR.get(chgSysId)) {
    chgGR.conflict_status = "Not Run";
    chgGR.conflict_last_run = "";
    chgGR.update();
   }
  }
 }

})(current, typeof previous != 'undefined' ?  previous : null);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c76b649183701210c6695855eeaad372</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Clear Conflicts</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_c76b649183701210c6695855eeaad372</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:03</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=c76b649183701210c6695855eeaad372"/>
</record_update>
