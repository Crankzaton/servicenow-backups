<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>66d7724707fc301028ef0a701ad3005a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nlu_workbench.NLUCoreUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Helper functions / utilities to access NLU Workbench code tables / data&lt;/description&gt;
        &lt;name&gt;NLUCoreUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NLUCoreUtils = Class.create();

(function() {

    var coreTables = global.NLUConstants.tables;
    var DEFAULT_VERSION = 'latest';

    NLUCoreUtils.toLower = function(x) {
        return x.trim().toLowerCase();
    };

    NLUCoreUtils.getIntentGrByName = function(name, filter) {
        var intentGr = new GlideRecord(coreTables.SYS_NLU_INTENT);
        intentGr.addQuery('name', 'IN', name);
        if (filter) intentGr.addEncodedQuery(filter);
        intentGr.query();

        return intentGr;
    };

    NLUCoreUtils.getTrainedIntentNamesMap = function(modelIds, transformer) {
        if (!modelIds) return [];

        var intentNamesMap = {};

        var gr = new GlideRecord(coreTables.SYS_NLU_MODEL);
        if (Array.isArray(modelIds))
            gr.addQuery('sys_id', 'IN', modelIds.join());
        else
            gr.addQuery('sys_id', 'IN', modelIds);
        gr.query();
        while (gr.next()) {
            var intentNames = [];
            try {
                var parlo = new global.NLUParloIntegrator(gr);
                var trainedSolution = global.NLUParloIntegrator.getLastTrainedVersion(parlo.getSolution());
                var propsJson = JSON.parse(trainedSolution.getProperties());

                propsJson.authoringModel.intents.forEach(function(intentData) {
                    intentNames.push(
                        transformer ? transformer(intentData.name) : intentData.name
                    );
                });
            } catch (ex) {
                gs.error('Failed to get trained intents for model: ' + gr.getUniqueValue());
            }
            intentNamesMap[gr.getUniqueValue()] = {
                name: gr.getValue('name'),
                intents: intentNames.filter(function(intent) {
                    return intent != 'no_intent';
                })
            };
        }

        return intentNamesMap;
    };

    NLUCoreUtils.getIntentIdsFromModelName = function(modelName) {
        var intentIds = [];

        var intentGr = new GlideRecord(coreTables.SYS_NLU_INTENT);
        intentGr.addEncodedQuery('enableISEMPTY^ORenable=true');
        intentGr.addQuery('model.name', modelName);
        intentGr.query();
        while (intentGr.next()) {
            intentIds.push(intentGr.getUniqueValue());
        }
        return intentIds;
    };

    NLUCoreUtils.getIntentCount = function(filter) {
        var intentGa = new GlideAggregate(coreTables.SYS_NLU_INTENT);
        intentGa.addAggregate('COUNT');
        if (filter) intentGa.addEncodedQuery(filter);
        intentGa.query();
        return intentGa.next() ? intentGa.getAggregate('COUNT') : 0;
    };

    NLUCoreUtils.getPercentage = function(score) {
        var num = (score || 0) * 100;
        var decimalFraction = Math.pow(10, 2);
        return (Math.round(num * decimalFraction) / decimalFraction).toString();
    };

    NLUCoreUtils.getFamilyVersion = function() {
        var version;
        if (gs.getProperty('com.glide.embedded_help.version')) {
            version = gs.getProperty('com.glide.embedded_help.version').toLowerCase();
        } else {
            var gr = new GlideRecord('sys_upgrade_history');
            gr.addEncodedQuery('from_version!=n/a');
            gr.setLimit('1');
            gr.orderByDesc('upgrade_finished');
            gr.query();
            if (gr.next() &amp;&amp; gr.to_version.split("-").length &gt; 1) {
                version = gr.to_version.split("-")[1];
            }
        }
        return version || DEFAULT_VERSION;
    };

    NLUCoreUtils.getSuportedLanguages = function(releaseFeature) {
        var data = [];
        if (releaseFeature === 'optimize') {
            var supportedLanguages = NLUBatchTestIntegrator.getOptimizeSupportedLanguages();
            data = Object.keys(supportedLanguages &amp;&amp; supportedLanguages.optimizeSupportMap || {});
        }
        return data;
    };

    NLUCoreUtils.getAssignedEditors = function(modelId) {
        var modelStatusGr = new GlideRecord(coreTables.SYS_NLU_MODEL_STATUS);
        modelStatusGr.addQuery('model.sys_id', modelId);
        modelStatusGr.query();
        if (modelStatusGr.next()) {
            var authorList = modelStatusGr.getValue('author');
            return authorList ? authorList.split(',') : [];
        }
    };

    NLUCoreUtils.updateEditorsForModel = function(modelId, authorsList) {
        var modelStatusGr = new GlideRecord(coreTables.SYS_NLU_MODEL_STATUS);
        modelStatusGr.addQuery('model.sys_id', modelId);
        modelStatusGr.query();
        if (modelStatusGr.next()) {
            modelStatusGr.setValue('author', authorsList);
            return modelStatusGr.update();
        }
    }

    NLUCoreUtils.prototype = {
        initialize: function() {},

        type: 'NLUCoreUtils'
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-06-22 03:31:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;66d7724707fc301028ef0a701ad3005a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;162&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NLUCoreUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="NLU Workbench - Advanced Features" source="sn_nlu_workbench"&gt;31f5f491c3a710100bf407720f40ddf4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="NLU Workbench - Advanced Features"&gt;31f5f491c3a710100bf407720f40ddf4&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_66d7724707fc301028ef0a701ad3005a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-29 09:23:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:03</sys_created_on>
        <sys_id>afd63c1d83f01210c6695855eeaad363</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NLUCoreUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_afd63c1d83f01210c6695855eeaad363</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:03</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
