<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2a2e54780a0a0b0500957d4debce8ed6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.Attachment&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Handler for attachment processing&lt;/description&gt;
        &lt;name&gt;Attachment&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");

var Attachment = Class.create();
Attachment.prototype = {

   ATTACHMENT_INDEXED : 'attachment_index',
   ATTACHMENT_EXTRACTOR : 'attachment_extractor',
   ATTACHMENT_EXTENSION : 'extension', 
   
   initialize: function() {
      this.attachment = null;
   },
   
   setRecord: function(attachment) {
      this.attachment = attachment;
   },

   isIndexed: function() {
      if (this.attachment == null)
         return false;

      var gr = new GlideRecord(this.getTable());
      gr.initialize();
      if (!gr.isValid())
         return false;

      var indexAttachment = new GlideTSUtil().getTableLevelConfiguration(this.getTable(), this.ATTACHMENT_INDEXED);
      if (!indexAttachment || 'true' != indexAttachment.toLowerCase().trim())
         return false;

      if (!this._indexedType())
         return false;

      return true;
   },
   
   getTable: function() {
      return this.attachment.table_name.toString();
   },

   getTableID: function() {
      return this.attachment.table_sys_id.toString();
   },

   getTarget: function() {
      var gr = new GlideRecord(this.getTable());
      gr.get(this.getTableID());
      return gr;
   },

   getTerms: function(id) {
      var att = new GlideAttachmentIndexDocument(id);
      return att.getTerms(true);
   },

   _indexedType: function() {
      if (this.attachment == null)
         return false;

      var type = this.getType();
      return GlideAttachmentIndexTypes.isIndexed(type);
   },

   getType: function() {
      var att_name = this.attachment.file_name.toString();
      var att_parts = att_name.split(".");
      return att_parts[att_parts.length-1].toLowerCase();
   },
   
   setTargetTable: function(name) {
     this.tablename = name;
   },
   
   setTargetID: function(id) {
     this.targetID = id;
   },
   
   setTarget: function(gr) {
     this.target = gr;
   },
   
   setFilename: function(name) {
     this.filename = name;
   },
   
   setContentType: function(type) {
     this.contentType = type;
   },
   
   setValue: function(val) {
     this.value = val;
   },
   
   attach: function() {
     if(this.target == null) {
       //build target via gliderecord call
       if(this.tablename == null || this.targetID == null)
         return "Table name and/or target sys id are null. Please specify valid parameters.";
       var targetRecord = new GlideRecord(this.tablename);
       if(!targetRecord.get(this.targetID))
         return "Could not find a record in table '" + this.tablename + "' with sys_id '" + this.targetID + "'";
       this.setTarget(targetRecord);
     }
     
     var sa = new GlideSysAttachment();
     var attachmentId = sa.write(this.target, this.filename, this.contentType, this.value);
     if(attachmentId)
         return "Attachment created and attached to '"+ this.tablename+"' record with sys_id: '"+ this.targetID+"'";
     else
         return "Attachment creation failed";
   },
   
   write: function(gr, filename, content_type, value) {
     this.setTarget(gr);
     this.setFilename(filename);
     this.setContentType(content_type);
     this.setValue(value);
     return this.attach();
   },
   
   write: function(name, id, filename, content_type, value) {
     this.setTargetTable(name);
     this.setTargetID(id);
     this.setFilename(filename);
     this.setContentType(content_type);
     this.setValue(value);
     return this.attach();
   },
      
   type: 'Attachment'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2009-08-17 21:06:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2a2e54780a0a0b0500957d4debce8ed6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Attachment&lt;/sys_name&gt;
        &lt;sys_package display_value="System (glidesoft)" source="glidesoft"&gt;5113bc203c31311068bcf327dfe37f8c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2a2e54780a0a0b0500957d4debce8ed6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-27 18:24:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:54</sys_created_on>
        <sys_id>c711bc5983b01210c6695855eeaad352</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Attachment</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c711bc5983b01210c6695855eeaad352</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
