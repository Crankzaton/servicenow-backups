<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2548f7cceb3d2110249e8d835d52286a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OnCallContactPrefTemplateSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;OnCallContactPrefTemplateSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var OnCallContactPrefTemplateSNC = Class.create();
OnCallContactPrefTemplateSNC.prototype = {
    initialize: function() {
		this.TABLES = {
			CONTACT_PREFERENCE_TEMPLATE: "on_call_template_contact_preference",
			CONTACT_ATTEMPT_TEMPLATE: "on_call_template_contact_attempt",
			ESCALATION_SET: "cmn_rota_escalation_set",
			SHIFT_CONTACT_PREFERENCE: "cmn_rota_contact_preference"
		};

		this.FIELDS = {
			CONTACT_ATTEMPT_TEMPLATE: {
				CONTACT_ATTEMPT: "contact_attempt",
				ATTEMPT_NAME: "attempt_name",
				COMMUNICATION_TYPE: "communication_type",
				PREFERENCE_TEMPLATE: "preference_template"
			},
			SHIFT_CONTACT_PREFERENCE: {
				TYPE: "type",
				ESCALATION_SET: "cmn_rota_escalation_set",
				CONTACT_ATTEMPT: "contact_attempt",
				COMMUNICATION_TYPE: "communication_types"
			}
		};

		this.CONTACT_PREF_TYPE = "escalation_set";
    },

	_getRecord: function(table, sysId) {
		var gr = new GlideRecord(table);
		if (gr.get(sysId))
			return gr;
		return null;
	},

	_getContactAttemptTemplates: function(contactPrefTemplateSysId) {
		var contactAttemptTemplate = new GlideRecord(this.TABLES.CONTACT_ATTEMPT_TEMPLATE);
		contactAttemptTemplate.addQuery(this.FIELDS.CONTACT_ATTEMPT_TEMPLATE.PREFERENCE_TEMPLATE, contactPrefTemplateSysId);
		contactAttemptTemplate.orderBy(this.FIELDS.CONTACT_ATTEMPT_TEMPLATE.CONTACT_ATTEMPT);
		contactAttemptTemplate.query();

		return contactAttemptTemplate;
	},

	_copyAttempts: function(contactAttemptTemplateGr, escalationSetGr) {
		var contactPreferenceGr = new GlideRecord(this.TABLES.SHIFT_CONTACT_PREFERENCE);
		contactPreferenceGr.initialize();

		contactPreferenceGr[this.FIELDS.SHIFT_CONTACT_PREFERENCE.CONTACT_ATTEMPT] = contactAttemptTemplateGr[this.FIELDS.CONTACT_ATTEMPT_TEMPLATE.CONTACT_ATTEMPT];
		contactPreferenceGr[this.FIELDS.SHIFT_CONTACT_PREFERENCE.COMMUNICATION_TYPE] = contactAttemptTemplateGr[this.FIELDS.CONTACT_ATTEMPT_TEMPLATE.COMMUNICATION_TYPE];
		contactPreferenceGr[this.FIELDS.SHIFT_CONTACT_PREFERENCE.TYPE] = this.CONTACT_PREF_TYPE;
		contactPreferenceGr[this.FIELDS.SHIFT_CONTACT_PREFERENCE.ESCALATION_SET] = escalationSetGr.getUniqueValue();

		contactPreferenceGr.insert();
	},

	_isAttemptExistAlready: function(escalationSetSysId) {
		var contactPrefAggr = new GlideAggregate(this.TABLES.SHIFT_CONTACT_PREFERENCE);
		contactPrefAggr.addQuery(this.FIELDS.SHIFT_CONTACT_PREFERENCE.ESCALATION_SET, escalationSetSysId);
		contactPrefAggr.addAggregate("COUNT");
		contactPrefAggr.query();

		if(contactPrefAggr.next() &amp;&amp; contactPrefAggr.getAggregate("COUNT") &gt; 0) {
			return true;
		}

		return false;
	},

	/*
	* Copy contact preference attempts based on the contact preference attempt templates
	*/
	copyContactPreferences: function(templateSysId, escalationSetSysId) {
		var result = {
			error: "",
			warning: ""
		};
		var contactPreferenceTemplateGr = this._getRecord(this.TABLES.CONTACT_PREFERENCE_TEMPLATE, templateSysId);
		if (!contactPreferenceTemplateGr) {
			result.error = gs.getMessage("Provided template sys_id is not valid");
			return result;
		}

		var escalationSetGr = this._getRecord(this.TABLES.ESCALATION_SET, escalationSetSysId);
		if (!escalationSetGr) {
			result.error =  gs.getMessage("Provided escalation set sys_id is not valid");
			return result;
		}

		if (this._isAttemptExistAlready(escalationSetSysId)) {
			result.error = gs.getMessage("Contact preferences already exist");
			return result;
		}

		var contactAttemptTemplateGr = this._getContactAttemptTemplates(templateSysId);
		while(contactAttemptTemplateGr.next()) {
			this._copyAttempts(contactAttemptTemplateGr, escalationSetGr);
		}

		return result;
	},

	deleteContactPreferenceAttempts: function (escalationSetSysId) {
		var contactPrefGr = new GlideRecord(this.TABLES.SHIFT_CONTACT_PREFERENCE);
		contactPrefGr.addQuery(this.FIELDS.SHIFT_CONTACT_PREFERENCE.ESCALATION_SET, escalationSetSysId);
		contactPrefGr.query();

		contactPrefGr.setWorkflow(false); 
		contactPrefGr.deleteMultiple();
	},

    type: 'OnCallContactPrefTemplateSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-21 06:01:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2548f7cceb3d2110249e8d835d52286a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OnCallContactPrefTemplateSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="On-Call Scheduling" source="com.snc.on_call_rotation"&gt;4bca78ec3cf1311068bcf327dfe37f86&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2548f7cceb3d2110249e8d835d52286a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-08 19:27:49&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:26</sys_created_on>
        <sys_id>5c01345983b01210c6695855eeaad3ef</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>OnCallContactPrefTemplateSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5c01345983b01210c6695855eeaad3ef</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:26</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
