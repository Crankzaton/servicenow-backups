<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>22f2da2b0f35201039534ee7c8767e16</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFSettingUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to handle the LF Settings table. Customers are not expected to override these core functions.&lt;/description&gt;
        &lt;name&gt;LFSettingUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFSettingUtils = Class.create();
LFSettingUtils.prototype = {
    tableName: 'sn_lf_setting',

    initialize: function() {
        this.lfConstants = new LFConstants();
        this.settings = this.lfConstants.SETTING_KEYS;
    },

    getLFSetting: function(artifactInternalName, targetLanguageSysId) {
        var targetLanguageSettings = {};
        var settingRecordDetails = this.getLFSettingRecord(artifactInternalName, targetLanguageSysId);
        if (settingRecordDetails.exists) {
            var gr = settingRecordDetails.record;
            var settingKeys = Object.keys(this.settings);
            for (var idx = 0; idx &lt; settingKeys.length; idx++) {
                var settingKeyName = settingKeys[idx];
                var settingKey = this.settings[settingKeyName];
                switch (settingKeyName) {
                    case "TMSName":
                        targetLanguageSettings[settingKey] = this._getName("sn_lf_tms_config", gr.getValue("tms_reference"));
                        break;
                    case "EmailSubflowName":
                        targetLanguageSettings[settingKey] = this._getName("sys_hub_flow", gr.getValue("email_subflow"));
                        break;
                    case "AutoTranslationMode":
                        targetLanguageSettings[settingKey] = gr.getValue("automate_translate");
                        break;
                    case "TMSAdditionalInfo":
                        targetLanguageSettings[settingKey] = this._getTMSAdditionalInfo(gr.getValue("tms_additional_info"));
                        break;
                    default:
                        targetLanguageSettings[settingKey] = gr.getValue(settingKey);
                }
            }
        }
        return targetLanguageSettings;
    },

    fetchConfiguredLanguages: function(artifactInternalName) {
        var languages = {};
        var gr = new GlideRecord(this.tableName);
        gr.addQuery("artifact", "IN", ["all_artifacts", artifactInternalName]);
        gr.query();
        while (gr.next()) {
            var languageIds = gr.getValue('languages').split(',');
            var languageNames = gr.getDisplayValue('languages').split(',');
            for (var i = 0; i &lt; languageIds.length; i++) {
                languages[languageIds[i]] = languageNames[i];
            }
        }
        return languages;
    },

    getLFSettingRecord: function(artifactInternalName, targetLanguageSysId) {
        var gr = new GlideRecord(this.tableName);
        gr.addQuery("languages", "CONTAINS", targetLanguageSysId);
        gr.addQuery("artifact", "IN", ["all_artifacts", artifactInternalName]);
        gr.query();
        return {
            "exists": gr.next(),
            "record": gr
        };
    },

    checkIfLanguageCodeIsConfigured: function(artifactInternalName, targetLanguageCode) {
        return this.getLFSettingRecord(artifactInternalName, new LFUtils().getLanguageCodeDetails(targetLanguageCode).sysId).exists;
    },

    getAllTranslatorChoices: function() {
        var translatorsChoiceList = new GlideChoiceList();
        if (GlidePluginManager.isActive(this.lfConstants.DYNAMIC_TRANSLATION_PLUGIN_ID)) {
            var gr = new GlideRecord(this.lfConstants.TRANSLATOR_CONFIGURATION_TABLE);
            gr.query();
            while(gr.next()){
                var translatorName = gr.getValue('name');
                translatorsChoiceList.add(translatorName, translatorName);
            }
        }
        return translatorsChoiceList;
    },

    _getName: function(tableName, sysId) {
        var gr = new GlideRecord(tableName);
        gr.get(sysId);
        return gr.getValue("name");
    },

    _getTMSAdditionalInfo: function(tmsAdditionalInfo) {
        return (tmsAdditionalInfo) ? JSON.parse(tmsAdditionalInfo) : {};
    },

    type: 'LFSettingUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-25 16:15:18&lt;/sys_created_on&gt;
        &lt;sys_id&gt;22f2da2b0f35201039534ee7c8767e16&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFSettingUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;a4dd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_22f2da2b0f35201039534ee7c8767e16&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-10-13 06:05:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:09</sys_created_on>
        <sys_id>08f0b05983b01210c6695855eeaad330</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFSettingUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_08f0b05983b01210c6695855eeaad330</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:09</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
