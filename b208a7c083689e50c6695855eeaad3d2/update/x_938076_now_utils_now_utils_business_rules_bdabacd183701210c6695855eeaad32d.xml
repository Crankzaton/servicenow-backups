<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>MID property check</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /* null when async */ ) {
 validatePropertyValue();
 checkDuplicateProperty();
 
 function validatePropertyValue() {
  // If any field other than value is updated no need to validate the property value
  if (current.operation() == 'update' && !current.value.changes())
   return;
  
  // *** Validate property value if property is a known non-legacy MIDConfigParameter name
  var mcp = SncMIDConfigParameter;
  var param = mcp.byName(current.name);
  if (param) {
   try {
    param.parseAndValidateValue(current.value); // Ignore return value, throws exception if value is invalid
   } catch (e) {
    var valMsg = gs.getMessage("Invalid value: {0}", e.getMessage() != null ? e.getMessage() + '' : e + '');
    gs.addErrorMessage(valMsg);
    current.setAbortAction(true);
   }
  }
 }

 function checkDuplicateProperty() {
  // *** Check for duplicate property record in all visible domains
 
  // No need to check for the duplicate record if the updated field is not property name or MID Server or the domain
  if (current.operation() == 'update' && 
    !(current.name.changes() || current.ecc_agent.changes() || current.sys_domain.changes()))
   return;
  
  var isDomainSeparated = gs.getProperty("glide.sys.domain.use_record_domain_for_processes") == 'true';
  var gr = new GlideRecord('ecc_agent_property');
  gr.addQuery('name', current.name);
  gr.addQuery('ecc_agent', current.ecc_agent);
  if (isDomainSeparated) {

   // Since we cannot have addQuery for domain, and we query based on the name and assigned Mid Server
   // If we update the record and we only change the domain, the updated record is in the result of 
   // query and we need to exclude it
   if (current.operation() == 'update' && current.sys_domain.changes()) {
    gr.addQuery('sys_id', '!=', current.sys_id + '');
   }

   // Make sure we don't count the override record as duplicate
   // Since the business rule is running before insert/update, the override record is still visible
   // After inserting the record with 'sys_overrides, the parent record is not visible to child domain
   if(current.sys_overrides) {
    gr.addQuery('sys_id', '!=', current.sys_overrides + '');
   }
   gr.addDomainQuery(current.sys_domain + '');
   
  }
  gr.query();
  
  if (!gr.hasNext())
   return;

  gs.addErrorMessage(gs.getMessage('Cannot create a duplicate MID server property record'));
  if (isDomainSeparated) {
   gs.warning('Check for duplicate name + ecc_agent in all accessible domains on ecc_agent_property found duplicate record');
  } else {
   gs.warning('Check for duplicate name + ecc_agent on ecc_agent_property found duplicate record');
  }
  current.setAbortAction(true);
 }

}(current, previous));]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>bdabacd183701210c6695855eeaad32d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MID property check</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_bdabacd183701210c6695855eeaad32d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:03</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=bdabacd183701210c6695855eeaad32d"/>
</record_update>
