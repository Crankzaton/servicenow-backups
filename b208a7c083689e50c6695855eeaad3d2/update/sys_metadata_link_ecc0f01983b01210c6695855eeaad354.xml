<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1c001bc6c7438010296ad3de17c260f1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_hr_core.HRDocumentTemplateAjaxSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;HRDocumentTemplateAjaxSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var HRDocumentTemplateAjaxSNC = Class.create();
HRDocumentTemplateAjaxSNC.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    /**
     * Description: Generate document for PDF document template.
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {sysId} Generated document ID
     */
    generateDocumentForPdfTemplate: function() {
        var caseId = this.getParameter('sysparm_caseId');
        var caseTable = this.getParameter('sysparm_caseTable');

        var caseGr = new GlideRecord(caseTable);
        if ((!caseGr.get(caseId)) || caseGr.getValue('assigned_to') != gs.getUserID())
            return null;

        return new HRDocumentTemplateUtils().generateDocumentForPdf(caseGr, caseId);
    },

    /**
     * Description: generates a pdf document for the HTML document template
     * @param {string} documentTemplateId
     * @param {html_script} prefilledBody 
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {string} Generated document ID
     */
    generateDocumentForHtml: function() {
        var htmlBody = this.getParameter('sysparm_prefilledBody');
        var caseTable = this.getParameter('sysparm_caseTable');
        var caseId = this.getParameter('sysparm_caseId');

        var caseGr = new GlideRecord(caseTable);
        if ((!caseGr.get(caseId)) || caseGr.getValue('assigned_to') != gs.getUserID())
            return null;

        return new sn_hr_core.HRDocumentTemplateUtils().generateDocumentForHtml(htmlBody, caseGr);

    },

    /**
     * Description: Get type of document template.
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {string} Document template glide record class name for valid ID, else null
     */
    getDocumentTemplateType: function() {
        var caseId = this.getParameter('sysparm_caseId');

        var caseGr = new GlideRecord('sn_hr_core_case');
        if ((!caseGr.get(caseId)) || caseGr.getValue('assigned_to') != gs.getUserID())
            return null;

        var documentTemplateGr = new GlideRecord('sn_doc_template');
        if (documentTemplateGr.get(caseGr.getValue('document_template')))
            return documentTemplateGr.getRecordClassName();

        return null;
    },

    /**
     * Description: gives prefilled body after removing the tokens
     * @param {html_script} body 
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {html_script} prefill html body after removing tokens
     */
    prefilledBody: function() {
        var body = this._prefilledBodyHelper();
        if (!body)
            return null;
        return new sn_doc.HtmlTemplateUtils()._removeTokens(body);
    },

    /**
     * Description: gives prefilled body after removing the invalid tokens while preserving some special tokens such as signature and the provided ones.
     * @param {html_script} body 
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {html_script} prefill html body after removing tokens
     */
    prefilledBodyWithSpecialTokens: function() {
        var body = this._prefilledBodyHelper();
        if (!body)
            return null;
        return new sn_doc.HtmlTemplateUtils().removeInvalidTokens(body);
    },

    /**
     * Description: helper function which gives prefilled body
     * @return {html_script} prefill html body
     */
    _prefilledBodyHelper: function() {
        var body = this.getParameter('sysparm_body');
        var caseTable = this.getParameter('sysparm_caseTable');
        var caseId = this.getParameter('sysparm_caseId');

        var caseGr = new GlideRecord(caseTable);
        if ((!caseGr.get(caseId)) || caseGr.getValue('assigned_to') != gs.getUserID())
            return null;

        var templateID = caseGr.getValue('document_template');
        return new sn_doc.HtmlTemplateUtils().getPrefilledBody(body, caseTable, caseId, '', templateID);
    },

    /**
     * Description: Returns html document template body  
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @param {string} documentTemplateId
     * @return {html_script}
     */
    getDocumentBody: function() {
        var caseTable = this.getParameter('sysparm_caseTable');
        var caseId = this.getParameter('sysparm_caseId');

        var caseGr = new GlideRecord(caseTable);
        if ((!caseGr.get(caseId)) || caseGr.getValue('assigned_to') != gs.getUserID())
            return null;

        if (!gs.nil(caseGr.html_template_body_override))
            return caseGr.html_template_body_override;
        var docGr = new GlideRecord("sn_doc_html_template");
        if (docGr.get(caseGr.getValue('document_template')))
            return docGr.html_script_body;

    },

    /**
     * Description: Stores document body edited from HR case in html_template_body_override column 
     * @param {html_script} body 
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {boolean}
     */
    setDocumentBody: function() {
        var newBody = this.getParameter('sysparm_body');
        var caseTable = this.getParameter('sysparm_caseTable');
        var caseId = this.getParameter('sysparm_caseId');

        var caseGr = new GlideRecord(caseTable);
        if (caseGr.get(caseId) &amp;&amp; caseGr.canWrite()) {
            caseGr.html_template_body_override.setValue(newBody);
            if (caseGr.update())
                return true;
        }
        return false;
    },

    /**
     * Description: Initiate Document task flow manually usign action : Initiate Document Tasks
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @param {json} html template body
     * @return {boolean} true if flow triggered successfully, else false
     */
    initiateDocumentTasks: function() {
        var caseTable = this.getParameter('sysparm_caseTable');
        var caseId = this.getParameter('sysparm_caseId');

        var caseGr = new GlideRecord(caseTable);
        if ((!caseGr.get(caseId)) || caseGr.getValue('assigned_to') != gs.getUserID())
            return false;

        if (caseGr.document_template.sys_class_name.toString() == "sn_doc_html_template") {
            var body = this.getParameter('sysparm_body');
            return new HRDocumentTemplateUtils().initiateDocumentTasks(caseGr, body);
        }

        return new HRDocumentTemplateUtils().initiateDocumentTasks(caseGr);
    },

    /**
     * Description: Gets matching document template based on document template category, user and table
     * @param {string} document_template_category
     * @param {string} user
     * @param {string} table_name
     * @return {string}
     */
    getMatchingDocumentTemplate: function() {
        var docTemplateCategory = this.getParameter('sysparm_docTemplateCategory');
        var user = this.getParameter('sysparm_user');
        var tableName = this.getParameter('sysparm_tableName');
        var answer = new sn_hr_core.HRDocumentTemplateUtils().getFilteredTemplates(docTemplateCategory, user, tableName);

        return answer &amp;&amp; (answer.length == 1) ? answer[0] : '';
    },

    /**
     * Description: get prefilled document as base64 
     * @param {string} caseTable 
     * @param {SysId} caseId
     * @return {{status: string, message: string, pdf_name:string, document_base64: string}}
     */
    getPreFilledDocumentAsBase64: function() {
        var caseTable = this.getParameter('sysparm_caseTable');
        var caseId = this.getParameter('sysparm_caseId');
        var caseGr = new GlideRecord(caseTable);
        if (caseGr.get(caseId) &amp;&amp; caseGr.canRead()) {
            response = new sn_doc.GenerateDocumentAPI().getPreFilledDocumentAsBase64(
                caseId, caseGr.getValue("document_template"));
            return JSON.stringify(response);
        }
    },

    /**
     * Description: Check if the document tasks are completed for a case
     * @param {SysId} caseId
     * @return {boolean}
     */
    documentTasksCompleted: function() {
        var caseId = this.getParameter('sysparm_caseId');
        var gr = new GlideRecord("sn_hr_core_case");
        if (gr.get(caseId) &amp;&amp; gr.canRead())
            return new sn_hr_core.HRDocumentTemplateUtils().docTasksCompleted(caseId);
        else
            return null;
    },

	/**
	 * Description: Check if the document tasks are initiated for a case
	 * @param {string} table
	 * @param {SysId} sysId
	 * @return {boolean}
	 */
	documentTasksInitiated: function() {
		var caseTable = this.getParameter('sysparm_caseTable');
		var sysId = this.getParameter('sysparm_sysId');

		if (!new hr_Utils().isExtendedFromCase(caseTable)) return false;

		var gr = new GlideRecordSecure(caseTable);
		if (!gr.get(sysId)) return false;

		return gr.doc_tasks_initiated;
	},

    type: 'HRDocumentTemplateAjaxSNC'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-02-20 10:25:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1c001bc6c7438010296ad3de17c260f1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;206&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;HRDocumentTemplateAjaxSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Human Resources: Core" source="sn_hr_core"&gt;d4ac3fff5b311200a4656ede91f91af2&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Human Resources: Core"&gt;d4ac3fff5b311200a4656ede91f91af2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1c001bc6c7438010296ad3de17c260f1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-05 19:40:50&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:21</sys_created_on>
        <sys_id>ecc0f01983b01210c6695855eeaad354</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>HRDocumentTemplateAjaxSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ecc0f01983b01210c6695855eeaad354</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:21</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
