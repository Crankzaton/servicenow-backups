<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.state == "ready" &amp;&amp; current.queue == "output" &amp;&amp; current.agent == "SOAPClient"</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>SOAPClient</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function soapClient() {
 var soapURL = current.topic;
 var xmlPayload = new GlideXMLDocument();
 xmlPayload.parse(current.payload);
 var cryptoModuleName = "global.com_glide_web_service_consumer_glideencrypter";
 
 var soapDoc = _getSOAPRequestBody(xmlPayload);
 var soapAction = current.name;
 
 var request = new sn_ws.SOAPMessageV2();
 request.setEndpoint(soapURL);
 _addHeaders(xmlPayload, request);
 
 var cred = "";
 try {
  var op = new sn_kmf_ns.KMFCryptoOperation(cryptoModuleName,"SYMMETRIC_UNWRAPPING").withInputFormat("FORMATTED").withAlgorithm("AES");
  cred = GlideStringUtil.base64Decode(op.doOperation(String(current.source)));
 } catch (e) {
  gs.logWarning("Could not decrypt using KMFCryptoOperation in SOAPClient with error " + e);
 }

 if (cred.indexOf(":") > 0) {
  var uname = cred.split(":")[0];
  var pass = cred .split(":")[1];
  request.setBasicAuth(uname, pass);
 }
 
 request.setRequestBody(soapDoc);
 request.setSOAPAction(soapAction);
 var response = request.execute();
 var responseDoc = response.getBody();
 
 var newCurrent = new GlideRecord("ecc_queue");
 newCurrent.initialize();
 newCurrent.topic = current.topic;
 newCurrent.name = current.name;
 newCurrent.source = current.source;
 newCurrent.payload = responseDoc;
 
 if(response.getStatusCode() >= 400) {
  newCurrent.state = "error";
  var errorString = "HTTP status code " + response.getStatusCode();
  newCurrent.error_string = errorString;
 } else if (response.getErrorMessage() != null || response.getErrorMessage() != undefined) {
  newCurrent.state = "error";
  newCurrent.error_string = response.getErrorMessage();
 } else {
  newCurrent.state = "ready";
 }
 
 newCurrent.queue = "input";
 newCurrent.agent = "SOAPClient";
 newCurrent.response_to = current.sys_id;
 newCurrent.insert();
 
 current.state = "processed";
 current.processed = gs.nowDateTime();
}

function _getSOAPRequestBody(xmlPayload){
 var envelop = xmlPayload.selectSingleNode("//" + "envelop");
 if (envelop != null) {
  var soapRequest = GlideXMLUtil.getText(envelop);
  return soapRequest;
 } else {
  return xmlPayload.toString();
 }
}

function _addHeaders(xmlPayload, request){
 var headersElem = xmlPayload.selectSingleNode("//" + "httpHeaders");
 
 if (headersElem != null) {
  var iter = GlideXMLUtil.childElementIterator(headersElem);
  while (iter.hasNext()) {
   var headerElem = iter.next();
   var headerKey = GlideXMLUtil.getAttribute(headerElem,"name");
   var headerValue = GlideXMLUtil.getAttribute(headerElem,"value");
   request.setRequestHeader(headerKey, headerValue);
   
  }
 }
}

soapClient();]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:08</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9c7b289183701210c6695855eeaad38e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SOAPClient</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9c7b289183701210c6695855eeaad38e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:08</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9c7b289183701210c6695855eeaad38e"/>
</record_update>
