<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4c77dc1eeb922110f32fed9c42522886</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_access_analyzer.AccessAnalyzeExecutor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AccessAnalyzeExecutor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AccessAnalyzeExecutor = Class.create();
AccessAnalyzeExecutor.prototype = {
    initialize: function() {
    },

	analyze: function(current, action) {
		var operations = current.operations.getDisplayValue().split(/[ ,]+/);
		var entitySysId = this.getEntitySysId(current);
		var req = {
			entitySysId: entitySysId,
			entityType: current.analyze_by.toString(),
			targetName: this.getTargetName(current),
			targetResource: current.resource_type.toString(),
			targetField: current.target_field.toString(),
			targetMethod: current.target_rest_endpoint_method.toString(),
			targetRecord: current.target_record.toString(),
			targetOperations: operations
		};
		var x = new sn_identity.IdentitySecurityApi();
		var resp = x.getDebugLog(req);
		var apiResponse = JSON.parse(resp);
		if (!apiResponse.pass) {
			gs.addErrorMessage(gs.getMessage("Analyze access failed : {0}", apiResponse.errorMessage));
			current.setAbortAction('true');
		} else {
			action.setRedirectURL(current);
			current.analyzed_by = current.analyze_by + ": " + this.getEntityName(current);
			current.last_run = new GlideDateTime();
			answer = current.insert();
			new sn_access_analyzer.AccessAnalyzerUtil().saveResult(resp, current);
			gs.include('ActionUtils');
			var au = new ActionUtils();
			au.postInsert(current);
		}
	},

	reanalyze: function(current, action) {
		action.setRedirectURL(current);
		var operations = current.operations.getDisplayValue().split(/[ ,]+/);
		var entitySysId = this.getEntitySysId(current);
		var req = {
			entitySysId: entitySysId,
			entityType: current.analyze_by.toString(),
			targetName: this.getTargetName(current),
			targetResource: current.resource_type.toString(),
			targetField: current.target_field.toString(),
			targetMethod: current.target_rest_endpoint_method.toString(),
			targetRecord: current.target_record.toString(),
			targetOperations: operations
		};
		var x = new sn_identity.IdentitySecurityApi();
		var resp = x.getDebugLog(req);
		var apiResponse = JSON.parse(resp);
		if (!apiResponse.pass) {
			gs.addErrorMessage(gs.getMessage("Analyze access failed : {0}", apiResponse.errorMessage));
		} else {
			current.last_run = new GlideDateTime();
			current.update();
			new sn_access_analyzer.AccessAnalyzerUtil().saveResult(resp, current);
		}
	},

	getEntitySysId: function(current) {
		var analyzeBy = current.analyze_by.toString();
		if (analyzeBy === "User") {
			return current.user.toString();
		} else if (analyzeBy === "Group") {
			return current.group.toString();
		} else if (analyzeBy === "Role") {
			return current.role.toString();
		}
		return "";
	},

	getTargetName: function(current) {
		switch(current.resource_type.toString()) {
			case "client_callable_script_include":
				return current.getDisplayValue("target_client_callable_script_include").toString();

			case "rest_endpoint":
				return current.target_rest_endpoint.toString();

			case "ui_page":
				return current.target_ui_page.toString();

			case "record": //default will be returned
			default:
				return current.target_table.toString();
		}
	},

	getEntityName: function(current) {
		var analyzeBy = current.analyze_by.toString();
		if (analyzeBy === "User") {
			return current.user.name.toString();
		} else if (analyzeBy === "Group") {
			return current.group.name.toString();
		} else if (analyzeBy === "Role") {
			return current.role.name.toString();
		}
		return "";
	},

    type: 'AccessAnalyzeExecutor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-04-21 10:01:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4c77dc1eeb922110f32fed9c42522886&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AccessAnalyzeExecutor&lt;/sys_name&gt;
        &lt;sys_package display_value="Access Analyzer" source="sn_access_analyzer"&gt;21d5e77677171110638cfe21fe5a993c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Access Analyzer"&gt;21d5e77677171110638cfe21fe5a993c&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4c77dc1eeb922110f32fed9c42522886&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-02 05:43:06&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:51</sys_created_on>
        <sys_id>8a96f8d983f01210c6695855eeaad39a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AccessAnalyzeExecutor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8a96f8d983f01210c6695855eeaad39a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
