<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1da4cca7048c3110f8771800dc40b0a4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_ex_sp.GetSupportUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;[WARNING: Customers should NOT modify this script]
The purpose of this script include is to provide default behaviours for the GetSupportUtil script include.
To change the behaviour of these methods (or add new methods), Customers should override/add new methods to the GetSupportUtil script include.&lt;/description&gt;
        &lt;name&gt;GetSupportUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GetSupportUtilSNC = Class.create();
GetSupportUtilSNC.prototype = {
    initialize: function() {
        this.GETSUPPORT_TABLE = 'sn_ex_sp_get_support';
        this.QUICKLINK_TABLE = 'sn_ex_sp_quick_link';
        this.STATICCONTENT_TABLE = 'sn_ex_sp_static_content';
        this.quickLinkUtil = new sn_ex_sp.QuickLinkUtilSNC;
        this.staticContentUtil = new sn_ex_sp.StaticContentUtilSNC;
    },

    /**
     * This function returns support records
     * @returns List of objects
     */
    fetchSupportRecords: function() {
        var quickLinksObjectList = this._fetchSupportRecordsJSON('quicklink', this.QUICKLINK_TABLE);
        var staticContentObjectList = this._fetchSupportRecordsJSON('static_content', this.STATICCONTENT_TABLE);
        return this._mergeObjectsByOrder([quickLinksObjectList, staticContentObjectList]);
    },

    /**
     * This function merges the given list of objects with respect to order
     * @param {Array} lists
     * @returns mergedList
     */
    _mergeObjectsByOrder: function(lists) {
        if (lists.length === 0) {
            return [];
        }
        var mergedList = lists[0];
        for (var i = 1; i &lt; lists.length; i++) {
            mergedList = this._mergeTwoLists(mergedList, lists[i]);
        }
        return mergedList;
    },

    /**
     * This function returns support records in JSON format
     * @param {String} support_type
     * @param {String} table
     * @returns supportItemsObjectList
     */
    _fetchSupportRecordsJSON: function(support_type, table) {
        var supportItems = this._getListAndOrderMap(table);
        var supportItemsList = supportItems[0];
        var supportItemsOrderMap = supportItems[1];
        var supportItemsObjectList = this._getSupportItemsObjectList(support_type, supportItemsList);
        this._insertOrderAndSupportType(supportItemsObjectList, supportItemsOrderMap, support_type);
        return supportItemsObjectList;
    },

    /**
     * This function returns SupportItemsObjectList for a given support_type.
     * @param {String} support_type
     * @param {String} supportItemsList
     * @returns Object
     */
    _getSupportItemsObjectList: function(support_type, supportItemsList) {
        if (support_type === 'quicklink') {
            return this.quickLinkUtil.fetchQuicklinksForGetSupport(supportItemsList);
        } else if (support_type === 'static_content') {
            return this.staticContentUtil.fetchStaticContent(supportItemsList);
        }
    },

    /**
     * This function returns String of comma separated Sys IDs of support records and an orderMap related to a support record.
     * @param {String} table
     * @returns Array
     */
    _getListAndOrderMap: function(table) {
        var supportRecord = new GlideRecord(this.GETSUPPORT_TABLE);
        supportRecord.addQuery('table', table);
        supportRecord.orderBy('order');
        supportRecord.query();
        var orderMap = {};
        var supportList = '';
        while (supportRecord.next()) {
            orderMap[supportRecord.getValue('content')] = parseInt(supportRecord.getValue('order'),10);
            supportList = supportList + supportRecord.getValue('content') + ',';
        }
        return [supportList, orderMap];
    },

    /**
     * This function inserts order and support_type in the formed json.
     * @param {String} obj
     * @param {String} orderMap
	 * @param {String} support_type
     */
    _insertOrderAndSupportType: function(obj, orderMap, support_type) {
        for (var i = 0; i &lt; obj.length; i++) {
            obj[i]['order'] = orderMap[obj[i]['id']];
            obj[i]['support_type'] = support_type;
			if(support_type === 'quicklink'){
				obj[i]['content'] = obj[i]['shortDescription'];
			}
			else if(support_type === 'static_content'){
				obj[i]['content'] = obj[i]['richText'];
			}
        }
    },
	
    /**
     * This is a utility function for merge objects function.
     * @param {String} list1
     * @param {String} list2
     * @returns mergedList
     */
    _mergeTwoLists: function(list1, list2) {
        var mergedList = [];
        var i = 0;
        var j = 0;
        while (i &lt; list1.length &amp;&amp; j &lt; list2.length) {
            if (list1[i].order &lt;= list2[j].order) {
                mergedList.push(list1[i]);
                i++;
            } else {
                mergedList.push(list2[j]);
                j++;
            }
        }
        while (i &lt; list1.length) {
            mergedList.push(list1[i]);
            i++;
        }
        while (j &lt; list2.length) {
            mergedList.push(list2[j]);
            j++;
        }
        return mergedList;
    },

    type: 'GetSupportUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-07-21 05:36:02&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1da4cca7048c3110f8771800dc40b0a4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GetSupportUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Employee Center" source="sn_ex_sp"&gt;4249e63a28d54d61bb6fbf61fd86cccb&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Employee Center"&gt;4249e63a28d54d61bb6fbf61fd86cccb&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1da4cca7048c3110f8771800dc40b0a4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-21 10:56:31&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:32</sys_created_on>
        <sys_id>0fc0741983b01210c6695855eeaad3b2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GetSupportUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0fc0741983b01210c6695855eeaad3b2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:32</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
