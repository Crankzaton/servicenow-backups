<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5bb2aaedc361201099b86a764440dddb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CMDBDynamicIREFeatureTable&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CMDBDynamicIREFeatureTable&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CMDBDynamicIREFeatureTable = Class.create();
CMDBDynamicIREFeatureTable.prototype = {

    // Tables to filter out from the base table cmdb_ci.
    _EXCLUDED_TABLES: ['ecc_event', 'discovery_log', 'cmdb_metric', 'u_eal_submission', 'cmdb_dynamic_ire_match', 'sa_notification'],
	
    _CMDB_CI: 'cmdb_ci',

    initialize: function() {},

    process: function() {
        var map = {};
        var baseTable = this._CMDB_CI;
        var addRef = false;

        // If we are a cmdb_dynamic_ire_filter_condition add extended and ref tables from the current parent table.
        if (!gs.nil(current.model_id)) {
            baseTable = current.model_id.cmdb_class;
            addRef = true;
        }

        // If we are a cmdb_dynamic_ire_feature add extended and ref tables from the current parent table.
        if (!gs.nil(current.filter_condition_id)) {
            baseTable = current.filter_condition_id.cmdb_class;
            addRef = true;
        }

        var tables = GlideDBObjectManager.get().getHierarchy(baseTable);
        for (var i = 0; i &lt; tables.length; i++) {
            map[tables[i]] = '';
            if (addRef == true) {
                var refTables = this._getReferencingTables(tables[i]);
                for (var j = 0; j &lt; refTables.length; j++)
                    map[refTables[j]] = '';
            }
        }

        var result = [];

        for (var tab in map)
            if (tab != baseTable)
                result.push(tab);

        result = this._filterTable(result);
        return result;
    },

    _filterTable: function(tables) {


        var filtered = [];

        for (var i = 0; i &lt; tables.length; i++) {
            var tbl = tables[i];
            var j = 0;
            while (j &lt; this._EXCLUDED_TABLES.length) {
                if (tbl.indexOf(this._EXCLUDED_TABLES[j]) == 0)
                    break;
                j++;
            }
            // filter out tables meant for workflow
            if (tbl.startsWith('var__'))
                continue;

            if (j == this._EXCLUDED_TABLES.length)
                filtered.push(tbl);
        }
        return filtered;
    },

    _getReferencingTables: function(table) {
        var tables = [];
        var gr = new GlideAggregate('sys_dictionary');
        gr.addQuery('reference', table);
        // exclude entries for duplicate_of field
        gr.addQuery('element', '!=', 'duplicate_of');
        gr.addAggregate('count');
        gr.orderByAggregate('count');
        gr.groupBy('name');
        gr.query();
        while (gr.next())
            tables.push('' + gr.name);

        return tables;
    },

    type: 'CMDBDynamicIREFeatureTable'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-06 20:36:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5bb2aaedc361201099b86a764440dddb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CMDBDynamicIREFeatureTable&lt;/sys_name&gt;
        &lt;sys_package display_value="Configuration Management (CMDB)" source="com.snc.cmdb"&gt;8f64bce83c31311068bcf327dfe37f7e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5bb2aaedc361201099b86a764440dddb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-27 20:46:08&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:30</sys_created_on>
        <sys_id>d7b6f01d83f01210c6695855eeaad39f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CMDBDynamicIREFeatureTable</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d7b6f01d83f01210c6695855eeaad39f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:30</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
