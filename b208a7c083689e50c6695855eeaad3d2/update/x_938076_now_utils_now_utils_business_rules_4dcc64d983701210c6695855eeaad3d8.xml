<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>(current.category == "project_work" || current.category == "task_work") &amp;&amp; (current.total.changes() || current.resource_plan.changes() || current.user.changes() || current.operation() != "update")</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Accumulate Hours/Cost to Resource Plan</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[if (current.operation() == "update" && (current.resource_plan.changes() || current.user.changes() || current.task.changes()))
 accumulateResourcePlanValues(previous);
accumulateResourcePlanValues(current);

function accumulateResourcePlanValues(card) {
 //get the allocation that this time card refers to
 var allocationCheck = new GlideRecord("resource_allocation");
 if (!card.resource_plan.nil())
  allocationCheck.addQuery("resource_plan", card.resource_plan.sys_id);
 else
  allocationCheck.addQuery("task", card.task.sys_id);
  
 allocationCheck.addQuery("user", card.user.sys_id);
 allocationCheck.orderBy("resource_plan");
 allocationCheck.query();
 if (!allocationCheck.next())
  return;
 
 var planCheck = new GlideRecord();
 
 var allocations = new GlideAggregate("resource_allocation");
 allocations.addQuery("resource_plan", allocationCheck.resource_plan.sys_id);
 allocations.groupBy("user");
 allocations.query();
 var ids = "";
 while (allocations.next()) 
  ids += allocations.user.toString() + ",";
 
 var timeCards = new GlideRecord("time_card");
 timeCards.addQuery("user", "IN", ids);
 timeCards.addQuery("task", card.task.sys_id);
 timeCards.addQuery("resource_plan", allocationCheck.resource_plan).addOrCondition("resource_plan", "").addOrCondition("resource_plan", null);
 timeCards.query();
 
 var hours = 0.0;
 var cost = 0.0;
 var userAllocation;
 var taskProc = new TaskRateProcessor(card.task.getRefRecord());
 while(timeCards.next()) {
  var addCard = false;
  
  if (timeCards.resource_plan.nil()) {
   userAllocation = new GlideRecord("resource_allocation");
   userAllocation.addQuery("task", timeCards.task.sys_id);
   userAllocation.addQuery("user", timeCards.user.sys_id);
   userAllocation.orderBy("resource_plan");
   userAllocation.query();
   userAllocation.next();
   //sets the resource plan so that this time card consistently rolls up to that plan
   if (userAllocation.resource_plan == allocationCheck.resource_plan) {
    addCard = true;
    timeCards.resource_plan = allocationCheck.resource_plan;
    timeCards.setWorkflow(false);
    timeCards.update();
   }  
  } else
   addCard = true;
  
  if (addCard) {
   hours += timeCards.total;
   var userRate = taskProc.getLaborRate(timeCards.user.getRefRecord());
   if (!userRate)
    userRate = gs.getProperty("com.snc.time_card.default_rate", 0);
   cost += parseFloat(timeCards.total) * userRate;
  }
 }
 
 var resourcePlan = new GlideRecord("resource_plan");
 resourcePlan.get(allocationCheck.resource_plan);
 resourcePlan.actual_hours = hours;
 resourcePlan.actual_cost = cost;
 resourcePlan.update();
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>4dcc64d983701210c6695855eeaad3d8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Accumulate Hours/Cost to Resource Plan</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_4dcc64d983701210c6695855eeaad3d8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:55</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=4dcc64d983701210c6695855eeaad3d8"/>
</record_update>
