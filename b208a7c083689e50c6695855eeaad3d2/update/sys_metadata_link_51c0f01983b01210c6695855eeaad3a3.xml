<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1c69b4a0537130106b86ddeeff7b1256</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_itam_recomm.ImportantActionSetupsEvaluator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ImportantActionSetupsEvaluator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ImportantActionSetupsEvaluator = Class.create();
ImportantActionSetupsEvaluator.prototype = Object.extendsObject(global.AssetManagementBaseJob, {
	initialize: function (dashboardSysIds, runInDomain, invokedFromRefresh, invokedFromJobWithID) {
		this.dashboardSysIds = dashboardSysIds;
		this.runInDomain = runInDomain;
		this.invokedFromRefresh = invokedFromRefresh;
		this.importantActionUtils = new sn_itam_recomm.ImportantActionUtils();

		this.SCHEDULE_ITEM = 'JOB RUNNING: ' + invokedFromJobWithID;

		var triggerID = null;
		if (invokedFromJobWithID) {
			new global.GlideQuery('sys_trigger')
				.where('document_key', invokedFromJobWithID)
				.selectOne('sys_id')
				.ifPresent(function (trigger) {
					triggerID = trigger.sys_id;
				});
		}

		if (!gs.nil(triggerID)) { this.SCHEDULE_ITEM = triggerID; }
	},

	/* *******************************************************************
		Process Setups
	******************************************************************* */

	clearJobTriggerOnDashboardResult: function (dashboardId) {
		this.importantActionUtils.upsertJobResultRecord(dashboardId, this.getCurrentDomainSysId(), '');
	},

	setJobTriggerOnDashboardResult: function (dashboardId) {
		this.importantActionUtils.upsertJobResultRecord(
			dashboardId,
			this.getCurrentDomainSysId(),
			this.SCHEDULE_ITEM
		);
	},

	processSetupsOfDashboard: function (dashboardSysId, setupIDs) {
		// Skip if a refresh is already running on dashboard
		if (!this.invokedFromRefresh
			&amp;&amp; this.importantActionUtils.isRefreshRunningOnDashboard(dashboardSysId, this.getCurrentDomainSysId())) {
			return;
		}

		// If refresh is invoked manually, sys_trigger would
		// already be stamped on the dashboard result.
		if (!this.invokedFromRefresh) { this.setJobTriggerOnDashboardResult(dashboardSysId); }

		var setupId;
		var setupGr = new GlideRecord('sn_itam_recomm_setup');
		for (var i in setupIDs) {
			setupId = setupIDs[i];

			setupGr.initialize();
			setupGr.get(setupId);
			if (setupGr.isValidRecord()) {
				this.importantActionUtils.evaluateSetupAndSaveResult(
					setupGr,
					this.getCurrentDomainSysId()
				);
			}
		}

		this.clearJobTriggerOnDashboardResult(dashboardSysId);
		this.importantActionUtils.updateLastCalculatedOnJobResultRecord(
			dashboardSysId,
			this.getCurrentDomainSysId()
		);
	},

	evaluateDashboardSetups: function (dashboardSetups) {
		for (var dashboardSysId in dashboardSetups) {
			this.processSetupsOfDashboard(dashboardSysId, dashboardSetups[dashboardSysId]);
		}
	},

	/* *******************************************************************
		Get Setups Per Dashboard (Unique)
	******************************************************************* */

	getSetupsPerDashboard: function () {
		var dashboardSysId;
		var dashboardSetups = [];
		var dashboardSetupId;
		var uniqueSetups = [];
		var uniqueSetupsPerDashboard = {};

		for (var i in this.dashboardSysIds) {
			dashboardSysId = this.dashboardSysIds[i];
			dashboardSetups = [];
			uniqueSetupsPerDashboard[dashboardSysId] = [];

			new global.GlideQuery('sn_itam_recomm_setup')
				.where('active', true)
				.where('dashboards', 'CONTAINS', dashboardSysId)
				.select('sys_id')
				.forEach(function (setup) { // eslint-disable-line
					dashboardSetups.push(setup.sys_id);
				});

			for (var j in dashboardSetups) {
				dashboardSetupId = dashboardSetups[j];
				if (uniqueSetups.indexOf(dashboardSetupId) === -1) {
					uniqueSetups.push(dashboardSetupId);
					uniqueSetupsPerDashboard[dashboardSysId].push(dashboardSetupId);
				}
			}
		}
		return uniqueSetupsPerDashboard;
	},

	/* *******************************************************************
		Main functions
	******************************************************************* */

	runJob: function () {
		var dashboardSetups = this.getSetupsPerDashboard();
		this.evaluateDashboardSetups(dashboardSetups);
	},

	getDomains: function () {
		if (this.runInDomain) { return [this.runInDomain]; }

		var domainsArray = ['global'];
		new global.GlideQuery('domain')
			.where('active', true)
			.select()
			.forEach(function (domain) {
				domainsArray.push(domain.sys_id);
			});
		return domainsArray;
	},

	type: 'ImportantActionSetupsEvaluator',
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-02 16:53:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1c69b4a0537130106b86ddeeff7b1256&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ImportantActionSetupsEvaluator&lt;/sys_name&gt;
        &lt;sys_package display_value="Asset Management Workspace - Recommendations" source="sn_itam_recomm"&gt;4d8039d0533130106b86ddeeff7b128b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Asset Management Workspace - Recommendations"&gt;4d8039d0533130106b86ddeeff7b128b&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1c69b4a0537130106b86ddeeff7b1256&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-07 15:05:24&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:25</sys_created_on>
        <sys_id>51c0f01983b01210c6695855eeaad3a3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ImportantActionSetupsEvaluator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_51c0f01983b01210c6695855eeaad3a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:25</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
