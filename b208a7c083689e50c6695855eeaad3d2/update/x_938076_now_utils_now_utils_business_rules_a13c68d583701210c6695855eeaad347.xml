<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.max_concurrency.changes()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Semaphores</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 
 var semaphore = new GlideRecord("sys_semaphore");
 var workerThreadSemaphore;
 if (semaphore.get("name", "WorkerThread"))
  workerThreadSemaphore = semaphore.getUniqueValue();
 else
  gs.addErrorMessage(gs.getMessage("WorkerThread semaphore does not exist"));
 
 var cs = new GlideRecord("sys_cluster_state");
    cs.query();
 
 //Offset the messages on each node by a random time up to 1 minute
 var offset;
 while (cs.next()){
  offset = getRandomTime();
  if (current.getValue("semaphore_id").equals(workerThreadSemaphore))
   GlideClusterMessage.postDirectedDelayed("script", "GlideScheduler.restart();", cs.getValue("system_id"), offset);
  else
   GlideClusterMessage.postDirectedDelayed("script", "GlideSysSemaphore.get().reload();", cs.getValue("system_id"), offset);
 }

 //Get a random time from 0 to 1 minute
 function getRandomTime() {
        var min = 0;
        var max = 60000;
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a13c68d583701210c6695855eeaad347</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Semaphores</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_a13c68d583701210c6695855eeaad347</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:30</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=a13c68d583701210c6695855eeaad347"/>
</record_update>
