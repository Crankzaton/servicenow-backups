<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>795d0d665b59111000d30e281d81c714</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MIDSecurityPolicyCheckUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;To provide utilities function to help retrieve MID security policy value or find match / mismatch with MID's bootstrap cert policy value.&lt;/description&gt;
        &lt;name&gt;MIDSecurityPolicyCheckUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MIDSecurityPolicyCheckUtil = Class.create();
MIDSecurityPolicyCheckUtil.prototype = {
    initialize: function() {
    },
	
	getMatchMidsWithServiceNowSecPolicy: function(){
		var currentMatchMids = [];
		
		var policyGr = new GlideRecord("mid_cert_check_policy");
		policyGr.addQuery("name", "*.service-now.com");
		policyGr.query();
		
		if(policyGr.hasNext()) {
			policyGr.next();
			
			// Skip if *.servicenow.com is not active
			if(policyGr.getValue("active") == 0) {
				gs.warn("MIDSecurityPolicyCheckUtil.getMatchMidsWithServiceNowSecPolicy:  Skip if *.servicenow.com is not active");
				
				return currentMatchMids;
			}
		} else {
			// skip if the *.servicenow.com does not exist.
			gs.warn("MIDSecurityPolicyCheckUtil.getMatchMidsWithServiceNowSecPolicy: skip if the *.servicenow.com does not exist.");
			
			return currentMatchMids;
		}
		
		var configGr;
		
		// 1st query for ecc_agent with mid.ssl.use.instance.security.policy=true
		configGr = new GlideRecord('ecc_agent_config');
		configGr.addQuery("param_name", "mid.ssl.use.instance.security.policy");
		configGr.addQuery("value", "true");
		configGr.query();
		
		while (configGr.next()) {
			if(configGr.getValue('ecc_agent') != "")
				currentMatchMids.push(configGr.getValue('ecc_agent'));
		}
		gs.debug("MIDSecurityPolicyCheckUtil.getMatchMidsWithServiceNowSecPolicy: after 1st query: mids: " + currentMatchMids);
		
		return currentMatchMids;
	},
	
	getMismatchMidsWithServiceNowSecPolicy: function(){
		var currentMatchMids = [];
		
		var policyGr = new GlideRecord("mid_cert_check_policy");
		policyGr.addQuery("name", "*.service-now.com");
		policyGr.query();
		
		if(policyGr.hasNext()) {
			policyGr.next();
			
			// Skip if *.servicenow.com is not active
			if(policyGr.getValue("active") == 0) {
				gs.warn("MIDSecurityPolicyCheckUtil.getMissMatchMidsWithServiceNowSecPolicy:  Skip if *.servicenow.com is not active");
				
				return currentMatchMids;
			}
		} else {
			// skip if the *.servicenow.com does not exist.
			gs.warn("MIDSecurityPolicyCheckUtil.getMissMatchMidsWithServiceNowSecPolicy: skip if the *.servicenow.com does not exist.");
			
			return currentMatchMids;
		}
			
		var configGr;

		// 1st query for ecc_agent with mid.ssl.use.instance.security.policy=false or config param does not exist
		configGr = new GlideRecord('ecc_agent_config');

		// query result will be sorted by ecc_agent. For example
		// ecc_agent (sys_id)     param_name                                 value
		// sys_id_1               name                                       ecc_agent_1
		// sys_id_1               mid.ssl.use.instance.security.policy.      true
		// sys_id_2               name                                       ecc_agent_2
		// sys_id_3               mid.ssl.use.instance.security.policy.      false
		// sys_id_3               name                                       ecc_agent_3	
		configGr.orderBy("ecc_agent");
		configGr.query();

		var visitedEccAgentName = 'dummy';
		var visitedUseInstanceSecPolicy = true;

		while (configGr.next()) {
				// starting entry for a new ecc agent
				if(visitedEccAgentName != configGr.getValue('ecc_agent')) {

					// if there was no 'mid.ssl.use.instance.security.policy param for the prev ecc agent 
					if(!visitedUseInstanceSecPolicy &amp;&amp; visitedEccAgentName != "") {
						currentMatchMids.push(visitedEccAgentName);
					}

					visitedEccAgentName = configGr.getValue('ecc_agent');
					visitedUseInstanceSecPolicy = false;
				}

				if(configGr.getValue('param_name') == 'mid.ssl.use.instance.security.policy') {
					visitedUseInstanceSecPolicy = true;

					if(configGr.getValue('value') == 'false' &amp;&amp; visitedEccAgentName != "") {
						currentMatchMids.push(visitedEccAgentName);
					}
				}

				// skip on other params
				if(visitedUseInstanceSecPolicy)
					continue;
		}

		// On the last ecc_agent and there was no 'mid.ssl.use.instance.security.policy param for the prev ecc agent 
		if(!visitedUseInstanceSecPolicy &amp;&amp; visitedEccAgentName != "") {
				currentMatchMids.push(visitedEccAgentName);
		}

		gs.debug("MIDSecurityPolicyCheckUtil.getMisMatchMidsWithServiceNowSecPolicy: after 1st query: mids: " + currentMatchMids);		
		
		return currentMatchMids;
	},


    type: 'MIDSecurityPolicyCheckUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-16 19:17:23&lt;/sys_created_on&gt;
        &lt;sys_id&gt;795d0d665b59111000d30e281d81c714&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MIDSecurityPolicyCheckUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="MID Server" source="com.glideapp.agent"&gt;a6877ce83cb1311068bcf327dfe37f69&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_795d0d665b59111000d30e281d81c714&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-07 21:01:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:05</sys_created_on>
        <sys_id>ba17bc5d83f01210c6695855eeaad309</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MIDSecurityPolicyCheckUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ba17bc5d83f01210c6695855eeaad309</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
