<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ab9d535453022010dda1ddeeff7b128b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Reparents the following search tables to extend sys_metadata: 'sys_search_context_config', 'sys_search_facet', 'sys_search_filter', 'sys_search_source_filter', 'sys_search_genius_result_model', 'm2m_search_context_config_search_scripted_processor', 'm2m_search_context_config_search_source'&lt;/description&gt;
        &lt;name&gt;Reparent search configuration tables&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var tablesToReparent = ['sys_search_context_config', 'sys_search_facet', 'sys_search_filter', 'sys_search_source_filter', 'sys_search_genius_result_model', 'm2m_search_context_config_search_scripted_processor', 'm2m_search_context_config_search_source'];

function start() {
    var startTime = new Date();
    reparentSearchConfigTables();
    var endTime = new Date();

    var elapsedTime = endTime - startTime;
    gs.info('Total time elapsed for reparenting search config tables in ms: ' + elapsedTime);
}

function reparentSearchConfigTables() {
    if (pm.isZboot()) {
        gs.log('Upgrade: no need to reparent search configuration tables, zbooting');
        return;
    }

    // Step 1: Set sys_scope for existing search context config record
    setSearchContextSysScope();

    // Step 2: Run the reparenting logic
    var TABLE_HIERARCHY_EDITOR_LIVE = "glide.db.table.hierarchy_editor.live";
    var useLiveReparentingProp = gs.getProperty(TABLE_HIERARCHY_EDITOR_LIVE, "true");
    var isTableHierarchyEditorLive = useLiveReparentingProp === "true";
    if (isTableHierarchyEditorLive) {
        gs.info("Setting the property: " + TABLE_HIERARCHY_EDITOR_LIVE + " value to: false");
        GlideProperties.set(TABLE_HIERARCHY_EDITOR_LIVE, "false");
    }
    
    try {
        tablesToReparent.forEach(function(tableName) {
            gs.log('Upgrade: starting ' + tableName + ' reparent to sys_metadata');
            var tpc = new GlideTableParentChange(tableName);
            if (tpc.change('', 'sys_metadata'))
                gs.log('Upgrade: completed ' + tableName + ' reparent to sys_metadata');
            else
                gs.log('Upgrade: failed to reparent ' + tableName + ' to sys_metadata');
        });
    } catch (ex) {
        gs.log('Exception thrown during reparenting: ' + e);
    } finally {
        if (isTableHierarchyEditorLive) {
            GlideProperties.set(TABLE_HIERARCHY_EDITOR_LIVE, isTableHierarchyEditorLive + '');
            gs.info("Setting the property: " + TABLE_HIERARCHY_EDITOR_LIVE + " value to: " + isTableHierarchyEditorLive );
        }
    }

    // Step 3: Update application_id column to calc field
    updateAppIdFieldType();

    // Step 4: Set sys_scope for existing records in remaining search tables
    setSysScope();
}

// for tables other than sys_search_context_config, iterate over each record and set sys_scope = global
function setSysScope() {
    tablesToReparent.forEach(function(tableName) {
        if (tableName === 'sys_search_context_config')
            return;

        var gr = new GlideRecord(tableName);
        gr.query();

        gs.log('Setting sys_scope for existing ' + tableName + ' records.');
        while (gr.next()) {
            gr.setValue('sys_scope', 'global');
            gr.update();
        }
    });
}

// for records in sys_search_context_config, set sys_scope to application_id
function setSearchContextSysScope() {
    var gr = new GlideRecord('sys_search_context_config');
    gr.query();

    gs.log('Setting sys_scope for existing sys_search_context_config records.');
    while (gr.next()) {
        var app_id = gr.getValue('application_id');
        gr.setValue('sys_scope', app_id);
        gr.update();
    }
}

// drop application_id column
function updateAppIdFieldType() {
    gs.log("Setting the column 'application_id' from 'sys_search_context_config' to a calc field.");

    var gr = new GlideRecord('sys_dictionary');
    gr.addQuery('name', 'sys_search_context_config');
    gr.addQuery('element', 'application_id');
    gr.query();

    while (gr.next()) {
        gs.log("Found the column 'application_id' from 'sys_search_context_config'.");
        gr.setValue('virtual', true);
        gr.setValue('read_only', true);
        gr.setValue('calculation', 'current.sys_scope;');
        gr.update();
    }
}

start();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-28 00:14:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;ab9d535453022010dda1ddeeff7b128b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Reparent search configuration tables&lt;/sys_name&gt;
        &lt;sys_package display_value="Text Search API" source="com.glide.search"&gt;c93878203cf1311068bcf327dfe37f61&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_ab9d535453022010dda1ddeeff7b128b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-02-17 19:30:26&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:23:34</sys_created_on>
        <sys_id>e383f8dd83b01210c6695855eeaad3e5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Reparent search configuration tables</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e383f8dd83b01210c6695855eeaad3e5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:23:34</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
