<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>WFCopyPrjCFITToASsessmentResultsTable</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var count = 0;
    var extended_demand = '';
    var asmtInstance = current.task_id.getValue('sys_id');
    var dmnRec = new GlideRecord('u_assessment_results');
    dmnRec.addQuery('u_demand', asmtInstance);
    dmnRec.addQuery('u_cfit_instance_ids', 'CONTAINS', current.sys_id);
    dmnRec.orderBy('sys_created_on');
    dmnRec.query();
    if (dmnRec.next()) {

        extended_demand = dmnRec.getValue('sys_id');

    }

    var ex_dmd = new GlideRecord('u_assessment_results'); // custom table to hold results value

    ex_dmd.addQuery('sys_id', extended_demand);

    ex_dmd.query();

    if (ex_dmd.next()) {

        var asmt_aiq = new GlideRecord('asmt_metric_result'); // as the data is available on metric result table

        asmt_aiq.addQuery('instance', current.sys_id);
        asmt_aiq.query();
        while (asmt_aiq.next()) {

            var answer = asmt_aiq.string_value.toString();

            var assess_metric = asmt_aiq.getDisplayValue('metric');
            var asmt_aiq2 = new GlideAggregate('asmt_metric_result'); // as the data is available on metric result table

            asmt_aiq2.addQuery('instance', current.sys_id);
            asmt_aiq2.addQuery('metric.name', asmt_aiq.metric.name);
            asmt_aiq2.addAggregate('count', 'metric.name');
            asmt_aiq2.query();
            if (asmt_aiq2.next()) {

                if (asmt_aiq2.getAggregate('COUNT', 'metric.name') > 1) {
                  
                    if (asmt_aiq.metric.name.toString() === 'u_will_this_initiative_potentially_impact_any_of_the_following') {
 
                        answer = getImpType(current.getValue('sys_id'), current.task_id.getValue('sys_id'), asmt_aiq.metric.name);
                    } else {
                        answer = canCatass(current.getValue('sys_id'), current.task_id.getValue('sys_id'), asmt_aiq.metric.name);
                    }


                }
            }
            ex_dmd.setValue(assess_metric, answer);

        }

        ex_dmd.update();

    }

    function canCatass(curObj, instID, assMet) {


        var ans = "";
        var canCat = new GlideRecord('asmt_metric_result');

        canCat.addQuery('instance', curObj);

        canCat.addQuery('source_id', instID);

        canCat.addQuery('metric.name', assMet);

        canCat.query();

        while (canCat.next()) {

            ans = ans + "," + canCat.string_value;


        }
        ans = ans.substring(1);
        return ans;

    }

    function getImpType(curObj, instID, assMet) {
        var ans = "";
        var canCat = new GlideRecord('asmt_metric_result');

        canCat.addQuery('instance', curObj);

        canCat.addQuery('source_id', instID);

        canCat.addQuery('metric.name', assMet);

        canCat.query();

        while (canCat.next()) {

            var strValue = canCat.string_value.toString().split(":");
   ans = ans + "," + strValue[0].toString();
        }
        ans = ans.substring(1);
        return ans;
    }


})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>673ba05183701210c6695855eeaad3f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFCopyPrjCFITToASsessmentResultsTable</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_673ba05183701210c6695855eeaad3f4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:15</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=673ba05183701210c6695855eeaad3f4"/>
</record_update>
