<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>10bb5d1c9fb32200598a5bb0657fcf4d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ScoreCalculator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Library of score functions&lt;/description&gt;
        &lt;name&gt;ScoreCalculator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ScoreCalculator = Class.create();
ScoreCalculator.prototype = {
    initialize: function() {
    },

    type: 'ScoreCalculator'
};

ScoreCalculator.calculateScore = function(metrics) {
    PPMDebug.log("Into ScoreCalculator.calculateScoreForId -&gt; " + (new JSON()).encode(metrics));
    if(JSUtil.notNil(metrics)) {
        var risk = JSUtil.nil(metrics.risk) ? 5 : metrics.risk;
        var size =  JSUtil.nil(metrics.size) ? 5 : metrics.size;
        var value =  JSUtil.nil(metrics.value) ? 5 : metrics.value;

        // Formulae to calculate the score
        var score = (risk + size + value) / 3;
        PPMDebug.log("ScoreCalculator score -&gt; " + score);
        return score;
    } 
    return 5;
};

ScoreCalculator.calculateSize = function (metrics) {
    PPMDebug.log("Into ScoreCalculator.calculateSize -&gt; " + (new JSON()).encode(metrics));
    var size = 5;
    if(JSUtil.notNil(metrics) &amp;&amp; JSUtil.notNil(metrics.cost)) {
        var cost = metrics.cost;
        if (cost &gt; 1000000)
          size = 2;
        else if (cost &gt; 750000 &amp;&amp; cost &lt;= 1000000)
          size = 4;
        else if (cost &gt; 500000 &amp;&amp; cost &lt;= 750000)
          size = 6;
        else if (cost &gt; 250000 &amp;&amp; cost &lt;= 500000)
          size = 8;
        else if (cost &gt; 0 &amp;&amp; cost &lt;= 250000)
          size = 10;
    } 
    PPMDebug.log("Into ScoreCalculator.calculateSize -&gt; " + size + " | " + metrics.cost);
    return size;
};

ScoreCalculator.calculateValue = function (metrics) {
    PPMDebug.log("Into ScoreCalculator.calculateValue -&gt; " + (new JSON()).encode(metrics));
    var value = 5;
    if(JSUtil.notNil(metrics) &amp;&amp; JSUtil.notNil(metrics.roi)) {
        var roi = metrics.roi;
        if (roi &gt; 100)
          value = 10;
        else if (roi &gt; 75 &amp;&amp; roi &lt;= 100)
          value = 9;
        else if (roi &gt; 50 &amp;&amp; roi &lt;= 75)
          value = 8;
        else if (roi &gt; 25 &amp;&amp; roi &lt;= 50)
          value = 6;
        else if (roi &gt; 10 &amp;&amp; roi &lt;= 25)
          value = 4;
        else if (roi &gt; 5 &amp;&amp; roi &lt;= 10)
          value = 2;
    }
    PPMDebug.log("Into ScoreCalculator.calculateValue -&gt; " + value + " | " + metrics.roi);
    return value;
};

ScoreCalculator.calculateRisk = function (metrics) {
    PPMDebug.log("Into ScoreCalculator.calculateRisk -&gt; " + (new JSON()).encode(metrics));
    var risk = 5;
    if(JSUtil.notNil(metrics) &amp;&amp; JSUtil.notNil(metrics.risk)) {
        var metricRisk = metrics.risk;
        if (metricRisk == "critical") 
            risk = 8;
        else if (metricRisk == "high") 
            risk = 6;
        else if (metricRisk == "low") 
            risk = 4;
        else if (metricRisk == "planning") 
            risk = 2;
    }
    PPMDebug.log("Into ScoreCalculator.calculateRisk -&gt; " + risk + " | " + metrics.risk);
    return risk;
};

ScoreCalculator.deriveRisk = function(riskScore) {
    var risk = 'low';
    if(JSUtil.notNil(riskScore)) {
        if (riskScore &lt;= 2) 
            risk = 'planning';
        else if (riskScore &gt; 2 &amp;&amp; riskScore &lt;= 4 )
            risk = 'low';
        else if (riskScore &gt; 4 &amp;&amp; riskScore &lt;= 6) 
            risk = 'high';
        else
            risk = 'critical';
    }
    return risk;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-12-15 21:06:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;10bb5d1c9fb32200598a5bb0657fcf4d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ScoreCalculator&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_10bb5d1c9fb32200598a5bb0657fcf4d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-09-07 08:08:31&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:17</sys_created_on>
        <sys_id>f08070d583b01210c6695855eeaad3a3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ScoreCalculator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f08070d583b01210c6695855eeaad3a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:17</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
