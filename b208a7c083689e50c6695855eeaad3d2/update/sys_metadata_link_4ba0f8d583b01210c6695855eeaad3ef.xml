<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1885d9afa9136110f877674284390dee</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFUpdateSetUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Provides utility methods for update set features used in Localization Framework. Customers are not expected to override these core functions&lt;/description&gt;
        &lt;name&gt;LFUpdateSetUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFUpdateSetUtils = Class.create();
LFUpdateSetUtils.prototype = {

    tableName: 'sys_update_set',

    initialize: function() {
        this.lfConstants = new LFConstants();
        this.logger = new LFLogger('LFUpdateSetUtils');
    },

    getUpdateSetStrategyByPublishMode: function(publishMode) {
        var updateSetStrategies = this.lfConstants.UPDATE_SET_STRATEGIES;
        if (publishMode == this.lfConstants.ADHOC) {
            return gs.getProperty(this.lfConstants.PROPERTY_UPDATE_SET_STRATEGY_EDIT_TRANSLATIONS, updateSetStrategies.LF_EDITOR);
        } else if (publishMode == this.lfConstants.TASK) {
            return gs.getProperty(this.lfConstants.PROPERTY_UPDATE_SET_STRATEGY_REQUEST_TRANSLATIONS, updateSetStrategies.LF_TASK);
        }
        return null;
    },

    getUpdateSetNameByPublishMode: function(publishMode, updateSetSuffix) {
        var updateSetName = null;
        var updateSetStrategy = this.getUpdateSetStrategyByPublishMode(publishMode);
        if (updateSetStrategy) {
            var updateSetStrategies = this.lfConstants.UPDATE_SET_STRATEGIES;
            switch (updateSetStrategy) {
                case updateSetStrategies.LF_TRANSLATIONS:
                    updateSetName = 'LF: Translations';
                    break;
                case updateSetStrategies.LF_TASK:
                    updateSetName = 'LF: ' + updateSetSuffix;
                    break;
                case updateSetStrategies.LF_EDITOR:
                    // User specific update set will be used for this strategy
                    break;
                default:
                    this.logger.logWarning('Unknown update set strategy - ' + updateSetStrategy + 'in publish mode - ' + publishMode);
                    break;
            }
        }
        return updateSetName;
    },

    getUpdateSetIdByStrategyAndScope: function(updateSetStrategy, scope, updateSetName) {
        var updateSetSysId = null;
        if (updateSetStrategy) {
            var updateSetStrategies = this.lfConstants.UPDATE_SET_STRATEGIES;
            switch (updateSetStrategy) {
                case updateSetStrategies.LF_TRANSLATIONS:
                case updateSetStrategies.LF_TASK:
                    updateSetSysId = this._getUpdateSetIdInProgressByScopeAndName(scope, updateSetName);
                    break;
                case updateSetStrategies.LF_EDITOR:
                    updateSetSysId = this._getUserSpecificUpdateSetIdInProgressByScope(scope);
                    break;
                default:
                    this.logger.logWarning('Unknown update set strategy - ' + updateSetStrategy + 'in publish mode - ' + publishMode);
                    break;
            }
        }
        return updateSetSysId;
    },

    isDedicatedUpdateSetRequired: function() {
        return (gs.getProperty(this.lfConstants.PROPERTY_ENABLE_DEDICATED_UPDATE_SET, 'true') == 'true');
    },

    isValidScope: function(scope) {
        var scopeGR = new GlideRecord('sys_scope');
        return scopeGR.get(scope);
    },

    getUpdateSetsInProgressByName: function(updateSetName) {
        var updateSetSysIDs = [];
        var gr = new GlideRecord(this.tableName);
        gr.addQuery('name', updateSetName);
        gr.addQuery('state', 'in progress');
        gr.query();
        while (gr.next()) {
            updateSetSysIDs.push(gr.getValue('sys_id'));
        }
        return updateSetSysIDs;
    },

    _getUpdateSetIdInProgressByScopeAndName: function(scope, updateSetName) {
        var updateSetSysId = null;
        var gr = new GlideRecord(this.tableName);
        gr.addQuery('application', scope);
        gr.addQuery('state', 'in progress');
        gr.addQuery('name', updateSetName);
        gr.orderByDesc('sys_created_on');
        gr.query();
        if (gr.next()) {
            updateSetSysId = gr.getValue('sys_id');
        }
        return updateSetSysId;
    },

    _getUserSpecificUpdateSetIdInProgressByScope: function(scope) {
        var updateSetSysId = null;
        updateSetSysId = gs.getUser().getPreference('updateSetForScope' + scope);
        if (updateSetSysId) {
            var updateSetState = this._getUpdateSetStateById(updateSetSysId);
            if ((!updateSetState) || (updateSetState != 'in progress')) {
                updateSetSysId = this._getDefaultUpdateSetForScope(scope);
            }
        } else {
            updateSetSysId = this._getDefaultUpdateSetForScope(scope);
        }
        return updateSetSysId;
    },

    _getUpdateSetStateById: function(updateSetId) {
        var gr = new GlideRecord(this.tableName);
        gr.addQuery('sys_id', updateSetId);
        gr.query();
        return gr.next() ? gr.getValue('state') : null;
    },

    _getDefaultUpdateSetForScope: function(scope) {
        var currentScope = gs.getCurrentApplicationId();
        gs.setCurrentApplicationId(scope);
        var defaultUpdateSetId = new GlideUpdateSet().getDefault();
        gs.setCurrentApplicationId(currentScope);
        return defaultUpdateSetId;
    },

    type: 'LFUpdateSetUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-06-14 04:41:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1885d9afa9136110f877674284390dee&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFUpdateSetUtils&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;60bb711a93e33110b31a30dcebba1034&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1885d9afa9136110f877674284390dee&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-30 10:19:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:59</sys_created_on>
        <sys_id>4ba0f8d583b01210c6695855eeaad3ef</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFUpdateSetUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4ba0f8d583b01210c6695855eeaad3ef</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:59</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
