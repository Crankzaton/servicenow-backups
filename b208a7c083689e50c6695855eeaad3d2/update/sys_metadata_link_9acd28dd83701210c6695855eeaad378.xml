<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>26e463f9ac100b0e55748246a0674c4b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;task&lt;/collection&gt;
        &lt;condition&gt;(gs.getProperty('com.snc.sla.engine.version','2010') === '2010')&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Process SLAs&lt;/name&gt;
        &lt;order&gt;101&lt;/order&gt;
        &lt;priority/&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[// Look for new SLAs that must be started, then process active SLAs for this task
// NB. Two copies of this asynch business rule could be running concurrently
//     Make sure that any BRs that call gs.flushWorkflow() are ordered to run before this

lookForNewSLAs();
processExistingSLAs();

// Finds potentially relevant SLAs
function lookForNewSLAs() {
   if (useContract()) {
      runContractSLAs();
      return;
   }

   // process SLA Definitions
   var sla = new GlideRecord('contract_sla');
   sla.addActiveQuery();
   sla.addQuery('collection', current.getRecordClassName());
   if (sla.isValidField("sys_class_name"))
      sla.addQuery("sys_class_name", "contract_sla");
   sla.query();
   while (sla.next())
      processNewSLA(sla);

   // process Service Offering-specific SLA Definitions
   if (current.cmdb_ci.sys_class_name + '' !== "service_offering")
      return;

   var soc = new GlideRecord("service_offering_commitment");
   if (!soc.isValid())
      return;

   soc.addQuery("service_offering", current.cmdb_ci);
   soc.addQuery("service_commitment.type", "SLA");
   soc.addNotNullQuery("service_commitment.sla");
   soc.query();
   while (soc.next()) {
      if (sla.get(soc.service_commitment.sla) &amp;&amp; sla.collection + '' === current.getRecordClassName() &amp;&amp; Boolean(sla.active) === true)
         processNewSLA(sla);
   }
}

function useContract() {
   var contractTables = gs.getProperty('com.snc.sla.contract.tables', '');
   var arr = contractTables.replaceAll(" ", "").split(",");
   return new ArrayUtil().contains(arr, current.getRecordClassName());
}

function runContractSLAs() {
   var contractRelSLA = new GlideRecord('contract_rel_contract_sla');
   contractRelSLA.addQuery('contract', current.contract);
   contractRelSLA.addQuery('contract_sla.collection', current.sys_class_name);
   contractRelSLA.addQuery('contract_sla.active', 'true');
   contractRelSLA.query();
   while (contractRelSLA.next())
      processNewSLA(contractRelSLA.contract_sla);
}

function processNewSLA(sla) {
   // If start condition matches this task and stop condition doesn't,
   // create task_sla if there isn't one
   if (!sla.start_condition)
      return;

   var startConditionMatches = GlideFilter.checkRecord(current, sla.start_condition);
   if (!startConditionMatches)
      return;

   var stopConditionMatches = GlideFilter.checkRecord(current, sla.stop_condition);
   if (sla.stop_condition &amp;&amp; stopConditionMatches)
      return;

   var taskSLA = new GlideRecord('task_sla');
   taskSLA.addActiveQuery();
   taskSLA.addQuery('task', current.sys_id);
   taskSLA.addQuery('sla', sla.sys_id);
   taskSLA.setLimit(1);
   taskSLA.query();
   if (taskSLA.hasNext())
      return;

   insertTaskSLA(sla);
}

function insertTaskSLA(sla) {
   // Get preferences for where to get time zone and schedule
   var schSource = sla.schedule_source + '';
   var tzSource = sla.timezone_source + '';

   var newTaskSLA = new GlideRecord('task_sla');
   newTaskSLA.task = current.sys_id;
   newTaskSLA.sla = sla.sys_id;
   newTaskSLA.start_time = current.sys_updated_on;
   var scheduleId = SLASchedule.source(schSource, newTaskSLA);
   if (scheduleId)
	  newTaskSLA.schedule = scheduleId;
   newTaskSLA.timezone = SLATimezone.source(tzSource, newTaskSLA);
   // explicitly use system timezone, if the above property points to an empty/null value
   if (!newTaskSLA.timezone)
      newTaskSLA.timezone = gs.getSysTimeZone();
   newTaskSLA.start_time = Boolean(sla.retroactive) === true ? current[sla.set_start_to] : current.sys_updated_on;
   newTaskSLA.insert();
}

function processExistingSLAs() {
   // Iterate through this task's active SLAs to determine necessary action
   var taskSLA = new GlideRecord('task_sla');
   taskSLA.addQuery('task', current.sys_id);
   taskSLA.addActiveQuery();
   taskSLA.query();
   while (taskSLA.next()) {
      // Do the pause and resume checks
      if (taskSLA.sla.pause_condition) {
         var pauseConditionMatches = GlideFilter.checkRecord(current, taskSLA.sla.pause_condition);
         if (taskSLA.stage + '' !== 'paused' &amp;&amp; pauseConditionMatches) {
            // If pause condition matches this task, pause the SLA
            taskSLA.stage = 'paused';
            taskSLA.update();
         } else if (taskSLA.stage + '' === 'paused' &amp;&amp; !pauseConditionMatches) {
            // If pause condition no longer matches this task, resume the SLA
            taskSLA.stage = 'in_progress';
            taskSLA.update();
         }
      }

      //Do the stop check
      if (taskSLA.sla.stop_condition) {
         var stopConditionMatches = GlideFilter.checkRecord(current, taskSLA.sla.stop_condition);
         if (stopConditionMatches) {
            // If stop condition matches this task, stop the SLA
            taskSLA.active = false;
            taskSLA.end_time = current.sys_updated_on;
            taskSLA.update();
         } else {
            // Not stopping, so do the cancel check
            var startConditionMatches = GlideFilter.checkRecord(current, taskSLA.sla.start_condition);
            if (!startConditionMatches || cancelServiceOfferingSLA(taskSLA)) {
               // If the start condition no longer applies, cancel the SLA
               // If service offering-specific SLA longer relevant, cancel the SLA
               taskSLA.active = false;
               taskSLA.end_time = current.sys_updated_on;
               taskSLA.stage = 'cancelled';
               taskSLA.update();
            }
         }
      }
   }
}

function cancelServiceOfferingSLA(taskSLA) {
   var soc = new GlideRecord("service_offering_commitment");
   if (!soc.isValid())
      return false;

   if (taskSLA.sla.sys_class_name + '' !== "service_offering_sla")
      return false;

   soc.addQuery("service_commitment.type", "SLA");
   soc.addQuery("service_commitment.sla", taskSLA.sla);
   soc.addQuery("service_offering", current.cmdb_ci);
   soc.query();
   if (soc.hasNext())
      return false;

   gs.print("canceling Service Offering SLA: " + taskSLA.sla.name + " - task is now against different CI");
   return true;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2009-10-05 23:01:00&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;26e463f9ac100b0e55748246a0674c4b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;114&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Process SLAs&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Service level management" source="com.snc.sla"&gt;e2d7bc6c3cb1311068bcf327dfe37f1f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_26e463f9ac100b0e55748246a0674c4b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2015-11-16 15:06:43&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;async&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=26e463f9ac100b0e55748246a0674c4b"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:58:22</sys_created_on>
        <sys_id>9acd28dd83701210c6695855eeaad378</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Process SLAs</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9acd28dd83701210c6695855eeaad378</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:58:22</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
