<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>74f6d28c7727ed10e8601b7dae5a9923</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UxKeyboardShortcutRulesProvider&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UxKeyboardShortcutRulesProvider&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UxKeyboardShortcutRulesProvider = Class.create();
UxKeyboardShortcutRulesProvider.prototype = {
    DENY_LIST: "denyList",
    DEFAULT: "default",

    initialize: function(currentShortcut, previousShortcut, defaultShortcut) {
        var validUniversalKeys = ['shiftKey', 'altKey', 'key'];

        this.defaultShortcut = defaultShortcut;
        this.currentShortcut = currentShortcut;
        this.previousShortcut = previousShortcut || defaultShortcut;
        this.shiftEnabledSpecialCharacters = /[!@#$%^&amp;*()_+{}|:"&lt;&gt;?~]/;
        this.validMacKeys = ['metaKey'].concat(validUniversalKeys).sort();
        this.validWindowsKeys = ['ctrlKey'].concat(validUniversalKeys).sort();
    },

    hasWindowsShortcutChanged: function() {
        return !this.currentShortcut.windows || !UxKeyboardShortcutUtil.areShortcutsEqual(this.currentShortcut.windows, this.previousShortcut.windows);
    },

    hasMacShortcutChanged: function() {
        return !this.currentShortcut.mac || !UxKeyboardShortcutUtil.areShortcutsEqual(this.currentShortcut.mac, this.previousShortcut.mac);
    },

    invalidKeyValueFormat: function(value) {
        return typeof value !== 'string' || JSUtil.nil(value) || value.length &gt; 1 || value === ' ';
    },

    validateShortcutValues: function(shortcut) {
        if (shortcut) {
            var keys = Object.keys(shortcut);

            for (var i = 0; i &lt; keys.length; i++) {
                var value = shortcut[keys[i]];
                if ((keys[i] !== "key" &amp;&amp; typeof value !== 'boolean') || (keys[i] === "key" &amp;&amp; this.invalidKeyValueFormat(value))) {
                    return false;
                }
            }
        }

        return true;
    },

    getRules: function() {
        var self = this;
        // Rules engine to validate keyboard shortcut metadata
        return [{
                // Shortcuts have not been modified from default value
                errorCondition: function() {
                    return UxKeyboardShortcutUtil.areShortcutsEqual(self.defaultShortcut.mac, self.currentShortcut.mac) &amp;&amp;
                        UxKeyboardShortcutUtil.areShortcutsEqual(self.defaultShortcut.windows, self.currentShortcut.windows);
                },
                message: gs.getMessage("Must change at least one platform shortcut!"),
                type: this.DEFAULT
            },
            {
                // Shortcut deleted and remaining is set to default or shortcut changed to default value
                errorCondition: function() {
                    return (self.hasWindowsShortcutChanged() &amp;&amp; UxKeyboardShortcutUtil.areShortcutsEqual(self.defaultShortcut.windows, self.currentShortcut.windows)) ||
                        (self.hasMacShortcutChanged() &amp;&amp; UxKeyboardShortcutUtil.areShortcutsEqual(self.defaultShortcut.mac, self.currentShortcut.mac)) ||
                        (!self.currentShortcut.mac &amp;&amp; UxKeyboardShortcutUtil.areShortcutsEqual(self.defaultShortcut.windows, self.currentShortcut.windows)) ||
                        (!self.currentShortcut.windows &amp;&amp; UxKeyboardShortcutUtil.areShortcutsEqual(self.defaultShortcut.mac, self.currentShortcut.mac));
                },
                message: gs.getMessage("Shortcuts cannot be set to default values!"),
                type: this.DEFAULT
            },
            {
                // Shortcuts cannot be empty
                errorCondition: function() {
                    return !self.currentShortcut.mac &amp;&amp; !self.currentShortcut.windows;
                },
                message: gs.getMessage("Must define at least one platform shortcut!"),
                type: this.DEFAULT
            },
            {
                // Only mac and windows shortcuts are supported
                errorCondition: function() {
                    var keys = Object.keys(self.currentShortcut);
                    if (keys.length &gt; 2) {
                        return true;
                    }
                    for (var i = 0; i &lt; keys.length; i++) {
                        if (keys[i] !== "mac" &amp;&amp; keys[i] !== "windows") {
                            return true;
                        }
                    }
                },
                message: gs.getMessage("Shortcut field must only contain mac and/or windows keys!"),
                type: this.DEFAULT
            },
            {
                // Windows shortcut cannot contain metaKey
                errorCondition: function() {
                    return self.currentShortcut.windows &amp;&amp; Object.keys(self.currentShortcut.windows).indexOf('metaKey') !== -1;
                },
                message: gs.getMessage("metaKey is not allowed for Windows shortcuts."),
                type: this.DEFAULT
            },
            {
                // Mac shortcut cannot contain ctrlKey
                errorCondition: function() {
                    return self.currentShortcut.mac &amp;&amp; Object.keys(self.currentShortcut.mac).indexOf('ctrlKey') !== -1;
                },
                message: gs.getMessage("ctrlKey is not allowed for Mac shortcuts."),
                type: this.DEFAULT
            },
            {
                // Validation to ensure only supported keys are used for Windows
                errorCondition: function() {
                    return self.currentShortcut.windows &amp;&amp; !JSUtil.areEqual(Object.keys(self.currentShortcut.windows).sort(), self.validWindowsKeys);
                },
                message: gs.getMessage("Windows shortcuts must only contain {0}", self.validWindowsKeys.join(', ')),
                type: this.DEFAULT
            },
            {
                // Validation to ensure only supported keys are used for Mac				
                errorCondition: function() {
                    return self.currentShortcut.mac &amp;&amp; !JSUtil.areEqual(Object.keys(self.currentShortcut.mac).sort(), self.validMacKeys);
                },
                message: gs.getMessage("Mac shortcuts must only contain {0}", self.validMacKeys.join(', ')),
                type: this.DEFAULT
            },
            {
                // Validate that the modifiers are of type boolean and key is of type string
                errorCondition: function() {
                    return (self.hasMacShortcutChanged() &amp;&amp; !self.validateShortcutValues(self.currentShortcut.mac)) ||
                           (self.hasWindowsShortcutChanged() &amp;&amp; !self.validateShortcutValues(self.currentShortcut.windows));
                },
                message: gs.getMessage("Modifier keys must be a boolean (true/false) &amp; key must be a string!"),
                type: this.DEFAULT
            },
            {
                // Shift-enabled special characters cannot be used
                errorCondition: function() {
                    var macShortcutKey = self.currentShortcut.mac.key;
                    var windowsShortcutKey = self.currentShortcut.windows.key;

                    return self.shiftEnabledSpecialCharacters.test(macShortcutKey) || self.shiftEnabledSpecialCharacters.test(windowsShortcutKey);
                },
                message: gs.getMessage("Shift-enabled special characters are not allowed!"),
                type: this.DEFAULT
            },
            {
                // Validate that both supported platforms have not been changed. 
                errorCondition: function() {
                    var autoConversionEnabled = !GlideProperties.getBoolean('glide.uxf.disable_shortcut_auto_conversion', false);

                    return autoConversionEnabled &amp;&amp;
                        self.hasMacShortcutChanged() &amp;&amp;
                        self.hasWindowsShortcutChanged();
                },
                message: gs.getMessage("Conflicting modifications detected: Simultaneous modification of both platform shortcuts is not allowed. Please allow auto-conversion to take place. "),
                type: this.DEFAULT
            },
            {
                // Validate shortcut doesn't exist in deny list
                errorCondition: function() {
                    var denyListGr = new GlideRecord('sys_ux_keyboard_shortcut_deny_list');

                    denyListGr.addActiveQuery();
                    denyListGr.query();

                    while (denyListGr.next()) {
                        var denyShortcut = JSON.parse(denyListGr.shortcut);

                        if (
                            self.hasMacShortcutChanged() &amp;&amp;
                            UxKeyboardShortcutUtil.areShortcutsEqual(denyShortcut.mac, self.currentShortcut.mac) &amp;&amp;
                            !self.hasWindowsShortcutChanged()) {
                            // Mac changed and new shortcut is in deny list
                            return true;
                        } else if (
                            self.hasWindowsShortcutChanged() &amp;&amp;
                            UxKeyboardShortcutUtil.areShortcutsEqual(denyShortcut.windows, self.currentShortcut.windows) &amp;&amp;
                            !self.hasMacShortcutChanged()
                        ) {
                            // Windows changed and new shortcut is in deny list
                            return true;
                        }
                    }

                    return false;
                },
                message: gs.getMessage("Shortcut is in deny list and cannot be used"),
                type: this.DENY_LIST
            }
        ];
    },

    validate: function(skipDenyList) {
        var rules = this.getRules();

        for (var i = 0; i &lt; rules.length; i++) {
            var rule = rules[i];

            if (skipDenyList &amp;&amp; rule.type === this.DENY_LIST) {
                continue;
            }

            if (rule.errorCondition()) {
                gs.addErrorMessage(rule.message);
                return false;
            }
        }

        return true;
    },

    type: 'UxKeyboardShortcutRulesProvider'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-06-16 17:22:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;74f6d28c7727ed10e8601b7dae5a9923&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;129&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UxKeyboardShortcutRulesProvider&lt;/sys_name&gt;
        &lt;sys_package display_value="UX Keyboard Shortcut" source="com.glide.ux.keyboard_shortcut"&gt;dc78571b47220210cd4e1ce4316d437f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_74f6d28c7727ed10e8601b7dae5a9923&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-24 20:27:26&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:47</sys_created_on>
        <sys_id>1607785d83f01210c6695855eeaad31c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UxKeyboardShortcutRulesProvider</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1607785d83f01210c6695855eeaad31c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
