<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>af7dc0a3eb6220106fd0b6302a522882</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nb_action.ConditionBasedRuleHandler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point sn_nb_action.RuleTypeFactory&amp;#13;
Factory to register a handler  to evaluate Condition Based Recommended Action Rule. &lt;/description&gt;
        &lt;name&gt;ConditionBasedRuleHandler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConditionBasedRuleHandler = Class.create();
ConditionBasedRuleHandler.prototype = Object.extendsObject(sn_nb_action.RuleTypeHandlerBase, {
    initialize: function() {},
    /*
     * This identifies the rule type handled by this implementation.
     * Should be name of a table that extends "sn_nb_action_rule_base" table.
     */
    getId: function() {
        return sn_nb_action.Constants.TBL_CONDITION_BASED_RULE;
    },
    /*
     * Return an array of GlideRecord actions recommended by this rule
     */
    evaluateRule: function(currentRecord, ruleRecord, recommendationType) {
        var recommendedActionsArr = [];
        var hasActions = false;
        var _log = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, this.type);
        var condition = ruleRecord.getValue(sn_nb_action.Constants.COL_CONDITION);
        if (!gs.nil(condition)) {
            var name = ruleRecord.getValue(sn_nb_action.Constants.COL_NAME);
            var filter = new GlideFilter(condition, name);
            filter.setCaseSensitive(false);
            if (filter.match(currentRecord, true)) {
                var recommendedActionEvaluator = new sn_nb_action.RecommendedActionEvaluator();
                var recommendedActionsGr = recommendedActionEvaluator.prepQuery(ruleRecord, recommendationType);
                recommendedActionsGr.query();
                while (recommendedActionsGr.next()) {
                    try {
                        var currentRecommendedActionsArr = recommendedActionEvaluator.evaluateRecommendedAction(recommendedActionsGr, currentRecord);
                        if (currentRecommendedActionsArr &amp;&amp; currentRecommendedActionsArr.length &gt; 0) {
                            hasActions = true;
                            recommendedActionsArr.push.apply(recommendedActionsArr, currentRecommendedActionsArr);
                        }
                    } catch (ex) {
                        _log.error("Failed to evaluate Recommended Action " + recommendedActionsGr.getUniqueValue() + " for context " + currentRecord.getUniqueValue());
                    }
                }
            }
        }
        if (hasActions)
            return recommendedActionsArr;
        return false;
    },
    /*
     * Returns true if the rule is valid
     */
    isValidRule: function(ruleRecord) {
        return true;
    },
    type: 'ConditionBasedRuleHandler'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-03 07:55:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;af7dc0a3eb6220106fd0b6302a522882&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConditionBasedRuleHandler&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommended Actions" source="sn_nb_action"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommended Actions"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_af7dc0a3eb6220106fd0b6302a522882&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-17 10:47:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:58</sys_created_on>
        <sys_id>1000859d83341210c6695855eeaad3f3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConditionBasedRuleHandler</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1000859d83341210c6695855eeaad3f3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:58</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
