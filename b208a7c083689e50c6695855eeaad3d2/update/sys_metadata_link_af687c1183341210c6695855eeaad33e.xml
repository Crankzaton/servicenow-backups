<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>874c9504ff312110468365d7d3b8fef6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityCalculation_SubscriptionsContextV1&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityCalculation_SubscriptionsContextV1&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UnallocatedEntityCalculation_SubscriptionsContextV1 = Class.create();
UnallocatedEntityCalculation_SubscriptionsContextV1.prototype = {
    /**
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     */
    initialize: function(oobRolesOnly) {
        this._oobRolesOnly = oobRolesOnly;

        this._licenseRoleService = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseRoleServiceV1(oobRolesOnly));
        this._licenseDetailsDao = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseDetailDaoV1());
        this._userHasLicenseDao = new sn_entitlement.PassThroughCache(new sn_entitlement.UserHasLicenseDaoV1());
    },

    /**
     * Retrieves all subscription IDs that are active and per-user
     *
     * @returns {array} An array of subscription IDs
     */
    getSubscriptionIdsByIsPerUser: function() {
        return this._licenseDetailsDao.getLicenseIdsByIsPerUser();
    },

    /**
     * Retrieves all of the active subscription ids that have a subscription type 
     * of unrestricted user.
     *
     * @returns {array} An array of subscription IDs
     */
    getSubscriptionIdsByActiveAndIsUnrestrictedUser: function() {
        return this._licenseDetailsDao.getLicenseIdsByActiveAndIsUnrestrictedUser();
    },

    /**
     * Retrieves the subscription Ids where the subscription is of type "Module"
     * and does not have a definition
     *
     * @returns {array} An array of subscription_entitlement.sys_id values
     */
    getSubscriptionIdsByIsModuleWithoutCapacityMeter: function() {
        return this._licenseDetailsDao.getLicenseIdsByIsModuleWithoutCapacityMeter();
    },

    /**
     * Retrieves all role IDs that require a subscription
     *
     * @returns {array} An array of role IDs
     */
    getRoleIdsByRequiresASubscription: function() {
        return this._licenseRoleService.getRoleIdsByRequiresALicense();
    },

    /**
     * Retrieves all role IDs for the subscription identified that also require a subscription
     *
     * @returns {array} An array of role IDs
     */
    getRoleIdsBySubscriptionIdAndRequiresASubscription: function(subscriptionId) {
        return this._licenseRoleService.getRoleIdsByLicenseIdAndRequiresALicense(subscriptionId, this._oobRolesOnly);
    },

    /**
     * Retrieves all role IDs associated with the subscription identified even if the role is not
     * a metered role for the subscription
     *
     * @param {guid} subscriptionId The subscription ID to get roles for
     * @returns {array} An array of role IDs associated with the subscription
     */
    getRoleIdsBySubscriptionId: function(subscriptionId) {
        return this._licenseRoleService.getUserRoleIdsByLicenseId(subscriptionId);
    },

    /**
     * Calculates the number of users that are active and allocated to a license
     *
     * @param {guid} subscriptionId The subscription ID to get allocation counts for
     * @returns {number} A number 0 or greater that indicates the number of allocated users
     */
    getUserCountBySubscriptionIdAndUserIsAllocatedAndActive: function(subscriptionId) {
        return this._userHasLicenseDao.getCountByLicenseIdAndUserIsActive(subscriptionId);
    },

    /**
     * Calculates the number of tables mapped to a Subscription
     *
     * @param {guid} subscriptionId The license_details.sys_id to retrieve the tables_used
     * @returns {number} A number 0 or greater indicating the number of tables that are mapped to the subscription
     */
    getCustomTableAllocationCount: function(subscriptionId) {
        return this._licenseDetailsDao.getTablesUsed(subscriptionId);
    },

    /**
     * Returns the Quota ID for a Subscription
     *
     * @param {guid} subscriptionId - license_details sys_id
     * @returns {string} quota Id
     */
    getQuotaIdBySubscriptionId: function(subscriptionId) {
        return this._licenseDetailsDao.getQuotaId(subscriptionId);
    },

    type: 'UnallocatedEntityCalculation_SubscriptionsContextV1'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-20 18:38:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;874c9504ff312110468365d7d3b8fef6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityCalculation_SubscriptionsContextV1&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_874c9504ff312110468365d7d3b8fef6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-03 17:13:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:53</sys_created_on>
        <sys_id>af687c1183341210c6695855eeaad33e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityCalculation_SubscriptionsContextV1</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_af687c1183341210c6695855eeaad33e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
