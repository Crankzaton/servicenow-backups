<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b307263d97f33550a940f5ece053af5f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.wfChangeFlowApprovalUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DXC - Jan 2024 - script include to abstract code for obtaining change approval groups from clow actions&lt;/description&gt;
        &lt;name&gt;wfChangeFlowApprovalUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var wfChangeFlowApprovalUtils = Class.create();
wfChangeFlowApprovalUtils.prototype = {
    initialize: function(changeGr) {
        this._groupTableName = 'sys_user_group';
        this._grMemberTableName = 'sys_user_grmember';
        this._groupEncQry = 'active=true'; // criteria for approval group
        this._grMemberEncQry = 'user.active=true'; // criteria for active group mamber approver
        this._changeGr = changeGr; //GlideRecord change_request
    },


    getApprovalGroups: function(functionName) {
        var groupIdsList = [];
        var hasErrors = false;
        var errorMessage = '';

        var answerObj = this[functionName]();
        groupIdsList += answerObj.groupsIdsList;
        hasErrors = answerObj.hasErrors;
        errorMessage += answerObj.errorMessage;

        groupIdsList.forEach(function(groupId) {
            var checkObj = this._checkValidGroup(groupId);
            if (checkObj.group_valid === false) {
                hasErrors = true;
                errorMessage += checkObj.error_message;
            }
        }, this);

        return {
            'groupIdsList': groupIdsList,
            'hasErrors': hasErrors,
            'errorMessage': errorMessage
        };
    },


    /*
    Tests if a group is active and has active members
    INPUT : groupId - sys_id of user group (sys_user_group) record
    RETURNS : ReturnObj {
    			group_valid : boolean - is group valid for change approval
    			error_message : text - errors with group - only populate if geoul is not valid
    }
    */
    _checkValidGroup: function(groupId) {
        var retObj = {
            'group_valid': true,
            'error_message': ''
        };
        var grGroup = new GlideRecord(this._groupTableName);
        if (grGroup.get(groupId)) { // check if group exists
            if (!GlideFilter.checkRecord(grGroup, this._groupEncQry)) { // check if group is matches criteria
                retObj.group_valid = false;
                retObj.error_message += 'Group ' + grGroup.name + ' is inactive \n';
            } else { //group is active - check if it has any active memebers 
                var grGrMember = new GlideRecord(this._grMemberTableName);
                grGrMember.addQuery('group', groupId);
                grGrMember.addEncodedQuery(this._grMemberEncQry);
                grGrMember.query();
                if (!grGrMember.hasNext()) { // group has no active members
                    retObj.group_valid = false;
                    retObj.error_message += 'Group ' + grGroup.name + ' has no active members \n';
                }
            }
        } else { // group does not exist
            retObj.group_valid = false;
            retObj.error_message += 'Unable to get group for sys_id ' + groupId + '\n';
        }

        return retObj;

    },

    getDummyApproval: function() {
        return ['aaaa', 'd24ea7c81b917494f46c0e5de54bcbe1', '2cd77fd11b4870d09a0f0e57ec4bcbd6'];
    },


    getRelatedGroupByType: function(groupId, groupType) {
        var answerArr = [];
        var currentGrp = new GlideRecord('sys_user_group');
        if (currentGrp.get(groupId)) {
            var recfound = false;
            while (currentGrp.parent != '' &amp;&amp; recfound == false) {
                currentGrp = currentGrp.parent;
                var currentGrpType = (currentGrp.type == "" ? "" : currentGrp.type);
                var reqdStr = gs.getProperty('wf.grouptype.gl.types'); // 3 records ',' seperated
                var rec = reqdStr.split(",");
                for (var i = 0; i &lt; rec.length; i++) {
                    if (currentGrpType.search(rec[i]) != -1) {
                        var reqdGrp = new GlideRecord('sys_user_group');
                        reqdGrp.addQuery('parent', currentGrp.sys_id.toString());
                        reqdGrp.addQuery('type', "CONTAINS", groupType);
                        reqdGrp.query();
                        if (reqdGrp.next()) {
                            recfound = true;
                            answerArr.push(reqdGrp.sys_id.toString());
                            break;
                        }
                    }
                }
            }

        }
        return {
            'groupsIdsList': answerArr,
            'hasErrors': false,
            'errorMessage': ''
        };
    },


    _authECAB: function() {
        var groupId = this._changeGr.assignment_group.toString();
        var groupType = gs.getProperty('wf.change.ecabgroup.type');
        return this.getRelatedGroupByType(groupId, groupType);
    },

    _authPlannedFreeze: function() {
        var groupIdsPF = [];
        var hasErrorsPF = false;
        var errorMessagePF = '';
        var resultPF = new WFChangeConflictsApprovalUtils().getPlannedBlackoutScheduleApprovals(this._changeGr.sys_id.toString());
        if (resultPF.isInvalid) {
            hasErrorsPF = true;
            errorMessagePF = 'Error establishing approval groups for Planned Freeze';
        } else {
            groupIdsPF = resultPF.approvalGroups;
        }
        return {
            'groupsIdsList': groupIdsPF,
            'hasErrors': hasErrorsPF,
            'errorMessage': errorMessagePF
        };
    },



    _authFINRAReg: function() {
        var groupIdsFR = [];
        var hasErrorsFR = false;
        var errorMessageFR = '';
        var resultFR = new wf_regulatoryApprovers().getApprovals(this._changeGr.sys_id.toString());

        for (i = 0; i &lt; resultFR.length; i++) {
            if (resultFR[i].group_active) {
                groupIdsFR.push(resultFR[i].group_sys_id + "");
            } else {
                hasErrorsFR = true;
                errorMessageFR += 'Group ' + resultFR[i].group_name + ' is inactive (' + resultFR[i].ci_names_list.toString() + ')\n';
            }
        }
        return {
            'groupsIdsList': groupIdsFR,
            'hasErrors': hasErrorsFR,
            'errorMessage': errorMessageFR
        };
    },


    _authSDLCCodeChg: function() {
        var groupIdsCC = [];
        var hasErrorsCC = false;
        var errorMessageCC = '';
        if (this._changeGr.u_code_change == 'Yes') {
            groupIdsCC = gs.getProperty('change_assignement_group_code_change');
        }
        return {
            'groupsIdsList': groupIdsCC,
            'hasErrors': hasErrorsCC,
            'errorMessage': errorMessageCC
        };
    },

    _authALMSunrise: function() {
        var groupIdsAS = [];
        var hasErrorsAS = false;
        var errorMessageAS = '';
        var srApprovalReq = new WFChgAlmSunriseApproval().validatecibusinessservice(this._changeGr.sys_id.toString());
        if (srApprovalReq) {
            groupIdsAS = gs.getProperty('wf.change_alm_sunrise_Authorize_approval');
        }
        return {
            'groupsIdsList': groupIdsAS,
            'hasErrors': hasErrorsAS,
            'errorMessage': errorMessageAS
        };
    },

    authBusAuth: function() {
        var busAppIdsBA = [];
        var hasErrorsBA = false;
        var errorMessageBA = '';

        var isCodeChange = this._changeGr.u_code_change;
        var isBAuthActivated = gs.getProperty('wf.change.enable.bus.auth.app');

        if (isCodeChange === 'Yes' &amp;&amp; isBAuthActivated === 'true') {

            var grAffectedCI = new GlideRecord('task_ci');

            grAffectedCI.addQuery('task', this._changeGr.sys_id.toString());
            grAffectedCI.addQuery('ci_item.sys_class_name', 'cmdb_ci_service_discovered');
            var env = grAffectedCI.addQuery('ci_item.environment', 'IN', 'Production,DISASTER RECOVERY/BCP,PRODFIX'); // this should really read property wf.change.environments, but values are different
            env.addOrCondition('ci_item.environment', '');
            grAffectedCI.query();
            if (grAffectedCI.hasNext()) {
                while (grAffectedCI.next()) {
                    var grBusinessApp = new GlideRecord('cmdb_ci_business_app');
                    var JoinQry = grBusinessApp.addJoinQuery('cmdb_rel_ci', 'sys_id', 'parent');
                    JoinQry.addCondition('child', grAffectedCI.ci_item.toString());
                    grBusinessApp.query();
                    if (grBusinessApp.hasNext()) {
                        while (grBusinessApp.next()) {
                            if (grBusinessApp.owned_by != '' &amp;&amp; grBusinessApp.owned_by.active ||
                                grBusinessApp.owned_by != '' &amp;&amp; grBusinessApp.owned_by.active) {
                                busAppIdsBA.push(grBusinessApp.sys_id.toString());
                            } else {
                                hasErrorsBA = true;
                                errorMessageBA += 'Business Application ' + grBusinessApp.name + ' has no active owner or alternate owner/n';
                            }
                        }
                    } else { // no business app found for app service
                        hasErrorsBA = true;
                        errorMessageBA += 'No Business Application found related to App Service ' + grAffectedCI.ci_item.name + '/n';
                    }
                }
            }
        }
        return {
            'busAppIdsList': busAppIdsBA,
            'hasErrors': hasErrorsBA,
            'errorMessage': errorMessageBA
        };
    },





    type: 'wfChangeFlowApprovalUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;U843070&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-01-18 16:52:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b307263d97f33550a940f5ece053af5f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;57&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;wfChangeFlowApprovalUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b307263d97f33550a940f5ece053af5f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:26:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:17</sys_created_on>
        <sys_id>b410c99d83341210c6695855eeaad37a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>wfChangeFlowApprovalUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b410c99d83341210c6695855eeaad37a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:17</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
