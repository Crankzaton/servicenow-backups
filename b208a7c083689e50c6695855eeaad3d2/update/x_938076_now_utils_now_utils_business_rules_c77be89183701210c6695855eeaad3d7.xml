<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Avoid Duplicate Records</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

 var rec = new GlideRecord(current.getTableName());
 rec.addQuery('install_base_item', current.install_base_item);
 var entityType = "";
 var entityName = "";
 if(current.type){
  entityType = current.type.entity_type;
  entityName = current.type.name;
 }
 addQueryBasedOnEntityType(rec, entityType, entityName);
 rec.setLimit(1);
 rec.query();
 if (rec.next()) {
  var duplicateRecordSysId = rec.getUniqueValue();
  if(current.isNewRecord() || (!current.isNewRecord() && current.sys_id != duplicateRecordSysId)) {
   var errMsg = setErrorMessage(entityType, entityName);
   gs.addErrorMessage(errMsg);
   current.setAbortAction(true);
  }
 }

function addQueryBasedOnEntityType(recordGr, type, name){
 
 if (type == "customer_account" && current.account) {
  recordGr.addQuery('type.entity_type',type);
  recordGr.addQuery('account', current.account);
 }
 else if (type == "customer_contact" && current.account && current.contact) {
  recordGr.addQuery('account', current.account);
  recordGr.addQuery('contact', current.contact);
 }
 else if (type == "csm_consumer" && current.consumer) {
  recordGr.addQuery('consumer', current.consumer);
 }
 else if(type == "sn_customer_service_organization" && current.service_organization) {
  recordGr.addQuery('type.entity_type',type);
  recordGr.addQuery('service_organization', current.service_organization);
 }
 else if(type == "sys_user" && (name == "Authorized Member" || name == "Listed Member") && current.service_organization && current.user) {
  recordGr.addQuery('service_organization', current.service_organization);
  recordGr.addQuery('user', current.user);
 }
 else if (type == "sys_user" && current.user) {
  recordGr.addQuery('user', current.user);
 }
}
 
function setErrorMessage(type, name){
 var errMsg = "";
 
 if (type == "csm_consumer") 
  errMsg = gs.getMessage("Install base item is already available for the consumer.");
 else if (type == "customer_contact")
  errMsg = gs.getMessage("Install base item is already available for the account and contact.");
 else if (type == "customer_account") 
  errMsg = gs.getMessage("Install base item is already available for the account.");
 else if (type == "sn_customer_service_organization") 
  errMsg = gs.getMessage("Install base item is already available for the service organization.");
 else if (type == "sys_user" && (name == "Authorized Member" || name == "Listed Member"))
  errMsg = gs.getMessage("Install base item is already available for the service organization and user.");
 else if (type == "sys_user") 
  errMsg = gs.getMessage("Install base item is already available for the user.");
 
 return errMsg;
}
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:19</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c77be89183701210c6695855eeaad3d7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Avoid Duplicate Records</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_c77be89183701210c6695855eeaad3d7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:19</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=c77be89183701210c6695855eeaad3d7"/>
</record_update>
