<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1185b1c653113010c8d4ddeeff7b12d3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_gf.GoalFrameworkAjaxProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GoalFrameworkAjaxProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GoalFrameworkAjaxProcessor = Class.create();
GoalFrameworkAjaxProcessor.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    isAtleastOneTargetIsOfNonMilestoneType: function(targetSysIds) {
        var response = {};
        var targetGr = new GlideRecordSecure(GoalFrameworkConstants.GOAL_TARGET_TABLE);
        if (targetGr.isValid()) {
            targetGr.addQuery('sys_id', 'IN', targetSysIds ? targetSysIds : this.getParameter('sysparm_target_sys_ids'));
            targetGr.addQuery('type', '!=', 'milestone');
            targetGr.setLimit(1);
            targetGr.query();
            if (targetGr.hasNext())
                response['recordOfNonMilestoneType'] = true;
            else
                response['recordOfNonMilestoneType'] = false;
        }
        return JSON.stringify(response);
    },

    doesTargetContainProgress: function(targetSysIds) {
        var response = {};
        var targetGr = new GlideRecordSecure(GoalFrameworkConstants.GOAL_TARGET_PROGRESS_TABLE);
        if (targetGr.isValid()) {
            targetGr.addQuery('target.sys_id', 'IN', targetSysIds ? targetSysIds : this.getParameter('sysparm_target_sys_ids'));
            targetGr.setLimit(1);
            targetGr.query();
            if (targetGr.hasNext())
                response['hasProgressRecord'] = true;
            else
                response['hasProgressRecord'] = false;
        }
        return JSON.stringify(response);
    },

    resetPercentComplete: function(targetSysIds) {
        var response = {};
        var targetGr = new GlideRecordSecure(GoalFrameworkConstants.GOAL_TARGET_TABLE);
        if (targetGr.isValid()) {
            targetGr.addQuery('sys_id', 'IN', targetSysIds ? targetSysIds : this.getParameter('sysparm_target_sys_ids'));
            targetGr.addQuery('type', '!=', 'milestone');
            targetGr.query();
            while (targetGr.next()) {
                targetGr.setValue('percent_complete', '');
                if (targetGr.update()) {
                    response['percentCompleteUpdated'] = true;
                    return JSON.stringify(response);
                }
            }
        }
        response['percentCompleteUpdated'] = false;
        return JSON.stringify(response);
    },

    getGoalDates: function(parentGoal) {
        var response = {};
        var goalGr = new GlideRecordSecure(GoalFrameworkConstants.GOAL_CORE_TABLE);
        if (goalGr.get(parentGoal ? parentGoal : this.getParameter('sysparm_parent_goal'))) {
            response['start_date'] = goalGr.getDisplayValue('start_date');
            response['end_date'] = goalGr.getDisplayValue('end_date');
        } else {
            var currentQuarter = new GlideRecordSecure("business_calendar_span");
            if (sn_gf.GoalConfigUtil.getCalendarType() === "fiscal_period")
                currentQuarter.addQuery("calendar", GoalFrameworkConstants.FISCAL_QUARTER_ID);
            else
                currentQuarter.addQuery("calendar", GoalFrameworkConstants.GREGORIAN_QUARTER_ID);

            currentQuarter.addEncodedQuery("start&lt;=javascript:gs.endOfToday()^end&gt;=javascript:gs.beginningOfToday()");
            currentQuarter.query();
            if (currentQuarter.next()) {
                response['start_date'] = GlideDateTime(currentQuarter.getValue("start")).getDate().getDisplayValue();
                response['end_date'] = GlideDateTime(currentQuarter.getValue("end")).getDate().getDisplayValue();
            }
        }
        return JSON.stringify(response);
    },

    getDefaultGoalDatesFromStrategy: function(strategy) {

        var response = {};
        var strategyGr = new GlideRecordSecure(GoalFrameworkConstants.STRATEGY_TABLE);
        if (strategyGr.get(strategy ? strategy : this.getParameter('sysparm_strategy'))) {
            if (strategyGr.getValue('start_date'))
                response['start_date'] = strategyGr.getDisplayValue('start_date');
            if (strategyGr.getValue('end_date'))
                response['end_date'] = strategyGr.getDisplayValue('end_date');
        }
        return JSON.stringify(response);
    },

    getDefaultStrategyDatesFromStrategicPlan: function(strategicPlan) {
        var response = {};
        var strategicPlanGr = new GlideRecordSecure(GoalFrameworkConstants.STRATEGIC_PLAN);
        if (strategicPlanGr.get(strategicPlan ? strategicPlan : this.getParameter('sysparm_strategic_plan'))) {
            if (strategicPlanGr.getValue('start_date')) {
                response['start_date'] = strategicPlanGr.getDisplayValue('start_date');
            }
            if (strategicPlanGr.getValue('end_date')) {
                response['end_date'] = strategicPlanGr.getDisplayValue('end_date');
            }
        }
        return JSON.stringify(response);
    },

    canEditGoal: function(goal_Id) {
        var response = {
            'canEdit': false
        };
        var goalId = goal_Id ? goal_Id : this.getParameter('sysparm_goal_id');
        var goalGr = new GlideRecordSecure(GoalFrameworkConstants.GOAL_TABLE);
        if (goalGr.get(goalId)) {
            response['canEdit'] = goalGr.canWrite();
        }
        return JSON.stringify(response);
    },

    getReviewDate: function(review_Date, start_Date, end_Date, review_Freq) {
        var response = {};
        var msg;
        var oldReviewDate = review_Date ? review_Date : this.getParameter('sysparm_review_date');
        var reviewDate = (new GFTarget()).getNextReviewDate(start_Date ? start_Date : this.getParameter('sysparm_start_date'), review_Freq ? review_Freq : this.getParameter('sysparm_review_freq'));
        if (reviewDate) {
            var endDate = new GlideDateTime(end_Date ? end_Date : this.getParameter('sysparm_end_date')).getDate();
            reviewDate = (endDate &amp;&amp; (endDate &lt; reviewDate)) ? endDate : reviewDate;
            response['review_due_date'] = reviewDate.getDisplayValue();
            if (oldReviewDate)
                msg = gs.getMessage("Review due date is changed from {0} to {1}.", [oldReviewDate, reviewDate]);
            else
                msg = gs.getMessage("Review due date is set to {0}.", reviewDate);

            response['info_msg'] = msg;
        }
        return JSON.stringify(response);
    },

    getWarningMessageForUnitOfMeasure: function() {
        var oldValueSysId = this.getParameter('sysparm_old_value');
        var newValueSysId = this.getParameter('sysparm_new_value');
        var oldValueGR = new GlideRecordSecure(sn_gf.GoalFrameworkConstants.TARGET_UNITS_TABLE);
        oldValueGR.get(oldValueSysId);
        var newValueGR = new GlideRecordSecure(sn_gf.GoalFrameworkConstants.TARGET_UNITS_TABLE);
        newValueGR.get(newValueSysId);
        var message;
        if (global.JSUtil.notNil(oldValueSysId) &amp;&amp; global.JSUtil.notNil(newValueSysId) &amp;&amp;  // Handle new target cases where UnitOfMeasure is Null
            global.JSUtil.notNil(oldValueGR) &amp;&amp; global.JSUtil.notNil(newValueGR) &amp;&amp;
            !(oldValueGR.choice_set &amp;&amp; newValueGR.choice_set) &amp;&amp; // If old and new type has choice sets, then both are Qualitative types
            (oldValueGR.choice_set != newValueGR.choice_set)) { // If old and new type has same choice sets, then type is unchanged
            if (oldValueGR.choice_set) { // oldValue is Qualitative
                message = gs.getMessage("Changing the unit of measure from Qualitative ({0}) to Quantitative ({1}) clears all fields in the Metrics section", [oldValueGR.getValue("name"), newValueGR.getValue("name")]);
            } else if (newValueGR.choice_set) { // newValue is Qualitative
                message = gs.getMessage("Changing the unit of measure from Quantitative ({0}) to Qualitative ({1}) clears all fields in the Metrics section", [oldValueGR.getValue("name"), newValueGR.getValue("name")]);
                if (GlidePluginManager.isActive('sn_gfa')) {
                    message += gs.getMessage(" and deletes the target breakdowns if any");
                }
            }
            if (message) {
                message += gs.getMessage(", after you save the form. \n\nDo you want to proceed?");
            }
        }

        return JSON.stringify({
            "warningMessage": message
        });
    },

    type: 'GoalFrameworkAjaxProcessor'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-13 16:31:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1185b1c653113010c8d4ddeeff7b12d3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;82&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GoalFrameworkAjaxProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Goal Framework" source="sn_gf"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Goal Framework"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1185b1c653113010c8d4ddeeff7b12d3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-25 15:25:09&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:22</sys_created_on>
        <sys_id>c680b0d583b01210c6695855eeaad316</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GoalFrameworkAjaxProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c680b0d583b01210c6695855eeaad316</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:22</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
