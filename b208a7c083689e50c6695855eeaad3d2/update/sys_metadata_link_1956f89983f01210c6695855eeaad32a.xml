<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3588d8f077b121109650350bee5a9960</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.EntitlementMetaDataBuilder&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;EntitlementMetaDataBuilder&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var EntitlementMetaDataBuilder = Class.create();
EntitlementMetaDataBuilder.prototype = {
    initialize: function() {
        this.arrayUtil = new global.ArrayUtil();

        this.MDM_ATTR_KEY_TO_METADATA_TYPE = {
            SPOKE_TO_CALLER_SCOPE: 'ih_spoke_caller_scope',
            PROTOCOL: 'ih_protocol',
            SPOKE: 'ih_spoke'
        };

        this.MAPPING = 'MAPPING';
        this.ITOM_METER_RATIO = 'ITOM_METER_RATIO';
        this.SPOKE_TO_CALLER_SCOPE = 'SPOKE_TO_CALLER_SCOPE';
        this.ITOM_METER_BUNDLE = 'ITOM_METER_BUNDLE';
        this.APP_BUNDLE = 'APP_BUNDLE';
        this.INTEGRATIONHUB = 'INTEGRATIONHUB';
        this.PROTOCOL = 'PROTOCOL';
        this.GENAI_NOW_ASSIST = 'GENAI_NOW_ASSIST';

        this.ATTR_DETAILS = 'attr_details';
        this.ATTR_VALUE_KEY = 'attr_value_key';
        this.ATTR_KEY = 'attr_key';
        this.ATTR_VALUE = 'attr_value';
        this.METADATA_ID = 'metadata_id';
        this.DESCRIPTION = 'description';
        this.ACTIVE = 'active';
    },

    getMetadataObjList: function(metadataList, entitlementModelName) {
        var metadataObjList = [];
        if (global.JSUtil.nil(metadataList) || global.JSUtil.isEmpty(metadataList) || global.JSUtil.nil(entitlementModelName))
            return metadataObjList;

        if (this.arrayUtil.contains(LicensingEngineConstants.SUBSCRIPTION_TYPE_MODEL_NAMES, entitlementModelName))
            metadataObjList = this.getMetadataObjListFromSubscription(metadataList);

        return metadataObjList;
    },

    /**
     * retrieves metadata details from product data of the subscription entitlement
     */
    getMetadataObjListFromSubscription: function(metadataList) {
        var metadataObjList = [];
        if (global.JSUtil.nil(metadataList) || global.JSUtil.isEmpty(metadataList))
            return metadataObjList;

        var appBundle = this.getITOMMeterBundle(metadataList);

        for (var i = 0; i &lt; metadataList.length; i++) {
            var metadataObj = metadataList[i];
            var metadataType = metadataObj[this.ATTR_KEY];

            if (global.JSUtil.nil(metadataType))
                continue;

            if (metadataType == this.MAPPING || metadataType == this.INTEGRATIONHUB) {
                var metadataDetailsList = this.getMetadataBasedOnAttrKey(metadataObj[this.ATTR_DETAILS]);
                if (global.JSUtil.notNil(metadataDetailsList) &amp;&amp; !global.JSUtil.isEmpty(metadataDetailsList))
                    metadataObjList = metadataObjList.concat(metadataDetailsList);
            } else if (metadataType == this.ITOM_METER_RATIO) {
                var itomMeterRatioObjList = this.getITOMMeterRatio(metadataObj[this.ATTR_DETAILS], appBundle);
                if (global.JSUtil.notNil(itomMeterRatioObjList) &amp;&amp; !global.JSUtil.isEmpty(itomMeterRatioObjList))
                    metadataObjList = metadataObjList.concat(itomMeterRatioObjList);
            } else if (metadataType == this.GENAI_NOW_ASSIST) {
                var genAiMetadataObjList = this._getMetadataDetails(metadataObj[this.ATTR_DETAILS], LicensingEngineDBConstants.GENAI_METADATA);
                if (global.JSUtil.notNil(genAiMetadataObjList) &amp;&amp; !global.JSUtil.isEmpty(genAiMetadataObjList))
                    metadataObjList = metadataObjList.concat(genAiMetadataObjList);
            }
        }

        return metadataObjList;
    },

    /**
     * iterates over all metadata objects to find ITOM_METER_BUNDLE and retrieve app bundle value
     */
    getITOMMeterBundle: function(metadataList) {
        var appBundle = '';

        if (global.JSUtil.nil(metadataList) || global.JSUtil.isEmpty(metadataList))
            return appBundle;

        for (var i = 0; i &lt; metadataList.length; i++) {
            var metadataObj = metadataList[i];
            var metadataType = metadataObj[this.ATTR_KEY];

            if (global.JSUtil.notNil(metadataType) &amp;&amp; metadataType == this.ITOM_METER_BUNDLE) {
                var itomMeterBundle = metadataObj[this.ATTR_DETAILS];

                if (global.JSUtil.nil(itomMeterBundle) || global.JSUtil.isEmpty(itomMeterBundle))
                    return appBundle;

                for (var k = 0; k &lt; itomMeterBundle.length; k++) {
                    var itomMeterBundleObj = itomMeterBundle[k];
                    var active = itomMeterBundleObj[this.ACTIVE];

                    if (global.JSUtil.nil(active) || active != '1')
                        continue;

                    if (global.JSUtil.notNil(itomMeterBundleObj[this.ATTR_VALUE_KEY]) &amp;&amp; itomMeterBundleObj[this.ATTR_VALUE_KEY] == this.APP_BUNDLE) {
                        appBundle = itomMeterBundleObj[this.ATTR_VALUE];
                        return appBundle;
                    }
                }
            }
        }

        return appBundle;
    },


    /**
     * retrieves meter ratio metadata details
     */
    getITOMMeterRatio: function(itomMeterRatioList, appBundle) {
        var itomMeterRatioObjList = [];

        if (global.JSUtil.nil(itomMeterRatioList) || global.JSUtil.isEmpty(itomMeterRatioList))
            return itomMeterRatioObjList;

        for (var i = 0; i &lt; itomMeterRatioList.length; i++) {
            var itomMeterRatio = itomMeterRatioList[i];

            if (this.ATTR_VALUE_KEY in itomMeterRatio &amp;&amp; this.ATTR_VALUE in itomMeterRatio) {
                var itomMeterRatioObj = {};
                itomMeterRatioObj[LicensingEngineDBConstants.TYPE] = LicensingEngineDBConstants.SU_RATIO;
                itomMeterRatioObj[LicensingEngineDBConstants.COLUMN_VALUES] = itomMeterRatio[this.ATTR_VALUE_KEY].replace("|", ",") + "," + itomMeterRatio[this.ATTR_VALUE];

                if (global.JSUtil.notNil(appBundle))
                    itomMeterRatioObj[LicensingEngineDBConstants.COLUMN_VALUES] = itomMeterRatioObj[LicensingEngineDBConstants.COLUMN_VALUES] + "," + appBundle;

                itomMeterRatioObjList.push(itomMeterRatioObj);
            }

        }

        return itomMeterRatioObjList;
    },

    /**
     * retrieves metadata details with following structure
     * [
     *  {
     *      "attr_value": "1",
     *      "attr_value_key": "featureId|featureName",
     *      "active": "1"
     *  },...
     *]
     */
    _getMetadataDetails: function(metadataList, metadataType, bundle) {
        var metadataObjList = [];

        if (global.JSUtil.nil(metadataList) || global.JSUtil.isEmpty(metadataList) || global.JSUtil.nil(metadataType))
            return metadataObjList;

        metadataList.forEach(item =&gt; {
            if (item[this.ACTIVE] == "1" &amp;&amp; this.ATTR_VALUE_KEY in item &amp;&amp; this.ATTR_VALUE in item) {
                let metadataObject = {
                    [LicensingEngineDBConstants.TYPE]: metadataType,
                    [LicensingEngineDBConstants.COLUMN_VALUES]: `${item[this.ATTR_VALUE_KEY].replace("|", ",")},${item[this.ATTR_VALUE]}` + (global.JSUtil.notNil(bundle) ? `,${bundle}` : '')
                };
                metadataObjList.push(metadataObject);
            }
        });

        return metadataObjList;
    },

    /**
     * retrieves IH spoke, IH protocol and IH spoke caller scope metadata details
     */
    getMetadataBasedOnAttrKey: function(metadataAttrList) {
        var metadataList = [];

        if (global.JSUtil.nil(metadataAttrList) || global.JSUtil.isEmpty(metadataAttrList))
            return metadataList;

        for (var i = 0; i &lt; metadataAttrList.length; i++) {
            var metadataAttrObj = metadataAttrList[i];
            var attrValueKey = metadataAttrObj[this.ATTR_VALUE_KEY];
            var active = metadataAttrObj[this.ACTIVE];
            var attrValue = metadataAttrObj[this.ATTR_VALUE];

            if (global.JSUtil.nil(active) || active != '1')
                continue;

            if (global.JSUtil.notNil(attrValueKey) &amp;&amp; attrValueKey in this.MDM_ATTR_KEY_TO_METADATA_TYPE) {
                var metadataObj = {};

                if (global.JSUtil.notNil(attrValue)) {
                    metadataObj[LicensingEngineDBConstants.TYPE] = this.MDM_ATTR_KEY_TO_METADATA_TYPE[attrValueKey];

                    if (attrValueKey == this.PROTOCOL)
                        metadataObj[LicensingEngineDBConstants.COLUMN_VALUES] = attrValue.split("|")[0];
                    else
                        metadataObj[LicensingEngineDBConstants.COLUMN_VALUES] = attrValue.replace("|", ",");

                    metadataList.push(metadataObj);
                }

            }
        }

        return metadataList;
    },

    /**
     * retrieves value based on the keys passed
     * eg: attrKey: customtable_allotment
     *     attrValKey: allotment_type
     */
    getValueFromMetadataListByKey: function(metadataList, attrKey, attrValKey) {
        var value = '';

        if (global.JSUtil.nil(metadataList))
            return value;

        for (var i = 0; i &lt; metadataList.length; i++) {
            var metadataObj = metadataList[i];
            var metadataType = metadataObj[this.ATTR_KEY];

            if (global.JSUtil.notNil(metadataType) &amp;&amp; metadataType == attrKey) {
                var attributeDetails = metadataObj[this.ATTR_DETAILS];

                if (global.JSUtil.nil(attributeDetails))
                    return value;

                for (var k = 0; k &lt; attributeDetails.length; k++) {
                    var attributeDetailsObj = attributeDetails[k];

                    if (global.JSUtil.nil(attributeDetailsObj[this.ACTIVE]) || attributeDetailsObj[this.ACTIVE] != '1')
                        continue;

                    if (global.JSUtil.notNil(attributeDetailsObj[this.ATTR_VALUE_KEY]) &amp;&amp; attributeDetailsObj[this.ATTR_VALUE_KEY] == attrValKey) {
                        value = attributeDetailsObj[this.ATTR_VALUE];
                        return value;
                    }
                }
            }
        }

        return value;
    },

    type: 'EntitlementMetaDataBuilder'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-22 21:39:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3588d8f077b121109650350bee5a9960&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;EntitlementMetaDataBuilder&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3588d8f077b121109650350bee5a9960&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-11 23:37:42&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:43</sys_created_on>
        <sys_id>1956f89983f01210c6695855eeaad32a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>EntitlementMetaDataBuilder</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1956f89983f01210c6695855eeaad32a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:43</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
