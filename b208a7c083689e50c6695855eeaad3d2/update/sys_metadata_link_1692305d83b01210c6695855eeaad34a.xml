<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>170763f5873410103058d1a936cb0bd2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;1. Migrate previous Score Providers to Providers and Provider Setup.
2. Migrate previous Score Based Submission Rules to new version.
3.Fix normalized rating for existing customers.&lt;/description&gt;
        &lt;name&gt;Upgrade VRM score providers, score rules&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[upgradeProvider();
upgradeScoreBasedRules();
updateExistingScores();

function upgradeProvider() {
    var securityType = getChoice('external_scoring', 'score_type', 'security');
    var defaultArea = getRiskArea('Default');

    var gr = new GlideRecord('sn_vdr_risk_asmt_tpss_provider');
    gr.addNotNullQuery('provider_name');
    gr.query();
    while (gr.next()) {
        var sys_id = getOrCreateProvider(gr.provider_name + '');
        var min = parseInt(gr.range_from);
        var max = parseInt(gr.range_to);
        var ranges = rangeMapping(min, max);

        gr.setValue('score_provider', sys_id);
        gr.setValue('score_type', securityType);
        gr.setValue('risk_area', defaultArea);

        gr.setValue('name', gr.provider_name + ' - Security Risk');
        gr.setValue('is_rating', false);

        gr.setValue('minor_from', ranges[0][0]);
        gr.setValue('minor_to', ranges[0][1]);

        gr.setValue('low_from', ranges[1][0]);
        gr.setValue('low_to', ranges[1][1]);

        gr.setValue('moderate_from', ranges[2][0]);
        gr.setValue('moderate_to', ranges[2][1]);

        gr.setValue('high_from', ranges[3][0]);
        gr.setValue('high_to', ranges[3][1]);

        gr.setValue('critical_from', ranges[4][0]);
        gr.setValue('critical_to', ranges[4][1]);

        gr.update();
    }
}

function upgradeScoreBasedRules() {
    var gr = new GlideRecord('sn_vdr_risk_asmt_tpss_rule');
    gr.query();
    while (gr.next()) {
		if(!gs.nil(gr.getValue('order')))
			continue;
		
        gr.setValue('table', 'core_company');
        gr.setValue('send_assessment', true);
        gr.setValue('order', 100);
		
		if(!gs.nil(gr.getValue('vendor')))
			gr.setValue('apply_to_vendors', "sys_id=" + gr.vendor + "^EQ");
		
        gr.update();
    }
}

function updateExistingScores() {
    var api = new sn_vdr_risk_asmt.ThirdPartyMetrics();
    var gr = new GlideRecord('sn_vdr_risk_asmt_security_score');
    gr.setWorkflow(false);
    gr.addNotNullQuery('score');
    gr.query();
    while (gr.next()) {
        api.validateAndNormalizeRating(gr);
        gr.update();
    }
}

//Old scoring only supports one range and in ascending order.
function rangeMapping(min, max) {
    var ranges = [];
    var interval = (max + 1 - min) / 5;
    var m1, m2;
    for (var i = 0; i &lt; 5; i++) {
        m1 = Math.floor(min + interval * i);
        m2 = i == 4 ? max : Math.floor(m1 + interval);

        if (i == 0) ranges.push([m1, m2]);
        else ranges.push([m1 + 1, m2]);
    }
    return ranges;
}

function getOrCreateProvider(name) {
    var gr = new GlideRecord('sn_vdr_risk_asmt_tpss_provider_basic');
    gr.addQuery('name', name);
    gr.query();
    if (gr.next())
        return gr.getUniqueValue();
    else {
        gr.setValue('name', name);
        gr.setValue('short_description', gs.getMessage('Automatically migrated from previous version during upgrade.'));
        return gr.insert();
    }
}

function getChoice(category, set, name) {
    var gr = new GlideRecord('sn_grc_choice');
    gr.addQuery('choice_category', category);
    gr.addQuery('set', set);
    gr.addQuery('name', name);
    gr.query();
    if (gr.next())
        return gr.getUniqueValue();

    return null;
}

function getRiskArea(name) {
    var gr = new GlideRecord('sn_vdr_risk_asmt_risk_area_definition');
    gr.addQuery('name', name);
    gr.query();
    if (gr.next())
        return gr.getUniqueValue();

    return null;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-05-16 17:17:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;170763f5873410103058d1a936cb0bd2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;43&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Upgrade VRM score providers, score rules&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;4c821a2d9f42220030581471367fcf2c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;4c821a2d9f42220030581471367fcf2c&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_170763f5873410103058d1a936cb0bd2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-08-05 03:49:33&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:19:23</sys_created_on>
        <sys_id>1692305d83b01210c6695855eeaad34a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Upgrade VRM score providers, score rules</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1692305d83b01210c6695855eeaad34a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:19:23</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
