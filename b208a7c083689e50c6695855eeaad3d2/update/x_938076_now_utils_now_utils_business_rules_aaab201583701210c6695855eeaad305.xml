<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Populate Window End Based On SLA</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var excludeState = [3,4,16];
 if (!current.assigned_to && !current.has_appointment && !current.is_fixed_window && (current.parent.maintenance_plan || !current.window_end) && !excludeState.includes(current.state)) {
  if (current.window_end.getGlideObject().getNumericValue() <=  current.window_start.getGlideObject().getNumericValue())
   return;
  var glideSLA = new GlideRecord('task_sla');
  glideSLA.addQuery('task', current.parent);
  glideSLA.query();
  
  var maxBreachTime = new global.FSMGeneralUtil().calculateWindowEndBasedOnSLA(glideSLA);
  // for non PWM there is no change.
  if(gs.nil(current.parent.maintenance_plan) && maxBreachTime){
   current.window_end = maxBreachTime;
   return;
  }
  // for PWM record, below logic will be used to update window_end. request_due_by_date will be available for PWM.
  if (current.parent.maintenance_plan && maxBreachTime && (current.window_end.getDisplayValue() == maxBreachTime || current.parent.requested_due_by.getGlideObject().getNumericValue() >= current.window_end.getGlideObject().getNumericValue())) {
   current.window_end = maxBreachTime;
  } else {
   var notes_message = gs.getMessage("Window end time is overridden by user. This may affect the window end time calculated by SLA");
      current.work_notes = notes_message;
  } 
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:06</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>aaab201583701210c6695855eeaad305</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Populate Window End Based On SLA</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_aaab201583701210c6695855eeaad305</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:06</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=aaab201583701210c6695855eeaad305"/>
</record_update>
