<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>942b9f60ffb02110468365d7d3b8fea0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityCalculation_UserContextV2&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityCalculation_UserContextV2&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * Provides an abstraction over any DAO objects that the core business logic uses for user/group information.
 * This allows a layer of indirection from the business logic having more direct knowledge of the schema.
 */
var UnallocatedEntityCalculation_UserContextV2 = Class.create();
UnallocatedEntityCalculation_UserContextV2.prototype = {

    /**
     * @param {guid} userId The sys_user.sys_id the context represents
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     * @param {bool} subscriptionContext The active subscription context
     * @param {bool} userHasRoleCache A user role membership cache
     * @param {bool} userHasSubscriptionCache A user subscription membership cache
     */
    initialize: function(userId, oobRolesOnly, subscriptionContext, userHasRoleCache, userHasSubscriptionCache) {
        this._userId = userId;

        this._userRoleDao = new sn_entitlement.PassThroughCache(new sn_entitlement.UserRoleDao());
        this._subscriptionEntitlementDao = new sn_entitlement.PassThroughCache(new sn_entitlement.SubscriptionEntitlementDao());
        this._subscriptionRoleService = new sn_entitlement.SubscriptionRoleService(oobRolesOnly);
        this._userHasRoleCache = userHasRoleCache;
        this._userHasSubscriptionCache = userHasSubscriptionCache;
    },

    /**
     * The key used to identify the sys_user.sys_id value
     * 
     * @returns {string} A string to be used as a key
     */
    getEntityKeyName: function() {
        return 'sys_user.sys_id';
    },

    /**
     * The ID value for the sys_user.sys_id output
     * 
     * @returns {string} A string to be used as the value to identify this record
     */
    getEntityKeyValue: function() {
        return this._userId;
    },

    /**
     * Retrieves the subscription Ids the user is subscribed to
     *
     * @returns {array} An array of subscription_entitlement.sys_id values
     */
    getSubscriptionIdsSubscribed: function() {
        return this._userHasSubscriptionCache.getSubscriptionIdsByUserId(this._userId);
    },

    /**
     * Retrieves all of the role IDs assigned to a user. (Direct or indirectly via group)
     * 
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsAssigned: function() {
        return this._userHasRoleCache.getRoleIdsByUserId(this._userId);
    },

    /**
     * Retrieves all of the role IDs subscribed to by a user.
     * 
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsSubscribed: function() {
        const userSubscriptionIds = this._subscriptionEntitlementDao.getSubscriptionIdsByUserIdAndIsPerUser(this._userId);
        const roleIds = new Set(userSubscriptionIds.flatMap(subscriptionId =&gt; this._subscriptionRoleService.getRoleIdsBySubscriptionIdAndRequiresASubscription(subscriptionId)));
        return Array.from(roleIds);
    },

    type: 'UnallocatedEntityCalculation_UserContextV2'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-01 00:07:20&lt;/sys_created_on&gt;
        &lt;sys_id&gt;942b9f60ffb02110468365d7d3b8fea0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityCalculation_UserContextV2&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_942b9f60ffb02110468365d7d3b8fea0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-06 16:57:32&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:43</sys_created_on>
        <sys_id>c0a8f85183341210c6695855eeaad368</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityCalculation_UserContextV2</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c0a8f85183341210c6695855eeaad368</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:43</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
