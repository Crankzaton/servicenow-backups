<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8321afba93e73510b31a30dcebba1008</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description/&gt;
        &lt;name&gt;WFCopyAssessmentToAssessResultsTable&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var count = 0;
    var extended_demand = '';
    var chgOwner;
    var mtrTypeRec = gs.getProperty('wf.spm.cms.demand.assessments');
    var metricObj = JSON.parse(mtrTypeRec);
    var mtrType = metricObj["initAssessment"];
    var taskSysId = current.task_id.getValue('sys_id');

    var taskGr = new GlideRecord('task');
    taskGr.addEncodedQuery('sys_class_name=dmn_demand_task');
    taskGr.addQuery('sys_id', taskSysId);
    taskGr.query();
    if (taskGr.next()) {
        taskSysId = taskGr.parent;

    }

    var asmtInstance = current.task_id.getValue('sys_id');
    var dmnRec = new GlideRecord('u_assessment_results');

    dmnRec.addQuery('u_demand.sys_id', taskSysId);
    dmnRec.orderBy('sys_created_on');
    dmnRec.query();

    if (dmnRec.next()) {

        extended_demand = dmnRec.getValue('sys_id');

    }

    var ex_dmd = new GlideRecord('u_assessment_results'); // custom table to hold results value

    ex_dmd.addQuery('sys_id', extended_demand);

    ex_dmd.query();

    if (ex_dmd.next()) {


        var asmt_aiq = new GlideRecord('asmt_metric_result'); // as the data is available on metric result table

        asmt_aiq.addQuery('instance', current.getValue('sys_id'));
        asmt_aiq.query();
        while (asmt_aiq.next()) {

            var answer = asmt_aiq.string_value.toString();

            var assess_metric = asmt_aiq.getDisplayValue('metric');

            var asmt_aiq2 = new GlideAggregate('asmt_metric_result'); // as the data is available on metric result table

            asmt_aiq2.addQuery('instance', current.getValue('sys_id'));
            asmt_aiq2.addQuery('metric.name', asmt_aiq.metric.name);
            asmt_aiq2.addAggregate('count', 'metric.name');
            asmt_aiq2.query();
            if (asmt_aiq2.next()) {

                if (asmt_aiq2.getAggregate('COUNT', 'metric.name') &gt; 1) {

                    answer = canCatass(current.getValue('sys_id'), current.task_id.sys_id, asmt_aiq.metric.name);

                }


            }

            ex_dmd.setValue(assess_metric, answer);

            //if (current.metric_type.toString() === mtrType) {
            if (assess_metric === 'u_determine_change_owner' || assess_metric === 'u_confirm_change_owner') {

                chgOwner = asmt_aiq.reference_value;

                var usrGr = new GlideRecord('sys_user');
                if (usrGr.get('sys_id', chgOwner)) {
                    if (assess_metric === 'u_determine_change_owner') {
                        ex_dmd.u_determine_change_owner = usrGr.sys_id;
                    }
                    if (assess_metric === 'u_confirm_change_owner') {
                        ex_dmd.u_confirm_change_owner = usrGr.sys_id;
                    }

                }
            }

            if (assess_metric === 'u_product_information') {
                var prodGr = new GlideRecord('sn_jira_int_project');
                if (prodGr.get('sys_id', asmt_aiq.reference_value)) {
                    ex_dmd.u_product_information = prodGr.sys_id;
                }
            }

        }

        ex_dmd.update();

    }


    function canCatass(curObj, instID, assMet) {


        var ans = "";
        var canCat = new GlideRecord('asmt_metric_result');

        canCat.addQuery('instance', curObj);

        canCat.addQuery('source_id', instID);

        canCat.addQuery('metric.name', assMet);

        canCat.query();

        while (canCat.next()) {

            ans = ans + "," + canCat.string_value;


        }
        ans = ans.substring(1);
        return ans;

    }



})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-01-09 13:23:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8321afba93e73510b31a30dcebba1008&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WFCopyAssessmentToAssessResultsTable&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_8321afba93e73510b31a30dcebba1008&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-01-09 13:23:56&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:22:21</sys_created_on>
        <sys_id>6143fc9d83b01210c6695855eeaad37d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFCopyAssessmentToAssessResultsTable</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6143fc9d83b01210c6695855eeaad37d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:22:21</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
