<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>71af4d4f5320211031a5ddeeff7b1252</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VANotificationAPIHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Helper methods used for validation when creating VA notification content and delivery channels using script APIs.&lt;/description&gt;
        &lt;name&gt;VANotificationAPIHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VANotificationAPIHelper = Class.create();

VANotificationAPIHelper.NOTIFICATION_TABLE = "sys_notification";
VANotificationAPIHelper.NOTIFICATION_VA_CONTENT_TABLE = "sys_notification_va_content";
VANotificationAPIHelper.NOTIFICATION_VA_CONTENT_MESSAGING_TABLE = "sys_notification_va_content_messaging";
VANotificationAPIHelper.CHANNEL_TABLE = "sys_cs_channel";
VANotificationAPIHelper.NOTIFICATION_DELIVERY_CHANNEL_TABLE = "sys_cs_notification_delivery_channel";
VANotificationAPIHelper.PROVIDER_APPLICATION_TABLE = "sys_cs_provider_application";
VANotificationAPIHelper.PROVIDER_TABLE = "sys_cs_provider";
VANotificationAPIHelper.TYPE_TO_TABLE_MAP = {
    'Virtual Agent Content - Chat': 'sys_notification_va_content',
    'Virtual Agent Content - Messaging': 'sys_notification_va_content_messaging'
};


VANotificationAPIHelper.isNotificationValid = function(notificationSysId) {
    if (gs.nil(notificationSysId))
        return false;
    var notificationGr = VANotificationAPIHelper.getNotificationGr(notificationSysId);
    return notificationGr.isValidRecord();
};

VANotificationAPIHelper.getNotificationGr = function(notificationSysId) {
    var notificationGr = new GlideRecordSecure(VANotificationAPIHelper.NOTIFICATION_TABLE);
    notificationGr.get(notificationSysId);
    return notificationGr;
};

VANotificationAPIHelper.isVAContentValid = function(contentId) {
    var contentGr = new GlideRecordSecure(VANotificationAPIHelper.NOTIFICATION_VA_CONTENT_TABLE);
    contentGr.get(contentId);
    return contentGr.isValidRecord();
};

VANotificationAPIHelper.getVAContentType = function(contentId) {
    var contentGr = new GlideRecordSecure(VANotificationAPIHelper.NOTIFICATION_VA_CONTENT_TABLE);
    contentGr.get(contentId);
    if (contentGr.isValidRecord()) {
        var tableName = contentGr.getValue("sys_class_name");
        for (var type in VANotificationAPIHelper.TYPE_TO_TABLE_MAP) {
            if (VANotificationAPIHelper.TYPE_TO_TABLE_MAP[type] == tableName)
                return type;
        }
    }
    return '';
};

VANotificationAPIHelper.areChannelsValid = function(channelIds) {
    var channelArr = channelIds.split(",");
    var channelGA = new GlideAggregate(VANotificationAPIHelper.CHANNEL_TABLE);
    channelGA.addAggregate("COUNT");
    channelGA.addQuery("sys_id", "IN", channelArr);
    channelGA.query();
    if (channelGA.next()) {
        if (channelGA.getAggregate("COUNT") == channelArr.length)
            return true;
    }
    return false;
};

VANotificationAPIHelper.isDeliveryChannelValid = function(channelId) {
    var channelGr = new GlideRecordSecure(VANotificationAPIHelper.NOTIFICATION_DELIVERY_CHANNEL_TABLE);
    channelGr.get(channelId);
    return channelGr.isValidRecord();
};

VANotificationAPIHelper.isProviderChannelIdentityValidForConnection = function(identityId, providerChannelId) {
    var identityGr = new GlideRecordSecure(VANotificationAPIHelper.PROVIDER_APPLICATION_TABLE);
    identityGr.get(identityId);
    return identityGr.isValidRecord() &amp;&amp; identityGr.getValue('provider') === providerChannelId;
};

VANotificationAPIHelper.isTableValid = function(tableName) {
    var table = new TableUtils(tableName);
    return table.tableExists();
};

VANotificationAPIHelper.isProviderChannelValidForMessagingContent = function(providerChannelId) {
    var providerChannelGr = new GlideRecordSecure(VANotificationAPIHelper.PROVIDER_TABLE);
    providerChannelGr.get(providerChannelId);
    return providerChannelGr.isValidRecord() &amp;&amp; providerChannelGr.channel.type + '' === 'messaging';
};

VANotificationAPIHelper.isActiveContentExist = function(notificationId, contentType, contentId) {

    var existingContentGr = new GlideRecord(VANotificationAPIHelper.TYPE_TO_TABLE_MAP[contentType]);
    existingContentGr.addQuery('sys_class_name', VANotificationAPIHelper.TYPE_TO_TABLE_MAP[contentType]);
    existingContentGr.addQuery('notification', notificationId);
    existingContentGr.addActiveQuery();
    // update case
    if (!gs.nil(contentId))
        existingContentGr.addQuery('sys_id', '!=', contentId);

    existingContentGr.query();
    if (existingContentGr.hasNext())
        return true;

    return false;
};

VANotificationAPIHelper.doesMwebChannelSupportMultipleConversations = function() {
    var channelGR = new GlideRecord('sys_cs_channel');
    channelGR.addQuery('name', 'mweb');
    channelGR.query();

    var results = {};
    if (channelGR.next()) {
        results = {
            "sysId": channelGR.getValue('sys_id'),
            "mwebSupportMultipleConversations": channelGR.getValue('supports_multiple_conversations') == 1 ? true : false
        };
    } else {
        results = {
            "sysId": "",
            "mwebSupportMultipleConversations": false
        };
    }
    return results;
},

VANotificationAPIHelper.getAllChatChannels = function() {
    var sysCSChannelGr = new GlideRecord(VANotificationAPIHelper.CHANNEL_TABLE);
    sysCSChannelGr.addQuery('type', 'chat');
    sysCSChannelGr.query();
    var deliveryChannels = [];
    while (sysCSChannelGr.next())
        deliveryChannels.push(sysCSChannelGr.getUniqueValue());
    return deliveryChannels.join(',');
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-26 22:08:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;71af4d4f5320211031a5ddeeff7b1252&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VANotificationAPIHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Virtual Agent integration with notifications" source="com.glide.cs.notification"&gt;e18d78203c75311068bcf327dfe37f16&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_71af4d4f5320211031a5ddeeff7b1252&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-16 11:12:18&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:36</sys_created_on>
        <sys_id>6bf6b45d83f01210c6695855eeaad3dd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VANotificationAPIHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6bf6b45d83f01210c6695855eeaad3dd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
