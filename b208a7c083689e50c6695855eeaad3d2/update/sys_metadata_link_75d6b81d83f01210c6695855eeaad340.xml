<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>641f78b4c7132010fc3a2aa9b8c260c1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UniversalLinksUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UniversalLinksUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UniversalLinksUtil = Class.create();
UniversalLinksUtil.prototype = {

    initialize: function() {},

    getSupportedListScreens: function() {
        var tableName = current.source_table_name;
        var screens = this._getScreens(tableName);
        return ("sys_idIN" + screens);
    },

    _getScreens: function(tableName) {
        var segments = this._getItemStreamSegmentsWithSingleItemStream(tableName);
        segments = this._getItemsStreamSegmentByItemStreamDITable(segments, tableName);
        var screens = this._getScreensWithSingleSegment();
        screens = this._getListScreensFromScreensListWithSingleSegment(segments, screens);
        return screens.toString();
    },

    // Return all segment with a single item stream
    _getItemStreamSegmentsWithSingleItemStream: function(tableName) {
        var segments = [];
        var segmentsAggGR = new GlideAggregate('sys_sg_item_stream_m2m_segment');
        segmentsAggGR.addAggregate(this.COUNT.value, 'segment');
        segmentsAggGR.addHaving(this.COUNT.value, '=', 1);
        segmentsAggGR.query();
        while (segmentsAggGR.next())
            segments.push(segmentsAggGR.getValue('segment'));

        return segments;
    },

    // Return all segment with single item stream based on stream.data_item.table 
    _getItemsStreamSegmentByItemStreamDITable: function(segments, tableName) {
        var segmentList = [];
        var gr = new GlideRecord('sys_sg_item_stream_m2m_segment');
        gr.addQuery('item_stream.data_item.table', tableName);
        gr.addQuery('segment', 'IN', segments.toString());
        gr.query();
        while (gr.next())
            segmentList.push(gr.getValue('segment'));

        return segmentList;
    },

    _getScreensWithSingleSegment: function() {
        var screens = [];
        var screensAggGR = new GlideAggregate('sys_sg_item_stream_segment');
        screensAggGR.addAggregate(this.COUNT.value, 'screen');
        screensAggGR.addHaving(this.COUNT.value, '=', 1);
        screensAggGR.query();
        while (screensAggGR.next())
            screens.push(screensAggGR.getValue('screen'));
		
        return screens;
    },

    _getListScreensFromScreensListWithSingleSegment: function(segmentsList, screensList) {
        var list = [];
        var segmentGR = new GlideRecord('sys_sg_item_stream_segment');
        segmentGR.addQuery('sys_id', 'IN', segmentsList.toString());
        segmentGR.addQuery('screen', 'IN', screensList.toString());
        segmentGR.query();
        while (segmentGR.next())
            list.push(segmentGR.getValue('screen'));
		
        return list;
    },

    getSupportedRecordScreens: function() {
        var tableName = current.source_table_name;
        var screens = this._getRecordScreens(tableName);

        return ("sys_idIN" + screens);
    },

    _getRecordScreens: function(tableName) {
        var recordScreensList = [];
        recordScreensList = recordScreensList.concat(this._getRecordScreensWithTableOrViewConfig(tableName));
        recordScreensList = recordScreensList.concat(this._getRecordWithFormSegment(tableName));
        return this._getUniqueValues(recordScreensList);
    },

    _getRecordScreensWithTableOrViewConfig: function(tableName) {
        var screens = [];
        var recordScreenWithTableGR = new GlideRecord('sys_sg_form_screen');
        var qc = recordScreenWithTableGR.addQuery('table', tableName);
        qc.addOrCondition('data_item.table', tableName);
        qc.addOrCondition('item_view.table', tableName);
        qc.addOrCondition('view_config.table', tableName);
        recordScreenWithTableGR.query();
        while (recordScreenWithTableGR.next())
            screens.push(recordScreenWithTableGR.getUniqueValue());

        return screens;
    },

    _getRecordWithFormSegment: function(tableName) {
        var screensWithSegment = [];
        var screensWithSegmentGR = new GlideRecord('sys_sg_form_segment');
        screensWithSegmentGR.addNullQuery('form.item_view');
        screensWithSegmentGR.addNullQuery('form.view_config');
        var qc = screensWithSegmentGR.addQuery('embedded_screen.ref_sys_sg_details_screen.table', tableName);
        qc.addOrCondition('embedded_screen.ref_sys_sg_activity_stream_screen.table', tableName);
        screensWithSegmentGR.query();
        while (screensWithSegmentGR.next())
            screensWithSegment.push(screensWithSegmentGR.getValue('form'));

        return screensWithSegment;
    },

    // Returning an Array after removing all duplications
    _getUniqueValues: function(array) {
        var uniqueValues = {};
        for (var i = 0; i &lt; array.length; i++)
            uniqueValues[array[i]] = true;

        return Object.keys(uniqueValues);
    },

    COUNT: {
        'value': 'COUNT'
    },

    type: 'UniversalLinksUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-04-01 05:21:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;641f78b4c7132010fc3a2aa9b8c260c1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;144&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UniversalLinksUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile plugin" source="com.glide.sg"&gt;2b3434a83c31311068bcf327dfe37fa3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_641f78b4c7132010fc3a2aa9b8c260c1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-06-15 20:50:49&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:56</sys_created_on>
        <sys_id>75d6b81d83f01210c6695855eeaad340</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UniversalLinksUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_75d6b81d83f01210c6695855eeaad340</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:56</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
