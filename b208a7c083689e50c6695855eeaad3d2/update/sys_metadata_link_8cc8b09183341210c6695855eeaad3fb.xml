<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9e808c400fc12010e70a4abec4767eee</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mobile_card_bui.MobileUiRuleRepository&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Respository for Mobile UI Rules&lt;/description&gt;
        &lt;name&gt;MobileUiRuleRepository&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MobileUiRuleRepository = Class.create();
MobileUiRuleRepository.prototype = {
  initialize: function () { },

  type: "MobileUiRuleRepository",

  setIfPresent: function (field, value, gr) {
    if (value) {
      gr.setValue(field, value);
    }
  },

  saveMobileUiRuleActions: function (mobileUiRuleId, mobileUiRuleActions) {
    var gr = new GlideRecord("sys_sg_ui_rule_action");
    mobileUiRuleActions.forEach(
      function (mobileUiRuleAction, index) {
        if (mobileUiRuleAction.id) {
          if (gr.get(mobileUiRuleAction.id)) {
            this.setIfPresent("sys_scope", mobileUiRuleAction.scope, gr);
            this.setIfPresent("operation", mobileUiRuleAction.operation, gr);
            this.setIfPresent("order", mobileUiRuleAction.order, gr);
            this.setIfPresent("target", mobileUiRuleAction.target, gr);
            this.setIfPresent("value", mobileUiRuleAction.value, gr);
            this.setIfPresent("ui_rule", mobileUiRuleId, gr);
            gr.update();
          }
        } else {
          gr.newRecord();
          this.setIfPresent("sys_scope", mobileUiRuleAction.scope, gr);
          this.setIfPresent("operation", mobileUiRuleAction.operation, gr);
          this.setIfPresent("order", mobileUiRuleAction.order, gr);
          this.setIfPresent("target", mobileUiRuleAction.target, gr);
          this.setIfPresent("value", mobileUiRuleAction.value, gr);
          this.setIfPresent("ui_rule", mobileUiRuleId, gr);
          gr.insert();
        }
      }.bind(this)
    );
  },

  saveMobileUiRuleAction: function (mobileUiRuleAction) {
    var gr = new GlideRecord("sys_sg_ui_rule_action");
    if (mobileUiRuleAction.id) {
      if (gr.get(mobileUiRuleAction.id)) {
        this.setIfPresent("sys_scope", mobileUiRuleAction.scope, gr);
        this.setIfPresent("operation", mobileUiRuleAction.operation, gr);
        this.setIfPresent("order", mobileUiRuleAction.order, gr);
        this.setIfPresent("target", mobileUiRuleAction.target, gr);
        this.setIfPresent("value", mobileUiRuleAction.value, gr);
        this.setIfPresent("ui_rule", mobileUiRuleAction.mobileUiRuleId, gr);
        gr.update();
      }
    } else {
      gr.newRecord();
      this.setIfPresent("sys_scope", mobileUiRuleAction.scope, gr);
      this.setIfPresent("operation", mobileUiRuleAction.operation, gr);
      this.setIfPresent("order", mobileUiRuleAction.order, gr);
      this.setIfPresent("target", mobileUiRuleAction.target, gr);
      this.setIfPresent("value", mobileUiRuleAction.value, gr);
      this.setIfPresent("ui_rule", mobileUiRuleAction.mobileUiRuleId, gr);
      gr.insert();
    }

    return gr;
  },

  saveMobileUiRule: function (mobileUiRule) {
    var mobileUiRuleGR = new GlideRecord("sys_sg_ui_rule");

    if (mobileUiRule.id) {
      if (mobileUiRuleGR.get(mobileUiRule.id)) {
        this.setIfPresent("sys_scope", mobileUiRule.scope, mobileUiRuleGR);
        this.setIfPresent("active", mobileUiRule.active, mobileUiRuleGR);
        mobileUiRuleGR.setValue("condition", mobileUiRule.condition);
        this.setIfPresent("name", mobileUiRule.name, mobileUiRuleGR);
        this.setIfPresent("order", mobileUiRule.order, mobileUiRuleGR);
        this.setIfPresent("parent_id", mobileUiRule.parentId, mobileUiRuleGR);
        this.setIfPresent(
          "parent_table",
          mobileUiRule.parentTable,
          mobileUiRuleGR
        );
        this.setIfPresent(
          "reverse_if_false",
          mobileUiRule.reverseIfFalse,
          mobileUiRuleGR
        );
        this.setIfPresent("trigger", mobileUiRule.trigger, mobileUiRuleGR);
        mobileUiRuleGR.update();
      }
    } else {
      this.setIfPresent("sys_scope", mobileUiRule.scope, mobileUiRuleGR);
      this.setIfPresent("active", mobileUiRule.active, mobileUiRuleGR);
      mobileUiRuleGR.setValue("condition", mobileUiRule.condition);
      this.setIfPresent("name", mobileUiRule.name, mobileUiRuleGR);
      this.setIfPresent("order", mobileUiRule.order, mobileUiRuleGR);
      this.setIfPresent("parent_id", mobileUiRule.parentId, mobileUiRuleGR);
      this.setIfPresent(
        "parent_table",
        mobileUiRule.parentTable,
        mobileUiRuleGR
      );
      this.setIfPresent(
        "reverse_if_false",
        mobileUiRule.reverseIfFalse,
        mobileUiRuleGR
      );
      this.setIfPresent("trigger", mobileUiRule.trigger, mobileUiRuleGR);
      mobileUiRuleGR.insert();
    }

    if (
      mobileUiRule.mobileUiRuleActions != undefined &amp;&amp;
      mobileUiRule.mobileUiRuleActions.length &gt; 0
    ) {
      this.saveMobileUiRuleActions(
        mobileUiRuleGR.getValue("sys_id"),
        mobileUiRule.mobileUiRuleActions
      );
    }

    return mobileUiRuleGR;
  },

  updateMobileUiRule: function (mobileUiRule) {
    var mobileUiRuleGR = new GlideRecord("sys_sg_ui_rule");

    if (mobileUiRuleGR.get(mobileUiRule.id)) {
      this.setIfPresent("sys_scope", mobileUiRule.scope, mobileUiRuleGR);
      this.setIfPresent("active", mobileUiRule.active, mobileUiRuleGR);
      mobileUiRuleGR.setValue("condition", mobileUiRule.condition);
      this.setIfPresent("name", mobileUiRule.name, mobileUiRuleGR);
      this.setIfPresent("order", mobileUiRule.order, mobileUiRuleGR);
      this.setIfPresent("parent_id", mobileUiRule.parentId, mobileUiRuleGR);
      this.setIfPresent(
        "parent_table",
        mobileUiRule.parentTable,
        mobileUiRuleGR
      );
      this.setIfPresent(
        "reverse_if_false",
        mobileUiRule.reverseIfFalse,
        mobileUiRuleGR
      );
      this.setIfPresent("trigger", mobileUiRule.trigger, mobileUiRuleGR);
      mobileUiRuleGR.update();

      if (
        mobileUiRule.mobileUiRuleActions != undefined &amp;&amp;
        mobileUiRule.mobileUiRuleActions.length &gt; 0
      ) {
        this.saveMobileUiRuleActions(
          mobileUiRuleGR.getValue("sys_id"),
          mobileUiRule.mobileUiRuleActions
        );
      }
      return mobileUiRuleGR;
    }

    return mobileUiRuleGR;
  },

  updateMobileUiRuleAction: function (mobileUiRuleAction) {
    var mobileUiRuleActionGR = new GlideRecord("sys_sg_ui_rule_action");

    if (mobileUiRuleActionGR.get(mobileUiRuleAction.id)) {
      this.setIfPresent(
        "sys_scope",
        mobileUiRuleAction.scope,
        mobileUiRuleActionGR
      );
      this.setIfPresent(
        "operation",
        mobileUiRuleAction.operation,
        mobileUiRuleActionGR
      );
      this.setIfPresent(
        "order",
        mobileUiRuleAction.order,
        mobileUiRuleActionGR
      );
      this.setIfPresent(
        "target",
        mobileUiRuleAction.target,
        mobileUiRuleActionGR
      );
      this.setIfPresent(
        "value",
        mobileUiRuleAction.value,
        mobileUiRuleActionGR
      );
      this.setIfPresent(
        "ui_rule",
        mobileUiRuleAction.mobileUiRuleId,
        mobileUiRuleActionGR
      );
      mobileUiRuleActionGR.update();

      return mobileUiRuleActionGR;
    }

    return mobileUiRuleActionGR;
  },

  deleteMobileUiRule: function (mobileUiRuleId) {
    var hasRecordBeenDeleted = false;
    var mobileUiRuleGR = new GlideRecord("sys_sg_ui_rule");

    if (mobileUiRuleGR.get(mobileUiRuleId)) {
      hasRecordBeenDeleted = mobileUiRuleGR.deleteRecord();
    }

    return hasRecordBeenDeleted;
  },

  deleteMobileUiRuleAction: function (mobileUiRuleActionId) {
    var hasRecordBeenDeleted = false;
    var mobileUiRuleActionGR = new GlideRecord("sys_sg_ui_rule_action");

    if (mobileUiRuleActionGR.get(mobileUiRuleActionId)) {
      hasRecordBeenDeleted = mobileUiRuleActionGR.deleteRecord();
    }

    return hasRecordBeenDeleted;
  },

  updateMobileUiRuleOrders: function (mobileUiRuleOrders) {
    var mobileUiRuleGR = new GlideRecord("sys_sg_ui_rule");
    mobileUiRuleOrders.forEach(
      function (mobileUiRuleOrder, index) {
        if (mobileUiRuleOrder.id) {
          if (mobileUiRuleGR.get(mobileUiRuleOrder.id)) {
            this.setIfPresent("order", mobileUiRuleOrder.order, mobileUiRuleGR);
            mobileUiRuleGR.update();
          }
        }
      }.bind(this)
    );
    return true;
  },

  updateMobileUiRuleActionOrders: function (mobileUiRuleActionOrders) {
    var mobileUiRuleActionGR = new GlideRecord("sys_sg_ui_rule_action");
    mobileUiRuleActionOrders.forEach(
      function (mobileUiRuleActionOrder, index) {
        if (mobileUiRuleActionOrder.id) {
          if (mobileUiRuleActionGR.get(mobileUiRuleActionOrder.id)) {
            this.setIfPresent(
              "order",
              mobileUiRuleActionOrder.order,
              mobileUiRuleActionGR
            );
            mobileUiRuleActionGR.update();
          }
        }
      }.bind(this)
    );
    return true;
  },
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-12-07 20:26:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9e808c400fc12010e70a4abec4767eee&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;87&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MobileUiRuleRepository&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile Card Builder" source="sn_mobile_card_bui"&gt;012fa9ad7367ad6393ae5dea97af6f65&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile Card Builder"&gt;012fa9ad7367ad6393ae5dea97af6f65&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9e808c400fc12010e70a4abec4767eee&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-05 12:06:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:16</sys_created_on>
        <sys_id>8cc8b09183341210c6695855eeaad3fb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MobileUiRuleRepository</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8cc8b09183341210c6695855eeaad3fb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:16</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
