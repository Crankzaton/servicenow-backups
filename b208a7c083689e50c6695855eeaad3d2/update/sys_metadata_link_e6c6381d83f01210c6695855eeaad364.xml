<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5fe2951ec3e0211095a1ec4b7d40dd99</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WSDRestCheckOverlappingReservationsSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Handles the business logic of  /overlapping_reservations end point of scripted rest api WSD search&lt;/description&gt;
        &lt;name&gt;WSDRestCheckOverlappingReservationsSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WSDRestCheckOverlappingReservationsSNC = Class.create();
WSDRestCheckOverlappingReservationsSNC.prototype = {
    initialize: function() {},
	process: function(request, response) {
		var RESOURCE_PATH = '/api/sn_wsd_rsv/search/overlapping_reservation/';
		var apiHelper = new WSDApiHelper();
		var restValidator = new WSDRestRequestValidator();
		var recurringReservationService = new WSDRecurringReservationService();
		var reservationService = new WSDReservationService();
		var shiftValidator = new WSDShiftValidator();
		var requestObj = {
			start: String(request.queryParams.start),
			end: String(request.queryParams.end),
			userId: String(request.queryParams.user_id),
			timezone: gs.nil(String(request.queryParams.timezone)) ? String(request.queryParams.timezone) : gs.getSession().getTimeZoneName()
		};
		
		if(request.queryParams.reservable_id)
			requestObj.reservableId = String(request.queryParams.reservable_id);
			
		if(request.queryParams.recurring_pattern)
			requestObj.recurringPattern = JSON.parse(request.queryParams.recurring_pattern);
		
		if(request.queryParams.shift_info_obj)
			requestObj.shiftInfoObj = JSON.parse(request.queryParams.shift_info_obj);
		
		if(request.queryParams.reservation_id)
			requestObj.reservationId = String(request.queryParams.reservation_id);

		try{
			// validate required fields and format
			var validationResult = restValidator.validateOverlappingRsvRequest(requestObj);
			if (!validationResult.valid) {
				apiHelper.setBadRequestResponse(response, RESOURCE_PATH, gs.getMessage('The overlapping reservation request data is invalid, or the required fields are missing. Please try again'), validationResult.msg, requestObj);
				return;
			}

			// validate recurring pattern
			if(requestObj.recurringPattern){
				var recurringPattern = requestObj.recurringPattern;
				var applyToShift;
				var resolverResult = {};
				//if shift based recurring reservation, need shift payload to calculate dates and times according to shift
				if(requestObj.shiftInfoObj){
					resolverResult = shiftValidator.validateAndResolveOverlappingShiftRecurringRsv(requestObj);
					
					if (!resolverResult.valid) {
						apiHelper.setBadRequestResponse(response, RESOURCE_PATH, gs.getMessage('{0}', resolverResult.user_msg), resolverResult.msg);
						return;
					}
					applyToShift = requestObj.shiftInfoObj.applyToShift;
				}

				var patternFormatValidationResult = restValidator.validateRecurringPatternJson(recurringPattern, applyToShift);
				if (!patternFormatValidationResult.valid) {
					apiHelper.setBadRequestResponse(response, RESOURCE_PATH, gs.getMessage('Invalid recurring pattern'),
					WSDUtils.formatString('[{0}]', patternFormatValidationResult.failedChecks.join(', ')), requestObj);
					return;
				}
				recurringPattern = patternFormatValidationResult.recurringPattern;

				var isOverlapRsvExist = recurringReservationService.checkOverlappingForRecurringRsvOrShiftRecurringRsvExists(requestObj, recurringPattern, resolverResult.payload);
				if (!isOverlapRsvExist.success) {
					apiHelper.setResponse(response, 500, RESOURCE_PATH, gs.getMessage('Exception occurred! Unable to check for overlapping reservation.'), isOverlapRsvExist.msg);
					return;
				}
				return isOverlapRsvExist;
			}

			return reservationService.checkOverlappingReservationExistsOrNot(requestObj);
		}catch(ex){
			apiHelper.setResponse(response, 500, RESOURCE_PATH, gs.getMessage('Exception occurred! Unable to check for overlapping reservation'), ex, requestObj);
		}

	},

    type: 'WSDRestCheckOverlappingReservationsSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-24 14:27:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5fe2951ec3e0211095a1ec4b7d40dd99&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WSDRestCheckOverlappingReservationsSNC&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;e9b477e9c3161010cc7060bf4b40dded&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value=""&gt;e9b477e9c3161010cc7060bf4b40dded&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5fe2951ec3e0211095a1ec4b7d40dd99&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-02 05:44:22&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:43</sys_created_on>
        <sys_id>e6c6381d83f01210c6695855eeaad364</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WSDRestCheckOverlappingReservationsSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e6c6381d83f01210c6695855eeaad364</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:43</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
