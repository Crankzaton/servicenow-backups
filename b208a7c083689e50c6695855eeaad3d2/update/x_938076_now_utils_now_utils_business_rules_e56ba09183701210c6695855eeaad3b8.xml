<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create display column in pm console</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    //gives project table always
    var projectTable = (current.getValue('table')).replace('_task', '');
    var createConsoleColumn = function(displayColSysId) {
        consoleTblGr = new GlideRecord('pm_console_table');
        consoleTblGr.addQuery('pm_console.context', 'default');
        consoleTblGr.addQuery('pm_console.entity', projectTable);
        consoleTblGr.addQuery('table', current.table);
        consoleTblGr.query();
        if (consoleTblGr.next()) {
            var conCol = new GlideRecord('pm_console_column');
            conCol.initialize();
            conCol.setValue('pm_console_display_column', displayColSysId);
            conCol.setValue('pm_console_table', consoleTblGr.getUniqueValue());
            conCol.setValue('table', current.table);
            conCol.setValue('column', current.dest_column);
            var value = conCol.insert();
        }
    };

    var gr = new GlideRecord('pm_console_display_column');
    gr.addQuery('pm_console.entity', projectTable);
    gr.addQuery('pm_console.context', 'default');
    gr.addQuery('json_column', current.dest_column);
    gr.query();
    if (gr.next()) {
        var conCol = new GlideRecord('pm_console_column');
        conCol.addQuery('column', current.dest_column);
        conCol.addQuery('pm_console_display_column', gr.getUniqueValue());
        conCol.addQuery('table', current.table);
        conCol.query();
        //if it doesn't exist create
        if (!conCol.hasNext()) {
            createConsoleColumn(gr.getUniqueValue());
        }
    } else {
        //get console
        var grConsole = new GlideRecord('pm_console');
        grConsole.addQuery('entity', projectTable);
        grConsole.addQuery('context', 'default');
        grConsole.query();
        if (grConsole.next()) {
            var grC = new GlideRecord(current.table);
            var ge = grC.getElement(current.dest_column);
            //check if its valid column
            if (grC.isValidField(current.dest_column)) {
                var internalType = ge.getED().getInternalType();
                var choiceList = GlideChoiceList.getChoiceList('pm_console_display_column', 'type');
    //check if its allowed type
    //special handling for list as it saved as list in choice.
    internalType = internalType == "glide_list" ? "list":internalType;
                if (choiceList.getChoice(internalType)) {
                    var display_column = current.getValue('dest_column');
                    var reserved_1 = gs.getProperty('com.snc.project.task.default_columns').split(',');
                    reserved_1.push('start_date');
                    reserved_1.push('end_date');
                    var reserved_2 = gs.getProperty('com.snc.project.system.default_columns').split(',');
                    reserved_1 = reserved_1.concat(reserved_2);
                    if (reserved_1.indexOf(display_column) == -1) {
                        //create a display column first
                        var grNew = new GlideRecord('pm_console_display_column');
                        grNew.setValue('label', ge.getLabel());
                        grNew.setValue('pm_console', grConsole.getUniqueValue());
                        grNew.setValue('json_column', display_column);
                        grNew.setValue('type', internalType);
                        grNew.setValue('hidden', true);
                        var displayCol = grNew.insert();
                        createConsoleColumn(displayCol);
                    }
                }
            }
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e56ba09183701210c6695855eeaad3b8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create display column in pm console</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_e56ba09183701210c6695855eeaad3b8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:57</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=e56ba09183701210c6695855eeaad3b8"/>
</record_update>
