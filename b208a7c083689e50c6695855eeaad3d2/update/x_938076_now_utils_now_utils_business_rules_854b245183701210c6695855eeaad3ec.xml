<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.agent.startsWith("mid.server.") &amp;&amp; current.queue == "input" &amp;&amp; current.state == "ready" &amp;&amp; current.topic == "config.file"</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ECC Queue - process config file</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[processConfigFile();

function processConfigFile() {
 var midName = new String(current.source).split("/")[1];
 var midID = getMidServerID(midName);
 if (!midID)
  return;
 
 var newParams = getNewParams();
 var curParams = getCurParams(midID);
 
 // Collect information for tagged records. Records with 'NO Overwrite' tag, will not be modified
 var tagUtil = new TagUtil();
 var tagSysId = tagUtil.getTagSysId('NO Overwrite');
 var taggedRecords = tagSysId ? tagUtil.getTaggedRecords(tagSysId, 'ecc_agent_config') : [];
 var taggedRecordsNumber = taggedRecords.length;
 
 // reconcile new and current...
 for (var curName in curParams) {
  curValue = curParams[curName];
  newValue = newParams[curName];
  if (newValue == null) 
   deleteCur(midID, curName, taggedRecords, tagSysId);
  else
   updateCur(midID, curName, newValue, taggedRecords, tagSysId);
  delete newParams[curName];
 }
 
 for (var newName in newParams) {
  newValue = newParams[newName];
  insertCur(midID, newName, newValue);
 }
 // If for the current config.file ecc queue record we avoid updating any record
 // MID Server needs to sync with the instance to retrieve the existing information
 if (taggedRecords.length < taggedRecordsNumber) {
  var priority = 'Interactive';
  var eccParams = {
   'source': 'updateConfig',
   'topic': 'SystemCommand'
  };
  new SNC.MidEccSender().sendMessageToSpecificMid(midName, priority, eccParams, {});
  
  // If we processed all tagged records, it is safe to remove the tag
  if (taggedRecords.length == 0 && tagSysId) {
   tagUtil.deleteTag(tagSysId);
  }
 }
 
 current.state = 'processed';
}

function deleteCur(midID, name, taggedRecords, tagSysId) {
 var tagUtil = new TagUtil();
 var gr = new GlideRecord('ecc_agent_config');
 gr.addQuery('ecc_agent', midID);
 gr.addQuery('param_name', name);
 gr.query();
 gr.setWorkflow(false);
 while (gr.next()) {
  var recIndex = taggedRecords.indexOf(gr.sys_id + '');
  if (recIndex > -1) {
   tagUtil.deleteTagEntry(tagSysId, taggedRecords[recIndex], 'ecc_agent_config');
   taggedRecords.splice (recIndex, 1);
   
  } else {
   gr.deleteRecord();
  }
 }
}

function updateCur(midID, name, value, taggedRecords, tagSysId) {
 var tagUtil = new TagUtil(); 
 var gr = new GlideRecord('ecc_agent_config');
 gr.addQuery('ecc_agent', midID);
 gr.addQuery('param_name', name);
 gr.query();
 if (!gr.next())
  return;
 var recIndex = taggedRecords.indexOf(gr.sys_id + '');
 if (recIndex > -1) {
  tagUtil.deleteTagEntry(tagSysId, taggedRecords[recIndex], 'ecc_agent_config');
  taggedRecords.splice (recIndex, 1);
 } else {
  if (gr.value != value) {
   gr.value = value;
   gr.setWorkflow(false);
   gr.update();
  }
 }
}

function insertCur(midID, name, value) {
 var gr = new GlideRecord('ecc_agent_config');
 gr.initialize();
 gr.ecc_agent = midID;
 gr.param_name = name;
 gr.value = value;
 gr.setWorkflow(false);
 gr.insert();
}

function getNewParams() {
 var result = {};
 var XMLUtil = GlideXMLUtil;
 var doc = XMLUtil.parse(current.payload);
 var params = XMLUtil.selectNodes(doc.getDocumentElement(), "//parameter");
 for (var i = 0; i < params.getLength(); i++) {
  var param = params.item(i);
  var name = param.getAttribute('name');
  var value = param.getAttribute('value');
  result[name] = value;
 }
 return result;
}

function getCurParams(midID) {
 var result = {};
 var gr = new GlideRecord('ecc_agent_config');
 gr.addQuery('ecc_agent', midID);
 gr.query();
 while (gr.next())
  result['' + gr.param_name] = '' + gr.value;
 return result;
}

function getMidServerID(midName) {
 var gr = new GlideRecord('ecc_agent');
 gr.addQuery('name', midName);
 gr.query();
 return gr.next() ? gr.sys_id : null;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:22</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>854b245183701210c6695855eeaad3ec</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ECC Queue - process config file</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_854b245183701210c6695855eeaad3ec</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:22</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=854b245183701210c6695855eeaad3ec"/>
</record_update>
