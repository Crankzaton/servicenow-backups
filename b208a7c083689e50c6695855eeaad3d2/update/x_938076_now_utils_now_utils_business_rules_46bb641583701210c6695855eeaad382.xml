<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!current.isNewRecord()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Secure UI Page Msg on Display</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    // security checks added to the following fields of UI pages
    var HTML_FIELD = "html";
    var PROCESSING_SCRIPT_FIELD = "processing_script";
    var FIELDS_ARRAY = [HTML_FIELD, PROCESSING_SCRIPT_FIELD];

    var moreInfoMsgLink = '<a target="_blank" href="' + gs.getProperty('help.base.servicenow') + 'ui+pages">' + gs.getMessage("More Info") + '</a>';

    var GLOBAL_SCOPE = 'global';

    function showInfoMessage(current, msg_tag, className) {
        var tableName = current.getRecordClassName();
        var td = GlideTableDescriptor.get(tableName);
        var field1HTML = '"' + td.getElementDescriptor(HTML_FIELD).getLabel() + '"';
        var field2Script = '"' + td.getElementDescriptor(PROCESSING_SCRIPT_FIELD).getLabel() + '"';

        gs.addInfoMessage(sn_i18n.Message.getMessage(msg_tag, "We recommend UI Page use GlideRecordSecure instead of {class_name} API in {field1_html} and {field2_script} fields {more_info_link}", {
            more_info_link: moreInfoMsgLink,
            field1_html: field1HTML,
            field2_script: field2Script,
            class_name: className
        }));
    }

    // define ui page name depending on scope
    var uiPageName = '';
    if (current.sys_scope == GLOBAL_SCOPE) {
        uiPageName = current.name;
    } else {
        uiPageName = current.sys_scope.scope + '_' + current.name;
    }

    // redirects to sys_public_list.do and encodes ui page name (in case of special characters)
    var publicPageURI = "/sys_public_list.do?sysparm_query=page=" + encodeURIComponent(uiPageName);
    var publicRecordLink = '<a target="_blank" href="' + publicPageURI + '">' + gs.getMessage("See configuration") + '</a>';

    // check if public 
    var isPublicPage = GlidePublicPage.isPublic(uiPageName);
    if (isPublicPage)
        gs.addInfoMessage(sn_i18n.Message.getMessage("ui_page_is_public_msg", "This is a public page as configured here {more_info_link}", {
            more_info_link: publicRecordLink
        }));

    var resourceSupport = new SNC.GlideResourceSupport();

    // check if ACL defined
    var aclDefined = resourceSupport.aclRuleExists(uiPageName, 'ui_page', 'read');

    // don't show security messages if public page
    if (isPublicPage) {
        // if ACLs defined for public pages, show message
        if (aclDefined)
            gs.addInfoMessage(gs.getMessage("One or more Access controls are configured for this UI Page. We do not honor them for a public UI Page"));

        return;
    }

    // don't show security messages if certain conditions match
    if (!resourceSupport.shouldShowSecurityMessages(current))
        return;

    // check if using GlideRecord instead of GlideRecordSecure
    if (resourceSupport.containsClass(current, FIELDS_ARRAY, "GlideRecord"))
        showInfoMessage(current, "ui_page_gr_msg", "GlideRecord");

    // check if using GlideDBQuery instead of GlideRecordSecure
    if (resourceSupport.containsClass(current, FIELDS_ARRAY, "GlideDBQuery"))
        showInfoMessage(current, "ui_page_gdbq_msg", "GlideDBQuery");

    if (!aclDefined)
        gs.addInfoMessage(sn_i18n.Message.getMessage("ui_page_acl_msg", "We recommend you add a role based Access Control to the UI Page {more_info_link}", {
            more_info_link: moreInfoMsgLink
        }));

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:21</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>46bb641583701210c6695855eeaad382</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Secure UI Page Msg on Display</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_46bb641583701210c6695855eeaad382</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:21</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=46bb641583701210c6695855eeaad382"/>
</record_update>
