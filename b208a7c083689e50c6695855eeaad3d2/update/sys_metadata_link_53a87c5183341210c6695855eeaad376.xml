<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>981ccae753112110abeaddeeff7b1276</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.RoleInfoProvider&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Service to provide information about licensable roles&lt;/description&gt;
        &lt;name&gt;RoleInfoProvider&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RoleInfoProvider = Class.create();
RoleInfoProvider.prototype = {
    initialize: function() {
        // stored value for Synced in license_role_discovered
        this.SYNCED = 1;
    },

    /**
     * Given the scope of a custom application, return the roles which were discovered by role analysis
     *
     * @param {string} scope is the name of the scope in sys_scope.scope
     * @return {array} an array of objects with information about roles
     * {
     *    sys_id : "sys_id of sys_user_role",
     *    name: "name from sys_user_role",
     *    role_type: "id stored in license_role_type.id",
     *    reason: "translated text from reason",
     *    license_family_id: "application which role gives access to, as id from license_family.family_id which can be 'unknown' (valid record) if there's no associated licensable application",
     *    scope: "application which role gives access to, as scope from sys_scope.scope"
     * }
     *
     */
    getDiscoveredRolesForCustomApp: function(scope) {
        return this._queryDiscoveredRolesWithConditionOnUserRole('sys_scope.scope', scope);
    },

    /**
     * Given the source of custom applications as the IDE in which they were created, return the roles
     * which were discovered by role analysis
     * 
     * @param {string} ide an identifier for the IDE stored in sys_package.ide_created
     * @return {array} an array of objects with information about roles
     * {
     *    sys_id : "sys_id of sys_user_role",
     *    name: "name from sys_user_role",
     *    role_type: "id stored in license_role_type.id",
     *    reason: "translated text from reason",
     *    license_family_id: "application which role gives access to, as id from license_family.family_id which can be 'unknown' (valid record) if there's no associated licensable application",
     *    scope: "application which role gives access to, as scope from sys_scope.scope"
     * }
     */
    getDiscoveredRolesForIDECustomApps: function(ide) {
        return this._queryDiscoveredRolesWithConditionOnUserRole('sys_scope.ide_created', ide);
    },

    _queryDiscoveredRolesWithConditionOnUserRole: function(userRoleColumn, userRoleValue) {
        // IMPLEMENTATION notes - couple of different options
        // GlideAggregate - doesn't have addJoinQuery support
        // Related list query license_role_discovered.sys_user_role stores the name field, so can't do sys_id based join
        // GlideRecord - roles can be duplicated (API to set "distinct" is not exposed)
        // GlideRecord is what is used here

        const gr = new GlideRecord('license_role_discovered');
        // query only Synced records
        gr.addQuery('state', this.SYNCED);

        // the reference field sys_user_role stores sys_user_role.name
        const joinQueryCondition = gr.addJoinQuery('sys_user_role', 'sys_user_role', 'name');
        joinQueryCondition.addCondition(userRoleColumn, userRoleValue);

        gr.query();

        return this._collectRoleInfo(gr);
    },

    _collectRoleInfo: function(gr) {
        const roleInfos = [];
        while (gr.next()) {
            roleInfos.push(this._mapToRoleInfo(gr));
        }

        return roleInfos;
    },

    _mapToRoleInfo: function(gr) {
        const scope = gs.nil(gr.scope.toString()) ? 'global' : gr.scope.scope.toString();
        return {
            'sys_id': gr.sys_user_role.sys_id.toString(),
            'name': gr.sys_user_role.toString(),
            'role_type': gr.license_role_type.toString(),
            'reason': gr.reason.getDisplayValue(),
            'license_family_id': gr.application.toString(),
            'scope': scope
        }
    },

    type: 'RoleInfoProvider'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-06 22:35:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;981ccae753112110abeaddeeff7b1276&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RoleInfoProvider&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_981ccae753112110abeaddeeff7b1276&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-06 22:35:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:57</sys_created_on>
        <sys_id>53a87c5183341210c6695855eeaad376</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RoleInfoProvider</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_53a87c5183341210c6695855eeaad376</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
