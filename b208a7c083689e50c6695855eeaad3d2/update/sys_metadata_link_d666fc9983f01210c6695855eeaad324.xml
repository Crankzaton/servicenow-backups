<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3d6f172e739b330021741c86fbf6a7a9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBGraphQLUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;[WARNING: Customers should NOT modify this script]&amp;#13;
The purpose of this script include is to provide services for the graphQL queries for workspace&lt;/description&gt;
        &lt;name&gt;KBGraphQLUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBGraphQLUtilSNC = Class.create();
KBGraphQLUtilSNC.prototype = {
    initialize: function() {},

    getArticleInfo: function(articleSysId, searchId, topClickRank) {
        return new KBViewModel().getArticleInfoForWorkspace(articleSysId, searchId, topClickRank);
    },

    getContributableKnowledgeBases: function() {
		if(GlidePluginManager.isActive('com.snc.knowledge_advanced')) {
			var object = new ArticleTemplateUtil().getCanContributeKBForTemplate('kb_knowledge');
			var result = Object.keys(object).map(function(id, index) {
				return {
					'value': id,
					'displayValue': object[id]
				};
			});
			
			return JSON.stringify(result);			
		} else {
			return '[]';
		}
    },

    getArticleTemplatesByKnowledgeBase: function(knowledgeBase) {
		if(GlidePluginManager.isActive('com.snc.knowledge_advanced')) {
			var object = new ArticleTemplateUtil().getCanContributeTemplatesList(knowledgeBase);
			var result = Object.keys(object).map(function(id, index) {
				return {
					'value': id,
					'displayValue': object[id]
				};
			});

			return JSON.stringify(result);		
		} else {
			return '[]';
		}
    },

    getAvailableLanguages: function(articleID) {
        var result = [];
        var gr = new GlideRecord('kb_knowledge');
        if (gr.get(articleID) &amp;&amp; gr.canRead()) {
            result = new KBTranslationTask().getAvailableLanguages(gr);
        }
        return JSON.stringify(result);
    },
	
	/**
     * returns true if there are blocks associated to the article.
     * @param GlideRecord: kb_knowledge record.
     */
	getBlockCount: function(articleID) {
		var sourceBlocks = [];
		gr = new GlideRecord('kb_knowledge');
		if (gr.get(articleID) &amp;&amp; gr.canRead()) {
			sourceBlocks = new KBTranslationTask().getBlocksForArticle(gr);
		}
		return sourceBlocks.length+'';
	},

    createOrCheckout: function(articleID, translatedLanguage, translationData) {
        gr = new GlideRecord('kb_knowledge');
        var translationObj = JSON.parse(translationData);
        var newRecordID = '';

        if (gr.get(articleID) &amp;&amp; gr.canRead()) {
            gr = new GlideRecord(gr.sys_class_name);
            gr.get(articleID);
            newRecord = new KBVersioning().createOrCheckout(gr, translatedLanguage, translationObj, false);
            newRecordID = newRecord.sys_id;
        }
        return newRecordID;
    },

    createOrCheckoutFromTask: function(translationTaskID, translationData) {
        gr = new GlideRecord('kb_translation_task');
        var translationObj = JSON.parse(translationData);
        var newRecordID = '';
        if (gr.get(translationTaskID) &amp;&amp; gr.canRead()) {
            newRecord = new KBVersioning().createOrCheckOutFromTask(gr, translationObj);
            newRecordID = newRecord.sys_id;
        }
        return newRecordID;
    },
	
	getFieldMappings: function(sysId, source, target) {
		var gr = new GlideRecord(source);
		gr.get(sysId);
		if(gr.canRead()) {
			var map = new CSMTableMapUtil(gr);
			map.findMapByTarget(target);
			var object = map.getTargetJSON();
			if(object &amp;&amp; object.length&gt;0){
				object = object[0];
				var result = Object.keys(object).map(function(id, index) {
					return {
						'name': id,
						'value': object[id]
					};
				});
				return JSON.stringify(result);
			}
			
		}
		return '[]';
	},
	
	getFeedbackChoiceList: function() {
		var resultObj = {};	
		var feedbackChoiceList = [];
		var cl = new GlideChoiceList();
		var clg = new GlideChoiceListGenerator("kb_feedback", "reason");
		clg.setCache(false);
		clg.setNone(false);
		cl = clg.get();
		var temp = cl.toString().replace('[','').replace(']','');
		temp = temp.split(',');
		for(var i=0;i&lt;temp.length;i++) {
			var arr = temp[i].split(':');
			var obj = {};
			obj.label = arr[0].trim();
			obj.value = arr[1].trim();
			feedbackChoiceList.push(obj);
		}
		resultObj.feedbackChoiceList = feedbackChoiceList;
		return resultObj;
	},

    addComment: function(commentText, articleId, parentId) {
        var result = new KBPortalServiceImpl().addComment(commentText, articleId, parentId);
        return JSON.stringify(result);
    },

    deleteComment: function(commentId, articleId) {
        var result = new KBPortalServiceImpl().deleteComment(commentId, articleId);
        return JSON.stringify(result);
    },

    likeComment: function(commentId, articleId) {
        var result = new KBPortalServiceImpl().likeComment(commentId, articleId);
        return JSON.stringify(result);
    },

    unLikeComment: function(commentId, articleId) {
        var result = new KBPortalServiceImpl().unLikeComment(commentId, articleId);
        return JSON.stringify(result);
    },

    type: 'KBGraphQLUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-06-24 14:58:18&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3d6f172e739b330021741c86fbf6a7a9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBGraphQLUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;a8c6f4a43cb1311068bcf327dfe37f3e&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3d6f172e739b330021741c86fbf6a7a9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-13 14:04:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:03</sys_created_on>
        <sys_id>d666fc9983f01210c6695855eeaad324</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>KBGraphQLUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d666fc9983f01210c6695855eeaad324</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:03</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
