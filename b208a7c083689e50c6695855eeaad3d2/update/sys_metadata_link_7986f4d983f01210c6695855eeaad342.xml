<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>476b8fd577031110c60529354f5a99a9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_gf.GFGoalAssignedEntityConfigSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GFGoalAssignedEntityConfigSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GFGoalAssignedEntityConfigSNC = Class.create();
GFGoalAssignedEntityConfigSNC.prototype = {
    initialize: function(assignedEntityTable, assignedEntityField) {
        this.assignedEntityTable = assignedEntityTable;
        this.assignedEntityField = assignedEntityField;
    },

    isValidConfig: function() {
        var assignedEntityConfig = {
            "isValid": true,
            "errorMsg": ""
        };
        if (!sn_gf.GFUtil.isValidTable(this.assignedEntityTable)) {
            assignedEntityConfig["isValid"] = false;
            assignedEntityConfig["errorMsg"] = gs.getMessage("The Assigned entity table is invalid.");
        } else if (global.JSUtil.notNil(this.assignedEntityField) &amp;&amp; !sn_gf.GFUtil.isValidEnterpriseGoalField(this.assignedEntityField, false)) {
            var goalTableLabel = sn_gf.GFUtil.getTableLabel(sn_gf.GoalFrameworkConstants.GOAL_TABLE);
			assignedEntityConfig["isValid"] = false;
            assignedEntityConfig["errorMsg"] = gs.getMessage("The Assigned entity field value does not exist on the {0} [sn_gf_goal] table.", [goalTableLabel]);
        } else if (global.JSUtil.notNil(this.assignedEntityField) &amp;&amp; sn_gf.GFUtil.getReferencedTable(sn_gf.GoalFrameworkConstants.GOAL_TABLE, this.assignedEntityField) != this.assignedEntityTable) {
            assignedEntityConfig["isValid"] = false;
            assignedEntityConfig["errorMsg"] = gs.getMessage("The Assigned entity field value does not refer to the Assigned entity table.");
        }
        return assignedEntityConfig;
    },
	
	hasConfig: function() {
		var goalAssignedEntityConfigGr = new GlideRecord(sn_gf.GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
		goalAssignedEntityConfigGr.addQuery("assigned_entity_table", this.assignedEntityTable);
		goalAssignedEntityConfigGr.query();
		return goalAssignedEntityConfigGr.hasNext();
	},
    type: 'GFGoalAssignedEntityConfigSNC'
};

GFGoalAssignedEntityConfigSNC.doesAnotherGoalAssignedEntityConfigExist = function(table, currentGoalAssignedEntityConfigId) {
	var goalAssignedEntityConfigGr = new GlideRecord(sn_gf.GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
	goalAssignedEntityConfigGr.addQuery("assigned_entity_table", table);
	goalAssignedEntityConfigGr.addQuery("sys_id", "!=", currentGoalAssignedEntityConfigId);
	goalAssignedEntityConfigGr.query();
	return goalAssignedEntityConfigGr.hasNext();
};

GFGoalAssignedEntityConfigSNC.getAssignedEntityTableFromField = function(goalField) {
	if(gs.nil(goalField))
		return '';
	var goalAssignedEntityConfigGr = new GlideRecord(sn_gf.GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
	goalAssignedEntityConfigGr.addQuery("assigned_entity_field", goalField);
	goalAssignedEntityConfigGr.query();
	if(goalAssignedEntityConfigGr.next()) {
		return goalAssignedEntityConfigGr.getValue('assigned_entity_table');
	}
	return '';
};

GFGoalAssignedEntityConfigSNC.getGoalFieldFromAssignedEntityType = function(assignedEntityType) {
	if(gs.nil(assignedEntityType))
		return '';
	var goalAssignedEntityConfigGr = new GlideRecord(sn_gf.GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
	goalAssignedEntityConfigGr.addQuery("assigned_entity_table", assignedEntityType);
	goalAssignedEntityConfigGr.setLimit(1);
	goalAssignedEntityConfigGr.query();
	if(goalAssignedEntityConfigGr.next()) {
		return goalAssignedEntityConfigGr.getValue('assigned_entity_field');
	}
	return '';
};

GFGoalAssignedEntityConfigSNC.seedAssignedEntityConfig = function(table, field) {
    var gaecGR = new GlideRecord(sn_gf.GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
    gaecGR.addQuery("assigned_entity_table", table);
    gaecGR.query();
    if (gaecGR.next()) {
        return null;
    } else {
        gaecGR.initialize();
        gaecGR.setValue("assigned_entity_table", table);
        gaecGR.setValue("assigned_entity_field", field);
        return gaecGR.insert();
    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-11-08 07:04:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;476b8fd577031110c60529354f5a99a9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GFGoalAssignedEntityConfigSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Goal Framework" source="sn_gf"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Goal Framework"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_476b8fd577031110c60529354f5a99a9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-24 14:56:00&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:34</sys_created_on>
        <sys_id>7986f4d983f01210c6695855eeaad342</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GFGoalAssignedEntityConfigSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7986f4d983f01210c6695855eeaad342</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:34</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
