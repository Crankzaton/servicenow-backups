<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>904e5a61ff313010456d766cf43bf1ef</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DependentCIHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Helper class which encapsulates all the dependent CI re-usable functions&lt;/description&gt;
        &lt;name&gt;DependentCIHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DependentCIHelper = Class.create();

DependentCIHelper.prototype = {
    initialize: function() {},

    CMDB_TABLE: 'cmdb_ci',
    LEDGER_TABLE: 'cmdb_dependent_ci_ledger',
	EOL_LEDGER_TABLE: 'cmdb_ci_end_of_life_ledger',
    COL_ID: 'sys_id',
    COL_CLASS_NAME: 'sys_class_name',
    COL_CMDB_CI: 'cmdb_ci',
    COL_STATE: 'state',
    COL_ACTION: 'action',
    NEW_STATE: '1',
	READY_STATE: '3',
    DELETE_ACTION: 'Delete',

    // determine if given ci exists, if yes then return sys_class_name else null
    getClassName: function(cmdbCi) {
        var gr = new GlideRecord(this.CMDB_TABLE);
        gr.addQuery(this.COL_ID, cmdbCi);
        gr.query();
        if (gr.next())
            return gr.getValue(this.COL_CLASS_NAME);

        return null;
    },

    //use CMDBMetadata class(cached) to get CMDB class dependent flag
    isDependentClass: function(className) {
        var jsonStr = SNC.CmdbMetadataScriptableApi.getIdentificationRules(className);
        if (gs.nil(jsonStr))
            return false;
        var jsonObj = JSON.parse(jsonStr);
        //for a given class if there is no identification rule defined then return false - (corner case)
        return (jsonObj ? !jsonObj['independent'] : false);
    },

    //given a Ci, Add it to the ledger if its sys class != null &amp; it is dependent
    queueDependentCi: function(cmdbCi) {
        var className = this.getClassName(cmdbCi);
        if (!gs.nil(className) &amp;&amp; this.isDependentClass(className)) {
            var gr = new GlideRecord(this.LEDGER_TABLE);
            gr.initialize();
            gr.setValue(this.COL_CMDB_CI, cmdbCi);
            gr.setValue(this.COL_STATE, this.NEW_STATE);
            gr.setValue(this.COL_ACTION, this.DELETE_ACTION);
            gr.insert();
        }
    },
	
    addOrphanCIToLedger: function(cmdbCi) {
            var gr = new GlideRecord(this.LEDGER_TABLE);
            gr.initialize();
            gr.setValue(this.COL_CMDB_CI, cmdbCi);
            gr.setValue(this.COL_STATE, this.READY_STATE);
            gr.setValue(this.COL_ACTION, this.DELETE_ACTION);
            gr.insert();
    },

	checkAndAddToEOLLedger: function(ci, className, useLazyInsert) {
		var jsonStr = SNC.CmdbMetadataScriptableApi.getDownstreamDependencyInfo(className);
        if (gs.nil(jsonStr))
            return;
		
		var jsonObj = JSON.parse(jsonStr);
		if (Object.keys(jsonObj).length === 0)
			return;
		
		var gr = new GlideRecord(this.EOL_LEDGER_TABLE);
        gr.initialize();
        gr.setValue(this.COL_CMDB_CI, ci);
        gr.setValue(this.COL_STATE, this.NEW_STATE);
		if(useLazyInsert){
			gr.insertLazy();
		} else {
			gr.insert();
		}
        
	},
	
    type: 'DependentCIHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-06 03:04:33&lt;/sys_created_on&gt;
        &lt;sys_id&gt;904e5a61ff313010456d766cf43bf1ef&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;15&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DependentCIHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="CMDB Data Manager" source="com.snc.cmdb.ci_lifecycle_manager"&gt;57bb78a43c35311068bcf327dfe37f17&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_904e5a61ff313010456d766cf43bf1ef&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-21 01:34:45&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:29</sys_created_on>
        <sys_id>e498345183341210c6695855eeaad3e6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DependentCIHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e498345183341210c6695855eeaad3e6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
