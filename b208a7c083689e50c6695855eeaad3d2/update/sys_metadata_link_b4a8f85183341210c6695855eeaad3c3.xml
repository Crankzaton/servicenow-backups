<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>94f0db6bc713011020dab6c427c2604e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nb_action.GeneratorService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GeneratorService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GeneratorService = Class.create();
GeneratorService.prototype = {
    tableName: "sn_nb_action_resource_generator",

    initialize: function(grOrSysId) {
        this.inputPillParser = new sn_nb_action.NBAActionInputPillParser();

        if (grOrSysId &amp;&amp; grOrSysId.sys_class_name == this.tableName) {
            this.currentRecord = grOrSysId;
        } else if (grOrSysId) {
            var gr = new GlideRecord(this.tableName);
            if (gr.get(grOrSysId)) {
                this.currentRecord = gr;
            }
        }
    },

    hasValidRecord: function() {
        return this.currentRecord &amp;&amp; this.currentRecord.sys_class_name == this.tableName;
    },

    getName: function() {
        return this.currentRecord.getValue(Constants.COL_NAME);
    },

    getGeneratorTypeSysId: function() {
        return this.currentRecord.getValue(Constants.COL_GENERATOR_TYPE);
    },

    getGeneratorType: function() {
        return new GeneratorTypeService(this.getGeneratorTypeSysId());
    },

    getGeneratorRecordSysId: function() {
        return this.currentRecord[Constants.COL_GENERATOR];
    },

    getGeneratorRecord: function() {
        var generatorRecord = this.getGeneratorRecordSysId();
        return generatorRecord &amp;&amp; generatorRecord.getRefRecord();
    },

    getTypeInputs: function(parsed, contextRecord) {
        var inputs = {};
        var inputGlideVar = this.currentRecord[Constants.COL_GENERATOR_INPUT_VARS];
        for (var inputName in inputGlideVar) {
            if (inputName != "sys_meta" &amp;&amp; inputName != "sys_id") {
                var inputVal = inputGlideVar[inputName];
                var descriptor = inputVal.getED();
                if (!gs.nil(inputVal.sys_id)) {
                    inputs[inputName] = inputVal.getRefRecord();
                } else if (descriptor.getInternalType() == 'glide_list') {
                    inputs[inputName] = inputVal;
                } else {
                    inputs[inputName] = inputVal.getDisplayValue();
                    if (parsed) {
                        inputs[inputName] = this.inputPillParser.getParsedInputValue(inputs[inputName], {}, contextRecord);
                    }
                }
            }
        }
        return inputs;
    },

    isValid: function() {
        var param = {};
        param[Constants.evaluatorVariable.RESOURCE_GENERATOR_RECORD] = this.currentRecord;

        var generatorTypeSysId = this.getGeneratorTypeSysId();
        var handler = NextBestActionUtil.getGeneratorTypeHandler(generatorTypeSysId);
        if (handler &amp;&amp; typeof handler.isValid === "function") {
            try {
                var res = handler.isValid(param);
            } catch (e) {
                var errorMessage = e.message;
                var logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, this.type);
                logger.error('Error executing isValid. Error: ' + errorMessage);
                return {
                    'status': Constants.STATUS_ERROR,
                    'errorCode': 40001,
                    'errorMessage': "Failure occurred while calling isValid"
                };
            }
        }
        return res;
    },

    getGeneratorOutputSchema: function(inputs) {
        var param = {};
        param[Constants.evaluatorVariable.INPUTS] = inputs || this.getTypeInputs();
        param[Constants.evaluatorVariable.GENERATOR_RECORD] = this.getGeneratorRecord();
        param[Constants.evaluatorVariable.RESOURCE_GENERATOR_RECORD] = this.currentRecord;

        var generatorTypeSysId = this.getGeneratorTypeSysId();
        var handler = NextBestActionUtil.getGeneratorTypeHandler(generatorTypeSysId);
        if (handler &amp;&amp; typeof handler.getOutputSchema === "function") {
            try {
                var res = handler.getOutputSchema(param);
            } catch (e) {
                var errorMessage = e.message;
                var logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, this.type);
                logger.error('Error executing getOutputSchema. Error: ' + errorMessage);
                return {
                    'status': Constants.STATUS_ERROR,
                    'errorCode': 40001,
                    'errorMessage': "Failure occurred while calling getOutputSchema"
                };
            }
        }

        return res;
    },

    getGeneratorOutput: function(contextRecord) {
        var generatorType = this.getGeneratorType();
        var inputs = this.getTypeInputs(true, contextRecord);

        var outputSchema = this.getGeneratorOutputSchema(inputs);
        if (outputSchema &amp;&amp; outputSchema.status == Constants.STATUS_SUCCESS) {
            var metaData = outputSchema.metaData;
            var confidenceFieldName = metaData &amp;&amp; metaData[Constants.evaluatorVariable.CONFIDENCE];

            var param = {};
            param[Constants.evaluatorVariable.INPUTS] = inputs;
            param[Constants.evaluatorVariable.CONTEXT_RECORD] = contextRecord;
            param[Constants.evaluatorVariable.GENERATOR_RECORD] = this.getGeneratorRecord();
            param[Constants.evaluatorVariable.RESOURCE_GENERATOR_RECORD] = this.currentRecord;

            var generatorTypeSysId = this.getGeneratorTypeSysId();
            var handler = NextBestActionUtil.getGeneratorTypeHandler(generatorTypeSysId);
            if (handler &amp;&amp; typeof handler.getOutputs === "function") {
                try {
                    var output = handler.getOutputs(param);
                } catch (e) {
                    var errorMessage = e.message;
                    var logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, this.type);
                    logger.error('Error occured while generating the outputs of resource generator' + '\n' +
                        'Resource Generator: ' + param[Constants.evaluatorVariable.GENERATOR_RECORD].name + '\n' +
                        'Context Record Table: ' + param[Constants.evaluatorVariable.CONTEXT_RECORD].sys_class_name + '\n' +
                        'Context Record SysId: ' + param[Constants.evaluatorVariable.CONTEXT_RECORD].sys_id + '\n' +
                        'Error Message : ' + errorMessage);
                    return {
                        'status': Constants.STATUS_ERROR,
                        'errorCode': 40001,
                        'errorMessage': "Failure occurred while calling getOutputs"
                    };
                }
            }

            if (output &amp;&amp; output.status == Constants.STATUS_SUCCESS &amp;&amp; output.outputs) {
                var generatorOutputs = output.outputs;
                var validGeneratorOutputs = [];
                var schema = outputSchema.schema || [];
                for (var idx1 = 0; idx1 &lt; generatorOutputs.length; idx1++) {
                    var generatorOutput = generatorOutputs[idx1];
                    var confidenceScore = generatorOutput[confidenceFieldName] || 100;
                    generatorOutput[Constants.evaluatorVariable.CONFIDENCE_INTERNAL] = confidenceScore;

                    var isGeneratorOutputValid = true;
                    for (var idx2 = 0; idx2 &lt; schema.length; idx2++) {
                        var schemaElement = schema[idx2];
                        var schemaElementName = schemaElement.name;
                        var value = generatorOutput[schemaElementName];
                        if (value == null) {
                            isGeneratorOutputValid = false;
                            break;
                        } else if (schemaElement.type == Constants.pillPickerVars.REFERENCE &amp;&amp; generatorOutput[schemaElementName] != '') {
                            var table = schemaElement.referenceTable;
                            if (table) {
                                //Check if the record is accessible to logged-in user. Skip ACLs check if the schema element is hidden.
                                var gr = new GlideRecord(table);
                                if (gr.get(generatorOutput[schemaElementName]) &amp;&amp; gr.canRead()) {
                                    generatorOutput[schemaElementName] = gr;
                                } else {
                                    isGeneratorOutputValid = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (isGeneratorOutputValid) {
                        validGeneratorOutputs.push(generatorOutput);
                    }
                }
                output.outputs = validGeneratorOutputs;
            }
            return output;
        }
    },

    type: 'GeneratorService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-12 21:22:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;94f0db6bc713011020dab6c427c2604e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GeneratorService&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommended Actions" source="sn_nb_action"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommended Actions"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_94f0db6bc713011020dab6c427c2604e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-27 13:07:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:47</sys_created_on>
        <sys_id>b4a8f85183341210c6695855eeaad3c3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GeneratorService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b4a8f85183341210c6695855eeaad3c3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
