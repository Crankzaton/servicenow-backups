<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check clustering parameters logic delete</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    /*if DBSCAN is selected than remove threshold for the same solution definition
     */
    var ld = "668619e753220010d1dcddeeff7b125a";
    var jd = "abc3169eeb021110f4e8dc7ab5522885";
    var dbscan = "f4c4ca8053c04010d1dcddeeff7b1236";
    var remove_clustered_points = "6d558e8053c04010d1dcddeeff7b1273";
    var threshold = "999c201453733300d1dcddeeff7b1212";
    var epsilon = "30cbe4d053733300d1dcddeeff7b1252";
    var minimum_neighbors = "32ddecd053733300d1dcddeeff7b12c2";
    var tf_idf = "6bbf34405f633300d1dc4560be731334";
    var disable_idf = "797a9118eb531110f4e8dc7ab5522889";
    var tfidf_regex_pattern = "c58b5158eb531110f4e8dc7ab552288c"
    var solution_parameters = current.getValue('solution_parameters');
    var solutionDef = current.getValue(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD);
    switch (solution_parameters) {
        case dbscan:
            //add threshold
            var clustering_params = [threshold];
            for (var i = 0; i < clustering_params.length; i++) {
                if (!isAdvanceSolutionParamPresent(clustering_params[i])) {
                    addAdvanceSolutionSetting(clustering_params[i]);
                }
            }
            // remove eplison, minimum_neighbors
            var gr = new GlideRecord(global.MLBaseConstants.ML_ADVANCED_SOL_SETTINGS);
            gr.addQuery(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD, solutionDef);
            gr.addQuery("solution_parameters", "IN", epsilon + ',' + minimum_neighbors + ',' + ld + ',' + jd);
            gr.deleteMultiple();
            break;
        case tf_idf:
            // remove disable_idf, tfidf_regex_pattern
            var gr = new GlideRecord(global.MLBaseConstants.ML_ADVANCED_SOL_SETTINGS);
            gr.addQuery(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD, solutionDef);
            gr.addQuery("solution_parameters", "IN", disable_idf + ',' + tfidf_regex_pattern);
            gr.deleteMultiple();
            break;
    }

    function addAdvanceSolutionSetting(solutionParamSysid) {
        var solParamSysidGr = new GlideRecord('ml_solution_parameters');
        solParamSysidGr.addActiveQuery();
        solParamSysidGr.addQuery('sys_id', solutionParamSysid);
        solParamSysidGr.query();
        if (solParamSysidGr.next()) {
            var gr = new GlideRecord('ml_advanced_solution_settings');
            gr.initialize();
            gr.setValue('solution_parameters', solParamSysidGr.getValue('sys_id'));
            gr.setValue('ml_capability_definition', solutionDef);
            gr.setValue('user_inputs', solParamSysidGr.getValue('user_inputs'));
            gr.insert();
        }
    }

    function isAdvanceSolutionParamPresent(param) {
        if (param) {
            var gr = new GlideRecord(global.MLBaseConstants.ML_ADVANCED_SOL_SETTINGS);
            gr.addQuery(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD, solutionDef);
            gr.addQuery('solution_parameters', param);
            gr.query();
            if (gr.next()) {
                return true;
            }
            return false;
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6d8bec9183701210c6695855eeaad31d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check clustering parameters logic delete</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_6d8bec9183701210c6695855eeaad31d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:29</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=6d8bec9183701210c6695855eeaad31d"/>
</record_update>
