<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>45eb8578eb472110f51bddde23522862</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow_admin.SOWAdminUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SOWAdminUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SOWAdminUtils = Class.create();
SOWAdminUtils.prototype = {
    initialize: function() {
        this.CONSTANTS = new SOWAdminConstants();
    },

    // Check if plugin is installed or not
    pluginIsInstalled: function(pluginId) {
        return new GlidePluginManager().isActive(pluginId);
    },

    // Generate plugin manager link
    generatePluginInstallLink: function(pluginId) {
        return "/nav_to.do?uri=$allappsmgmt.do?sysparm_search==" + pluginId;
    },

    // Add product documentation link for the given plugin
    addProductDocLink: function(pluginId) {
		var hrefAttributes = 'target="_blank" style="color: RGB(var(--now-text-link--primary--color,var(--now-color--secondary-1,1,119,142)));"';
        if (pluginId == "sn_now_teams_it")
            return '&lt;a href="api/now/v1/context_doc_url/msteams-integ-sow" ' + hrefAttributes + '&gt;' + gs.getMessage("Product Documentation") + '&lt;/a&gt;';
        else
            return "";
    },

    // Get the installed store plugin version
    getStorePluginVersion: function(pluginId) {
        var pluginGR = new GlideRecord("sys_store_app");
        pluginGR.addQuery("scope", pluginId);
        pluginGR.query();

        if (pluginGR.next())
            return pluginGR.version.toString();
    },

    // Get the installed family plugin version
    getFamilyPluginVersion: function(pluginId) {
        var pluginGR = new GlideRecord("v_plugin");
        pluginGR.addQuery("id", pluginId);
        pluginGR.query();

        if (pluginGR.next())
            return pluginGR.version.toString();
    },

    // Compare version numbers and return true if verion1 &gt;= version2
    versionCompare: function(version1, version2) {
        var vnum1 = 0,
            vnum2 = 0;
        for (var i = 0, j = 0;
            (i &lt; version1.length || j &lt; version2.length);) {
            while (i &lt; version1.length &amp;&amp; version1[i] != '.') {
                vnum1 = vnum1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j &lt; version2.length &amp;&amp; version2[j] != '.') {
                vnum2 = vnum2 * 10 + (version2[j] - '0');
                j++;
            }
            if (vnum1 &gt; vnum2)
                return true;
            if (vnum1 &lt; vnum2)
                return false;

            vnum1 = 0, vnum2 = 0;
            i++;
            j++;
        }
        // Both version numbers are equal
        return true;
    },

    // Set application card button label
    setAppButtonLabel: function(pluginId, pluginStatus) {
        if (pluginId == "sn_oe_sfs") {
            if (pluginStatus) {
                var version = this.getStorePluginVersion(pluginId);
                if (!gs.nil(version) &amp;&amp; this.versionCompare(version, "2.1.5"))
                    return gs.getMessage("Configure");
                else
                    return gs.getMessage("Update");
            } else
                return gs.getMessage("Get App");
        } else {
            return (pluginStatus) ? gs.getMessage("Configure") : gs.getMessage("Get App");
        }
    },

    // Set application card button payload
    setAppButtonPayload: function(pluginId, pluginStatus, configRedirectLink) {
        if (pluginId == "sn_oe_sfs") {
            if (pluginStatus) {
                var version = this.getStorePluginVersion(pluginId);
                if (!gs.nil(version) &amp;&amp; this.versionCompare(version, "2.1.5"))
                    return configRedirectLink;
            }
            return this.generatePluginInstallLink(pluginId);
        } else {
            return (pluginStatus) ? configRedirectLink : this.generatePluginInstallLink(pluginId);
        }
    },

    // Retrieve list of additional related apps in interactive cards list format
    getAdditionalSetupList: function() {
        var cardsPayloadObj = {};
        var cardsList = [];

        // Iterate over all entries
        var additional_apps_list = this.CONSTANTS.ADDITIONAL_APPS;
        for (const app in additional_apps_list) {
            if (additional_apps_list.hasOwnProperty(app)) {
                var pluginId = additional_apps_list[app]["PLUGIN_ID"];
                var pluginStatus = this.pluginIsInstalled(additional_apps_list[app]["PLUGIN_ID"]);
                var label = this.setAppButtonLabel(pluginId, pluginStatus);
                var obj = this.CONSTANTS.BASE_INTERACTIVE_CARD_OBJECT;
                obj.title = additional_apps_list[app]["PLUGIN_NAME"];
                obj.image = additional_apps_list[app]["IMAGE"];
                obj.button_action_type = additional_apps_list[app]["BUTTON_ACTION_TYPE"];
                obj.button_action_payload = this.setAppButtonPayload(pluginId, pluginStatus, additional_apps_list[app]["CONFIG_REDIRECTION_LINK"]);
                obj.button_text = label;
                obj.button_type = "tertiary";
                obj.button_tooltip_label = label + ' ' + additional_apps_list[app]["PLUGIN_NAME"];
                obj.highlighted_color = (pluginStatus) ? "info" : "critical";
                obj.highlighted_icon = (pluginStatus) ? "circle-check-outline" : "presence-offline-outline";
                obj.highlighted_label = (pluginStatus) ? gs.getMessage("Installed") : gs.getMessage("Not installed");
                obj.highlighted_variant = "tertiary";
                obj.interaction = "none_bordered";
                obj.body = '&lt;p&gt;' + additional_apps_list[app]["DESCRIPTION"] + " " + this.addProductDocLink(pluginId) + '&lt;/p&gt;';
                cardsList.push(JSON.parse(JSON.stringify(obj)));
            }
        }

        cardsPayloadObj.cards_list = cardsList;
        return cardsPayloadObj;
    },

    // Retrieve list of setup elements section in interactive cards list format
    getSetupUIElementList: function() {
        var cardsPayloadObj = {};
        var cardsList = [];

        // Iterate over all entries
        var setupElements = this.CONSTANTS.SETUP_UI_ELEMENTS;
        for (const element in setupElements) {
            if (setupElements.hasOwnProperty(element)) {
                var name = setupElements[element]["CARD_NAME"];
                var obj = this.CONSTANTS.BASE_INTERACTIVE_CARD_OBJECT;
                obj.title = name;
                obj.interaction = setupElements[element]["INTERACTION"];
                obj.interaction_payload = setupElements[element]["INTERACTION_PAYLOAD"];
                obj.image = setupElements[element]["IMAGE"];
                cardsList.push(JSON.parse(JSON.stringify(obj)));
            }
        }

        cardsPayloadObj.cards_list = cardsList;
        return cardsPayloadObj;
    },

    type: 'SOWAdminUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-05-24 04:51:29&lt;/sys_created_on&gt;
        &lt;sys_id&gt;45eb8578eb472110f51bddde23522862&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;80&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SOWAdminUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Operations Workspace Admin Center" source="sn_sow_admin"&gt;c59568fd53ae21104a61ddeeff7b129a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Service Operations Workspace Admin Center"&gt;c59568fd53ae21104a61ddeeff7b129a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_45eb8578eb472110f51bddde23522862&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-10 14:23:58&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:29</sys_created_on>
        <sys_id>a88634d983f01210c6695855eeaad3da</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SOWAdminUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a88634d983f01210c6695855eeaad3da</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
