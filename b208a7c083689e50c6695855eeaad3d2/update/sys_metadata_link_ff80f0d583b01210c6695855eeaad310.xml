<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>12dd79f087921300b18a046787cb0bb8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_twilio_direct.TwilioApiSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TwilioApiSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TwilioApiSNC = Class.create();
TwilioApiSNC.prototype = {
	TWIML_APP_NAME: 'ServiceNowTwilioDirect', // DO NOT start name with Notify else Legacy Twilio Driver will lay claim on that
	ENV_VARS: {
		'z_account_sid': undefined,
		'z_application_sid': undefined,
		'z_twiml_callback_endpoint': undefined,
		'z_xml_callback_endpoint': undefined,
		'z_twiml_app_name': undefined,
		'z_ctx': undefined,
		'z_msg_service_id': undefined,
		'z_notify_service_id': undefined,
		'z_detect_machine': undefined,
		'z_detect_machine_timeout': undefined
	},
	NOT_ENV_VAR: -1111111,
	PARAM_PROCESSORS: {
		'qs': undefined,
		'xmlUrl': undefined,
		'twimlUrl': undefined,
		'bulkSMSFormatter': undefined
	},

    initialize: function(parentCtxIdOrConfigGr /*Optional*/, configGr /*Optional*/) {
		if (parentCtxIdOrConfigGr) {
			if (typeof parentCtxIdOrConfigGr === 'string')
				this._parentCtxId = parentCtxIdOrConfigGr;
			else if (arguments.length === 1)
				configGr = parentCtxIdOrConfigGr;
		}
		this._configGr = configGr;
		var startTime = 0;
		if (gs.isDebugging())
			startTime = new Date().getTime();
		var apis = this._getHelper().getTwilioApiMethods();
		for (var i = 0; i &lt; apis.length; i++) {
			var fn = apis[i];
			this._attachApi(this._normalizeFnName(fn.n), fn.n, fn.m, fn.p);
		}
		if (gs.isDebugging()) {
			var endTime = new Date().getTime();
			gs.debug("Time taken to initialize TwilioApiSNC " + (endTime - startTime) + "ms");
		}
    },

	_normalizeFnName: function (fnName) {
		fnName = fnName.toLowerCase();
		var n = '';
		var capsNext = false;
		for (var i = 0; i &lt; fnName.length; i++) {
			var c = fnName.charAt(i);
			if (c === ' ') {
				capsNext = true;
				continue;
			}
			if (capsNext) {
				capsNext = false;
				if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')
					c = String.fromCharCode(c.charCodeAt(0) - 32);
			}
			n += c;
		}
		return n;
	},

	getRestClient: function (apiNameOrEndPointUrl, fnNameOrHttpMethod) {
		var rest, cred;
		if (apiNameOrEndPointUrl.indexOf("https://") === 0 || apiNameOrEndPointUrl.indexOf("http://") === 0) {
			rest = new sn_ws.RESTMessageV2();
			cred = this._getRequiredCredentials(apiNameOrEndPointUrl);
			rest.setBasicAuth(cred.username, cred.pwd);
			rest.setHttpMethod(fnNameOrHttpMethod);
			rest.setEndpoint(apiNameOrEndPointUrl);
		} else {
			rest = new sn_ws.RESTMessageV2(apiNameOrEndPointUrl, fnNameOrHttpMethod);
			cred = this._getRequiredCredentials(rest.getEndpoint());
			rest.setBasicAuth(cred.username, cred.pwd);
		}
		return rest;
	},
	
	// For upgrade customers if the key and secret are not available, we will fall back on using the sid and token
	_getRequiredCredentials: function (endPointUrl) {
		var conf = this._getHelper().getConfig(true);
		// Express handling for SMS for higher throughput
		if(endPointUrl.endsWith('Messages.json')) {
			return (conf.api_key !== '') ? {username: conf.api_key, pwd: conf.api_secret} : {username: conf.acc_sid, pwd: conf.auth_token};
		} else { // Checking all other endpoints, some endpoints require the use of sid and key and will not work with api key and secret.
			if(!endPointUrl.endsWith('Accounts.json') &amp;&amp; endPointUrl.indexOf('/Applications') === -1 &amp;&amp; endPointUrl.indexOf('/Keys') === -1) {
				return (conf.api_key !== '') ? {username: conf.api_key, pwd: conf.api_secret} : {username: conf.acc_sid, pwd: conf.auth_token};
			} else {
				return  {username: conf.acc_sid, pwd: conf.auth_token};
			}
		}
	},
	
	_attachApi: function (fnApiName, fnName, httpMethod, params) {
		var self = this;
		this[fnApiName] = function () {
			var help;
			var args = Array.prototype.slice.call(arguments);
			if (args.length &gt; 0 &amp;&amp; typeof args[0] === 'string' &amp;&amp; args[0].toLowerCase() === 'help') {
				help = self.fnHelp(fnApiName, params);
				gs.info(help);
				return help;
			}
			var passedVals = {};
			if (args.length &gt; 0) {
				if (typeof args[0] === 'object')
					passedVals = args[0];
				else if (args[0]) { // means args[0] is some non-null data but is not object
					help = self.fnHelp(fnApiName, params);
					var msg = 'Not enough parameters passed or incorrect data passed. Expected ' + help;
					gs.error(msg);
					throw msg;
				}
			}
			if (args.length &gt; 1 &amp;&amp; httpMethod === 'post') {
				this._ctx = ApiContext.newContext(this._parentCtxId);
			}
			var apiName = self._getHelper().getConfig().outbound_rest_name;
			var rest = this.getRestClient(apiName, fnName);
			params.forEach(function (p) {
				var v;
				if (!passedVals.hasOwnProperty(p.n)) {
					v = self.getEnvValue(p.n);
					if (v === self.NOT_ENV_VAR) {
						help = self.fnHelp(fnApiName, params);
						var msg = 'Not all required parameter values are passed. Expected ' + help;
						gs.error(msg);
						throw msg;
					}
				} else
					v = passedVals[p.n];
				self.setParam(rest, p, v);
			});
			var resp;
			if (httpMethod === 'get')
				resp = self.doGet(rest);
			else if (httpMethod === 'post')
				resp = self.doPost(rest);
			else if (httpMethod === 'delete')
				resp = self.doDelete(rest);
			else
				throw 'Unsupported Http Method type: ' + httpMethod;

			resp = self.processResponse(resp);
			resp = new TwilioApiResponse(resp, httpMethod, rest.getEndpoint()); // Passing endpoint URL for DEF0236944
			if (this._ctx &amp;&amp; !resp.error &amp;&amp; httpMethod === 'post') { // Only register callbacks when there is chance for them to get fired.
				if (args.length &gt; 1) {
					var callbacks  = {};
					if (typeof args[1] === 'object')
						callbacks = args[1];
					else if (args[1]) { // means args[1] is some non-null data but is not object
						help = self.fnHelp(fnApiName, params);
						var errMsg = 'Not enough parameters passed or incorrect data passed. Expected ' + help;
						gs.error(errMsg);
						throw errMsg;
					}
					var allExtraData = {};
					if (args.length &gt; 2 &amp;&amp; typeof args[2] === 'object') {
						allExtraData = args[2];
					}
					for (var cb in callbacks) {
						this._ctx.addCallbackListener(cb, callbacks[cb], allExtraData[cb]);
					}
				}
			} else if (this._ctx)
				this._ctx.release();
			this._ctx = undefined;
			return resp;
		};
	},
	
	fnHelp: function (fnApiName, params) {
		var self = this;
		var help = "API signature: function " + fnApiName + " ({";
		var isFirst = true;
		params.forEach(function (p) {
			var v = self.getEnvValue(p.n);
			if (v === self.NOT_ENV_VAR) {
				if (!isFirst)
					help += ", ";
				else
					isFirst = false;
				help += p.n + ": value";
			}
		});
		help += "}, {optional callbacks map}, {optional extra data map})";
		return help;
	},

	setParam: function (rest, param, value) {
		var pp;
		if (param.p)
			pp = this.getParamProcessor(param.p);
		if (!pp)
			pp = encodeURIComponent;
		value = pp.call(this, value);
		rest.setStringParameterNoEscape(param.on, value);
	},
	
	doPost: function (rest) {
		rest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
		return rest.execute();
	},
	
	doGet: function (rest) {
		return rest.execute();
	},
	
	doDelete: function (rest) {
		return rest.execute();
	},
	
	processResponse: function (resp) {
		return resp;
	},

	getEnvValue: function (envName) {
		if (this.ENV_VARS.hasOwnProperty(envName)) {
			if (!this.ENV_VARS[envName])
				this.ENV_VARS[envName] = this['resolve_' + envName]();
			return this.ENV_VARS[envName];
		} else
			return this.NOT_ENV_VAR;
	},
	
	getParamProcessor: function (name) {
		if (this.PARAM_PROCESSORS.hasOwnProperty(name)) {
			if (!this.PARAM_PROCESSORS[name])
				this.PARAM_PROCESSORS[name] = this['process_' + name];
			return this.PARAM_PROCESSORS[name];
		}
	},
	resolve_z_account_sid: function () {
		return this._getHelper().getConfig().acc_sid;
	},

	resolve_z_application_sid: function () {
		return this._getHelper().getConfig().twiml_app_id;
	},
	
	_getHelper: function () {
		if (this._helper)
			return this._helper;
		this._helper = new TwilioHelper(this._configGr);
		return this._helper;
	},

	resolve_z_twiml_callback_endpoint: function () {
		return this._getHelper().getTwimlCallbackEndPoint();
	},

	resolve_z_xml_callback_endpoint: function () {
		return this._getHelper().getXmlCallbackEndPoint();
	},

	resolve_z_twiml_app_name: function () {
		return this.TWIML_APP_NAME;
	},

	resolve_z_ctx: function () {
		return this._getHelper().getCtxData(this._ctx);
	},

	resolve_z_detect_machine: function () {
		return this._getHelper().getConfig(true).detect_machine ? "Enable" : "";
	},

	resolve_z_detect_machine_timeout: function () {
		var val = this._getHelper().getConfig(true).detect_machine_timeout;
		if (!val)
			return 30;
		return val;
	},

	process_qs: function (q) {
		return encodeURIComponent(this._getHelper().objectToQueryString(q));
	},
	
	process_xmlUrl: function (url) {
		return encodeURIComponent(this._getHelper().getXmlUrl(url));
	},
	
	process_twimlUrl: function (url) {
		return encodeURIComponent(this._getHelper().getTwimlUrl(url));
	},
	/**
	 * @returns {string}
	 */
	resolve_z_msg_service_id: function () {
		return this._getHelper().getConfig().msg_service_id;
	},
	/**
	 * @returns {string}
	 */
	resolve_z_notify_service_id: function () {
		return this._getHelper().getConfig().notify_service_id;
	},
	/**
	 * @param {Array&lt;string&gt;} data
	 */
	process_bulkSMSFormatter: function (data) {
		if (!Array.isArray(data)) {
			gs.error("Input data should be an array. Given: " + data);
			throw "Input data should be an array";
		}
		var bindings = '';
		data.forEach(function (phoneNumber, index, srcArray) {
			bindings += '&amp;ToBinding=';
			bindings += encodeURIComponent(JSON.stringify({ binding_type: 'sms', address: phoneNumber }));
		});
		return bindings;
	},
    type: 'TwilioApiSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-05-23 12:01:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;12dd79f087921300b18a046787cb0bb8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;95&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TwilioApiSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Twilio Direct Driver" source="sn_twilio_direct"&gt;3981f1d387021300b18a046787cb0b1d&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Twilio Direct Driver"&gt;3981f1d387021300b18a046787cb0b1d&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_12dd79f087921300b18a046787cb0bb8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-27 21:02:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:29</sys_created_on>
        <sys_id>ff80f0d583b01210c6695855eeaad310</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TwilioApiSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ff80f0d583b01210c6695855eeaad310</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
