<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>137412d75b32401083f30f216581c718</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_app_eng_studio.ApplicationService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;App Engine Studio's interaction layer for applications&lt;/description&gt;
        &lt;name&gt;ApplicationService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ApplicationService = Class.create();

ApplicationService.prototype = {
    initialize: function() {},

    _addSearchQuery: function(gr, searchTerm) {
        var query = gr.addQuery('name', 'CONTAINS', searchTerm);
        query.addOrCondition('short_description', 'CONTAINS', searchTerm);
    },

    getAccessibleApps: function() {
        return gs.getSession().getApplicationPickerList();
    },

    getAccessibleAppSysIds: function() {
        return this.getAccessibleApps().map(function(app) {
            return app.sysId;
        });
    },

    /**
     * @return {object} object of sys_ids of apps the user has opened in AES against time it was last opened
     */
    getUserAppsLastOpened: function(args) {
        args = args || {};
        var searchTerm = args.searchTerm;
        var currentUserId = gs.getUserID();
        var appsLastOpenedPref = new GlideRecord('sys_user_preference');
        var existingAppRecords = new GlideRecordSecure('sys_app');
        var queryAppSysIds = [];
        var lastOpenedApps = {};

        appsLastOpenedPref.addQuery('name', 'sn_app_eng_studio.last_opened');
        appsLastOpenedPref.addQuery('user', currentUserId);
        appsLastOpenedPref.query();

        if (appsLastOpenedPref.hasNext()) {
            appsLastOpenedPref.next();
            var pref = appsLastOpenedPref.getValue('value');
            var userLastOpenedAppsLookup = {};

            try {
                userLastOpenedAppsLookup = JSON.parse(pref);

                // exclude apps that no longer exist
                for (var key in userLastOpenedAppsLookup) {
                    queryAppSysIds.push(key);
                }

                existingAppRecords.addQuery('sys_id', 'IN', queryAppSysIds.join(','));

                if (searchTerm) {
                    this._addSearchQuery(existingAppRecords, searchTerm);
                }
                existingAppRecords.query();

                while (existingAppRecords.next()) {
                    var currentSysId = existingAppRecords.getValue('sys_id');
                    lastOpenedApps[currentSysId] = userLastOpenedAppsLookup[currentSysId];
                }

            } catch (ex) {
                gs.error('Unable to parse sys_user_preference for sn_app_eng_studio.last_opened. Exception: ' + ex);
            }
        }

        return lastOpenedApps;
    },

    /** 
     * @param {Object} args - The argument object
     * @param {string} args.sortField - field in sys_app table to sort by
     * @param {string} args.sortOrder - sort direction    
     * @param {number} args.offset - starting record index (set to null to retrieve all apps)
     * @param {number} args.limit - how many results to return (set to null to retrieve all apps)
     * @param {array} args.excludedAppSysIds - app sys_ids to exclude from glide query
     * @param {string} args.searchTerm - term to filter the application results by
     * @return {array} array of sys_ids of sys_scope records for applications user can read 
     */
    getUserApplications: function(args) {
        args = args || {};
        var sortField = args.sortField;
        var sortOrder = args.sortOrder;
        var offset = args.offset;
        var limit = args.limit;
        var excludedAppSysIds = args.excludedAppSysIds;
        var searchTerm = args.searchTerm;

        var userApps = [];
        var hasMore = false;
        var apps = new GlideRecordSecure('sys_app');
        var index = 0;

        if (sortOrder === CreatorStudioConstants.sorting.ASC_ORDER) {
            apps.orderBy(sortField);
        } else {
            apps.orderByDesc(sortField);
        }

        // exclude sys_app records in global scope
        apps.addEncodedQuery('scope!=' + CreatorStudioConstants.GLOBAL_APPLICATION_SCOPE_NAME);

        // exclude sys_ids passed in
        apps.addQuery('sys_id', 'NOT IN', excludedAppSysIds.join(','));

        // check for searchTerm
        if (searchTerm) {
            this._addSearchQuery(apps, searchTerm);
        }

        // query for all apps
        apps.query();

        if (limit !== null &amp;&amp; offset !== null) {
            while (apps.next() &amp;&amp; userApps.length &lt; limit) {
                if (index &gt;= offset) {
                    userApps.push(apps.getValue('sys_id'));
                }

                index++;
            }

            hasMore = apps.hasNext();

        } else {
            while (apps.next()) {
                userApps.push(apps.getValue('sys_id'));
            }
        }

        return {
            applications: userApps,
            hasMore: hasMore,
        };
    },

    type: 'ApplicationService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-02-11 17:01:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;137412d75b32401083f30f216581c718&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;113&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ApplicationService&lt;/sys_name&gt;
        &lt;sys_package display_value="App Engine Studio" source="sn_app_eng_studio"&gt;e046257545b47c84712b8779a9abd0cb&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="App Engine Studio"&gt;e046257545b47c84712b8779a9abd0cb&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_137412d75b32401083f30f216581c718&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-15 18:27:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:33</sys_created_on>
        <sys_id>649034d583b01210c6695855eeaad3c2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ApplicationService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_649034d583b01210c6695855eeaad3c2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
