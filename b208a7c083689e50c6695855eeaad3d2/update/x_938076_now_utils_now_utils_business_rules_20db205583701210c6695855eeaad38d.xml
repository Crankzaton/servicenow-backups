<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description>This after business rule does 2 actions after license/subscription is inserted.
1.  Creates purchased and used count configs
2. Log the insert/update of the subscription in the system.</description>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Handle Subscription Insert &amp; Update</name>
        <order>120</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var operation = current.operation();
var auditHelper = new SubscriptionAuditHelper();
var utils = new SNSubscriptionUtils();

var isPerUserLicense = (current.license_type == 0);
var isQuotaLicense = (current.license_type == 1);
var isDisplayOnly = (current.display_only == 1);
var allotmentType = getAllotmentType();

//Setting dashboard sysid to subscription overview dashboard for now 
//var PLATFORM_SUBCR_DASHBOARD_SYSID = "f13d4eb1f8512300964fbae098d152fc";
var PLATFORM_SUBCR_DASHBOARD_SYSID = "b9a45fa2eb022100b8f326115206fe78";

if (operation == "insert") {
 
 createCountConfigs();
 createPlatformLicCountConfigs();
 
 auditHelper.recordSubscriptionAdded(current);
 
} else if (operation == "update") {
 
 createPlatformLicCountConfigs();
 auditHelper.recordSubscriptionUpdated(current);
}

function createPlatformLicCountConfigs() {
 
 if (canCreatePlatformLicCfg()) {
  var license_count_cfg = new LicenseCountConfig(current.name, current.license_type, current.license_id);
  var allotedCountCfg = license_count_cfg.createCountCfg(license_count_cfg.TABLES_PURCHASED);
  var mappedCountCfg = license_count_cfg.createCountCfg(license_count_cfg.TABLES_USED);
  
  if (allotmentType == utils.PLAT_BUNDLE_ALLOT_TYPE) {
   var dashboardHelper = new LicenseDashboardHelper();
   var reportSysId = dashboardHelper.createPlatformLicReport(current, allotedCountCfg, mappedCountCfg);

   if (!JSUtil.nil(reportSysId))
    dashboardHelper.addReportToDashboard(PLATFORM_SUBCR_DASHBOARD_SYSID, reportSysId, current.name + " Custom Table Consumption");
  }
 }
}

function createCountConfigs() {
 
 if (canCreateCfg()) {
  var license_count_cfg = new LicenseCountConfig(current.name, current.license_type, current.license_id);
  
  var purchased_cfg = license_count_cfg.createCountCfg("purchased");
  var allocated_cfg = license_count_cfg.createCountCfg("allocated");
  
  var nonsubscribedusers_cfg = "";
  
  if (isPerUserLicense)  
   nonsubscribedusers_cfg = license_count_cfg.createCountCfg("Non-subscribed Users");
   
  // Create a report which displays the purchased and used trend for this license
   if (addToDashboard(purchased_cfg, allocated_cfg, nonsubscribedusers_cfg)) {
    var dashboadHelper = new LicenseDashboardHelper();
    dashboadHelper.addToSubscriptionDashboard(current, purchased_cfg, allocated_cfg, nonsubscribedusers_cfg);
   }

 } else 
  gs.log('Not creating count cfg for current license');
}

function canCreatePlatformLicCfg() {
 return (allotmentType == utils.PLAT_BUNDLE_ALLOT_TYPE || allotmentType == utils.GRANDFATHER_ALLOT_TYPE) && (!missingLicenseId());
}

function canCreateCfg() {
 // Create a count config entry for this license, if its of type 'per-user'/'capacity', display only is false
 // and license is identifiable through presence of license_id 
 return (!isDisplayOnly && (isPerUserLicense ||  isQuotaLicense)) && (!missingLicenseId());
}

function missingLicenseId() {
 return gs.nil(current.license_id);
}

function addToDashboard(purchased_cfg, allocated_cfg, nonsubscribedusers_cfg) {
 
 var canAddToDashboard = JSUtil.notNil(purchased_cfg) && JSUtil.notNil(allocated_cfg);
  
 if (canAddToDashboard && isPerUserLicense)
  canAddToDashboard = JSUtil.notNil(nonsubscribedusers_cfg);
 
 return canAddToDashboard; 
}

function getAllotmentType() {
 
 var allotGR = new GlideRecord(utils.LICENSE_CUST_ALLOTMENT_TBL);
 allotGR.addQuery(utils.SUBSCRIPTION, current.getUniqueValue());
 allotGR.query();
 
 if (allotGR.next())
  return allotGR.getValue(utils.ALLOTMENT_TYPE);
 
 return "-1";
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:47</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>20db205583701210c6695855eeaad38d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Handle Subscription Insert &amp; Update</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_20db205583701210c6695855eeaad38d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:47</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=20db205583701210c6695855eeaad38d"/>
</record_update>
