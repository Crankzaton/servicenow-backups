<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>97bb9c0a0f8a1110e6d4fd820b767ed6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ConsumerProfileUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ConsumerProfileUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConsumerProfileUtilSNC = Class.create();
ConsumerProfileUtilSNC.prototype = {
	initialize: function() {},
	
	getConsumerProfileRefQualifier: function(current) {
		if (gs.nil(current) || gs.nil(current.consumer))
			return;
		return "consumer=" + current.consumer;
	},

	isValidProfileOfConsumer: function(consumer, consumerProfile) {
		if (gs.nil(consumer) || gs.nil(consumerProfile))
			return true;
		var consumerProfileGR = new GlideRecord(global.CSMBaseConstants.CONSUMER_PROFILE_TABLE);
		var isValidConsumerProfile = consumerProfileGR.get(consumerProfile);
		if (isValidConsumerProfile &amp;&amp; consumerProfileGR.consumer == consumer)
			return true;
	},

	getConsumerProfileLocationReferenceQualifier: function(current) {
		if(gs.nil(current) || gs.nil(current.getValue("consumer_profile")) || gs.nil(current.getElement("consumer_profile.consumer"))) {
			return "consumerISNOTEMPTY";
		}

		return "consumer=" + current.getElement("consumer_profile.consumer");
	},

	isValidConsumerLocation: function(consumerId, locationId) {
		if(gs.nil(consumerId) || gs.nil(locationId)) {
			return false;
		}

		var locationGR = new GlideRecord(global.CSMBaseConstants.LOCATION_TABLE);
		locationGR.addQuery("sys_id", locationId);
		locationGR.addQuery("consumer", consumerId);
		locationGR.setLimit(1);
		locationGR.query();

		return locationGR.next() &amp;&amp; locationGR.canRead();
	},

	type: 'ConsumerProfileUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-21 09:08:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;97bb9c0a0f8a1110e6d4fd820b767ed6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConsumerProfileUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Base Entities" source="com.snc.cs_base"&gt;4f2cce6b47664210cd4e1ce4316d43a4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_97bb9c0a0f8a1110e6d4fd820b767ed6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-30 09:19:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:55</sys_created_on>
        <sys_id>bea87c5183341210c6695855eeaad336</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConsumerProfileUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bea87c5183341210c6695855eeaad336</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
