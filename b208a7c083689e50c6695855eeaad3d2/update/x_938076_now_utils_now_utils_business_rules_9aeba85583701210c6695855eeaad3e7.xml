<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!RP.isPopup()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>MID Server Auto Invalidate Notification</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (JSUtil.nil(current.idle_since))
        return null;

    var timeoutEnabled = gs.getProperty('mid.inactivity.timeout.enabled');
    if (JSUtil.nil(timeoutEnabled) || timeoutEnabled == 'false')
        return null;

    var timeout = -1;
    var ea = new GlideRecord('ecc_agent_config');
    ea.addQuery('ecc_agent', current.sys_id);
    ea.addQuery('param_name', 'mid.inactivity.timeout.days');
    ea.addNotNullQuery('value');
    ea.query();
    if (ea.next())
        timeout = ea.value;

    if (JSUtil.nil(timeout) || isNaN(timeout) || timeout.indexOf(".") !== -1 || parseInt(timeout, 10) < 0) {
        gs.debug("MID config parameter mid.inactivity.timeout.days value: " + timeout + " is not a non-negative integer. Attempting to use system property.");

        timeout = gs.getProperty('mid.inactivity.timeout.days');
        if (JSUtil.nil(timeout) || isNaN(timeout) || timeout.indexOf(".") !== -1 || parseInt(timeout, 10) < 0) {
            gs.debug("System property mid.inactivity.timeout.days value: " + timeout + " is not a non-negative integer. Setting timeout period to 30 days.");
            // Default 30 days timeout period
            timeout = 30;
        }
    }

    timeout = parseInt(timeout, 10);
 if(timeout === 0) {
  // 0 indicates auto-invalidation feature is disabled for this MID and notification should not be shown
  return null;
 }

    // expiryDateTime = idle_since + timeout
    var expiryDateTime = new GlideDateTime(current.idle_since);
    expiryDateTime.addDaysUTC(timeout);
    var sevenDaysBeforeExpiration = new GlideDateTime(expiryDateTime);
    sevenDaysBeforeExpiration.addDaysUTC(-7);
    var threeDaysBeforeExpiration = new GlideDateTime(expiryDateTime);
    threeDaysBeforeExpiration.addDaysUTC(-3);
    var now = new GlideDateTime();

    var moreInfoI18n = gs.getMessage('More Info');
    var mip = ' <a target="_blank" href="' + gs.getProperty('help.base.servicenow') + 'CSHelp:available-system-properties' + '">' + moreInfoI18n + '</a>';
    var msgI18nExpiring = gs.getMessage('MID Server will be auto-invalidated on {0} due to inactivity.', expiryDateTime.getDisplayValue());
    var msgI18nExpired = gs.getMessage('MID Server was auto-invalidated on {0} due to inactivity.',
        !JSUtil.nil(current.invalidated_at) ? current.invalidated_at.getDisplayValue() : expiryDateTime.getDisplayValue());
    var msgI18nExpiredSoon = gs.getMessage('MID Server exceeded inactivity timeout on {0} and will be auto-invalidated soon.', expiryDateTime.getDisplayValue());

    if (now.onOrAfter(sevenDaysBeforeExpiration) && now.onOrBefore(threeDaysBeforeExpiration))
        gs.addInfoMessage(msgI18nExpiring + mip);
    else if (now.onOrAfter(threeDaysBeforeExpiration) && now.onOrBefore(expiryDateTime))
        gs.addErrorMessage(msgI18nExpiring + mip);
    else if (now.after(expiryDateTime)) {
        if (current.auto_invalidated)
            gs.addErrorMessage(msgI18nExpired + mip);
        else
            gs.addErrorMessage(msgI18nExpiredSoon + mip);
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:11</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9aeba85583701210c6695855eeaad3e7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MID Server Auto Invalidate Notification</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9aeba85583701210c6695855eeaad3e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:11</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9aeba85583701210c6695855eeaad3e7"/>
</record_update>
