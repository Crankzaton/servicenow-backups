<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>18593d19534431106e33ddeeff7b12f4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;This script checks if the user sharedservice.worker is present and active along with required roles.&lt;/description&gt;
        &lt;name&gt;ML User Validation&lt;/name&gt;
        &lt;record_for_rollback&gt;true&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[validateAndRepair();

function validateAndRepair() {
    var ssworkerUser = "sharedservice.worker";
    var roles = ["platform_ml_read", "platform_ml_write", "platform_ml_create"];
    var userGR = getUserGR(ssworkerUser);
    if (!userGR.next()) { //user does not exist
        userGR = createUser(ssworkerUser);
        assignRolesToUser(userGR, roles);
        return;
    }
    if (!userGR.active) { // Activating user if user is not active
        activateAndUnlockUser(userGR);
    }
    // Identify missing roles
    var missingRoles = activateInactiveRolesAndGetMissingRoles(userGR, roles);
    if (missingRoles.length != 0) { // Adding missing roles if any
        assignRolesToUser(userGR, missingRoles);
    }
}

function getUserGR(userName) {
    var userGR = new GlideRecord("sys_user");
    userGR.addQuery("user_name", userName);
    userGR.query();
    return userGR;
}

function createUser(userName) {
    var userGR = new GlideRecord("sys_user");
    userGR.user_name = userName;
    userGR.first_name = "sharedservice.worker";
    userGR.last_name = "Agent Intelligence Plug-in";
    userGR.active = true;
    userGR.edu_status = "faculty";
    userGR.enable_multifactor_authn = false;
    userGR.internal_integration_user = false;
    userGR.locked_out = false;
    userGR.name = "sharedservice.worker Agent Intelligence Plug-in";
    userGR.password_needs_reset = false;
    userGR.vip = false;
    userGR.web_service_access_only = true;
    if (userGR.insert() == null) {
        gs.info("Unable to create record with user name: {0}", userName);
    }
    return userGR;
}

function activateAndUnlockUser(userGR) {
    userGR.active = true;
	userGR.locked_out = false;
    userGR.update();
    gs.info("sharedservice.worker user has been activated and unlocked.");
}

function activateInactiveRolesAndGetMissingRoles(userGR, roles) {
    var userHasRoleGR = new GlideRecord("sys_user_has_role");
    userHasRoleGR.addQuery("role.name", "IN", roles.toString());
    userHasRoleGR.addQuery("user", userGR.getUniqueValue());
    userHasRoleGR.query();
    var missingRoles = ["platform_ml_read", "platform_ml_write", "platform_ml_create"];
    while (userHasRoleGR.next()) {
        var roleName = userHasRoleGR.role.name.toString();
        if (missingRoles.indexOf(roleName) != -1) {
            var index = missingRoles.indexOf(roleName);
            missingRoles.splice(index, 1);
        }
        if (userHasRoleGR.state != "active") {
            userHasRoleGR.state = "active";
            if (userHasRoleGR.update() == null)
                gs.info("Unable to activate role {0} for the user {1}", userHasRoleGR.role.name, userHasRoleGR.user_name);
        }
    }
    return missingRoles;
}

function assignRolesToUser(userGR, roles) {
    var index = 0;
    while (index &lt; roles.length) {
        var roleName = roles[index++];
        var roleGR = new GlideRecord("sys_user_role");
        roleGR.addQuery("name", roleName);
        roleGR.query();
        if (roleGR.next()) {
            var userHasRoleGR = new GlideRecord("sys_user_has_role");
            userHasRoleGR.user = userGR.getUniqueValue();
            userHasRoleGR.role = roleGR.getUniqueValue();
            userHasRoleGR.state = "active";
            if (userHasRoleGR.insert() == null) {
                gs.info("Unable to add role {0} to the user {1}", roleName, userGr.user_name);
            }
        }
    }
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-07-14 14:22:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;18593d19534431106e33ddeeff7b12f4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ML User Validation&lt;/sys_name&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;c41430683c31311068bcf327dfe37f28&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_18593d19534431106e33ddeeff7b12f4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-22 13:26:10&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:19:25</sys_created_on>
        <sys_id>6692305d83b01210c6695855eeaad36a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ML User Validation</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6692305d83b01210c6695855eeaad36a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:19:25</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
