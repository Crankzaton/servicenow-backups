<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4d64a1365b536010e26009f8e281c758</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_acct_consumer.AccountConsumerUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;A utility for account consumer usecases&lt;/description&gt;
        &lt;name&gt;AccountConsumerUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AccountConsumerUtil = Class.create();
AccountConsumerUtil.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	getConsumerFromAccount: function(accountId) {
		var consumers = [];
		if(accountId){
			var aco = new GlideRecord('sn_acct_consumer_account_consumer');
			aco.addQuery('account', accountId);
			aco.addQuery('active', 'true');
			aco.query();
			while(aco.next())
				consumers.push(aco.getValue('consumer'));
		}
		return consumers;
	},

	getConsumerRefFromAccount: function(accountId) {
		var gr = new GlideRecord('csm_consumer');
		if(accountId &amp;&amp; gs.tableExists('sn_acct_consumer_account_consumer')){
			gr.addEncodedQuery("JOINcsm_consumer.sys_id=sn_acct_consumer_account_consumer.consumer!account=" + accountId.toString() + "^JOINcsm_consumer.sys_id=sn_acct_consumer_account_consumer.consumer!active=true");
		}
		return gr.getEncodedQuery();
	},

	getConsumerRefFromSoldProduct: function(soldProduct) {
		var gr = new GlideRecord('csm_consumer');
		if(soldProduct){
			gr.addEncodedQuery(this.getConsumerRefFromAccount(soldProduct.account));
		}
		gr.addEncodedQuery(new sn_install_base.SoldProductAndInstallBaseFilter().getConsumerRefQulifier(soldProduct));
		return gr.getEncodedQuery();
	},
	
	/*
	 * Returns encoded query for list of consumers -
	 * 1. belonging to account (accountId), AND
	 * 2. having access to soldProduct (soldProduct.consumer or soldProduct.additional_consumers)
	 *
	 */
	getConsumerRefFromAccountAndSoldProduct: function(accountId, soldProduct) {
		if (gs.nil(accountId) &amp;&amp; gs.nil(soldProduct))
			return '';

		var gr = new GlideRecord('csm_consumer');
		if (!gs.nil(accountId))
			gr.addEncodedQuery(this.getConsumerRefFromAccount(accountId));
		if (!gs.nil(soldProduct)){
			var consumers = [];
			var soldProductRecord = new GlideRecord(global.CSMBaseConstants.SOLD_PRODUCT);
			if (soldProductRecord.get(soldProduct)) {
				if (!gs.nil(soldProductRecord.consumer))
					consumers.push(soldProductRecord.consumer);
				if (!gs.nil(soldProductRecord.additional_consumers)) {
					consumers.push(soldProductRecord.additional_consumers);
				}
			}
			gr.addQuery('sys_id', 'IN', consumers);
		}
		return gr.getEncodedQuery();
	},
	
	getAccountConsumer: function(account, consumer) {
		if(consumer &amp;&amp; account){
			var aco = new GlideRecord('sn_acct_consumer_account_consumer');
			aco.addQuery('account', account);
			aco.addQuery('consumer', consumer);
			aco.query();
			if(aco.next())
				return aco;
		}
	},
	
	isConsumerAssociatedToAccount: function(consumer, account) {
		if(this.getAccountConsumer(account, consumer)){
			return true;
		}
		return false;
	},
	
	isConsumerAssociatedToAccounts: function(consumer, accounts) {
		if(consumer &amp;&amp; accounts &amp;&amp; accounts.length &gt; 0){
			var aco = new GlideRecord('sn_acct_consumer_account_consumer');
			aco.addQuery('account', 'IN', accounts);
			aco.addQuery('consumer', consumer);
			aco.query();
			if(aco.next())
				return true;
		}
		return false;
	},
	
	isConsumerInAccountHierarchy: function(accountPath, consumer) {
		if(consumer &amp;&amp; accountPath){
			var aco = new GlideRecord('sn_acct_consumer_account_consumer');
			aco.addQuery('account.account_path', 'STARTSWITH', accountPath);
			aco.addQuery('consumer', consumer);
			aco.query();
			if(aco.next())
				return true;
		}
		return false;
	},
	
	includes: function(account, accounts) {
		var answer = false;
		for(i in accounts) {
			if(accounts[i].equals(account)) {
				answer = true;
				break;
			}
		}
		return answer;
	},

	getAccountFromConsumer: function(consumerId) {
		var accounts = [];
		if(consumerId){
			var aco = new GlideRecord('sn_acct_consumer_account_consumer');
			aco.addQuery('consumer', consumerId);
			aco.addQuery('active', 'true');
			aco.query();
			while(aco.next())
				accounts.push(aco.getValue('account'));
		}
		return accounts;
	},

	getAccountRefFromConsumer: function(consumerId) {
		var gr = new GlideRecord('customer_account');
		if(consumerId &amp;&amp; gs.tableExists('sn_acct_consumer_account_consumer')){
			var sysIds = this.getAccountFromConsumer(consumerId).join();
			gr.addQuery('sys_id', 'IN', sysIds);
		}
		return gr.getEncodedQuery();
	},

	getContactRefFromConsumer: function(consumerId) {
		var gr = new GlideRecord('customer_contact');
		if(consumerId &amp;&amp; gs.tableExists('sn_acct_consumer_account_consumer')){
			var sysIds = this.getAccountFromConsumer(consumerId);
			var contactSysIds = [];
			var caseUtils = new global.CSManagementUtils();
			for(var i = 0; i &lt; sysIds.length ; i++) {
				var contactIds = caseUtils.getCaseContactsSysIDs(sysIds[i]).split(",");
				contactSysIds = contactSysIds.concat(contactIds);
			}
			gr.addQuery('sys_id', 'IN', contactSysIds);
		}
		return gr.getEncodedQuery();
	},
	
	isAccountConsumerLinked: function(accountId, consumerId) {
		if(!accountId){
			accountId = this.getParameter('sysparm_accountId');
		}
		if(!consumerId){
			consumerId = this.getParameter('sysparm_consumerId');
		}
		if(gs.nil(accountId) || gs.nil(consumerId)){
			return false;
		}
		var aco = new GlideRecordSecure('sn_acct_consumer_account_consumer');
		aco.addQuery('account', accountId);
		aco.addQuery('consumer', consumerId);
		aco.addQuery('active', 'true');
		aco.query();
		return aco.hasNext();
	},
	
	linkAccountConsumer: function(accountId, consumerId) {
		if(!accountId){
			accountId = this.getParameter('sysparm_accountId');
		}
		if(!consumerId){
			consumerId = this.getParameter('sysparm_consumerId');
		}
		if(gs.nil(accountId) || gs.nil(consumerId)){
			return;
		}
		var aco = new GlideRecordSecure('sn_acct_consumer_account_consumer');
		aco.addQuery('account', accountId);
		aco.addQuery('consumer', consumerId);
		aco.query();
		if(aco.next()){
			aco.active = true;
			aco.update();
		} else {
			aco.account = accountId;
			aco.consumer = consumerId;
			aco.active = true;
			aco.insert();
		}
	},
	
    type: 'AccountConsumerUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-04-07 13:09:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4d64a1365b536010e26009f8e281c758&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AccountConsumerUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Data Models for B2B2C" source="sn_acct_consumer"&gt;cdd5b05565a6a410f87774d7193784cd&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Data Models for B2B2C"&gt;cdd5b05565a6a410f87774d7193784cd&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4d64a1365b536010e26009f8e281c758&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-22 05:52:50&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:53</sys_created_on>
        <sys_id>9e96f8d983f01210c6695855eeaad3d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AccountConsumerUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9e96f8d983f01210c6695855eeaad3d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
