<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>afdc1fe0ffb02110468365d7d3b8fe85</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityCalculation_SubscriptionsContextV2&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityCalculation_SubscriptionsContextV2&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * Provides an abstraction over any DAO objects that the core business logic uses for subscription information.
 * This allows a layer of indirection from the business logic having more direct knowledge of the schema.
 */
var UnallocatedEntityCalculation_SubscriptionsContextV2 = Class.create();
UnallocatedEntityCalculation_SubscriptionsContextV2.prototype = {

    /**
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     */
    initialize: function(oobRolesOnly) {
        this._subscriptionRoleService = new sn_entitlement.SubscriptionRoleService(oobRolesOnly);
        this._subscriptionEntitlementDao = new sn_entitlement.PassThroughCache(new sn_entitlement.SubscriptionEntitlementDao());
        this._userHasSubscriptionDao = new sn_entitlement.PassThroughCache(new sn_entitlement.UserHasSubscriptionDao());
        this._customTableInventoryDao = new sn_entitlement.PassThroughCache(new sn_entitlement.CustomTableInventoryDAO());
        this._licenseCustTableAllotmentDao = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseCustTableAllotmentDAO());
        this._subEntDao = new sn_entitlement.SubscriptionEntitlementDao();
    },

    /**
     * Retrieves all subscription IDs that are active and per-user
     *
     * @returns {array} An array of subscription IDs
     */
    getSubscriptionIdsByIsPerUser: function() {
        return this._subscriptionEntitlementDao.getSubscriptionIdsByIsPerUser();
    },

    /**
     * Retrieves all of the active subscription ids that have a subscription type 
     * of unrestricted user.
     *
     * @returns {array} An array of subscription IDs
     */
    getSubscriptionIdsByActiveAndIsUnrestrictedUser: function() {
        return this._subscriptionEntitlementDao.getSubscriptionIdsByActiveAndIsUnrestrictedUser();
    },

    /**
     * Retrieves the subscription Ids where the subscription is of type "Module"
     * and does not have a definition
     *
     * @returns {array} An array of subscription_entitlement.sys_id values
     */
    getSubscriptionIdsByIsModuleWithoutCapacityMeter: function() {
        return this._subscriptionEntitlementDao.getSubscriptionIdsByIsModuleWithoutCapacityMeter();
    },

    /**
     * Retrieves all role IDs that require a subscription
     *
     * @returns {array} An array of role IDs
     */
    getRoleIdsByRequiresASubscription: function() {
        return this._subscriptionRoleService.getRoleIdsByRequiresASubscription();
    },

    /**
     * Retrieves all role IDs for the subscription identified that also require a subscription
     *
     * @returns {array} An array of role IDs
     */
    getRoleIdsBySubscriptionIdAndRequiresASubscription: function(subscriptionId) {
        return this._subscriptionRoleService.getRoleIdsBySubscriptionIdAndRequiresASubscription(subscriptionId);
    },

    /**
     * Retrieves all role IDs associated with the subscription identified even if the role is not
     * a metered role for the subscription
     *
     * @param {guid} subscriptionId The subscription ID to get roles for
     * @returns {array} An array of role IDs associated with the subscription
     */
    getRoleIdsBySubscriptionId: function(subscriptionId) {
        return this._subscriptionRoleService.getRoleIdsBySubscriptionId(subscriptionId);
    },

    /**
     * Calculates the number of users that are active and allocated to a subscription
     *
     * @param {guid} subscriptionId The subscription ID to get allocation counts for
     * @returns {number} A number 0 or greater that indicates the number of allocated users
     */
    getUserCountBySubscriptionIdAndUserIsAllocatedAndActive: function(subscriptionId) {
        return this._userHasSubscriptionDao.getCountBySubscriptionIdAndUserIsActive(subscriptionId);
    },

    /**
     * Calculates the number of tables mapped to a Primary Subscription ('Subscriptions')
     *
     * @param {guid} subscriptionId The subscription_entitlement sys_id used to calculate the stat
     * @returns {number} A number 0 or greater indicating the number of tables that are mapped to the subscription
     */
    getCustomTableAllocationCount: function(subscriptionId) {
        // Retrieve the parentEntitlementId for the 'subscriptionId'
        const parentEntitlementId = this._subscriptionEntitlementDao.getParentEntitlementIdForCTSecondaryMeter(subscriptionId);
        if (global.JSUtil.nil(parentEntitlementId))
            return 0;

        // Check if the parentEntitlementId is present in license_cust_table_allotment as that table is populated with entries which has Custom Tables
        const entIdToSubscriptionIdMap = this._licenseCustTableAllotmentDao.getEntitlementToSubscriptionMap();
        if (global.JSUtil.notNil(entIdToSubscriptionIdMap[parentEntitlementId])) {
            let allocatedCount = this._customTableInventoryDao.getAllocatedTableCount(entIdToSubscriptionIdMap[parentEntitlementId]);

            /**
             * if there are multiple Secondary Meter Custom Tables for the same ParentEntitlementId,
             * we need to calculate the allocation count for one Secondary Meter and go to next after its allocated completely.
             */
            const subEntGR = this._subEntDao.getCTSecondaryMetersByParentEntitlementId(parentEntitlementId);
            if (subEntGR.getRowCount() &gt; 1) {
                while (subEntGR.next()) {
                    const purchasedCount = subEntGR.getValue(LicensingEngineDBConstants.PURCHASED_COUNT);
                    const remainingToAllocate = allocatedCount - purchasedCount;
                    if (remainingToAllocate &lt;= 0) {
                        if (subEntGR.getUniqueValue() == subscriptionId)
                            return allocatedCount;
                        else
                            return 0;
                    } else {
                        if (subEntGR.getUniqueValue() == subscriptionId)
                            return subEntGR.hasNext() ? purchasedCount : allocatedCount;
                        allocatedCount = remainingToAllocate;
                    }
                }
            } else
                return allocatedCount;
        }
        return 0;
    },

    /**
     * Returns the Quota ID for a Subscription
     *
     * @param {guid} subscriptionId - subscription_entitlement sys_id
     * @returns {string} quota Id
     */
    getQuotaIdBySubscriptionId: function(subscriptionId) {
        return this._subscriptionEntitlementDao.getCapacityDefinitionIdBySubscriptionId(subscriptionId);
    },

    type: 'UnallocatedEntityCalculation_SubscriptionsContextV2'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-01 00:15:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;afdc1fe0ffb02110468365d7d3b8fe85&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;32&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityCalculation_SubscriptionsContextV2&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_afdc1fe0ffb02110468365d7d3b8fe85&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-23 19:26:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:01</sys_created_on>
        <sys_id>0d00c59d83341210c6695855eeaad3b4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityCalculation_SubscriptionsContextV2</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0d00c59d83341210c6695855eeaad3b4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:01</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
