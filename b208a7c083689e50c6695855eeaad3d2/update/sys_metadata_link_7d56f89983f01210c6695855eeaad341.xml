<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>35f441bbb74e1110635f860eee11a998</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CustomAdapterSoftPinHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CustomAdapterSoftPinHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CustomAdapterSoftPinHelper = Class.create();

CustomAdapterSoftPinHelper.DEFAULT_MAX_INVALID_ATTEMPTS = 3;
CustomAdapterSoftPinHelper.DEFAULT_MAX_INVALID_ATTEMPTS_INTERVAL_HRS = 24;
CustomAdapterSoftPinHelper.SOFTPIN_VERIFICATION = '06a5c9845302011017c3ddeeff7b1229';

/**
 *
 * @param {string} providerAppSysId
 * @param {string} channelUserId Phone number in this case
 * @param {number} maxAttempts
 * @param {number} attemptIntervalInHrs
 * @param {string} userId user's sysid in sys_user 
 * @returns {boolean}
 */
CustomAdapterSoftPinHelper.isUserLockedOutOnMaxAttempts = function(providerAppSysId, channelUserId, maxAttempts, attemptIntervalInHrs, userId) {
	if (gs.nil(maxAttempts))
		maxAttempts = CustomAdapterSoftPinHelper.DEFAULT_MAX_INVALID_ATTEMPTS;

	var numOfAttemptsInWindow = CustomAdapterSoftPinHelper.getInvalidAttemptsForUserInInterval(providerAppSysId, channelUserId, attemptIntervalInHrs);
	
	if (numOfAttemptsInWindow &lt; maxAttempts) {
		return false;
	}
	var lastEnrollmentTime = CustomAdapterSoftPinHelper.userLastEnrolled(userId, CustomAdapterSoftPinHelper.SOFTPIN_VERIFICATION, attemptIntervalInHrs);

	if (gs.nil(lastEnrollmentTime)) {
		return true;
	}
	
	//Mark those failed attempts before enrollment time to inactive
	CustomAdapterSoftPinHelper.markPreviousAttemptsInactive(providerAppSysId, channelUserId, lastEnrollmentTime);

	numOfAttemptsInWindow = CustomAdapterSoftPinHelper.getInvalidAttemptsForUserInInterval(providerAppSysId, channelUserId, attemptIntervalInHrs);

	return  numOfAttemptsInWindow &gt;= maxAttempts;
};

/**
 *
 * @param providerAppSysId
 * @param channelUserId
 * @param intervalInHrs
 * @returns {number|number}
 */
CustomAdapterSoftPinHelper.getInvalidAttemptsForUserInInterval = function(providerAppSysId, channelUserId, intervalInHrs) {
	if (gs.nil(intervalInHrs))
		intervalInHrs = CustomAdapterSoftPinHelper.DEFAULT_MAX_INVALID_ATTEMPTS_INTERVAL_HRS;

	var intervalStartTime = new GlideDateTime();
	intervalStartTime.subtract(intervalInHrs * 60 * 60 * 1000);

	var invalidSoftPinAttemptGa = new GlideAggregate('sys_cs_invalid_softpin_attempt');
	invalidSoftPinAttemptGa.addQuery('provider_application', providerAppSysId);
	invalidSoftPinAttemptGa.addQuery('channel_user_id', channelUserId);
	invalidSoftPinAttemptGa.addQuery('active', 'true');
	invalidSoftPinAttemptGa.addQuery('sys_created_on', '&gt;=', intervalStartTime);
	invalidSoftPinAttemptGa.addAggregate('COUNT');
	invalidSoftPinAttemptGa.query();

	return invalidSoftPinAttemptGa.next() ? parseInt(invalidSoftPinAttemptGa.getAggregate('COUNT')) : 0;
};

/**
 *
 * @param providerAppSysId
 * @param channelUserId
 */
CustomAdapterSoftPinHelper.recordInvalidAttempt = function(providerAppSysId, channelUserId) {
	var invalidSoftPinAttemptGr = new GlideRecord('sys_cs_invalid_softpin_attempt');
	invalidSoftPinAttemptGr.setValue('provider_application', providerAppSysId);
	invalidSoftPinAttemptGr.setValue('channel_user_id', channelUserId);
	invalidSoftPinAttemptGr.insert();
};

CustomAdapterSoftPinHelper.markInvalidAttemptsInactive = function(providerAppSysId, channelUserId) {
	var invalidSoftPinAttemptGr = new GlideRecord('sys_cs_invalid_softpin_attempt');
	if (!gs.nil(providerAppSysId))
		invalidSoftPinAttemptGr.addQuery('provider_application', providerAppSysId);

	invalidSoftPinAttemptGr.addQuery('channel_user_id', channelUserId);
	invalidSoftPinAttemptGr.addActiveQuery();

	invalidSoftPinAttemptGr.setValue('active', 'false');
	invalidSoftPinAttemptGr.updateMultiple();
};

/**
 *
 * @param {string} userId user's sysid in sys_user
 * @param {string} verificationSysId sysid for a specific password verification
 * @param {number} interval hours that needs to go back to lookup password enrollment
 * @returns {String} if user has enrollment in the past intervalInHrs, return the time otherwise ''
 * TODO: To use API from ITSM team instead of querying pwd_enrollment in next release
 */
CustomAdapterSoftPinHelper.userLastEnrolled = function(userId, verificationSysId, intervalInHrs) {
    var startTime = new GlideDateTime();
    startTime.subtract(intervalInHrs * 60 * 60 * 1000);

    var enrollmentGR = new GlideRecord("pwd_enrollment");
    enrollmentGR.addQuery('user', userId);
    enrollmentGR.addQuery('verification', verificationSysId);
    enrollmentGR.addQuery('sys_updated_on', '&gt;=', startTime);
    enrollmentGR.query();
    if (enrollmentGR.next()) {
        var lastEnrollmentTime = enrollmentGR.getValue('sys_updated_on');
        return lastEnrollmentTime;
    }
    return '';
};
/**
 *
 * @param providerAppSysId
 * @param channelUserId
 * @param lastEnrollmentTime
 */
CustomAdapterSoftPinHelper.markPreviousAttemptsInactive = function(providerAppSysId, channelUserId, lastEnrollmentTime) {
    var invalidSoftPinAttemptGr = new GlideRecord('sys_cs_invalid_softpin_attempt');
    if (!gs.nil(providerAppSysId))
        invalidSoftPinAttemptGr.addQuery('provider_application', providerAppSysId);

    invalidSoftPinAttemptGr.addQuery('channel_user_id', channelUserId);
    invalidSoftPinAttemptGr.addQuery('sys_created_on', '&lt;', lastEnrollmentTime);
    invalidSoftPinAttemptGr.addActiveQuery();

    invalidSoftPinAttemptGr.query();
    invalidSoftPinAttemptGr.setValue('active', 'false');
    invalidSoftPinAttemptGr.updateMultiple();
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-26 22:38:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;35f441bbb74e1110635f860eee11a998&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CustomAdapterSoftPinHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Conversational Custom Chat Integration" source="com.glide.cs.custom.adapter"&gt;4e8d78203c75311068bcf327dfe37fd0&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_35f441bbb74e1110635f860eee11a998&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-10-06 19:03:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:45</sys_created_on>
        <sys_id>7d56f89983f01210c6695855eeaad341</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CustomAdapterSoftPinHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7d56f89983f01210c6695855eeaad341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:45</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
