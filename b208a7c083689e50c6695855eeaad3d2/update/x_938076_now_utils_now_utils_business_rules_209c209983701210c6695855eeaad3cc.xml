<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.total_cost.changes() || current.payment_schedule.changes()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Calculate projected costs (Reports)</name>
        <order>160</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[// set defaults
current.monthly_cost = 0;
current.yearly_cost = 0;
current.cost_per_asset = 0;

calcMonthlyYearly();
calcCostPerAsset();

// if rate card based contract, look at those values
function calcMonthlyYearly() {
 if (current.ratecard) {
  var contractRateCard = new GlideRecord('fm_contract_rate_card');
  contractRateCard.addQuery('contract', current.sys_id);
  contractRateCard.query();
  while (contractRateCard.next()) {
   addCosts(contractRateCard.amount, contractRateCard.interval);
  }
 } else
  addCosts(current.total_cost, current.payment_schedule);
}

function calcCostPerAsset() {
 var assets = new GlideRecord('clm_m2m_contract_asset');
 assets.addQuery('contract', current.sys_id);
 assets.query();
 var count = 0;
 while (assets.next())
  count++;
 var average = 0;
 if (count > 0)
  average = current.total_cost / count;
 current.cost_per_unit = average;
}

function addCosts(cost, interval) {
 var currencyCode = cost.getReferenceCurrencyCode();
 cost = parseFloat(cost.getReferenceValue());
 var monthlyCost = parseFloat(current.monthly_cost.getReferenceValue());
 var yearlyCost = parseFloat(current.yearly_cost.getReferenceValue());

 var newMonthlyCost = 0;
 var newYearlyCost = 0;

 if (interval == 'daily') {
  newMonthlyCost = monthlyCost + cost * 30;
  newYearlyCost = yearlyCost + cost * 365;
 } else if (interval == 'weekly') {
  newMonthlyCost = monthlyCost + cost * 4;
  newYearlyCost = yearlyCost + cost * 52;
 } else if (interval == 'weekly2') {
  newMonthlyCost = monthlyCost + cost * 2;
  newYearlyCost = yearlyCost + cost * 26;
 } else if (interval == 'Monthly' || interval == 'monthly') {
  newMonthlyCost = monthlyCost + cost;
  newYearlyCost = yearlyCost + cost * 12;
 } else if (interval == 'monthly2') {
  newMonthlyCost = monthlyCost + cost / 2;
  newYearlyCost = yearlyCost + cost * 6;
 } else if (interval == 'Quarterly' || interval == 'quarterly') {
  newMonthlyCost = monthlyCost + cost / 3;
  newYearlyCost = yearlyCost + cost * 4;
 } else if (interval == 'semiannual') {
  newMonthlyCost = monthlyCost + cost / 6;
  newYearlyCost = yearlyCost + cost * 2;
 } else if (interval == 'Annual' || interval == 'yearly') {
  newMonthlyCost = monthlyCost + cost / 12;
  newYearlyCost = yearlyCost + cost * 1;
 }
 current.monthly_cost = currencyCode + ';' + newMonthlyCost;
 current.yearly_cost = currencyCode + ';' + newYearlyCost;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>209c209983701210c6695855eeaad3cc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Calculate projected costs (Reports)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_209c209983701210c6695855eeaad3cc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:03</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=209c209983701210c6695855eeaad3cc"/>
</record_update>
