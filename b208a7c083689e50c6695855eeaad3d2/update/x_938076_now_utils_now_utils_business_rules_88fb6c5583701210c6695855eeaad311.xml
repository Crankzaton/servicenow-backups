<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.parent_incident.changes() &amp;&amp; !current.parent_incident.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Derive State value from Parent Incident</name>
        <order>90</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 
 var ON_HOLD_REASON_AWAITING_CALLER = 1;

 // If child incident is already Closed or Cancelled, child incident should not get re-opened
 if (current.incident_state == IncidentState.CLOSED || current.incident_state == IncidentState.CANCELED)
  return;

 // If parent incident is already Closed or Cancelled, child incident state should not get derived from parent incident
 if (current.parent_incident.incident_state == IncidentState.CLOSED || current.parent_incident.incident_state == IncidentState.CANCELED)
  return;
 
 // If parent incident was re-opened by ESS user, child incident should not get re-opened from a resolved state
 var lastReopenedBy = gs.getUser().getUserByID(current.parent_incident.reopened_by);
 if (!lastReopenedBy.hasRole("itil,sn_incident_write"))
  if (current.incident_state == IncidentState.RESOLVED)
   return;

 // Add a message if child incidents state is being updated to resolved, due to parent incident being resolved
 // Update child incident's close code and close notes to match that of parent incident
 if (current.incident_state != IncidentState.RESOLVED && current.parent_incident.incident_state == IncidentState.RESOLVED) {
  var msg = "";
    
  if (current.isValidField("close_notes") && current.close_notes.nil()) {
   msg = gs.getMessage('{0} copied from Parent Incident', current.close_notes.getLabel());
   if (current.parent_incident.close_notes.toString().indexOf(msg) == 0)
    current.close_notes = current.parent_incident.close_notes;
   else
    current.close_notes = msg + ": " + current.parent_incident.close_notes;
  }
  if(current.isValidField("close_code"))
   current.close_code = current.parent_incident.close_code;

  msg = gs.getMessage("Resolved based on resolution of Parent Incident.");
  if (current.parent_incident.comments.toString().indexOf(msg) == 0)
   current.comments = current.parent_incident.comments;
  else
   current.comments = msg + " " + current.parent_incident.comments;
 }
 else {
  // States other than Resolved should not get synced up if "com.snc.best_practice.incident.kingston" is not active
  // So that customers upgrading from prior to Kingston, do not see a change in behavior
  if (!pm.isActive("com.snc.best_practice.incident.kingston"))
   return;
  
  // If parent_incident is on hold due to AWAITING_CALLER, then child incident state should not get updated
  if ( current.parent_incident.incident_state == IncidentState.ON_HOLD && current.parent_incident.hold_reason == ON_HOLD_REASON_AWAITING_CALLER)
   return;
 }

 // Update child incident's Incident State, State and On Hold Reason fields to match that of parent incident
 current.incident_state = current.parent_incident.incident_state;
 current.state = current.parent_incident.state;
 current.hold_reason = current.parent_incident.hold_reason;

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:18</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>88fb6c5583701210c6695855eeaad311</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Derive State value from Parent Incident</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_88fb6c5583701210c6695855eeaad311</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:18</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=88fb6c5583701210c6695855eeaad311"/>
</record_update>
