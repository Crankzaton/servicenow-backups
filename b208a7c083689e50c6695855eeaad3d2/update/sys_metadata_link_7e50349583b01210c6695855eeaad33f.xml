<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>09393faf43e8311089db5fb208b8f245</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PDRawActivityUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PDRawActivityUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PDRawActivityUtil = Class.create();
PDRawActivityUtil.prototype = {
    initialize: function() {
        this.assetId;
        this.assetConfigurationId;
        this.activityType = PDConstants.RAW_ASSETS.TYPE_ACTIVITY_DEFINITION;
        this.activityDefinition;
        this.defintitionCreated = false;
        this.needsInputSet = false;
    },

    type: 'PDRawActivityUtil',


    processActivity: function(fields) {
        this.activityType = fields[PDConstants.FIELDS.TYPE];
        if (this.activityType === PDConstants.RAW_ASSETS.TYPE_RAW_ASSET) {
            this.assetId = fields[PDConstants.FIELDS.ASSET_ID];
            this.assetConfigurationId = fields[PDConstants.FIELDS.ASSET_CONFIGURTION_ID];
            this.activityDefinition = fields[PDConstants.RAW_ASSETS.RAW_ACTIVITY_DEFINITION_FIELD];
            if (this.assetId &amp;&amp; this.assetConfigurationId) {
                var configGr = this._getAssetConfiguration(this.assetConfigurationId);
                if (configGr) {
                    var definedActivityDefinition = configGr.getValue(PDConstants.FIELDS.GENERIC_ACTIVITY_DEFININITION_LAUNCHER);
                    if (definedActivityDefinition) { // we have a definition defined in config
                        this.activityDefinition = definedActivityDefinition;
                        this.needsInputSet = true;
                    } else { //no definition defined so create or use one
                        var tableName = configGr.getValue(PDConstants.FIELDS.TABLE);
                        this.activityDefinition = this._getOrCreateActivityDefnitionForSource(fields[PDConstants.FIELDS.LABEL], this.assetId, tableName);
                    }
                    fields[PDConstants.RAW_ASSETS.RAW_ACTIVITY_DEFINITION_FIELD] = this.activityDefinition;
                }
            }
        }
    },

    processInputs: function(insertedGr) {
        if (this.needsInputSet) {
            this._setActivityInput(insertedGr, this.assetConfigurationId, this.assetId);
        }
    },

    _setActivityInput: function (insertedGr, configId, genericActivityResourceId) {
        var configGr = this._getAssetConfiguration(configId);
        if (configGr) {
            var assetIdVar = this._findAssetInputName(configGr.getValue(PDConstants.FIELDS.TABLE));
            if (assetIdVar) {
                var fieldName = PDConstants.FIELDS.INPUTS;
                var ge = insertedGr.getElement(fieldName);
                var variablesRecord = ge.getVariablesRecord();
                variablesRecord.setValue(assetIdVar, genericActivityResourceId);
                var gegv = ge[assetIdVar];
                gegv.setValueMapping('');
                variablesRecord.update();
                insertedGr.update();
            }
        }
    },

    _getAssetConfiguration: function(configId) {
        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_ACTIVITY_ASSET_CONFIGURATION_TABLE);
        gr.get(configId);

        if (gr.isValidRecord())
            return gr;

        return null;
    },

    _getOrCreateActivityDefnitionForSource: function(label, sourceId, sourceTable) {
        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_ACTIVITY_DEFINITION);
        gr.addQuery(PDConstants.FIELDS.SOURCE, sourceId);
        gr.addQuery(PDConstants.FIELDS.ACTIVE, false);
        gr.addQuery(PDConstants.FIELDS.CATEGORY, PDConstants.RAW_ASSETS.ACTIVITY_DEFINITION_CATEGORY);
        gr.query();
        if (gr.next()) {
            return gr.getUniqueValue();
        }
        //create new
        gr = new GlideRecord(PDConstants.TABLES.PD_ACTIVITY_DEFINITION);
        gr.initialize();

        gr.setValue(PDConstants.FIELDS.ACTIVE, false);
        gr.setValue(PDConstants.FIELDS.LABEL, label);
        gr.setValue(PDConstants.FIELDS.SOURCE, sourceId);
        gr.setValue(PDConstants.FIELDS.SOURCE_TYPE, sourceTable);
        gr.setValue(PDConstants.FIELDS.CATEGORY, PDConstants.RAW_ASSETS.ACTIVITY_DEFINITION_CATEGORY);
        this._setInputPreferences(gr);
        this.defintitionCreated = true;
        return gr.insert();
    },

    _findAssetInputName: function(targetTable) {
        var adGr = this._getActivityDefinitionGr();
        var sourceTable = adGr.getValue(PDConstants.FIELDS.SOURCE_TYPE);
        var table = this._getInputTable(sourceTable);
        var assetGR = GlideRecord(table);
        assetGR.addQuery(PDConstants.FIELDS.MODEL, adGr.getValue(PDConstants.FIELDS.SOURCE));
        assetGR.query();
        while (assetGR.next()) {
            var type = assetGR.getValue(PDConstants.FIELDS.INTERNAL_TYPE);
            if (type === PDConstants.RAW_ASSETS.INPUT_TYPE_REFERENCE) {
                var refTable = assetGR.getValue(PDConstants.FIELDS.REFERENCE);
                if (targetTable === refTable) {
                    return assetGR.getValue(PDConstants.FIELDS.ELEMENT);
                }
            }
        }
    },

    _setInputPreferences: function(adGr) {
        var sourceTable = adGr.getValue(PDConstants.FIELDS.SOURCE_TABLE);
        var table = this._getInputTable(sourceTable);
        var assetGR = GlideRecord(table);
        assetGR.addQuery(PDConstants.FIELDS.MODEL, adGr.getValue(PDConstants.FIELDS.SOURCE));
        assetGR.query();
        var prefsString = '';
        while (assetGR.next()) {
            prefsString += assetGR.getValue(PDConstants.FIELDS.ELEMENT) + "=all;";
        }
        if (prefsString.length &gt; 0)
            adGr.setValue(PDConstants.FIELDS.INITIAL_DISPLAY_PREFERENCES, prefsString);
    },

	_getInputTable: function(sourceTable) {
		return sourceTable === PDConstants.RAW_ASSETS.TABLE_ACTION ? PDConstants.RAW_ASSETS.TABLE_ACTION_INPUT : PDConstants.RAW_ASSETS.TABLE_FLOW_INPUT;
	},

    _getActivityDefinitionGr: function() {
        var gr = GlideRecord(PDConstants.TABLES.PD_ACTIVITY_DEFINITION);
        gr.get(this.activityDefinition);
        return gr;
    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-08-15 20:10:31&lt;/sys_created_on&gt;
        &lt;sys_id&gt;09393faf43e8311089db5fb208b8f245&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;22&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PDRawActivityUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Process Automation Designer Core - Model" source="com.glide.pad.core.model"&gt;0ae817db47220210cd4e1ce4316d431f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_09393faf43e8311089db5fb208b8f245&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-05 16:55:40&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:36</sys_created_on>
        <sys_id>7e50349583b01210c6695855eeaad33f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PDRawActivityUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7e50349583b01210c6695855eeaad33f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
