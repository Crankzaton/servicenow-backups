<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2aa0606fc31020100bf442583c40dd15</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_portal_starte_0.StarterPortalGenerator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Used for updating the macroponents and roles of the starter experience portal&lt;/description&gt;
        &lt;name&gt;StarterPortalGenerator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var StarterPortalGenerator = Class.create();
StarterPortalGenerator.prototype = {
    initialize: function() {},

    isStarterTemplateScope: function() {
        return gs.getCallerScopeName() === "sn_portal_starte_0" || gs.getCallerScopeName() === "rhino.global";
    },

    getCompanyCode: function(url) {
        var urlData = url.split("/");
        var code = "";
        if (urlData[0] != "now" &amp;&amp; urlData[0] != "snc" &amp;&amp; urlData[0] != "sn") {
            code = urlData[1];
            return code;
        } else {
            return urlData[0];
        }
    },

    updatePageProperty: function(pagePropertyId, newValue) {
        if (!this.isStarterTemplateScope())
            return;

        var gr = new GlideRecord('sys_ux_page_property');
        gr.get(pagePropertyId);

        var portalConfigUtil = new global.UXStarterExperiencePostOperation();
        portalConfigUtil.update(gr, {
            'value': newValue
        });
    },

    insertTemplateInputs: function(templateInstanceId, name, value) {
        if (!this.isStarterTemplateScope())
            return;

        var gr = new GlideRecord('sys_app_template_input_var_instance');

        var newTemplateInputs = {};
        newTemplateInputs.template_instance = templateInstanceId;
        newTemplateInputs.name = name;
        newTemplateInputs.value = value;

        var portalConfigUtil = new global.UXStarterExperiencePostOperation();
        portalConfigUtil.update(gr, newTemplateInputs);
    },

    insertAclRoles: function(aclSysId, roleId) {
        if (!this.isStarterTemplateScope())
            return;

        var aclRoleGR = new GlideRecord("sys_security_acl_role");

        var aclRoleInputs = {};
        aclRoleInputs.sys_security_acl = aclSysId;
        aclRoleInputs.sys_user_role = roleId;

        var portalConfigUtil = new global.UXStarterExperiencePostOperation();
        portalConfigUtil.insert(aclRoleGR, aclRoleInputs);
    },

    updateUiViewNames: function(app_sys_id, exp_registry_id, viewNames) {
        if (!this.isStarterTemplateScope())
            return;

        var ux_app_record = this.getValidUxAppRecord(exp_registry_id);

        // Get the first experience in the list of experiences ordered by sys_created_on
        if (ux_app_record) {
            this.updateMacroponent(ux_app_record, app_sys_id, "Preferences Default", "custom_portal_settings", viewNames["settings_view"]);
            this.updateMacroponent(ux_app_record, app_sys_id, "Landing Page Default", "custom_portal_approval", viewNames["approval_view"]);
            this.updateMacroponent(ux_app_record, app_sys_id, "Tasks Default", "custom_portal_approval", viewNames["approval_view"]);
        }
    },

    getValidUxAppRecord: function(exp_registry_id) {
        if (!this.isStarterTemplateScope())
            return;

        if (!exp_registry_id) {
            gs.error("sys_ux_page_registry for creating starter portal is not valid");
            return;
        }

        var ux_app_record = new GlideRecord("sys_ux_page_registry");
        ux_app_record.get(exp_registry_id);

        return ux_app_record;
    },

    updateDbImageNames: function(app_sys_id, exp_registry_id, imageNames) {
        if (!this.isStarterTemplateScope())
            return;

        var ux_app_record = this.getValidUxAppRecord(exp_registry_id);
        var scopeGr = new GlideRecord("sys_app");
        scopeGr.get(app_sys_id);

        if (scopeGr &amp;&amp; ux_app_record) {
            var scopeName = scopeGr.getValue("scope");
            var oldLandingImage = scopeName + ".custom_portal_banner.svg";
            var oldLoginImage = scopeName + ".custom_portal_login.svg";

            this.updateMacroponent(ux_app_record, app_sys_id, "Landing Page Default", oldLandingImage, imageNames["landing_image"], true);
            this.updateMacroponent(ux_app_record, app_sys_id, "Login Default", oldLoginImage, imageNames["login_image"], true);
        }
        // Get the first experience in the list of experiences ordered by sys_created_on

    },

    updateMacroponent: function(ux_app_record, app_sys_id, screenName, viewName, newViewName, isLayout) {
        if (!this.isStarterTemplateScope())
            return;

        var admin_panel = ux_app_record.admin_panel;
        var scopeName;

        var screenRecord = new GlideRecord("sys_ux_screen");
        screenRecord.addEncodedQuery("name=" + screenName + "^app_config=" + admin_panel.sys_id);
        screenRecord.query();

        while (screenRecord.next()) {
            var macroponent = new GlideRecord("sys_ux_macroponent");
            macroponent.get("sys_id", screenRecord.getValue("macroponent"));
            if (macroponent) {
                var composition = macroponent.composition;
                var data = macroponent.data;
                var scopeGR = new GlideRecord("sys_app");
                scopeGR.get(app_sys_id);

                if (scopeGR) {
                    scopeName = scopeGR.getValue('scope');

                    composition = composition.toString().replaceAll(viewName, newViewName);
                    macroponent.composition = composition;

                    data = data.toString().replaceAll(viewName, newViewName);
                    macroponent.data = data;

                    var newMacroponentProps = {};
                    newMacroponentProps.data = data;
                    newMacroponentProps.composition = composition;

                    if (isLayout) {
                        var layout = macroponent.layout;
                        layout = layout.toString().replaceAll(viewName, newViewName);
                        macroponent.layout = layout;
                        newMacroponentProps.layout = layout;
                    }

                    var portalConfigUtil = new global.UXStarterExperiencePostOperation();
                    portalConfigUtil.update(macroponent, newMacroponentProps);
                }
            }
        }
    },

    type: 'StarterPortalGenerator'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-11-11 13:02:03&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2aa0606fc31020100bf442583c40dd15&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;56&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;StarterPortalGenerator&lt;/sys_name&gt;
        &lt;sys_package display_value="AES Portal UI Template" source="sn_portal_starte_0"&gt;9262a139c39020100bf442583c40dd87&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="AES Portal UI Template"&gt;9262a139c39020100bf442583c40dd87&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2aa0606fc31020100bf442583c40dd15&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-12-08 10:24:14&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:56</sys_created_on>
        <sys_id>eb11bc5983b01210c6695855eeaad391</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>StarterPortalGenerator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_eb11bc5983b01210c6695855eeaad391</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:56</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
