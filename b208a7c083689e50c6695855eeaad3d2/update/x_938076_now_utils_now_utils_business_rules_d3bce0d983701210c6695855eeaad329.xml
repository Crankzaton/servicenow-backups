<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate rest request body size</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 if(current.inputs == undefined || current.inputs.http_method == undefined || current.inputs.request_body == undefined)
  return;
 
 if(current.inputs.http_method == 'get' || current.inputs.http_method == 'delete') {
  current.inputs.request_body = '';
  return;
 }
  
 var requestBody = current.inputs.request_body.toString();

 if(requestBody && requestBody.length > 0) {
  // each char is encoded in 16 bits.
  var numOfBytesInBody = requestBody.length * 2;

  //value of property in KB.
  var atfRestPayloadMaxSize = getRequestBodyMaxSize() * 1024;

  if (atfRestPayloadMaxSize >= 0 && numOfBytesInBody > atfRestPayloadMaxSize) {
   var args = [];
   args.push(atfRestPayloadMaxSize);

   var errorMessage = gs.getMessage("Request payload can\'t have more than {0}" +
           " bytes. Use glide.atf.rest.request_payload_max_size to update maximum request payload size.", args);
   gs.addErrorMessage(errorMessage);
   current.setAbortAction(true);
  }
 }
 
 function getRequestBodyMaxSize() {
  var atfRestPayloadMaxSizeInt = 100;
  var sysPropertiesGR = new GlideRecord('sys_properties');
  sysPropertiesGR.addQuery('name', 'glide.atf.rest.request_payload_max_size');
  sysPropertiesGR.query();

  if(sysPropertiesGR.next()) {
   var atfRestPayloadMaxSizeString = sysPropertiesGR.getValue('value');
   atfRestPayloadMaxSizeInt = parseInt(atfRestPayloadMaxSizeString);
   if (atfRestPayloadMaxSizeInt == undefined || atfRestPayloadMaxSizeInt < 0) {
    atfRestPayloadMaxSizeInt = 100;
   } else if (atfRestPayloadMaxSizeInt > 1024) {
    atfRestPayloadMaxSizeInt = 1024;
   }
  }
  return atfRestPayloadMaxSizeInt;
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:48</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d3bce0d983701210c6695855eeaad329</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate rest request body size</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_d3bce0d983701210c6695855eeaad329</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:48</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=d3bce0d983701210c6695855eeaad329"/>
</record_update>
