<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>04bfec47c33b10007304072a1fba8fc6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PartRequirementStageHandler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Marks a Part Requirement Sourced or Delivered based on the Transfer Orders&lt;/description&gt;
        &lt;name&gt;PartRequirementStageHandler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PartRequirementStageHandler = Class.create();

PartRequirementStageHandler.prototype = {
	initialize: function() {
	},
	
	/*
 	* After a TOL is added, updated or removed under a PR, the PR.reserved_quantity
 	* should be updated as the sum of all the TOL.requested_quantity
 	*/
	updateReservedAndSourced: function(transferOrderLine) {
		var grTOL = new GlideAggregate('alm_transfer_order_line');
		grTOL.addQuery('part_requirement', transferOrderLine.part_requirement);
		grTOL.addAggregate('SUM', 'quantity_requested');
		grTOL.query();
		
		var reserved_quantity = 0;
		var requestedTOL = false;
		while (grTOL.next()) {
			reserved_quantity += parseInt(grTOL.getAggregate('SUM','quantity_requested'));
			if (reserved_quantity &gt; 0) {
				// If the reserved quantity has become more than 0 then
				// there must be atleast one TOL, set requestedTOL flag
				requestedTOL = true;
			}
		}
		
		var grPR = new GlideRecord('sm_part_requirement');
		grPR.addQuery('sys_id', transferOrderLine.part_requirement.sys_id);
		grPR.query();
		
		if (grPR.next()) {
			grPR.reserved_quantity = reserved_quantity;
			grPR.requested = requestedTOL; // Has the PR requested a TOL or not
			if (grPR.required_quantity == grPR.reserved_quantity)
				grPR.sourced = true;
			else
				grPR.sourced = false;
			
			var notInStageChildren = this.getChildrenNotInStage(transferOrderLine.part_requirement, 'delivered');
			if (notInStageChildren == 0 &amp;&amp; grPR.sourced == true)
				grPR.delivered = true;
			else
				grPR.delivered = false;
			
			grPR.update();
		}
		
		if (GlidePluginManager.isActive('com.snc.fsm_advanced_parts_sourcing')) {
			sn_fsm_parts_src.FSMPartRequestUtil.updatePartRequestDelivered(transferOrderLine.getUniqueValue());
		}

	},
	
	// When all the Transfer Order Lines change to specific stages, it pushes the Transfer Order to change its stage.
	pushStageFromTOL: function(transferOrderLine, action) {
		var notInStageChildren = this.getChildrenNotInStage(transferOrderLine.part_requirement, 'delivered');
		
		var grPR = new GlideRecord('sm_part_requirement');
		grPR.addQuery('sys_id', transferOrderLine.part_requirement.sys_id);
		grPR.query();
		
		if (grPR.next()) {
			if (action == 'delivered' &amp;&amp; notInStageChildren == 0) {
				grPR.delivered = true;
				grPR.update();
			}
		}
	},
	
	// Get the number of transfer order lines under PR that is not in a given stage
	getChildrenNotInStage: function(partRequirement, stage) {
		var grTOL = new GlideRecord('alm_transfer_order_line');
		grTOL.addQuery('part_requirement', partRequirement.sys_id);
		grTOL.addQuery('stage', '!=', stage);
		grTOL.query();
		
		return grTOL.getRowCount();
	},
	
	type: 'PartRequirementStageHandler'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2012-01-30 17:39:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;04bfec47c33b10007304072a1fba8fc6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;50&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PartRequirementStageHandler&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Management Core" source="com.snc.service_management.core"&gt;3e6bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_04bfec47c33b10007304072a1fba8fc6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-08 05:58:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:11</sys_created_on>
        <sys_id>f040bc5583b01210c6695855eeaad35c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PartRequirementStageHandler</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f040bc5583b01210c6695855eeaad35c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
