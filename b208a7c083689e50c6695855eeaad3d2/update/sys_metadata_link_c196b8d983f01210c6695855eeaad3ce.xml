<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4bae7f27531321108a8fddeeff7b1274</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFUpdateSetManager&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to handle update set changes while saving translations based on update set name and artifact scope  . Customers are not expected to override these core functions&lt;/description&gt;
        &lt;name&gt;LFUpdateSetManager&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFUpdateSetManager = Class.create();
LFUpdateSetManager.prototype = {
    tableName: 'sys_update_set',

    initialize: function(publishMode, updateSetSuffix) {
        this.logger = new LFLogger("LFUpdateSetManager");
        this.lfConstants = new LFConstants();
        this.publishMode = publishMode;
        this.updateSetUtils = new LFUpdateSetUtils();
        this.isDedicatedUpdateSetRequired = this.updateSetUtils.isDedicatedUpdateSetRequired();
        if (this.isDedicatedUpdateSetRequired) {
            this.previousUpdateSet = new GlideUpdateSet().get();
            this.previousScope = gs.getCurrentApplicationId();
            this.updateSetMappings = {};
            this.updateSetName = this.updateSetUtils.getUpdateSetNameByPublishMode(this.publishMode, updateSetSuffix);
            this.updateSetStrategy = this.updateSetUtils.getUpdateSetStrategyByPublishMode(this.publishMode);
        }
    },

    switchToUpdateSetInScope: function(scope) {
        if (!this.isDedicatedUpdateSetRequired) {
            return null;
        }
        scope = this._getScope(scope);
        gs.setCurrentApplicationId(scope);
        var curUpdateSet = this.updateSetMappings[scope];
        if (!curUpdateSet) {
            curUpdateSet = this.updateSetUtils.getUpdateSetIdByStrategyAndScope(this.updateSetStrategy, scope, this.updateSetName);
            if (!curUpdateSet) {
                curUpdateSet = new UpdateSetAPI().insertUpdateSet(this.updateSetName);
            }
            this.updateSetMappings[scope] = curUpdateSet;
        }
        gs.getSession().putProperty(this.tableName, curUpdateSet);
        return curUpdateSet;
    },

    switchToPreviousUpdateSet: function() {
        if (!this.isDedicatedUpdateSetRequired) {
            return null;
        }
        gs.getSession().putProperty(this.tableName, this.previousUpdateSet);
        gs.setCurrentApplicationId(this.previousScope);
        return this.previousUpdateSet;
    },

    markUpdateSetsAsComplete: function() {
        if ((!this.isDedicatedUpdateSetRequired) || (this.updateSetStrategy != this.lfConstants.UPDATE_SET_STRATEGIES.LF_TASK)) {
            return false;
        }
        var updateSetSysIDs = this.updateSetUtils.getUpdateSetsInProgressByName(this.updateSetName);
        if (updateSetSysIDs.length &gt; 0) {
            var updateSetGR = new GlideRecord(this.tableName);
            updateSetGR.addQuery('sys_id', 'IN', updateSetSysIDs);
            updateSetGR.setValue('state', 'complete');
            updateSetGR.updateMultiple();
        }
        return true;
    },

    _getScope: function(scope) {
        scope = scope || 'global';
        if (this.updateSetUtils.isValidScope(scope)) {
            return scope;
        } else {
            this.logger.logError("Defaulting to global scope as given scope does not exist -  " + scope);
            return 'global';
        }
    },

    type: 'LFUpdateSetManager'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-06-14 17:01:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4bae7f27531321108a8fddeeff7b1274&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFUpdateSetManager&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;60bb711a93e33110b31a30dcebba1034&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4bae7f27531321108a8fddeeff7b1274&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-16 14:00:24&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:48</sys_created_on>
        <sys_id>c196b8d983f01210c6695855eeaad3ce</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFUpdateSetManager</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c196b8d983f01210c6695855eeaad3ce</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:48</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
