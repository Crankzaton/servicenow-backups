<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>02a4d235d7804300811300285e61030a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_apptmnt_booking.AppointmentBookingAjaxUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AppointmentBookingAjaxUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AppointmentBookingAjaxUtil = Class.create();
AppointmentBookingAjaxUtil.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	appointmentExists: function() {
		var helper = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT);
		var startDate , endDate, catalogId, limit, openedFor, groupBy, ruleId;
		var taskRecord = {};
		taskRecord["location"] = this.getParameter("sysparm_location");
		
		startDate = this.getParameter("sysparm_start_date");
		endDate = this.getParameter("sysparm_end_date");
		catalogId = this.getParameter("sysparm_catalog_id");
		openedFor = this.getParameter("sysparm_opened_for");
		ruleId = this.getParameter("sysparm_rule_id");
		
		var result = helper.getAppointmentAvailability(taskRecord, startDate, endDate, catalogId, openedFor, groupBy, limit, false, null, null, null, null, ruleId);		
		if (result &amp;&amp; result.success &amp;&amp; result.no_appt_available == false || result.no_appt_available == "false") {
			return true;
		}else{
			return false;
		}
	},
	
	createAppointmentAfterTaskCreated: function() {
		var impl = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT_BOOKING_IMPL);
		var appointmentObject, catalogId, taskId, taskTable, openedFor, location;
		var reschedule = false;
		
		appointmentObject = this.getParameter("sysparm_appointment")
		if (appointmentObject)
			appointmentObject = JSON.parse(appointmentObject);
		catalogId = this.getParameter("sysparm_catalogId")
		taskId = this.getParameter("sysparm_taskId");
		taskTable = this.getParameter("sysparm_taskTable");
		openedFor = this.getParameter("sysparm_openedFor");
		location = this.getParameter("sysparm_location");
		reschedule = this.getParameter("sysparm_reschedule"); 
		
		var result = impl.submitAppointmentFromPlatform(appointmentObject, taskId, taskTable, catalogId, openedFor, location, reschedule);		
		
		return JSON.stringify(result)+ "";
	},
	
	cancelAppointment : function(){
		var sysId = this.getParameter("sysparm_taskId");
		var taskTable = this.getParameter("sysparm_taskTable");
		
		new sn_apptmnt_booking.AppointmentRescheduleCancel().cancelAppointment(sysId);
		return true;
	},
	
	deleteAppointment: function(){
		var sysId = this.getParameter("sysparm_taskId");
		
		new sn_apptmnt_booking.AppointmentRescheduleCancel().deleteAppointment(sysId);
		return true;
	},
	
	hasAppointmentForTask : function(){
		var taskSysId = this.getParameter("sysparm_taskId");
		var impl = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT_BOOKING_IMPL);
		var result = impl.getAppointmentRecord(taskSysId,"");
		if(result)
			return true;
		return false;
	},
	
	getAppConfigurationUsingCatalog : function() {
		var catalogId = this.getParameter("sysparm_catalogId");
		var ruleId = this.getParameter("sysparm_ruleId");
		var impl = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.CONFIGURATION);
		result = impl.getConfig(catalogId);
		if (result &amp;&amp; result.data &amp;&amp; result.data.service_config &amp;&amp; result.data.active &amp;&amp; result.data.service_config.active) {
			var config = result.data;
			
			if (ruleId) {
				var ruleGr = new GlideRecord("sn_apptmnt_booking_config_rule");
				ruleGr.addQuery("sys_id", ruleId);
				ruleGr.setLimit(1);
				ruleGr.query();
				
				if (ruleGr.next()) {
					config.ruleId = ruleGr.getUniqueValue();
					config.ruleFutureMaxBookableDays = ruleGr.future_bookable_max_days + "";
				}
			}
			
			return JSON.stringify(config) + "";
		} else
			return false;
	},
	
	getReformatDateWithTZ : function() {
		
		var start = this.getParameter("sysparm_start");
		var end = this.getParameter("sysparm_end");
		var timeZoneValue = this.getParameter("sysparm_tz");
		var actualStartDt = this.getParameter("sysparm_actualStartDt");
		var actualEndDt = this.getParameter("sysparm_actualEndDt");
		var actualStartTime = this.getParameter("sysparm_actualStartTime");
		var actualEndTime = this.getParameter("sysparm_actualEndTime");
		
		var answer = {};
		var util = new sn_apptmnt_booking.AppointmentBookingUtil();
		try {
			answer.reformatDate = util.getFormattedApptWindow(actualStartDt, actualEndDt, actualStartTime, actualEndTime, timeZoneValue);
		}
		catch (e) {
			gs.error("AppointmentBookingAjaxUtil::getReformatDateWithTZ: "+e);
			answer.reformatDate = util.reformatDate(start, end) + " (" + timeZoneValue + ")";
		}
		
		answer.reformatDateWithTZ = answer.reformatDate; 
		return answer.reformatDateWithTZ+"";
	},
	
	getTranslatedMessagesForAppBookingConfig : function() {
		var APP_BOOKING_CONSTANTS = {};
		APP_BOOKING_CONSTANTS.MESSAGES = {}; 
		APP_BOOKING_CONSTANTS.MESSAGES.ERROR = {};
		APP_BOOKING_CONSTANTS.MESSAGES.ERROR.ONSUBMIT = gs.getMessage("Please fix the following errors before submitting:");
		APP_BOOKING_CONSTANTS.MESSAGES.ERROR.DAILYSCHEDULE = gs.getMessage("Daily start time cannot be after daily end time.");
		APP_BOOKING_CONSTANTS.MESSAGES.ERROR.BREAKTIME = gs.getMessage("Break start time cannot be after break end time.");
		APP_BOOKING_CONSTANTS.MESSAGES.ERROR.DURATION = gs.getMessage("Appointment window cannot be empty and must be greater than or equal to sum of work and average travel duration");
		APP_BOOKING_CONSTANTS.MESSAGES.AVAILABLE = gs.getMessage("available");
		APP_BOOKING_CONSTANTS.MESSAGES.BREAK = gs.getMessage("break");
		APP_BOOKING_CONSTANTS.MESSAGES.INSUFFICIENT_TIME = gs.getMessage("insufficient time");
		return JSON.stringify(APP_BOOKING_CONSTANTS); // serializing the json object
	},
	
	getRescheduleAppointmentDataWorkspace: function(){
		var sys_id = this.getParameter("sysparm_sys_id");
		var gr = new GlideRecordSecure("sn_apptmnt_booking_appointment_booking");
		gr.addQuery("task", sys_id);
		gr.query();

		var bookedAppointment = {};
		var catalogId;
		if (gr.next()) {
			bookedAppointment.startDateTimeUTC = gr.start + "";
			bookedAppointment.endDateTimeUTC = gr.end + "";
			catalogId = gr.getValue("catalog_item");
		}

		if (!catalogId) {
			var templateId = this.getParameter("sysparm_template_id");
			var apptDao = new AppointmentBookingDao();
			catalogId = apptDao.getCatalogId(templateId)[0];
		}
		
		var response = {
			bookedAppointment: bookedAppointment,
			catalogId: catalogId
		};
		
		return JSON.stringify(response);
	},
	
	getCatalogId: function() {
		var templateId = this.getParameter("sysparm_template_id");
		var apptDao = new AppointmentBookingDao();
		
		var catalogIds = apptDao.getCatalogId(templateId);
		
		var aptConfigGr = new GlideRecordSecure("sn_apptmnt_booking_service_config");
		aptConfigGr.addQuery("catalog_item", "IN", catalogIds.join());
		aptConfigGr.query();
		
		if (aptConfigGr.next()) {
			return JSON.stringify(catalogIds);
		} else {
			return null;
		}
	},
	
	getTaskTable: function () {
		var serviceConfigId = this.getParameter("sysparm_serviceConfigId");
		var gr = new GlideRecordSecure("sn_apptmnt_booking_service_config");
		gr.addQuery("sys_id", serviceConfigId);
		gr.setLimit(1);
		gr.query();
		
		if (gr.next()) {
			return gr.appointment_booking_config.task_table + "";
		}
	},
    type: 'AppointmentBookingAjaxUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-07-19 23:32:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;02a4d235d7804300811300285e61030a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;47&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AppointmentBookingAjaxUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Appointment Booking" source="sn_apptmnt_booking"&gt;d0f0c1303ba23200ce8a4d72f3efc4ac&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Appointment Booking"&gt;d0f0c1303ba23200ce8a4d72f3efc4ac&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_02a4d235d7804300811300285e61030a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-08 18:13:38&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:00</sys_created_on>
        <sys_id>7530f85583b01210c6695855eeaad358</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AppointmentBookingAjaxUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7530f85583b01210c6695855eeaad358</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
