<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0c47f904eb523010bbd186de4252281a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_customerservice.CSMRelationshipService_CaseRelatedParty&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.CSMRelationshipServiceEP
Extension point for CSM Relationship framework.&lt;/description&gt;
        &lt;name&gt;CSMRelationshipService_CaseRelatedParty&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CSMRelationshipService_CaseRelatedParty = Class.create();
CSMRelationshipService_CaseRelatedParty.prototype = Object.extendsObject(global.CSMRelationshipService,{
	canProcess: function(relationship) {
		return (relationship &amp;&amp; relationship == global.CSMRelationshipConstants.RELATIONSHIP_CASE_RELATED_PARTY);
	},
	
	getResponsibilities: function(relationship, accessLevel) {
		var accessRoles = {};
		var responsibilities =  global.CSMResponsibilityModelUtil.getResponsibilities(
			relationship, accessLevel, accessRoles, this.__getAdditionalParam(global.CSMRelationshipConstants.SKIP_ROLE_CHECK)
		);
		// accessRoles will be used in _getEntity to check if the user has the required role
		this.__updateContext('accessRoles', accessRoles.list);
		return responsibilities;
	},
	
	_addPersonaCriteria: function(relationshipGR) {
		if (gs.hasRole(global.CSMRelationshipConstants.ROLE_CONSUMER) || gs.hasRole(global.CSMRelationshipConstants.ROLE_UNIFIED_CONSUMER)) {
			var loggedInConsumerId = new global.CSManagementUtils().getConsumerId();
			relationshipGR.addQuery(global.CSMRelationshipConstants.FIELD_CONSUMER, loggedInConsumerId);
			return;
		}
			
		return global.CSMRelationshipService.prototype._addPersonaCriteria(relationshipGR);
	},
	
	_addAdditionalCriteria: function(relationshipGR) {
		if (this.context.current &amp;&amp; this._isChildOf(global.CSMBaseConstants.CASE_TABLE, this.context.current.getTableName())) {
			// current refers to the case record in sn_customerservice_case table
			relationshipGR.addQuery(global.CSMRelationshipConstants.RP_CASE_FIELD, this.context.current.sys_id);
		}
	},

	/*
	When entity name is null, this method will return all related party entities (contact or consumer or user) added to current case record
	Format will be '&lt;entity_type&gt;:&lt;entity_sys_id&gt;'.
	entity_type for case related party can be customer_contact | csm_consumer | sys_user
	
	When entity name is not null, this method will return the value of that entity in relationShipGr
	*/
	_getEntity: function(relationshipGR) {
		if (!this.context.entityName &amp;&amp; this.context.current &amp;&amp; this._isChildOf(global.CSMBaseConstants.CASE_TABLE, this.context.current.getTableName())) {
			/*
			For case related party multiple entity types are possible: user, contact, consumer
			As per the implemtation of CSMRelationshipServiceSNC, entity has to be string.
			So, this method return '&lt;entity_type&gt;:&lt;entity_sys_id&gt;'
			*/
			if(gs.nil(relationshipGR) || gs.nil(relationshipGR.party_config) || gs.nil(relationshipGR.party_config.entity_type))
				return '';
			if(!this.context.accessRoles &amp;&amp; !this.context.accessRoles.length)
				return '';

			var entityType = relationshipGR.party_config.entity_type;
			var entityId = '';
			var userId = '';
			
			if(entityType == global.CSMBaseConstants.CONTACT_TABLE || entityType == global.CSMBaseConstants.USER_TABLE){
				entityId = relationshipGR.getValue(global.CSMRelationshipConstants.DEFAULT_PERSONA_FIELD);
				userId = entityId;
			} else if(entityType == global.CSMBaseConstants.CONSUMER_TABLE){
				entityId = relationshipGR.getValue(global.CSMRelationshipConstants.FIELD_CONSUMER);
				userId = new global.CSManagementUtils().getConsumerUserFromConsumer(entityId);
			}
						
			if(gs.nil(userId))
				return '';
						
			var gr = new GlideRecord('sys_user_has_role');
			gr.addQuery('role.name', 'IN', this.context.accessRoles);
			gr.addQuery('user', userId);
			gr.query();
			if(gr.getRowCount() == 0)
				return '';

			return entityType + ":" + entityId;
		}
		
		// Default implementation for other conditions
		return relationshipGR.getValue(this.context.entityName) + '';
	},

    /*
     * utility method to sync changes done to related party user records -
     * with additional users Glide List present on Case record
     * field - specifies if related party consumers or related party users need to be updated
     *
     * Only newUserId is passed -&gt; Insert operation
     * Only oldUserId is passed -&gt; Delete operation
     * Both are passed -&gt; Replace operation
     */
    syncRelatedPartiesWithCase: function(caseId, newUserId, oldUserId, field) {

        this.__updatePersonaInGlideList(global.CSMBaseConstants.CASE_TABLE, caseId, field, newUserId, oldUserId);

    },

    type: 'CSMRelationshipService_CaseRelatedParty'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-26 04:34:12&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0c47f904eb523010bbd186de4252281a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CSMRelationshipService_CaseRelatedParty&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service" source="sn_customerservice"&gt;51d811fad7223100b7490ee60e61034f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Service"&gt;51d811fad7223100b7490ee60e61034f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0c47f904eb523010bbd186de4252281a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-07 06:23:33&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:54</sys_created_on>
        <sys_id>4360789583b01210c6695855eeaad379</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CSMRelationshipService_CaseRelatedParty</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4360789583b01210c6695855eeaad379</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
