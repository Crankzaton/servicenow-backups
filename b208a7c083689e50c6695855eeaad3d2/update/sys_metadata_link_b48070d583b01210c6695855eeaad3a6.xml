<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>10bbfbcf531332007e7829cac2dc34e7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ATFRelatedListUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ATFRelatedListUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ATFRelatedListUtil = Class.create();
ATFRelatedListUtil.prototype = Object.extendsObject(AbstractAjaxProcessor,{

	process: function() {
		var name = this.getParameter('sysparm_name');
		if (name == 'getRelationshipTableName')
			return this.getRelationshipTableName(this.getParameter('sysparm_relationship_id'));
		else if (name == 'getRelatedLists')
			return JSON.stringify(this.getRelatedLists(this.getParameter('sysparm_table')));
		else if (name == 'getRelatedListLabels')
			return this.getRelatedListLabels(this.getParameter('sysparm_table'), this.getParameter('sysparm_related_list_names'));
	},

	/**
	 * Returns the table name of the given relationship
	 */
	getRelationshipTableName: function(relationshipSysId) {
		gs.log("ATFRelatedListUtil.getRelationshipTableName called with relationship sys_id: " + relationshipSysId);
		var gr = new GlideRecord("sys_relationship");
		if (!gr.get(relationshipSysId)) {
			gs.log("Unable to find a relationship with sys_id: " + relationshipSysId);
			return null;
		}

		if (!gs.nil(gr.basic_query_from))
			return gr.basic_query_from;

		// not all relationships use basic_query_from
		return GlideRhinoHelper.evaluateAsString(gr.query_from);
	},

	/**
	 * Returns the reference qualifier for related list 'list action' UI actions
	 */
	getListActionRefQual: function(tableName) {
		if (gs.nil(tableName))
			return "table=global^list_action=true^active=true";

		var tableHierarchy = GlideDBObjectManager.get().getTables(tableName).toString();
		tableHierarchy = tableHierarchy.substring(1, tableHierarchy.length() - 1);
		tableHierarchy += ", global";
		return "tableIN" + tableHierarchy + "^list_action=true^active=true";
	},

	/**
	 * Given a table and a comma-separated string of related list names,
	 * returns a comma-separated string of the related list labels
	 */
	getRelatedListLabels: function(tableName, relatedListNames) {
		if (gs.nil(tableName) || gs.nil(relatedListNames))
			return relatedListNames;

		var allRelatedLists = this.getRelatedLists(tableName);
		var labels = [];
		var relatedLists = relatedListNames.split(',');
		for (var i = 0; i &lt; relatedLists.length; i += 1)
			labels.push(this.getRelatedListLabel(relatedLists[i], allRelatedLists));

		return labels.join(', ');
	},

	/**
	 * Returns the label of a given related list
	 */
	getRelatedListLabel: function(relatedListName, allRelatedLists) {
		for (var l in allRelatedLists) {
			if (allRelatedLists[l].value == relatedListName)
				return allRelatedLists[l].label;
		}

		gs.log("Unable to find related list label for related list: " + relatedListName);
		return relatedListName;
	},

	/**
	 * Populates answer object in the context with an ordered list of related lists available on the given table.
	 * Used to populate
	 */
	getRelatedListsForSlushbucket: function(tableName) {
		if (!tableName)
			return;

		var cl = this.getRelatedListChoices(tableName);
		for (var i = 0; i &lt; cl.size(); i += 1) {
			var c = cl.getChoice(i);
			answer.add(c.getValue(), c.getLabel());
		}
	},

	/**
	 * Returns an object which is an ordered list of related lists available on the given table.
	 */
	getRelatedLists: function(tableName) {
		var answer = {};
		if (!tableName)
			return answer;

		var cl = this.getRelatedListChoices(tableName);
		for (var i = 0; i &lt; cl.size(); i += 1) {
			var c = cl.getChoice(i);
			answer[i] = { 'value': c.getValue(), 'label': c.getLabel() };
		}

		return answer;
	},

	/**
	 * Returns a ChoiceList containing the available related lists on the given table.
	 */
	getRelatedListChoices: function(tableName) {
		var cachedRelatedListChoices = GlideController.getGlobal("atf_cached_related_list_choices");
		if (cachedRelatedListChoices &amp;&amp; cachedRelatedListChoices.tableName == tableName)
			return cachedRelatedListChoices.choices;

		var cls = new GlideChoiceListSet();
		if (!tableName)
			return cls.getColumns();

		cls.setColumns(GlideSysForm.getRelatedTables(tableName));
		var gru = new GlideRelationshipUtil();
		gru.addChoices(tableName, cls);
		cls.sortColumns();
		var result = cls.getColumns();

		GlideController.putGlobal("atf_cached_related_list_choices", {tableName: tableName, choices: result});
		return result;
	},

    type: 'ATFRelatedListUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-06-16 21:29:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;10bbfbcf531332007e7829cac2dc34e7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ATFRelatedListUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Automated Test Framework - Lists" source="com.glide.automated_testing_impl.lists"&gt;643838203cf1311068bcf327dfe37f70&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_10bbfbcf531332007e7829cac2dc34e7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-06-23 23:58:47&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:17</sys_created_on>
        <sys_id>b48070d583b01210c6695855eeaad3a6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ATFRelatedListUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b48070d583b01210c6695855eeaad3a6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:17</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
