<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Table Variable - Update Validation Check</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 // Container for capturing validation failures
 var validationFailures = [];
 var failureCount = 0;

 // Checking for sys id because this check is really only valid on update
 // But just being safe and anyway we cannot check for the variables without this
 if(current.type == "one_to_many" && current.sys_id) {
  var setTypeDisplayValue = current.getDisplayValue("type");
  var unsupportedTypes = ["23","19","12","17","24","14","11","20","15"];
  var itemOptionNewGr = new GlideRecord("item_option_new");
  // Currently checking for nodes regardless of whether they are active or not
  itemOptionNewGr.addQuery("variable_set", "=", current.sys_id);
  itemOptionNewGr.query();
  while(itemOptionNewGr.next()) {
   var type = itemOptionNewGr.getValue("type");
   var typeDisplay = itemOptionNewGr.getDisplayValue("type");
   var variableName = itemOptionNewGr.getDisplayValue("name");
   if(unsupportedTypes.indexOf(type) > -1) {
    validationFailures[failureCount++] = {
     message: gs.getMessage("Unsupported {0} Variable: [{1}] {2}", [setTypeDisplayValue, typeDisplay, variableName])
    };
   }
  }
 }

 if(failureCount > 0) {
  for(var i=0; i < validationFailures.length; i++) {
   var validationFailure = validationFailures[i];
   gs.addErrorMessage(validationFailure.message);
  }
  current.setAbortAction(true);
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c71cec9583701210c6695855eeaad32c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Table Variable - Update Validation Check</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_c71cec9583701210c6695855eeaad32c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:03</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=c71cec9583701210c6695855eeaad32c"/>
</record_update>
