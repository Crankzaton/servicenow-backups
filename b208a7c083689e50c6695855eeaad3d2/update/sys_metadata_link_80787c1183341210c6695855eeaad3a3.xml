<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8846623c43202110a878634a1bb8f2f5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_fsm_map_integr.FSMMapProviderAdapter&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Script to execute API calls to map providers by triggering the flow designer&lt;/description&gt;
        &lt;name&gt;FSMMapProviderAdapter&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FSMMapProviderAdapter = Class.create();
FSMMapProviderAdapter.prototype = {
    initialize: function() {
        this.util = new FSMMapProviderCommonUtil();
        this.helper = new FSMMapProviderHelper();
    },

    execute: function(inputs, action) {
        try {
            var result = sn_fd.FlowAPI.getRunner()
                .action(action)
                .inForeground()
                .withInputs(inputs)
                .run();

            var outputs = result.getOutputs();
            return outputs;
        } catch (ex) {
            let errorMessage = gs.getMessage(
                'Error executing outbound call to map provider: {0}', [ex],
            );
            throw errorMessage;
        }
    },

    processResponse: function name(response) {
        return this._handleError(response);
    },

    validateCount: function(config, requestPayload) {
        var originElements = requestPayload['origins'].length;
        var destinationElements = requestPayload['destinations'].length;
        var currentElementCount = originElements * destinationElements;
        var frequency = config.request_limit_frequency;
        var countLimit = Number(config.request_threshold_limit);
        var elementLimit = Number(config.max_location_elements);

        var error = false;
        var errorMsg = '';

        if (frequency == 'daily' || frequency == 'monthly') {
            var usageGR = this.helper.queryUsageTable(config.map_vendor);

            if (!usageGR.next()) {
                let insertedSysId = this.helper.insertUsageRecord(
                    usageGR,
                    config.map_vendor,
                );
                usageGR.get(insertedSysId);
            }

            var totalRequestCount = usageGR.getValue('request_count');
            var totalElementCount = usageGR.getValue('location_elements_count');
        }

        if (frequency == 'monthly') {
            totalRequestCount = this._getCurrentCount(
                config.map_vendor,
                'request_count',
            );

            totalElementCount = this._getCurrentCount(
                config.map_vendor,
                'location_elements_count',
            );
        }

        if (Number(totalRequestCount) + 1 &gt; countLimit || Number(totalElementCount) + currentElementCount &gt; elementLimit) {
            if (Number(totalRequestCount) + 1 &gt; countLimit &amp;&amp; Number(totalElementCount) + currentElementCount &gt; elementLimit) {
                error = true;
                errorMsg = FSMMapProviderConstants.ERROR_MESSAGE.LIMIT_REACHED;
            } else if (Number(totalRequestCount) + 1 &gt; countLimit) {
                error = true;
                errorMsg = FSMMapProviderConstants.ERROR_MESSAGE.REQUEST_COUNT_LIMIT_REACHED;
            } else {
                error = true;
                errorMsg = FSMMapProviderConstants.ERROR_MESSAGE.LOCATION_ELEMENTS_COUNT_LIMIT_REACHED;
            }
        }

        return {
            hasError: error,
            errorMessage: errorMsg,
            logData: {
                request_count: totalRequestCount,
                location_elements_count: totalElementCount,
            },
        };
    },

    _getCurrentCount: function(provider, column) {
        var aggregateGR = new GlideAggregate(
            FSMMapProviderConstants.TABLE.USAGE_COUNT,
        );

        aggregateGR.addEncodedQuery(
            'map_provider=' +
            provider +
            '^count_startONThis month@javascript:gs.beginningOfThisMonth()@javascript:gs.endOfThisMonth()',
        );

        aggregateGR.groupBy('map_provider');
        aggregateGR.addAggregate('SUM', column);
        aggregateGR.query();

        if (aggregateGR.next()) {
            return aggregateGR.getAggregate('SUM', column);
        }
    },

    _handleError: function(response) {
        if (Number(response?.action_status?.code) != 0)
            throw response?.action_status?.message;
        else return response?.response;
    },

    type: 'FSMMapProviderAdapter',
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-20 04:40:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8846623c43202110a878634a1bb8f2f5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;158&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FSMMapProviderAdapter&lt;/sys_name&gt;
        &lt;sys_package display_value="Map Integrations for Field Service" source="sn_fsm_map_integr"&gt;32467aba87d8a910f53c7515dabb3598&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Map Integrations for Field Service"&gt;32467aba87d8a910f53c7515dabb3598&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8846623c43202110a878634a1bb8f2f5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-16 22:37:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:55</sys_created_on>
        <sys_id>80787c1183341210c6695855eeaad3a3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FSMMapProviderAdapter</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_80787c1183341210c6695855eeaad3a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
