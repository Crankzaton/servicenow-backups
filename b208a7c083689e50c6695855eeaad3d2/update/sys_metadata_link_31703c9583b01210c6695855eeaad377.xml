<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0e8ce24d77801010b924a1226810611c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MultisourceResultStatus&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;MultisourceResultStatus&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MultisourceResultStatus = Class.create();
MultisourceResultStatus.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    getExecutionId: function(query) {
        var queryString = new GlideQueryString(query);
        queryString.deserialize();
        var queryTermsList = queryString.getTerms();
        var executionId;
        for (var i = 0; i &lt; queryTermsList.size(); i++) {
            var queryTerm = queryTermsList.get(i);
            var queryField = queryTerm.getField();
            if (queryField == 'execution_id.sys_id') {
                executionId = queryTerm.getValue();
                break;
            }
        }
        return executionId;
    },
    // UI action calls this method to parse the execution id correctly
    getExecutionIdForClient: function() {
        return this.getExecutionId(this.getParameter('sysparm_query'));
    },
    showLoadButtons: function(query) {
        var TABLE = "cmdb_multisource_query_status";
        var STATUS = "status";
        var executionId = this.getExecutionId(query);
        if (GlideStringUtil.nil(executionId))
            return false;

        var gr = new GlideRecord(TABLE);
        if (gr.get(executionId)) {
            if (gr.getValue(STATUS) == "PAUSED") {
                return true;
            }
            return false;
        }
        return false;
    },
    type: 'MultisourceResultStatus'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-04-06 22:19:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0e8ce24d77801010b924a1226810611c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MultisourceResultStatus&lt;/sys_name&gt;
        &lt;sys_package display_value="Configuration Management (CMDB)" source="com.snc.cmdb"&gt;8f64bce83c31311068bcf327dfe37f7e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0e8ce24d77801010b924a1226810611c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-04-22 23:31:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:04</sys_created_on>
        <sys_id>31703c9583b01210c6695855eeaad377</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MultisourceResultStatus</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_31703c9583b01210c6695855eeaad377</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:04</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
