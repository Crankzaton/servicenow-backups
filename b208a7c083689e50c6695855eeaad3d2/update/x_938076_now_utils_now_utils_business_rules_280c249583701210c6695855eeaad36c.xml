<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.run_calc_brs != false</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ProjectWorkbenchPhaseValidationAndUpdate</name>
        <order>99</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[handleInsertUpdate();

function handleInsertUpdate() {
 
 if (current.top_task.calculation_type == "manual" && !endDateValid()) 
  return false;
 
 if (current.operation() == "insert" ) {
  if (!calculationTypeValidOnInsert()) 
   return false;
  if(!parentPhaseTypeValidOnInsert())
   return false;
  if (current.top_task.calculation_type == "manual") {
   current.calculation_type = "manual";
   current.time_constraint = "start_on";
  }
 } else if (current.operation() == "update") {
  if (current.calculation_type.changes() && !calculationTypeValidOnUpdate())
   return false;
  if (current.time_constraint.changes() && !timeConstraintValid())
   return false;
  if(this._onlyConstraintDateChanged(current) && !constraintDateValid())
   return false;
 }
}

function _onlyConstraintDateChanged(current){
   // when both are changed, its valid. 
      return current.constraint_date.changes() && !current.start_date.changes() ;
}

function calculationTypeValidOnInsert() {
 var projectHasChildren = current.top_task.rollup.toString();
 if (current.top_task.calculation_type != "manual" && projectHasChildren == "true" && current.calculation_type == "manual") {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage('Auto projects can not have manual tasks'));
  return false;
 }
 return true;
}

function calculationTypeValidOnUpdate() {
 if (current.top_task.calculation_type != "manual") {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage('Auto projects can not change calculation'));
  return false;
 }
 return true;
}

function parentPhaseTypeValidOnInsert(){
 if(current.parent){
  var parentPhaseType = current.parent.phase_type;
  if(parentPhaseType == "agile" || parentPhaseType == "test"){
   current.setAbortAction(true);
   gs.addErrorMessage(gs.getMessage('Project tasks can added to only waterfall phase'));
   return false;
  }
 }
 return true;
}

function timeConstraintValid() { 
 if (current.calculation_type == "manual" && (current.time_constraint == "asap" ||current.time_constraint == "snlt" || current.time_constraint == "snet")) {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage('Manual task time constraint can not be updated'));
  return false;
 }
 return true;
}

function constraintDateValid() {
 if(current.calculation_type == "manual") {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage('Manual task constraint date can not be updated'));
  return false;
 }
 return true;
}

function endDateValid() { 
 if (current.duration.getGlideObject().getNumericValue() == 0) //milestone
  current.end_date = current.start_date;

 var ptm = new SNC.ProjectTaskManager();
 var projectStartToTaskEnd = 
  ptm.RecalculateDurationFromEndDate(current.top_task.start_date.getDisplayValue(),
  current.end_date.getDisplayValue(), current.top_task.schedule);
 var gd = new GlideDuration(projectStartToTaskEnd);
 var daysPart = gd.getDayPart();
 var max_task_duration = Number(gs.getProperty("com.snc.project.task.max_task_duration"));
 if (daysPart > max_task_duration) {
  current.setAbortAction(true);
        gs.addErrorMessage(gs.getMessage('Project duration can not be more than {0} days', max_task_duration));
  return false;
 } 
 return true;
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>280c249583701210c6695855eeaad36c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProjectWorkbenchPhaseValidationAndUpdate</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_280c249583701210c6695855eeaad36c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:36</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=280c249583701210c6695855eeaad36c"/>
</record_update>
