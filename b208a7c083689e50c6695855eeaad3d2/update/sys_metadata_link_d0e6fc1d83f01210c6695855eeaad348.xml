<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>672c4065c06195d0f877e9d0ea777a8b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_oe_sfs.IARHealthCheck&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Contains functions that assist with health check for IAR&lt;/description&gt;
        &lt;name&gt;IARHealthCheck&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var IARHealthCheck = Class.create();
IARHealthCheck.prototype = {
    initialize: function() {},

    type: 'IARHealthCheck'
};

/**
 * @returns an array of all IAR configurations, each configuration is {"sys_id", "table_display_value"}
 */
IARHealthCheck.getIARConfigurations = function() {
    var gr = new GlideRecord("sys_cs_auto_resolution_configuration");
    gr.query();
    var configs = [];
    while (gr.next()) {
        var grTableDisplayValue = new GlideRecord(gr.getDisplayValue());
        var table_display_value = grTableDisplayValue.getClassDisplayValue();
        configs.push({
            "sys_id": gr.getValue('sys_id'),
            "table_display_value": table_display_value,
        });
    }
    return configs;
};

/**
 * @returns a boolean representing whether the prediction server is up
 */
IARHealthCheck.checkIsPredictionServerUp = function() {
    var result = false;
    var options = {};
    var results = sn_ml.AgentZeroSolutionStore.getSupportedOOBIntents(options);
    if (!gs.nil(results)) {
        result = true;
    }
    return result;
};

/**
 * @returns a boolean representing whether there are any IAR configurations
 */
IARHealthCheck.checkConfigsExist = function() {
    var grConfig = new GlideRecord("sys_cs_auto_resolution_configuration");
    grConfig.query();
    return grConfig.getRowCount() &gt; 0;
};

/**
 * @returns a boolean representing whether there are any active IAR configurations
 */
IARHealthCheck.checkActiveConfigExists = function() {
    var grConfig = new GlideRecord("sys_cs_auto_resolution_configuration");
    grConfig.query();
    while (grConfig.next()) {
        if (grConfig.active) {
            return true;
        }
    }
    return false;
};

/**
 * @param sys_id of the IAR configuration record to be checked
 * @returns a boolean representing whether the configuration is active
 */
IARHealthCheck.checkConfigActive = function(config_sys_id) {
    var grConfig = new GlideRecord("sys_cs_auto_resolution_configuration");
    grConfig.get(config_sys_id);
    return grConfig.active;
};

/**
 * @param sys_id of the IAR configuration record to be checked
 * @returns a boolean representing whether the configuration has an active configuration language
 */
IARHealthCheck.checkConfigLanguageActive = function(config_sys_id) {
    var grConfigLanguage = new GlideRecord("sys_cs_auto_resolution_configuration_language");
    grConfigLanguage.addQuery("configuration", config_sys_id);
    grConfigLanguage.addQuery("active", true);
    grConfigLanguage.query();
    return grConfigLanguage.getRowCount() &gt; 0;
};

/**
 * @param sys_id of the IAR configuration record to be checked
 * @returns a boolean representing whether the configuration has an active response channel
 */
IARHealthCheck.checkReponseChannelActive = function(config_sys_id) {
    var grResponseChannel = new GlideRecord("sys_cs_auto_resolution_response_channel");
    grResponseChannel.addQuery("configuration", config_sys_id);
    grResponseChannel.addQuery("active", true);
    grResponseChannel.query();
    return grResponseChannel.getRowCount() &gt; 0;
};

/**
 * @param sys_id of the IAR configuration record to be checked
 * @returns a boolean representing whether the configuration has an active intent topic map
 */
IARHealthCheck.checkIntentTopicMapActive = function(config_sys_id) {
    var grIntentTopicMap = new GlideRecord("sys_cs_auto_resolution_intent_topic_map");
    grIntentTopicMap.addQuery("ar_configuration", config_sys_id);
    grIntentTopicMap.addQuery("active", true);
    grIntentTopicMap.query();
    return grIntentTopicMap.getRowCount() &gt; 0;
};

/**
 * @param sys_id of the IAR configuration record to be checked
 * @returns a boolean representing whether AI search is enabled for the configuration
 */
IARHealthCheck.checkAISearchEnabled = function(config_sys_id) {
    var grConfig = new GlideRecord("sys_cs_auto_resolution_configuration");
    grConfig.get(config_sys_id);
    return grConfig.ais_enabled;
};

/**
 * @param sys_id of the IAR configuration record to be checked
 * @returns a boolean representing whether "Use SLA Engine" is true for the configuration
 */
IARHealthCheck.checkUseSLA = function(config_sys_id) {
    var grConfig = new GlideRecord("sys_cs_auto_resolution_configuration");
    grConfig.get(config_sys_id);
    return grConfig.use_sla;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-25 22:12:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;672c4065c06195d0f877e9d0ea777a8b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;IARHealthCheck&lt;/sys_name&gt;
        &lt;sys_package display_value="Omni-Experience Standard Feature Set" source="sn_oe_sfs"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Omni-Experience Standard Feature Set"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_672c4065c06195d0f877e9d0ea777a8b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-01 13:36:00&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:06</sys_created_on>
        <sys_id>d0e6fc1d83f01210c6695855eeaad348</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>IARHealthCheck</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d0e6fc1d83f01210c6695855eeaad348</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
