<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1dd03d39b81af410f8775fb8023b29a6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WMTemplates&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Work order template helpers&lt;/description&gt;
        &lt;name&gt;WMTemplates&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WMTemplates = Class.create();
WMTemplates.prototype = {
	initialize: function() {
		this.smCacheManager = new SMConfigCacheManager();
		this.taskClass = "wm_task";
	},

	getWorkOrderModelFromCatalogId : function(catalogId){
		
		var workOrderModelGR = new GlideRecord("cmdb_workorder_product_model");
		workOrderModelGR.addQuery("product_catalog_item",catalogId);
		workOrderModelGR.addActiveQuery();
		workOrderModelGR.setLimit(1);
		workOrderModelGR.query();
		if(workOrderModelGR.next())
			return workOrderModelGR;

	},

	buildFirstWOTFromWOModel : function(workOrderModelGR,wotGr) {

		
		var gr = new GlideRecord("sm_m2m_somodel_stmodel");
		gr.addQuery("so_model", workOrderModelGR.sys_id+'');
		gr.orderBy("order");
		gr.setLimit(1);
		gr.query();
		if (gr.next()) {
			
			var smConfig = this.smCacheManager.getSMConfig(this.taskClass);
			var dispatchQueueEnabled = (smConfig.dispatch_queue == 'true' ? true : false);
			
			wotGr.template = gr.st_model;
			wotGr.short_description = gr.st_model.short_description;
			wotGr.description = gr.st_model.task_description;
		
			if(dispatchQueueEnabled &amp;&amp; !gs.nil(gr.st_model.dispatch_group))
				wotGr.dispatch_group = gr.st_model.dispatch_group;
			if(!gs.nil(gr.st_model.location))
				wotGr.location = gr.st_model.location;
			if(!gs.nil(gr.st_model.work_type))
			wotGr.work_type = gr.st_model.work_type;
			if(gr.st_model.requires_crew)
				wotGr.requires_crew = gr.st_model.requires_crew;
			if(!gs.nil(gr.st_model.work_type) &amp;&amp; (gr.st_model.work_type.getRefRecord().requires_crew))
				wotGr.requires_crew = true;
			
			this.applyNewTemplateFields(wotGr);
		}
	},

	applyNewTemplateFields : function(wotGr) {
		// Apply all new template fields
		var table = wotGr.getTableName();
		var smConfig = this.smCacheManager.getSMConfig(this.taskClass);
		var requestDriven = (smConfig.request_driven == 'true' ? true : false);
		
		var taskTable = smConfig.tableName;
		
		var tempDef = new GlideRecord('sm_template_definition');
		tempDef.addQuery('template', wotGr.template);
		tempDef.query();

		while (tempDef.next()) {
			var gr = new GlideRecord(table);
			var fieldType = gr.getElement(tempDef.field).getED().getInternalType();
			var fieldName = tempDef.field;

			if (fieldType == 'boolean')
				continue;
			if (fieldType == 'integer') {
				var choiceOfInteger = gr.getElement(tempDef.field).getED().getChoice();
				if ((choiceOfInteger == 1) || (choiceOfInteger == 3)) {
					if (wotGr[fieldName] + '' == '0')
						wotGr[fieldName] = tempDef.value.toString();
				} else {
					if (wotGr[fieldName].nil())
						wotGr[fieldName] = tempDef.value.toString();
				}
			} else {
				if (wotGr[fieldName].nil()) {
					if (fieldType == 'glide_date_time' || fieldType == 'glide_date') {
						wotGr[fieldName].setValue(tempDef.value);
					} else if ((fieldName == 'assignment_group') &amp;&amp; wotGr[fieldName].nil()) {
						if (requestDriven || (!requestDriven &amp;&amp; (table == taskTable))) {
							wotGr[fieldName] = tempDef.value;
						}
					} else
						wotGr[fieldName] = tempDef.value.toString();
				}
			}
		}
	},
	type: 'WMTemplates'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-31 14:37:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1dd03d39b81af410f8775fb8023b29a6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WMTemplates&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1dd03d39b81af410f8775fb8023b29a6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-08-31 18:22:22&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:35</sys_created_on>
        <sys_id>ffc0f41983b01210c6695855eeaad369</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WMTemplates</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ffc0f41983b01210c6695855eeaad369</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:35</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
