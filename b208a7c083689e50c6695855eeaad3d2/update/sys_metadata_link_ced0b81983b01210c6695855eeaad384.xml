<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1f2caa3e3b801300b5c42479b3efc4de</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_majorissue_mgt.MajorIssueManagementAjax&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;MajorIssueManagementAjax&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MajorIssueManagementAjax = Class.create();
MajorIssueManagementAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    ROLE_MAJOR_ISSUE_MANAGER: "sn_majorissue_mgt.major_issue_manager",
    ROLE_CUSTOMER_SERVICE_AGENT: "sn_esm_agent",
    PROP_MAJOR_CASE_CREATION: "sn_majorissue_mgt.major_case_creation",
    ATTR_NAME: 'name',
    ATTR_ACTIVE: 'active',
    ATTR_RL_ACTIVE: "active_communication",
    ATTR_EXECUTION_ORDER: 'order',
    ATTR_TABLE_NAME: 'sn_customerservice_case',
    ATTR_COMM_PLAN_TABLE_NAME: 'comm_plan',
    ATTR_CONTACT_TABLE_NAME: 'contact',
    ATTR_COMM_PLAN_SOURCE_FIELD: 'source',
    ATTR_RL_TABLE_NAME: 'sn_publications_recipients_list',
    ATTR_RL_M2M_COMPANY_TABLE_NAME: 'sn_publications_recipientslist_account_m2m',
    ATTR_RL_M2M_CONSUMER_TABLE_NAME: 'sn_publications_recipientslist_consumer_m2m',
    ATTR_PARENT: "parent",
    ATTR_ACCOUNT: "account",
    ATTR_CONSUMER: "consumer",
    ATTR_TABLE: "table",
    ATTR_DOCUMENT: "document",
    ATTR_TYPE: "type",
    ATTR_RECIPIENT_LIST: "recipients_list",
    ATTR_CONTACT_RECIPIENT_LIST: "recipient_list",
    ATTR_WORKFLOW: 'workflow',
    ATTR_CASE_WORK_NOTES: 'work_notes',
    ATTR_MAJOR_CASE_STATE: 'major_case_state',
    ATTR_ASSIGNED_TO: 'assigned_to',
    ATTR_ASSIGNMENT_GROUP: 'assignment_group',
    ATTR_CREATE_CHILDREN: 'create_children',
    PROPERTY_PARENT_CHILD_SYNC: "sn_customerservice.parent_child_ case_sync",
    PROPERTY_SYNC_FIELD_LIST: "sn_customerservice.case_fields_to_sync",
    RECIPIENTLIST_TYPE: {
        ACCOUNT: 'accounts',
        CONSUMER: 'consumers'
    },
    MAJOR_CASE_STATE: {
        PROPOSED: 'proposed',
        ACCEPTED: 'accepted',
        REJECTED: 'rejected',
        CANCELED: 'cancelled'
    },
    CREATE_CHILD_CASE_STATE: {
        NEW: 'new',
        INPROGRESS: 'inprogress',
        COMPLETE: 'complete'
    },

    getCaseObj: function(case_sysid) {
        var gr = new GlideRecord(this.ATTR_TABLE_NAME);
        gr.query();
        if (gr.next()) {
            return gr;
        }
        return null;
    },
    initiChildCaseCreation: function() {
        var recipientlist_count = this.getParameter('sysparm_child_case_count');
        var communication_msg = this.getParameter('sysparm_communication_msg');
        var case_sysid = this.getParameter('sysparm_case_sysid');
        this.initiChildCaseCreationFlow(recipientlist_count, communication_msg, case_sysid);
    },
    initiChildCaseCreationFlow: function(recipientlist_count, communication_msg, case_sysid) {
        var current_gr = new GlideRecord("sn_customerservice_case");
        if(current_gr.canRead()) {
        current_gr.addQuery("sys_id", case_sysid);
        current_gr.query();
        if (current_gr.next()) {
            if (recipientlist_count &gt; 10) {
                //set "child_case_creation_progress" flag to true. Start event queue to create cases
                new sn_majorissue_mgt.MajorIssueManagement(current_gr).setChildCaseProgress(true);
                gs.eventQueue('mim_create_child_cases', current_gr, communication_msg);
            } else {
                if (recipientlist_count &gt; 0) {
                    new sn_majorissue_mgt.MajorIssueManagement(current_gr).startChildCaseCreation(communication_msg);
					}
                }
            }
        }
    },


    getRecipientListID: function(comm_sysid) {
        var conGr = new GlideRecord(this.ATTR_CONTACT_TABLE_NAME);
        conGr.addQuery("table", this.ATTR_COMM_PLAN_TABLE_NAME);
        conGr.addQuery("document", comm_sysid);
        conGr.addQuery("type", this.ATTR_RL_TABLE_NAME);
        conGr.query();
        if (conGr.next()) {
            return conGr.getValue("recipient_list");
        }
        return null;
    },

    attachRLtoCommPlan: function() {
        //query communication plan
        //create new contact for recipient list and attach it to communication plan
        var comm_sysid = this.getCommPlanId(this.getParameter('sysparm_case_sysid'));
        var rl_sysid = this.getParameter('sysparm_rl_sysid');
        var rl_type = this.getRecipientType(rl_sysid);
        //check if contact already exists else create one
        var cGr = new GlideRecord(this.ATTR_CONTACT_TABLE_NAME);
        cGr.addQuery("table", this.ATTR_COMM_PLAN_TABLE_NAME);
        cGr.addQuery("document", comm_sysid);
        cGr.addQuery("type", this.ATTR_RL_TABLE_NAME);
        cGr.query();
        if (cGr.next()) {
            //Compare and update the  RL if different from already existing value
            var contact_rl = cGr.getValue(this.ATTR_CONTACT_RECIPIENT_LIST);
            if (contact_rl != rl_sysid) {
                cGr.setValue(this.ATTR_CONTACT_RECIPIENT_LIST, rl_sysid);
                cGr.update();
            }
        } else {
            var newGr = new GlideRecord(this.ATTR_CONTACT_TABLE_NAME);
            newGr.initialize();
            newGr.setValue("table", "comm_plan");
            newGr.setValue("document", comm_sysid);
            newGr.setValue("type", this.ATTR_RL_TABLE_NAME);
            newGr.setValue("recipient_list", rl_sysid);
            newGr.update();
        }
    },

    setRLonFormLoad: function(case_sysid) {
        //if recipient list already existing display on case form load
        var obj = {};
        obj.display_value = "";
        obj.sys_id = "";
        var comm_sysid = this.getCommPlanId(case_sysid); //this.getParameter('sysparm_case_sysid'));
        if (!gs.nil(comm_sysid)) {
            var newGr = new GlideRecord(this.ATTR_CONTACT_TABLE_NAME);
            newGr.addQuery("table", this.ATTR_COMM_PLAN_TABLE_NAME);
            newGr.addQuery("document", comm_sysid);
            newGr.addQuery("type", this.ATTR_RL_TABLE_NAME);
            newGr.query();
            if (newGr.next()) {
                obj.display_value = newGr.getDisplayValue("recipient_list");
                obj.sys_id = newGr.getValue("recipient_list");
            }
        }
        return obj;
        /*else{
        	return false;
        }*/
    },

    getCommPlanId: function(case_sysid) {
        var gr = new GlideRecord(this.ATTR_COMM_PLAN_TABLE_NAME);
        gr.addQuery(this.ATTR_COMM_PLAN_SOURCE_FIELD, case_sysid);
        gr.query();
        if (gr.next()) {
            return gr.sys_id;
        }
        return null;
    },

    setRLDisplayValue: function(case_sysid) {
        var comm_sysid = this.getCommPlanId(case_sysid); //this.getParameter('sysparm_case_sysid'));
        if (!gs.nil(comm_sysid)) {
            var newGr = new GlideRecord("contact");
            newGr.addQuery("table", this.ATTR_COMM_PLAN_TABLE_NAME);
            newGr.addQuery("document", comm_sysid);
            newGr.addQuery("type", this.ATTR_RL_TABLE_NAME);
            newGr.query();
            if (newGr.next()) {
                return newGr.getDisplayValue("recipient_list");
            }
            return "";
        } else {
            return false;
        }
    },

    getExistingChildCases: function(case_sysid, field_name) {
        var childcases = [];
        var eGr = new GlideRecord(this.ATTR_TABLE_NAME);
        eGr.addQuery(this.ATTR_PARENT, case_sysid);
        eGr.query();
        while (eGr.next()) {
            childcases.push(eGr.getValue(field_name));
        }
        return childcases;
    },

	hasRLAttachedtoCaseProcess: function(case_sysid) {
		 var responseObj = {};
        responseObj.hasRLAttached = false;
        responseObj.hasValidRLType = false;
        var rl_sysid = this.getCaseRLId(case_sysid);
        if (!gs.nil(rl_sysid)) {
            responseObj.hasRLAttached = true;
            responseObj.recipientListName = this.getRecipientListName(rl_sysid);
        } else {
            return JSON.stringify(responseObj);
        }

        var rl_type = this.getRecipientType(rl_sysid);
        if (rl_type == this.RECIPIENTLIST_TYPE.CONSUMER || rl_type == this.RECIPIENTLIST_TYPE.ACCOUNT) {
            responseObj.hasValidRLType = true;
        } else {
            return JSON.stringify(responseObj);
        }

        var field_name;
        var table_name;
        var cs_field_name;

        if (rl_type == this.RECIPIENTLIST_TYPE.CONSUMER) {
            table_name = this.ATTR_RL_M2M_CONSUMER_TABLE_NAME;
            field_name = this.ATTR_CONSUMER;
            cs_field_name = this.ATTR_CONSUMER;
        } else if (rl_type == this.RECIPIENTLIST_TYPE.ACCOUNT) {
            table_name = this.ATTR_RL_M2M_COMPANY_TABLE_NAME;
            field_name = this.ATTR_ACCOUNT;
            cs_field_name = this.ATTR_ACCOUNT;
        } else {
            gs.info("MIM: Recipient list not supported");
            return null;
        }
        var existing_child_ids = this.getExistingChildCases(case_sysid, cs_field_name);
        //calculate delta count for the ids
        var rl_resp = this.getCaseDelta(table_name, rl_sysid, field_name, existing_child_ids);
        gs.info("Calcluating delta between Recipient list and Child cases count: " + rl_resp.count + " has RL count: " + rl_resp.hasRl_count);
        responseObj.count = rl_resp.count;
        responseObj.hasRl_count = rl_resp.hasRl_count;
        var data = JSON.stringify(responseObj);
        return data;
		
	},
	
    hasRLAttachedtoCase: function() {
        var case_sysid = this.getParameter('sysparm_case_sysid');
        return this.hasRLAttachedtoCaseProcess(case_sysid);
    },

    hasRLAttachedtoCaseUIB: function(case_sysid) {
        return this.hasRLAttachedtoCaseProcess(case_sysid);
    },
	
	getCaseRLId: function(case_id) {
        return new sn_majorissue_mgt.MajorIssueManagementImpl().getRecipientListID(case_id);
    },

    getCaseDelta: function(table_name, rl_sysid, field_name, type_ids) {
        var resp = {};
        resp.hasRl_count = false;
        var rlGr = new GlideRecord(table_name);
        rlGr.addQuery(this.ATTR_RECIPIENT_LIST, rl_sysid);
        rlGr.addQuery(this.ATTR_RL_ACTIVE, true);
        rlGr.addQuery(field_name, "NOT IN", type_ids.join());
        rlGr.query();
        resp.count = rlGr.getRowCount();
        if (resp.count &gt; 0)
            resp.hasRl_count = true;
        return resp;
    },
    getRLID: function(comm_sysid) {
        var cGr = new GlideRecord(this.ATTR_CONTACT_TABLE_NAME);
        cGr.addQuery(this.ATTR_TABLE, this.ATTR_COMM_PLAN_TABLE_NAME);
        cGr.addQuery(this.ATTR_DOCUMENT, comm_sysid);
        cGr.addQuery(this.ATTR_TYPE, this.ATTR_RL_TABLE_NAME);
        cGr.query();
        if (cGr.next()) {
            return cGr.getValue(this.ATTR_CONTACT_RECIPIENT_LIST);
        }
        return;
    },

    getRecipientType: function(rl_sysid) {
        var conGr = new GlideRecord(this.ATTR_RL_TABLE_NAME);
        conGr.addQuery("sys_id", rl_sysid);
        conGr.query();
        if (conGr.next()) {
            return conGr.getValue("type");
        }
        return null;
    },

    getRecipientListName: function(rl_sysid) {
        var conGr = new GlideRecord(this.ATTR_RL_TABLE_NAME);
        conGr.addQuery("sys_id", rl_sysid);
        conGr.query();
        if (conGr.next()) {
            return conGr.getValue("name");
        }
        return null;
    },

    _getCaseSyncProp: function() {
        return gs.getProperty(this.PROPERTY_PARENT_CHILD_SYNC, false);
    },

    getOpenChildCaseNumbers: function() {
        //If child cases won't get synced, return 0;
        if (gs.getProperty('sn_customerservice.parent_child_ case_sync') === 'false')
            return -1;
        else {
            var field_list = gs.getProperty('sn_customerservice.case_fields_to_sync', '');
            if (field_list.includes('state')) {
                //Query child cases which are not closed, resolved and cancelled.
                var case_sysid = this.getParameter('sysparm_case_sysid');
                var gr = new GlideRecord(this.ATTR_TABLE_NAME);
                gr.addQuery('parent', case_sysid);
                gr.addQuery('state', 'NOT IN', '6, 3, 7');
                gr.query();
                return gr.getRowCount();
            } else
                return -1;
        }
    },

    type: 'MajorIssueManagementAjax'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-02-07 00:08:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1f2caa3e3b801300b5c42479b3efc4de&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;153&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MajorIssueManagementAjax&lt;/sys_name&gt;
        &lt;sys_package display_value="Major Issue Management" source="sn_majorissue_mgt"&gt;8c2fe7753b120300b5c42479b3efc449&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Major Issue Management"&gt;8c2fe7753b120300b5c42479b3efc449&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1f2caa3e3b801300b5c42479b3efc4de&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-28 18:25:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:44</sys_created_on>
        <sys_id>ced0b81983b01210c6695855eeaad384</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MajorIssueManagementAjax</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ced0b81983b01210c6695855eeaad384</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:44</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
