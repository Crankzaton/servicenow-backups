<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Prevent duplicate mutual exclusion rules</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var test1 = current.getValue("test1");
 var test2 = current.getValue("test2");

 // Neither field should ever be completely empty
 if (GlideStringUtil.nil(test1) || GlideStringUtil.nil(test2)) {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage("Mutual exclusion rules require two valid tests to be specified"));
  return;
 }

 // Users cannot make tests exclusive with themselves (ATF already does that for them)
 if (test1 === test2) {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage("Test '{0}' cannot be made mutually exclusive with itself (all tests exclude themselves automatically)", [current.test1.name]));
  return;
 }

 // Check if a mutual exclusion rule for the specified tests already exists (do not include the current record in case this is an update since it would obviously exist in that case)
 // Note that the ordering for the "test1" and "test2" fields does not matter and so both possibilities must be considered in the query
 // (e.g. test1="1234" and test2="5678" is considered a duplicate of test1="5678" and test2="1234")
 var gr = new GlideRecord("sys_atf_mutual_exclusion_rule");
 gr.addQuery("sys_id", "!=", current.getUniqueValue());
 gr.addEncodedQuery("test1=" + test1 + "^test2=" + test2 +
      "^NQtest1=" + test2 + "^test2=" + test1);
 gr.query();
 if (gr.getRowCount() > 0) {
  current.setAbortAction(true);
  gs.addErrorMessage(gs.getMessage("Tests '{0}' and '{1}' are already mutually exclusive", [current.test1.name, current.test2.name]));
  return;
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:35</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>257c245983701210c6695855eeaad3f2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prevent duplicate mutual exclusion rules</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_257c245983701210c6695855eeaad3f2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:35</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=257c245983701210c6695855eeaad3f2"/>
</record_update>
