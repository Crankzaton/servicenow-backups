<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2597d5a1777cd5103cc3155bef5a998c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FSMWFOUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;FSMWFOUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FSMWFOUtil = Class.create();
FSMWFOUtil.prototype = {
  initialize: function () {
    if (GlidePluginManager.isActive('com.snc.wfo'))
      this.coreWfoUtil = new sn_wfo.WFOUtils();
  },

  /**
   * Call this API to check if the FSM Agent shift scheduling plugin is active.
   */
  isFsmWfoPluginActive: function () {
    return GlidePluginManager.isActive('com.snc.sn_fsm_shift_schdlng');
  },

  /**
   * Call this API to check if the instance is enabled to use FSM WFO for shift scheduling
   */
  isFsmWfoSchdlngEnabled: function () {
    var isEnabled = 'false';
    try {
      var configObj = new global.SMCoreConfigCacheManager().getSMConfig(
        'wm_task'
      );
      isEnabled = configObj.use_fsm_wfo;
    } catch (err) {
      var configRec = new GlideRecord('sm_config');
      configRec.addQuery('app_name', 'field_service');
      configRec.addQuery('use_fsm_wfo', 'true');
      configRec.setLimit(1);
      configRec.query();

      if (configRec.next()) isEnabled = 'true';
    }

    return isEnabled;
  },

  /**
   * Call this API to check if we want to enable FSM WFO logic
   * This API will only return true if both com.snc.sn_fsm_shift_schdlng and use_fsm_wfo are active and enabled
   */
  enableFsmWfoLogic: function () {
    var isActive =
      this.isFsmWfoPluginActive() &amp;&amp; this.isFsmWfoSchdlngEnabled() == 'true';
    return isActive;
  },

  /**
   * By default, GlideDateTime creates its object using UTC timezone
   * This method allows GlideDateTime to be created with specific timezone
   * @param {*} dateTimeStr - datetime string in the internal format accepted by GlideDateTime
   * @param {*} timezone - timezone code string accepted by the platform
   * @returns GlideDateTime with the target timezone
   */
  createDateTimeWithTZ: function (dateTimeStr, timezone) {
    if (!timezone) timezone = 'Etc/UTC';
    var dt = new GlideDateTime(dateTimeStr);
    dt.setTimeZone(timezone);
    var timeZoneOffSet = dt.getTZOffset();
    dt.setNumericValue(dt.getNumericValue() - timeZoneOffSet);
    return new GlideDateTime(dt.getValue());
  },

  /**
   *
   * @param {*} gdt - GlideDateTime
   * @param {*} timezone - Timezone
   * @date_time GlideDateTime in the respective timezone
   */
  convertToTimezone: function (gdt, timezone) {
    var date_time = new GlideDateTime(gdt);
    date_time.setTZ(Packages.java.util.TimeZone.getTimeZone(timezone));
    var timeZoneOffSet = date_time.getTZOffset();
    date_time.setNumericValue(date_time.getNumericValue() + timeZoneOffSet);
    return date_time.getValue();
  },

  /**
   * This is the wrapper to get a timemap. Called from AgentScheduleWFOUtil.
   *
   * @param {*} includeSpans - array of spans to be included in the timemap
   * @param {*} includeSpans - array of spans to be excluded in the timemap
   * @@param timezone  - timezone in which the timemap has to be built
   * @returns timemap
   */
  getTimeMap: function (includeSpans, excludeSpans, timezone) {
    var timeMap = new GlideScheduleTimeMap();
    for (var i = 0; i &lt; includeSpans.length; i++) {
      timeMap.addInclude(includeSpans[i]);
    }
    for (var j = 0; j &lt; excludeSpans.length; j++) {
      timeMap.addExclude(excludeSpans[j]);
    }
    timeMap.buildMap(timezone);
    return timeMap;
  },

  /*
   * method to get start datetime from span
   */
  getStart: function (span) {
    return span.getStart().getGlideDateTime();
  },

  /*
   * method to get end date time from span
   */
  getEnd: function (span) {
    return span.getEnd().getGlideDateTime();
  },

  /*
   * method to get numeric value from span
   */
  getNumericValue: function (span) {
    return span.getNumericValue();
  },

  /*
   * Method to retrieve an array of sys_ids for groups managed
   * by the passed userId using core WFO API
   * @param {*} userId - sys_id for a User record
   * @returns Array of Group sys_ids
   */
  getManagedGroups: function (userId) {
    var groupIds = [];

    if (userId &amp;&amp; 'coreWfoUtil' in this)
      groupIds = this.coreWfoUtil.getGroups(userId);

    return groupIds;
  },

  /**
   * Call this API to get the value of task dispatch method
   */
  getTaskDispatchMethod: function () {
    var configObj = new global.SMCoreConfigCacheManager().getSMConfig(
      'wm_task'
    );
    return configObj.task_dispatch_method;
  },

  /*
   * Method to check for valid condition query to run BR - Manual Task Assignment. Along with currentTaskConditionSet, FSM WFO plugin has to be enabled and a valid user id associated to WOT and task dispatch method being manual.
   */
  checkManualAssignmentCondition: function (currentWOT) {
    var currentTaskConditionSet =
      currentWOT.expected_start.changes() ||
      currentWOT.expected_travel_start.changes() ||
      currentWOT.estimated_travel_duration.changes() ||
      currentWOT.estimated_work_duration.changes() ||
      currentWOT.assigned_to.changes();
    var isFSMWFOEnabled = this.enableFsmWfoLogic();
    var taskDispatchType = this.getTaskDispatchMethod() == 'manual';
    var isValidUserId = gs.nil(currentWOT.assigned_to) == false;
    return (
      isFSMWFOEnabled &amp;&amp;
      taskDispatchType &amp;&amp;
      isValidUserId &amp;&amp;
      currentTaskConditionSet
    );
  },
  type: 'FSMWFOUtil',
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-07-19 21:28:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2597d5a1777cd5103cc3155bef5a998c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FSMWFOUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2597d5a1777cd5103cc3155bef5a998c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-10-03 17:37:40&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:28</sys_created_on>
        <sys_id>7801745983b01210c6695855eeaad33e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FSMWFOUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7801745983b01210c6695855eeaad33e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
