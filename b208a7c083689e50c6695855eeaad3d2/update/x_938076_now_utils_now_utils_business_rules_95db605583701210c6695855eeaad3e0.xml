<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Unpack Attatchment into Tables</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    function getAttachmentContent(attachment) {
        var is = new GlideSysAttachment().getContentStream(attachment.getValue('sys_id'));
        var reader = new GlideTextReader(is);
        var docString = "";
        while ((ln = reader.readLine()) != null) {
            docString = docString + ln;
        }
        var jsonString = parseSerializedXMLData(docString);
        var parsedData = JSON.parse(jsonString);
        gs.debug('[DISC] Report attachment content loaded: ' + jsonString.substring(0, 200) + '...');
        return parsedData;
    }

    function parseSerializedXMLData(xmlString) {
        //replace linbreaks
        xmlString = xmlString.replace(/(\r\n|\n|\r)/gm, "");
        var xmlDoc = new XMLDocument2();
        xmlDoc.parseXML(xmlString);
        var base64String = xmlDoc.getNodeText("//objectByteArray");
        return gs.base64Decode(base64String);
    }

    try {
        var definitionId = current.getValue('table_sys_id');

        var modelArtifactRecord = new GlideRecord("ml_model_artifact");
        modelArtifactRecord.get(definitionId);

        var definitionRecord = new GlideRecord("sn_nlu_discovery_report_definition");
        if (definitionRecord.get("solution_definition", modelArtifactRecord.solution.ml_capability_definition) && (modelArtifactRecord.getValue("model_id").toString()).indexOf('-report.json') !== -1) {
            gs.debug('[DISC] Loaded report definition "' + definitionRecord.getValue('name') + '"');
            var baseTable = definitionRecord.getValue("table");
            var fieldName = definitionRecord.getValue("field");
            var sysId = definitionRecord.getUniqueValue();
            var parsedJson;
            try {
                parsedJson = getAttachmentContent(current);
            } catch (e) {
                gs.warn("Caught Exception while parsing IDA Result file:" + JSON.stringify(e));
                var fileHandler = new sn_nlu_discovery.IntentDiscoveryLargeFileHandler();
                parsedJson = fileHandler.handleLargeFile(current.getUniqueValue());
                if (!parsedJson || parsedJson === null) {
                    return;
                }
                gs.debug("Succesfully parsed large file JSON creating report");
            }
            if (parsedJson) {
                gs.debug('[DISC] Calling createReportFromJson with sys_id' + sysId);
                var reportUtil = new sn_nlu_discovery.IntentDiscoveryReportUtil();
                var reportId = reportUtil.createReportFromJson(sysId, definitionRecord.getValue("name"), baseTable, fieldName, parsedJson, definitionRecord.getValue("sys_domain"));
                gs.debug('[DISC] Report created, sys_id=' + reportId);
            }
        }
    } catch (e) {
        gs.warn('[DISC] Error processing attachment report: ' + e.message + ' \n' + JSON.stringify(e, null, 2));
    }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:50</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>95db605583701210c6695855eeaad3e0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Unpack Attatchment into Tables</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_95db605583701210c6695855eeaad3e0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:50</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=95db605583701210c6695855eeaad3e0"/>
</record_update>
