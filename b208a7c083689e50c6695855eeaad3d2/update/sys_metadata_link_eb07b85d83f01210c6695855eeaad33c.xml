<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>766e68c653a101100f16ddeeff7b12c4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AddressMgmtUtilsSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Address management related APIs&lt;/description&gt;
        &lt;name&gt;AddressMgmtUtilsSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AddressMgmtUtilsSNC = Class.create();
AddressMgmtUtilsSNC.prototype = {
    initialize: function() {},

    isAddressSharingEnabled: function() {
        return gs.getProperty(AddressMgmtConstants.PROPERTY_ENABLE_ACCOUNT_ADDRESS_SHARING, "false") == "true";
    },

    getLocationsForAccHierarchy: function(account) {
        if (!account)
            return [];
        var accountLocations = [];
        var includeWholeTree = true;
        var accounts = new global.CSManagementUtils().getAccountsFromHierarchy(account, includeWholeTree);
        if (accounts &amp;&amp; accounts.length &gt; 0) {
            var accAddressGR = new GlideRecord(AddressMgmtConstants.TABLE_ACCOUNT_ADDRESS_RELATIONSHIP);
            accAddressGR.addQuery('account', 'IN', accounts.join(','));
            accAddressGR.query();
            while (accAddressGR.next()) {
                var locationValue = accAddressGR.getValue('location');
                if (accountLocations.indexOf(locationValue) &lt; 0)
                    accountLocations.push(locationValue);
            }
        }
        return accountLocations;
    },

	/*
		Returns list of locations that are associated with the given account
		account - sys_id of account
	*/
	getLocationsForAccount: function(account) {
		if (!account)
			return [];
		if(this.isAddressSharingEnabled()){
			return this._getLocationsFromAccAddressTable(account);
		}
		else{
			return this._getLocationsFromLocationTable(account);
		}
	},

	_getLocationsFromAccAddressTable: function(account){
		if (!account)
			return [];
		var accountLocations = [];
		var accAddressGR = new GlideRecord(AddressMgmtConstants.TABLE_ACCOUNT_ADDRESS_RELATIONSHIP);
		accAddressGR.addQuery('account', account);
		accAddressGR.query();
		while (accAddressGR.next()) {
			accountLocations.push(accAddressGR.getValue('location'));
		}
		return accountLocations;
	},

	_getLocationsFromLocationTable: function(account){
		if (!account)
			return [];
		var accountLocations = [];
		var locationGR = new GlideRecord(AddressMgmtConstants.TABLE_LOCATION);
		if(!locationGR.isValidField('account'))
			return [];
		locationGR.addQuery('account', account);
		locationGR.query();
		while (locationGR.next()) {
			accountLocations.push(locationGR.getUniqueValue());
		}
		return accountLocations;
	},

    getAccountLocationsRefQual: function(account) {
        var query = '';
        var ep = new GlideScriptedExtensionPoint().getExtensions(AddressMgmtConstants.ADDRESS_MGMT_EXTENSION_POINT);
        for (var i = 0; i &lt; ep.length; i++) {
            var point = ep[i];
            query = point.getAccountLocationsRefQual(account);
        }
        return query;
    },

    isAccountLocation: function(location) {
        if (!location)
            return false;
        var gr = new GlideRecord(AddressMgmtConstants.TABLE_ACCOUNT_ADDRESS_RELATIONSHIP);
        gr.addQuery('location', location);
        gr.setLimit(1);
        gr.query();
        return gr.hasNext();
    },
	
	isMultipleAccountAssocToLocation: function(location) {
        if (!location)
            return false;
        var gr = new GlideRecord(AddressMgmtConstants.TABLE_ACCOUNT_ADDRESS_RELATIONSHIP);
        gr.addQuery('location', location);
        gr.setLimit(2);
        gr.queryNoDomain();
        return gr.getRowCount() &gt; 1;
    },

    canAccountManagerAccessLocation: function(location) {
        if (!location)
            return false;
        var accountAddressReln = new GlideRecord(AddressMgmtConstants.TABLE_ACCOUNT_ADDRESS_RELATIONSHIP);
        accountAddressReln.addQuery("location", location.getUniqueValue());
        accountAddressReln.addQuery("account", "DYNAMIC", "badfcbf60fe210103ff81b41ff767e40");
        accountAddressReln.setLimit(1);
        accountAddressReln.query();
        return accountAddressReln.hasNext();
    },

    isDuplicateEntry: function(gr) {
        if (!gr || !gr.account || !gr.location)
            return true;
        var accAddressGr = new GlideRecord(AddressMgmtConstants.TABLE_ACCOUNT_ADDRESS_RELATIONSHIP);
        accAddressGr.addQuery('account', gr.account);
        accAddressGr.addQuery('location', gr.location);
		accAddressGr.addQuery('sys_id', '!=', gr.getUniqueValue());
        accAddressGr.setLimit(1);
        accAddressGr.query();
        return accAddressGr.hasNext();

    },

    getConsumerProfileLocationCount: function(location) {
        var count = 0;
        if (!location)
            return count;
        var gr = new GlideAggregate(global.AddressMgmtConstants.TABLE_CONSUMER_PROFILE_LOCATION);
        gr.addQuery('location', '=', location);
        gr.addAggregate('COUNT');
        gr.query();
        if(gr.next()) {
            count = parseInt(gr.getAggregate('COUNT'));
        }
        return count;
    },
    
	type: 'AddressMgmtUtilsSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-02-09 18:01:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;766e68c653a101100f16ddeeff7b12c4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AddressMgmtUtilsSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Base Entities" source="com.snc.cs_base"&gt;4f2cce6b47664210cd4e1ce4316d43a4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_766e68c653a101100f16ddeeff7b12c4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-02-22 04:40:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:52</sys_created_on>
        <sys_id>eb07b85d83f01210c6695855eeaad33c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AddressMgmtUtilsSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_eb07b85d83f01210c6695855eeaad33c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
