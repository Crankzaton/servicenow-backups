<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3a1e93b10f7011105e78cde2ff767efe</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PopulateCacheMetrics&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Populates the cache_metrics table&lt;/description&gt;
        &lt;name&gt;PopulateCacheMetrics&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PopulateCacheMetrics = Class.create();
PopulateCacheMetrics.prototype = {
	initialize: function() {
	},
	
	populate: function() {
		if (gs.getProperty("com.glide.app_insights_utils.cache_metrics_enable", "false") !== "true")
			return;

		var stats = new GlideXMLStats();

		var xmldoc = new XMLDocument2();
		xmldoc.parseXML(stats.toStringWithInclude("cache_metrics"));
		var caches = xmldoc.getNode("//cache_metrics");

		var iter = caches.getChildNodeIterator();

		var grNode = new GlideRecord('sys_cluster_state');
		grNode.addQuery('node_id', gs.getNodeID());
		grNode.query();
		grNode.next();

		while (iter.hasNext()) {
			var cache = iter.next();

			var gr = new GlideRecord('cache_metrics');
			gr.addQuery('node', gs.getNodeID());
			gr.addQuery('cache_name', cache.getNodeName());
			gr.query();

			var existingRecord = gr.next();

			if (!existingRecord) {
				gr.initialize();
			}

			gr.avg_sql_ms = cache.getAttribute("avg_sql_ms");
			gr.avg_time_ms = cache.getAttribute("avg_time_ms");
			gr.flushes = cache.getAttribute("flushes");
			gr.hit_ratio = cache.getAttribute("hit_ratio");
			gr.puts = cache.getAttribute("puts");
			gr.queries = cache.getAttribute("queries");
			gr.cache_name = cache.getNodeName();
			gr.node = grNode.sys_id;

			if (existingRecord) {
				gr.update();
			} else {
				gr.insert();
			}
		}
	},

	type: 'PopulateCacheMetrics'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-07-21 01:24:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3a1e93b10f7011105e78cde2ff767efe&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PopulateCacheMetrics&lt;/sys_name&gt;
        &lt;sys_package display_value="Application Insights Utils" source="com.glide.app_insights_utils"&gt;ade8d3db47220210cd4e1ce4316d4376&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3a1e93b10f7011105e78cde2ff767efe&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-07-21 01:24:50&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:57</sys_created_on>
        <sys_id>70667c9983f01210c6695855eeaad36d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PopulateCacheMetrics</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_70667c9983f01210c6695855eeaad36d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
