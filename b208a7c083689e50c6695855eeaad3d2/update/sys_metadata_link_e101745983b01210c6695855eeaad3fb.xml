<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2602d323c3c63010965e070e9140dd1e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow.SOWEvamPostProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SOWEvamPostProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SOWEvamPostProcessor = Class.create();
/**
 * Internal Methods
 **/
SOWEvamPostProcessor._replaceMacrosString = function(input, gr) {
    var out = input;
    var macros = input.match(/\$\{.*?\}/g);
    for (var i in macros) {
        var macro = macros[i];
        var field = macro.replace('${', '').replace('}', '');
        var value = null;
        if (field.indexOf('.' &gt; 0)) {
            var parts = field.split('.');
            var curr = gr;
            for (var pi = 0; pi &lt; parts.length - 1; pi++) {
                curr = curr[parts[pi]];
            }
            if (curr) {
                value = curr[parts[pi]] + '';
            }
        } else {
            value = gr.getValue(field);
        }
        out = out.replace(macro, value);
    }
    return out;
};
SOWEvamPostProcessor._replaceMacrosJson = function(jsonNode, gr) {
    var isArray = Array.isArray(jsonNode);
    if (isArray) {
        for (var ai in jsonNode) {
            SOWEvamPostProcessor._replaceMacrosJson(jsonNode[ai], gr);
        }
    }
    for (var property in jsonNode) {
        var propertyValue = jsonNode[property];
        if ('object' === typeof propertyValue) {
            SOWEvamPostProcessor._replaceMacrosJson(propertyValue, gr);
        } else if ('string' === typeof propertyValue) {
            jsonNode[property] = SOWEvamPostProcessor._replaceMacrosString(propertyValue, gr);
        }
        var replacementKey = SOWEvamPostProcessor._replaceMacrosString(property, gr);
        if (replacementKey !== property) {
            jsonNode[replacementKey] = jsonNode[property];
            delete jsonNode[property];
        }
    }
};
SOWEvamPostProcessor._replaceMacros = function(input, gr) {
    if (input) {
        if ('object' === typeof input) {
            // Make copy since these are templates
            var copy = JSON.parse(JSON.stringify(input));
            // Function handling
            var isFunction = copy.hasOwnProperty('$');
            if (isFunction) {
                var newValue = null;
                if ('lookup' == copy['$']) {
                    var lookup = copy.lookup;
                    if (lookup) {
                        var key = SOWEvamPostProcessor._replaceMacrosString(copy.key, gr);
                        newValue = lookup[key];
                    }
                } else if ('sys_highlighted_value' == copy['$']) {
                    var table = SOWEvamPostProcessor._replaceMacrosString(copy.table, gr);
                    var sysId = SOWEvamPostProcessor._replaceMacrosString(copy.sysId, gr);
                    var field = copy.field;
                    if (false == gs.nil(table) &amp;&amp; false == gs.nil(sysId) &amp;&amp; false == gs.nil(field)) {
                        var refGr = null;
                        if (sysId == gr.getUniqueValue()) {
                            refGr = gr;
                        } else {
                            var testGr = new GlideRecordSecure(table);
                            if (testGr.get(sysId)) {
                                refGr = testGr;
                            }
                        }
                        if (refGr) {
                            var highlightGr = new GlideRecord('sys_highlighted_value_condition');
                            highlightGr.addQuery('highlighted_value.table', table);
                            highlightGr.addQuery('highlighted_value.field', field);
                            highlightGr.orderBy('order');
                            highlightGr.query();
                            while (highlightGr.next()) {
                                var conditions = highlightGr.getValue('conditions');
                                var evaluationResult = GlideFilter.checkRecord(refGr, conditions);
                                if (evaluationResult) {
                                    newValue = highlightGr.getValue('status');
                                    break;
                                }
                            }
                        }

                    }
                }
                return newValue;
            } else {
                return SOWEvamPostProcessor._replaceMacrosJson(copy, gr);
            }
        } else if ('string' === typeof input) {
            return SOWEvamPostProcessor._replaceMacrosString(input, gr);
        }
    }
    return null;
};
SOWEvamPostProcessor._replacePropValues = function(propValues, propXforms, gr) {
    if (propXforms) {
        for (var key in propXforms) {
            var propXform = propXforms[key];
            var newValue = SOWEvamPostProcessor._replaceMacros(propXform, gr);
            propValues[key] = newValue;
        }
    }
};
SOWEvamPostProcessor._replaceActions = function(existingActions, configActions, gr) {
    var newActions = existingActions ? existingActions : [];
    if (configActions) {
        for (var key in configActions) {
            var action = configActions[key];
            newActions.push(action);
        }
    }
    return newActions;
};
SOWEvamPostProcessor._enhanceActionPayloads = function(actions, gr) {
    if (actions) {
        for (var i in actions) {
            var action = actions[i];
            action.actionPayload.action_name = action.name;
            action.actionPayload.src_table = gr.getTableName();
            action.actionPayload.src_sys_id = gr.getValue('sys_id');
        }
    }
};
/**
 * Public Methods
 **/
SOWEvamPostProcessor.process = function(evamData, configuration) {
    try {
        if (evamData &amp;&amp; configuration) {
            var items = evamData.items;
            if (items) {
                for (var i = 0; i &lt; items.length; i++) {
                    var item = items[i];
                    var propValues = item.propValues;
                    if (propValues) {
                        var model = propValues.model;
                        var table = model.table;
                        var sysId = model.sysId;
                        var recordFieldsPresent = false == gs.nil(table) &amp;&amp; false == gs.nil(sysId);
                        if (recordFieldsPresent) {
                            var gr = new GlideRecordSecure(table);
                            if (gr.get(sysId)) {
                                var mainActions = propValues.mainActions;
                                var overflowActions = propValues.overflowActions;
                                // Decorate action payloads
                                var fields = {};
                                var tempGr = new GlideRecordSecure(gr.getTableName());
                                tempGr.initialize();
                                for (var k in tempGr) {
                                    fields[k] = {
                                        value: gr.getValue(k)
                                    };
                                }
                                propValues.fields = fields;

                                SOWEvamPostProcessor._enhanceActionPayloads(mainActions, gr);
                                SOWEvamPostProcessor._enhanceActionPayloads(overflowActions, gr);

                                // Run transforms
                                var tableXformCfg = configuration[table];
                                if (tableXformCfg) {
                                    var xForms = tableXformCfg.transforms ? tableXformCfg.transforms : {};
                                    for (var xfk in xForms) {
                                        var xForm = xForms[xfk];
                                        var encodedQuery = xForm.query;
                                        var matches = gs.nil(encodedQuery) ? true : GlideFilter.checkRecord(gr, encodedQuery);
                                        if (matches) {
                                            var propXforms = xForm.propValues;
                                            SOWEvamPostProcessor._replacePropValues(propValues, propXforms, gr);
                                            propValues.mainActions = SOWEvamPostProcessor._replaceActions(mainActions, xForm.mainActions, gr);
                                            propValues.overflowActions = SOWEvamPostProcessor._replaceActions(overflowActions, xForm.overflowActions, gr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (e) {
        gs.error("Error", e);
        evamData.error = JSON.stringify(e);
    }
    return evamData;
};
SOWEvamPostProcessor.prototype = {
    type: 'SOWEvamPostProcessor',
    initialize: function() {}
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-24 22:00:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2602d323c3c63010965e070e9140dd1e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;55&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SOWEvamPostProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Operations Workspace Core" source="sn_sow"&gt;5ca1bcb3733320103e366238edf6a706&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Service Operations Workspace Core"&gt;5ca1bcb3733320103e366238edf6a706&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2602d323c3c63010965e070e9140dd1e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-28 09:21:15&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:31</sys_created_on>
        <sys_id>e101745983b01210c6695855eeaad3fb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SOWEvamPostProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e101745983b01210c6695855eeaad3fb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:31</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
