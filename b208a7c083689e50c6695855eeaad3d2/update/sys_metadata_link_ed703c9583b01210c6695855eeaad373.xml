<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0e8a3b519f321200598a5bb0657fcfa1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PPMTablePermissionMapper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Given a list of tables returns whether the given user has CRUD Access on it or not&lt;/description&gt;
        &lt;name&gt;PPMTablePermissionMapper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/*
* Planning Console Access Helper Base helps derving the CRUD access for the table(s)
* Methods:
* access (table, sysId) : checks the read access for the record
* accessConfig(tableObj) : generate crud access for the table/sys_ids provided
*/
var PPMTablePermissionMapper = Class.create();

PPMTablePermissionMapper.prototype = {
    initialize: function() {
    },

    glideRecord: function(table, sysId) {
        if(JSUtil.notNil(table)) {
            var gr = new GlideRecord(table);
            if(JSUtil.notNil(sysId)) {
                gr.get(sysId);
            } else {
                gr.initialize();
            }
            return gr;
        }
    },

    getPermissions: function(tables, entityId) {
        var perms = {};
        for ( var i in tables ) {
            var tableAccess = {};
            if(gs.tableExists(tables[i])) {
				if (tables[i] == 'planned_task_rel_planned_task') {
					var isProjectManager = gs.hasRole("project_manager");
					tableAccess['delete'] = isProjectManager;
					tableAccess.create = isProjectManager;
					tableAccess.read = isProjectManager;
					tableAccess.update = isProjectManager;
					perms[tables[i]] = tableAccess;
					continue;
					}
                tableAccess['delete'] = this.canDelete(this.glideRecord(tables[i]));
                tableAccess.create = this.canCreate(this.glideRecord(tables[i]));
                tableAccess.read = this.canRead(this.glideRecord(tables[i], entityId));
                tableAccess.update = true; //this.canWrite(this.glideRecord(tables[i]));
            } else {
                tableAccess['delete'] = false;
                tableAccess.create = false;
                tableAccess.read = false;
                tableAccess.update = false;
            }
            perms[tables[i]] = tableAccess;
        }
        return perms;
    },
    
    // tableObj Defn: {table1: sys_id1, table2: sys_id2, table3: sys_id3}
    getPermissionsWithSysId: function(tableObj) {
        var access  = {};
        if( JSUtil.notNil(tableObj)) {
            for(var table in tableObj) {
                var tableAccess = { 'create': this.canCreate(this.glideRecord(table, tableObj[table])),
                                    'read': this.canRead(this.glideRecord(table, tableObj[table])),
                                    'update': this.canWrite(this.glideRecord(table, tableObj[table])),
                                    'delete': this.canDelete(this.glideRecord(table, tableObj[table]))
                                };
                access[table] = tableAccess;
            }
        }
        return access;
    },

    canCreate: function(gr) {
        return gr.canCreate();
    },

    canRead: function(gr) {
        return gr.canRead();
    },

    canWrite: function(gr) {
        return gr.canWrite();
    },

    canDelete: function(gr) {
        return gr.canDelete();
    },

    access: function(table, sysId) {
        return this.canRead(this.glideRecord(table, sysId));
    },

    type: 'PPMTablePermissionMapper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-04-14 22:00:33&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0e8a3b519f321200598a5bb0657fcfa1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PPMTablePermissionMapper&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;92ef82e747e64210cd4e1ce4316d43f1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0e8a3b519f321200598a5bb0657fcfa1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-06-19 14:19:37&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:04</sys_created_on>
        <sys_id>ed703c9583b01210c6695855eeaad373</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PPMTablePermissionMapper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ed703c9583b01210c6695855eeaad373</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:04</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
