<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>30dbf92a77f23010f853528069106196</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFTMSUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to handle file contents specific to TMS&lt;/description&gt;
        &lt;name&gt;LFTMSUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFTMSUtils = Class.create();
LFTMSUtils.prototype = {
    initialize: function(taskNumber) {
        this.taskUtils = new LFTaskUtils(taskNumber);
        this.lfUtils = new LFUtils();
        this.lfConstants = new LFConstants();
        this.logger = new LFLogger("LFTMSUtils");
    },

    getFileIds: function() {
        if (!this.taskUtils.hasValidRecord()) {
            return [];
        }
        if (this.taskUtils.hasBulkTranslations()) {
            return this.taskUtils.getRelatedRequestedItemIdsFilterOutByState();
        } else {
            return [this.taskUtils.getSysId()];
        }
    },

    getFileIdsGroupedByTargetLanguage: function() {
        var fileIdsGroupedByTargetLanguage = {};
        if (!this.taskUtils.hasValidRecord()) {
            return fileIdsGroupedByTargetLanguage;
        }
        if (this.taskUtils.hasBulkTranslations()) {
            var requestedItemDetails = this.taskUtils.getRelatedRequestedItemDetails();
            for (var reqItemIdx = 0; reqItemIdx &lt; requestedItemDetails.length; reqItemIdx++) {
                var eachRequestedItem = requestedItemDetails[reqItemIdx];
                if (fileIdsGroupedByTargetLanguage[eachRequestedItem.targetLanguageCode]) {
                    fileIdsGroupedByTargetLanguage[eachRequestedItem.targetLanguageCode].push(eachRequestedItem.sysId);
                } else {
                    fileIdsGroupedByTargetLanguage[eachRequestedItem.targetLanguageCode] = [eachRequestedItem.sysId];
                }
            }
        } else {
            fileIdsGroupedByTargetLanguage[this.taskUtils.getTargetLanguageCode()] = [this.taskUtils.getSysId()];
        }
        return fileIdsGroupedByTargetLanguage;
    },

    getTargetLanguageCodes: function(itemIds) {
        if (!this.taskUtils.hasValidRecord()) {
            return [];
        }
        var targetLanguages = [];
        if (this.taskUtils.hasBulkTranslations()) {
            for (var itemIdx = 0; itemIdx &lt; itemIds.length; itemIdx++) {
                var requestedItemUtils = new LFRequestedItemUtils(itemIds[itemIdx]);
                var targetLanguage = requestedItemUtils.getTargetLanguageCode();
                if (targetLanguages.indexOf(targetLanguage) == -1) {
                    targetLanguages.push(targetLanguage);
                }
            }
        } else {
            targetLanguages.push(this.taskUtils.getTargetLanguageCode());
        }
        return targetLanguages;
    },

    getSourceLanguageCode: function(itemId) {
        if (!this.taskUtils.hasValidRecord()) {
            return "";
        }
        return this.taskUtils.hasBulkTranslations() ? new LFRequestedItemUtils(itemId).getSourceLanguageCode() : this.taskUtils.getSourceLanguageCode();
    },

    getAttachmentName: function(targetLanguageCode, tmsName) {
        if (!this.taskUtils.hasValidRecord()) {
            return "";
        }
        var attachmentNamePrefix = this.taskUtils.getTaskNumber() + "-";
        if (this.taskUtils.hasBulkTranslations()) {
            var targetLanguageName = this.lfUtils.getLanguageCodeDetails(targetLanguageCode).label;
            attachmentNamePrefix += targetLanguageName + "-sentTo" + tmsName + '.' + this.lfConstants.ZIP_FILE_TYPE;
        } else {
            attachmentNamePrefix += "sentTo" + tmsName + '.' + this.lfConstants.XLIFF_FILE_EXTENSION;
        }
        return attachmentNamePrefix;
    },

    getAttachmentSysId: function(fileIds, tmsSourceLanguageCode, tmsTargetLanguageCode, attachmentName) {
        if (!this.taskUtils.hasValidRecord()) {
            return "";
        }
        if (this.taskUtils.hasBulkTranslations()) {
            var zipOutputStream = new SNC.LFZipOutputStream(attachmentName, 'localization_framework');
            for (var fileIdx = 0; fileIdx &lt; fileIds.length; fileIdx++) {
                var lfRequestedItemUtils = new LFRequestedItemUtils(fileIds[fileIdx]);
                var content = this.lfUtils.groupByProperty(lfRequestedItemUtils.getDocumentContent()['content']);
                var fileNamePrefix = lfRequestedItemUtils.getNumber();
                var currentFileData = this.lfUtils.createXLIFFFromDocumentContent(content, tmsSourceLanguageCode, tmsTargetLanguageCode, fileNamePrefix);
                zipOutputStream.addNextEntry(fileNamePrefix + "." + this.lfConstants.XLIFF_FILE_EXTENSION, currentFileData);
            }
            zipOutputStream.close();
            var fileData = zipOutputStream.getBytes();
            return new GlideSysAttachment().write(this.taskUtils.currentRecord, attachmentName, this.lfConstants.ZIP_CONTENT_TYPE, fileData);
        } else {
            content = this.lfUtils.groupByProperty(this.taskUtils.getDocumentContent()['content']);
            var xliff_content = this.lfUtils.createXLIFFFromDocumentContent(content, tmsSourceLanguageCode, tmsTargetLanguageCode, this.taskUtils.getTaskNumber());
            return new GlideSysAttachment().write(this.taskUtils.currentRecord, attachmentName, this.lfConstants.XLIFF_CONTENT_TYPE, xliff_content);
        }
    },

    getFileDetails: function(id) {
        if (!this.taskUtils.hasValidRecord()) {
            return {};
        }
        return this.taskUtils.hasBulkTranslations() ? this._getRequestedItemDetails(id) : this._getTaskDetails();
    },

    getTaskRecord: function() {
        return this.taskUtils.hasValidRecord() ? this.taskUtils.currentRecord : null;
    },

    getNumber: function(fileId) {
        if (!this.taskUtils.hasValidRecord()) {
            return "";
        }

        if (this.taskUtils.hasBulkTranslations()) {
            var requestedItemUtils = new LFRequestedItemUtils(fileId);
            return requestedItemUtils.hasValidRecord() ? requestedItemUtils.getNumber() : "";
        } else {
            return this.taskUtils.getTaskNumber();
        }
    },

    getProjectInfo: function() {
        return this.taskUtils.hasValidRecord() ? this.taskUtils.getTMSProjectInfo() : {};
    },

    getTaskDetails: function() {
        return this.taskUtils.hasValidRecord() ? {
            "taskNumber": this.taskUtils.getTaskNumber(),
            "tableName": this.taskUtils.tableName,
            "taskSysId": this.taskUtils.getSysId()
        } : {};
    },

    saveProjectInfo: function(projectInfo) {
        if (this.taskUtils.hasValidRecord()) {
            this.taskUtils.saveTMSProjectInfo(projectInfo);
        }
    },

    handleUploadSuccess: function() {
        var content = gs.getMessage("Task sent to {0} TMS for translation.", this.getProjectInfo().name);
        this._handleFileUploadStatus(content, this.lfConstants.SUCCESS);
    },

    handleUploadError: function() {
        var content = gs.getMessage("Error while sending the task to {0} TMS for translation.", this.getProjectInfo().name);
        this._handleFileUploadStatus(content, this.lfConstants.ERROR);
    },

    createXLIFFContent: function(content, tmsSourceLanguageCode, tmsTargetLanguageCode, fileNumber) {
        return this.lfUtils.createXLIFFFromDocumentContent(content, tmsSourceLanguageCode, tmsTargetLanguageCode, fileNumber);
    },

    saveTranslatedContentsFromZip: function(attachmentSysId, tmsName) {
        var responseDetails = {
            "status": "Success",
            fileIdsSaved: []
        };

        var zipDetails = this._verifyZipAttachment(attachmentSysId);
        if (zipDetails.isError) {
            responseDetails.status = "Error";
            responseDetails["errorMessage"] = zipDetails.errorMessage;
            return responseDetails;
        }

        try {
            var inputStream = new GlideSysAttachment().getContentStream(attachmentSysId);
            var zipInputStream = new SNC.LFZipInputStream(inputStream, 'localization_framework');
            var nextEntryDetails = zipInputStream.getNextEntry();

            var nonUpdatedItemsCount = 0;
            while (nextEntryDetails.hasFile) {
                var entryFileName = nextEntryDetails.fileName;
                if (!entryFileName.endsWith("xliff")) {
                    nextEntryDetails = zipInputStream.getNextEntry();
                    continue;
                }

                var translatedXLIFF = nextEntryDetails.content;
                var fileDetails = this.getFileDetailsFromTranslatedXLIFF(translatedXLIFF);
                var response = this.saveTranslatedXLIFFContent(translatedXLIFF, fileDetails.fileNumber, fileDetails.sourceLanguage, fileDetails.targetLanguage);
                if (response.fileId) {
                    if (response.isError) {
                        nonUpdatedItemsCount++;
                    } else {
                        responseDetails.fileIdsSaved.push(response.fileId);
                    }
                }
                if (response.isError) {
                    responseDetails.status = "Error";
                }
                nextEntryDetails = zipInputStream.getNextEntry();
            }
            zipInputStream.close();
            if (nonUpdatedItemsCount &gt; 0) {
                responseDetails["errorMessage"] = gs.getMessage("Retrieved translations from {0} TMS. Successful: {1}, Failed: {2}", [tmsName, (this._getFilesCount() - nonUpdatedItemsCount).toString(), nonUpdatedItemsCount.toString()]);
            }
        } catch (e) {
            this.logger.logError("Error occurred while processing translated XLIFF files from zip: " + e);
            responseDetails.status = "Error";
            responseDetails["errorMessage"] = gs.getMessage("Error occurred while processing translated XLIFF files from zip");
        }
        return responseDetails;
    },

    saveTranslatedXLIFFContent: function(translatedXLIFF, fileNumber, tmsSourceLanguageCode, tmsTargetLanguageCode) {
        if (!this.taskUtils.hasValidRecord()) {
            return {
                "isError": true
            };
        }

        var tmsName = this.taskUtils.getAdditionalInfo()['TMS']['name'];
        if (this.taskUtils.hasBulkTranslations()) {
            var requestedItemUtils = new LFRequestedItemUtils(fileNumber);
            if (requestedItemUtils.hasValidRecord() &amp;&amp; (requestedItemUtils.getLocalizationTaskSysId() == this.taskUtils.getSysId())) {
                return requestedItemUtils.saveTranslatedFileContent(translatedXLIFF, fileNumber, tmsSourceLanguageCode, tmsTargetLanguageCode, tmsName);
            }
            return {
                "isError": false
            };
        } else {
            return this.taskUtils.saveTranslatedFileContent(translatedXLIFF, fileNumber, tmsSourceLanguageCode, tmsTargetLanguageCode, tmsName);
        }
    },

    getFileDetailsFromTranslatedXLIFF: function(translatedXLIFF) {
        var xmlDoc = new XMLDocument2();
        xmlDoc.parseXML(translatedXLIFF);
        var fileNode = xmlDoc.getNode("//file");
        return {
            "fileNumber": fileNode.getAttribute(this.lfConstants.XLIFF_ORIGINAL),
            "sourceLanguage": fileNode.getAttribute(this.lfConstants.XLIFF_SOURCE_LANGUAGE),
            "targetLanguage": fileNode.getAttribute(this.lfConstants.XLIFF_TARGET_LANGUAGE)
        };
    },

    getFilesCount: function() {
        if (!this.taskUtils.hasValidRecord()) {
            return 0;
        }
        return this.taskUtils.hasBulkTranslations() ? this.taskUtils.getRelatedRequestedItemCount() : 1;
    },

    _handleFileUploadStatus: function(content, status) {
        if (this.taskUtils.hasValidRecord()) {
            var projectInfo = this.getProjectInfo();
            if (status === this.lfConstants.SUCCESS) {
                this.taskUtils.moveToInProgress();
                projectInfo["hasSentToTms"] = true;
            } else if (status === this.lfConstants.ERROR) {
                this.taskUtils.moveToErrorInTranslation();
            }
            projectInfo["fileUploadStatus"] = status;
            var additionalInfo = this.taskUtils.getAdditionalInfo();
            additionalInfo["TMS"] = projectInfo;
            this.taskUtils.setAdditionalInfo(additionalInfo);
            // Updates Task
            this.taskUtils.updateLastPerformedAction(content, status);
            var tmsName = this.getProjectInfo().name;
            var message = (status === this.lfConstants.SUCCESS) ? gs.getMessage("Requested item sent to {0} TMS for translation.", tmsName) : gs.getMessage("Error while sending the requested item to {0} TMS for translation.", tmsName);
            if (this.taskUtils.hasBulkTranslations()) {
                LFRequestedItemUtils.updateLocalizationRequestedItemsWithJournalFields(this.taskUtils.getRelatedRequestedItemIdsFilterOutByState(), {
                    'work_notes': message,
                    "error": status === this.lfConstants.ERROR,
                    state: this.lfConstants.REQUESTED_ITEM_STATES.In_Progress
                });
            }
        }
    },

    _getRequestedItemDetails: function(id) {
        var requestedItemUtils = new LFRequestedItemUtils(id);
        if (!requestedItemUtils.hasValidRecord()) {
            return {};
        }
        return {
            "id": requestedItemUtils.getSysId(),
            "number": requestedItemUtils.getNumber(),
            "content": this.lfUtils.groupByProperty(requestedItemUtils.getDocumentContent().content),
            "sourceLanguage": requestedItemUtils.getSourceLanguageCode(),
            "targetLanguage": requestedItemUtils.getTargetLanguageCode(),
            "artifactSysId": requestedItemUtils.getArtifactSysId()
        };
    },

    _getTaskDetails: function() {
        return {
            "id": this.taskUtils.getSysId(),
            "number": this.taskUtils.getTaskNumber(),
            "content": this.lfUtils.groupByProperty(this.taskUtils.getDocumentContent().content),
            "sourceLanguage": this.taskUtils.getSourceLanguageCode(),
            "targetLanguage": this.taskUtils.getTargetLanguageCode(),
            "artifactSysId": this.taskUtils.getArtifactSysId()
        };
    },

    _getFilesCount: function() {
        if (!this.taskUtils.hasValidRecord()) {
            return 0;
        }
        return this.taskUtils.hasBulkTranslations() ? this.taskUtils.getRelatedRequestedItemCount() : 1;
    },

    _verifyZipAttachment: function(attachmentSysId) {
        var response = {
            "isError": true,
        };
        if (attachmentSysId) {
            var sysAttachmentGR = new GlideRecord('sys_attachment');
            sysAttachmentGR.addQuery('sys_id', attachmentSysId);
            sysAttachmentGR.query();
            if (sysAttachmentGR.next()) {
                if (sysAttachmentGR.getValue("file_name").endsWith(".zip")) {
                    response.isError = false;
                } else {
                    response["errorMessage"] = gs.getMessage("Attachment is not zip type for the given sys id {0}", attachmentSysId);
                }
            } else {
                response["errorMessage"] = gs.getMessage("Attachment does not exist for the given sys id {0}", attachmentSysId);
            }
        } else {
            response["errorMessage"] = gs.getMessage("Attachment sysId is missing or invalid");
        }
        return response;
    },

    type: 'LFTMSUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-27 19:51:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;30dbf92a77f23010f853528069106196&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFTMSUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;a4dd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_30dbf92a77f23010f853528069106196&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-06 05:58:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:33</sys_created_on>
        <sys_id>4f46789983f01210c6695855eeaad3d6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFTMSUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4f46789983f01210c6695855eeaad3d6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
