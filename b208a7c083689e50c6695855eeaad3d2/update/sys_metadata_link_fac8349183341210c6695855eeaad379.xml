<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a34cb6cd97e1211061b2bb46f053afbb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DRMReportsGlobalUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DRMReportsGlobalUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * Class representing utility functions for managing dashboard permissions.
 * @constructor
 */
var DRMReportsGlobalUtils = Class.create();
DRMReportsGlobalUtils.prototype = {
    /**
     * Constructor: Initializes the class with table names and other properties.
     */
    initialize: function() {
        // Table name for storing report permissions
        this.REPORT_PERMISSIONS_TABLE = "sys_report_users_groups";

        // Table name for storing report roles
        this.REPORTS_ROLES_TABLE = "sys_reportroles";

        // Result object to store operation status and messages
        this.result = {
            "haveError": true,
            "message": ""
        };

        this.USER_ARR = [];
		this.ROLES_ARR= [];
		this.GROUP_ARR = [];

        // Instance of the logging helper for debugging
        this.LOGGING_HELPER = new global.DRMGlobalLogging();
        // Prefix for debug messages
        this.DEBUG_PREFIX = "DRMReportsGlobalUtils &gt;&gt;&gt;";
    },

    /**
     * Revokes a permission record for the given type and record ID.
     * @param {String} recordId - The unique identifier of the permission record.
     * @param {String} type - The type of permission ('user', 'group', or 'role').
     * @returns {Object} result - An object containing the result of the operation, indicating if there was an error and a message.
     */
    revokePermission: function(recordId, type) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function revokePermission. RecordId: " + recordId + ", Type: " + type);
        try {
            if (type == "role") {
                // Revoke a role-based permission
                var grReportRoles = new GlideRecord(this.REPORTS_ROLES_TABLE);
                if (grReportRoles.get(recordId)) {
                    grReportRoles.deleteRecord();
                    this.result.haveError = false;
                    return this.result;
                } else {
                    this.result.message = "Invalid Record.";
                    return this.result;
                }
            }

            // Revoke a user/group-based permission
            var grReportUserGroup = new GlideRecord(this.REPORT_PERMISSIONS_TABLE);
            if (grReportUserGroup.get(recordId)) {
                this.result.haveError = !grReportUserGroup.deleteRecord();
                this.result.message = this._validateRecordScope(grReportUserGroup.getValue("sys_scope")) == true ? "An error occured." : "Please switch to " + grReportUserGroup.getDisplayValue("sys_scope") + " application scope to make changes.";
                return this.result;
            } else {
                this.result.message = "Invalid Record.";
                return this.result;
            }
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function revokePermission. &gt;&gt; " + ex.message);
            this.result.message = "Exception occurred while revoking permission. " + ex.message;
            return this.result;
        }
    },

    /**
     * Retrieves the permissions for a given report ID.
     * @param {String} reportSysId - The unique identifier of the report.
     * @returns {Object} result - An object containing the result of the operation, indicating if there was an error and a message.
     *                            If successful, the "message" property will contain an array of permission objects.
     */
    getReportPermissions: function(reportSysId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function getReportPermissions. reportSysId :" + reportSysId);
        try {
            var permissions = [];

            //get user and group permissions
            grReportPermissions = new GlideRecord(this.REPORT_PERMISSIONS_TABLE);
            grReportPermissions.addQuery("report_id", reportSysId);
            grReportPermissions.query();
            while (grReportPermissions.next()) {
                if (grReportPermissions.getValue("user_id") != null) {
                    permissions.push({
                        "type": "user",
                        "user": {
                            "value": grReportPermissions.getValue("user_id"),
                            "displayValue": grReportPermissions.getDisplayValue("user_id")
                        },
                        "sys_id": {
                            "value": grReportPermissions.getUniqueValue(),
                            "displayValue": grReportPermissions.getUniqueValue()
                        }
                    });
                } else if (grReportPermissions.getValue("group_id") != null) {
                    permissions.push({
                        "type": "group",
                        "group": {
                            "value": grReportPermissions.getValue("group_id"),
                            "displayValue": grReportPermissions.getDisplayValue("group_id")
                        },
                        "sys_id": {
                            "value": grReportPermissions.getUniqueValue(),
                            "displayValue": grReportPermissions.getUniqueValue()
                        }
                    });
                }

            }

            //get role permissions
            grReportRoles = new GlideRecord(this.REPORTS_ROLES_TABLE);
            grReportRoles.addQuery("parent_id", reportSysId);
            grReportRoles.query();
            while (grReportRoles.next()) {
                permissions.push({
                    "type": "role",
                    "role": {
                        "value": grReportRoles.getValue("value"),
                        "displayValue": grReportRoles.getDisplayValue("value")
                    },
                    "sys_id": {
                        "value": grReportRoles.getUniqueValue(),
                        "displayValue": grReportRoles.getUniqueValue()
                    }
                });
            }

            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function getReportPermissions. permissions :" + JSON.stringify(permissions));
            this.result.haveError = false;
            this.result.message = permissions;
            return this.result;
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function getReportPermissions. &gt;&gt; " + ex.message);
            this.result.message = "Exception occured while checking permissions." + ex.message;
            return this.result;
        }

    },



    /**
     * Shares multiple reports with users/roles/groups.
     * @param {Array} reports - An array of report IDs to be shared.
     * @param {Array} shareArr - An array of objects containing permission details (type and sysId) to share the reports.
     * @returns {Object} result - An object containing the result of the operation, indicating if there was an error and a message.
     */
    shareReports: function(reportArr, shareArr) {
        //this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function shareReports. reports :" + JSON.stringify(reports) + "&gt;&gt;shareArr :" + JSON.stringify(shareArr));
        gs.debug(this.DEBUG_PREFIX + "Inside function shareReports. reports :" + JSON.stringify(reportArr) + "&gt;&gt;shareArr :" + JSON.stringify(shareArr));
        try {
            if (reportArr.length == 0 || shareArr.length == 0) {
                this.result.message = "There were no reports or users/roles/groups selected.";
                return this.result;
            }

            //Validate reports
            //get reports from gaguges for older homepage dashboards
            var reports = this._validateReportSysIds(reportArr);

            //build user/roles/groups objects to share
            this._processShareArr(shareArr);

            for (var report in reports) {
                this._shareReportWithUsers(reports[report].sysId);
                this._shareReportWithGroups(reports[report].sysId);
                this._shareReportWithRoles(reports[report].sysId);
            }

            this.result.haveError = false;
            this.result.message = "Shared" + " " + reports.length + " " + "reports successfully";
			//this.result.message = reports;
            return this.result;

        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function shareReports. &gt;&gt; " + ex.message);
            this.result.message = "An error occurred." + ex.message;
            return this.result;
        }
    },

    /**
     * Set user/roles/groups global arrays to use later while sharing the reports.
     * @param {Array} shareArr - An array of objects containing permission details (type and sysId) to share the reports.
     */
    _processShareArr: function(shareArr) {
        for (var item in shareArr) {
            var type = shareArr[item].type;

            if (type == "user") {
                this.USER_ARR.push(shareArr[item].sysId);
            }
            if (type == "group") {
                this.GROUP_ARR.push(shareArr[item].sysId);
            }
            if (type == "role") {
                this.ROLES_ARR.push(shareArr[item].label);
            }
        }
    },


	/**
     * Validate if given sysId's are valid report sysIds. Older homepages might use gauges. Fetch report from gauge for such cases.
     * @param {Array} reports - An array of report sysIds.
     * @returns {Object} validReports - An object containing the valid report sysIds and names.
	 * e.g. [{ "reportName" : "ABC" , "sysId" : "2e123122hjhjk1221223"},....]
     */

    _validateReportSysIds: function(reports) {
		var validReports = [];
        for (var reportId in reports) {
            var grReport = new GlideRecord("sys_report");
            if (grReport.get(reports[reportId])) {
                validReports.push({
                    "reportName": grReport.getDisplayValue("title"),
                    "sysId": reports[reportId]
                });
            } else { //Check if the report is embedded as gauge
                var grGauge = new GlideRecord("sys_gauge");
                if (grGauge.get(reports[reportId])) {
                    if (grGauge.getValue("type") == "report" &amp;&amp; grGauge.getValue("report")) {
                        validReports.push({
                            "reportName": grGauge.getDisplayValue("report"),
                            "sysId": grGauge.getValue("report")
                        });
                    }
                }
            }
        }

		return validReports;
    },

    /**
     * Shares a report with multiple users.
     * @param {String} reportId - The unique identifier of the report to be shared.
     * @param {Array} userArr - An array of user IDs to share the report with.
     */
    _shareReportWithUsers: function(reportId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function _shareReportWithUsers. reportId :" + reportId);
        try {
            var userArr = this.USER_ARR;
            var grReportPermissionsTable = new GlideRecord(this.REPORT_PERMISSIONS_TABLE);
            for (var userItem in userArr) {
                grReportPermissionsTable.initialize();
                grReportPermissionsTable.setValue("user_id", userArr[userItem]);
                grReportPermissionsTable.setValue("report_id", reportId);
                grReportPermissionsTable.insert();
            }
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function _shareReportWithUsers. &gt;&gt; " + ex.message);
        }
    },

    /**
     * Shares a report with multiple groups.
     * @param {String} reportId - The unique identifier of the report to be shared.
     * @param {Array} groupArr - An array of group IDs to share the report with.
     */
    _shareReportWithGroups: function(reportId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function _shareReportWithGroups. reportId :" + reportId);
        try {
            var groupArr = this.GROUP_ARR;
            var grReportPermissionsTable = new GlideRecord(this.REPORT_PERMISSIONS_TABLE);
            for (var groupItem in groupArr) {
                grReportPermissionsTable.initialize();
                grReportPermissionsTable.setValue("group_id", groupArr[groupItem]);
                grReportPermissionsTable.setValue("report_id", reportId);
                grReportPermissionsTable.insert();
            }
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function _shareReportWithGroups. &gt;&gt; " + ex.message);
        }
    },

    /**
     * Shares a report with multiple roles.
     * @param {String} reportId - The unique identifier of the report to be shared.
     * @param {Array} rolesArr - An array of role names to share the report with.
     */
    _shareReportWithRoles: function(reportId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function _shareReportWithRoles. reportId :" + reportId);
        try {
            var rolesArr = this.ROLES_ARR;
            var sequence = this._getSequence(reportId);
            for (var item in rolesArr) {
                var grReportRole = new GlideRecord(this.REPORTS_ROLES_TABLE);
                grReportRole.addQuery("parent_id", reportId);
                grReportRole.addQuery("value", rolesArr[item]);
                grReportRole.query();
                if (!grReportRole.next()) {
                    grReportRole.initialize();
                    grReportRole.setValue("parent_id", reportId);
                    grReportRole.setValue("value", rolesArr[item]);
                    grReportRole.setValue("sequence", sequence);
                    grReportRole.insert();
                    sequence++;
                }
            }
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function _shareReportWithRoles. &gt;&gt; " + ex.message);
        }
    },

    /**
     * Retrieves the next available sequence for sharing the report with roles.
     * @param {String} reportId - The unique identifier of the report to be shared.
     * @returns {Number} - The next available sequence.
     */
    _getSequence: function(reportId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function _getSequence. reportId :" + reportId);
        try {
            var grReportRole = new GlideRecord(this.REPORTS_ROLES_TABLE);
            grReportRole.addQuery("parent_id", reportId);
            grReportRole.orderBy("sequence");
            grReportRole.query();
            if (grReportRole.next()) {
                return parseInt(grReportRole.getValue("sequence")) + 1;
            }
            return 0;
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function _getSequence. &gt;&gt; " + ex.message);
        }
    },

    /**
     * Retrieves the role name from the given role ID.
     * @param {String} roleId - The unique identifier of the role.
     * @returns {String|null} - The name of the role or null if not found.
     */
    _getRoleFromSysId: function(roleId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function _getRoleFromSysId. roleId :" + roleId);

        try {
            var grRoles = new GlideRecord("sys_user_role");
            if (grRoles.get(roleId)) {
                return grRoles.getValue("name");
            }
            return null;
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function _getRoleFromSysId. &gt;&gt; " + ex.message);
            return null;
        }
    },

    /**
     * Validate if the given scope matches with current application scope.
     * @param {string} recordScope - scope of target record for read/write/delete operations.
     * @returns {boolean} - true if scope matches. False otherwise
     */

    _validateRecordScope: function(recordScope) {
        return gs.getCurrentApplicationId() == recordScope;
    },

    type: 'DRMReportsGlobalUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;jdsingh&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-11 18:37:36&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a34cb6cd97e1211061b2bb46f053afbb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DRMReportsGlobalUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a34cb6cd97e1211061b2bb46f053afbb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:26:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:28</sys_created_on>
        <sys_id>fac8349183341210c6695855eeaad379</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DRMReportsGlobalUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_fac8349183341210c6695855eeaad379</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
