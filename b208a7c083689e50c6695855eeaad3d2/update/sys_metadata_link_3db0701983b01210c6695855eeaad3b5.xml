<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1a5d6c73b7d33300dee3b891ee11a9fb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RequestAuthSampleCustomSigner&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Its a sample script include to understand how to write custom signer&lt;/description&gt;
        &lt;name&gt;RequestAuthSampleCustomSigner&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RequestAuthSampleCustomSigner = Class.create();
RequestAuthSampleCustomSigner.prototype = Object.extend(new RequestAuthInternal(), {
    
	initialize: function() {
        RequestAuthInternal.prototype.initialize.call(this);
    },

	/*Override generateAuth if you are writing your own custom signer.
	* It is a sample method to understand how to sign using custom authenticator.
	*/
    generateAuth: function(authAPI) {
		
		//read the request data into instance variables
		this.enableDebug(true);
		this.readRequestData(authAPI);
		
		//sign the data
		var encryptionUtil = new GlideCertificateEncryption();
		// generateMac() will
        // 1. UTF-8 encode the input String
        // 2. Generate the Hash with the desired algoritham
        // 3. Base 64 enocde the generated hash and returns it
        var signedHeader =  encryptionUtil.generateMac(this.secret_key, "HmacSHA256", this.getStringToSign());
		
		//return HttpRequestAuthedData object.
		var httpRequestSignedData = new sn_auth.HttpRequestAuthedData();
		httpRequestSignedData.addHeader("authorization", signedHeader);
        httpRequestSignedData.setStatus("SUCCESS"); //avilable status values :SUCCESS, FAIL, SKIPPED;
        httpRequestSignedData.setDirective("HEADER"); //use QUERY if signed data needs to be sent in query parameters
        return httpRequestSignedData;
	},
	
	getStringToSign: function() {
        var stringToSign = "";
		var headers = this.headerMap;
        var headerKeys =  Object.keys(headers);
		var headerValue;
		
		headerKeys.forEach(function(key) {
            headerValue = headers[key];
			if(headerValue){
				stringToSign += key+":"+headerValue+ "\n"; //"\n" is random terminal
				if(this.debugMode)
					gs.info("Header Key:{0} Value:{1}",[key,headerValue]);
			}
        }.bind(this));
		
		var queryParams = this.queryParamMap;
		var qpKeys = Object.keys(queryParams);
		var qpValue;
		
		qpKeys.forEach(function(key) {
            qpValue = queryParams[key];
			if(qpValue){
				stringToSign += key+":"+qpValue+ "\n"; //"\n" is random terminal
		
				if(this.debugMode)	
					gs.info("Request Param Key:{0} Value:{1}",[key,qpValue]);
			}
        }.bind(this));
		
		if(this.debugMode)
			gs.info("String to Sign:"+stringToSign);
			
        return stringToSign;
    },
	
	/*read request data into instance variables.
	* It is a sample method to understand how to read request data
	*/
	readRequestData: function(authAPI){
		var requestData = authAPI.getHttpRequestData();
        this.endpoint = requestData.getEndpoint();
        this.method = requestData.getHttpMethod().toUpperCase();
		
		if(this.debugMode){
			gs.info("Method:{0} Endpoint:{1}",[this.method, this.endpoint]);
		}
	
        this.queryParamMap = requestData.getQueryParamMap();
		
		this.headerMap = requestData.getHeaderMap();
		
        this.payload = requestData.getContent();

        // get credential fields if needed, these attributes are different based on credential type
        var credential = authAPI.getAuthCredential();
       // this.consumer_key = credential.getAttribute("consumer_key");
       // this.access_token = credential.getAttribute("access_token");
       // this.access_token_secret = credential.getAttribute("access_token_secret");
	},
	
	debugMode : false,
	
	enableDebug: function(flag) {
		this.debugMode = flag;
	},
	
    type: 'RequestAuthSampleCustomSigner'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-08-22 23:29:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1a5d6c73b7d33300dee3b891ee11a9fb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;53&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RequestAuthSampleCustomSigner&lt;/sys_name&gt;
        &lt;sys_package display_value="Integrations - External Authentication API Framework" source="com.glide.external.app.api"&gt;3ca7f42c3cb1311068bcf327dfe37fb9&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1a5d6c73b7d33300dee3b891ee11a9fb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-08-28 03:54:26&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:10</sys_created_on>
        <sys_id>3db0701983b01210c6695855eeaad3b5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RequestAuthSampleCustomSigner</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3db0701983b01210c6695855eeaad3b5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:10</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
