<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>48f53a89b75620108223e126de11a99c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.ConfigKeyFactory&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ConfigKeyFactory&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConfigKeyFactory = Class.create();

ConfigKeyFactory.prototype = {
    initialize: function() {
    },

    /**
     *
     * @param tableName {String}
     * @return {ConfigKeyGenerator}
     */
    getGenerator: function(tableName) {
        if (tableName === 'sys_sg_button') {
            return new ConfigKeyButtonGenerator();
        } else if (tableName === 'sys_sg_native_client') {
            return new ConfigKeyNativeClientGenerator();
        } else {
            return new ConfigKeyGenerator(tableName);
        }
    },

    type: 'ConfigKeyFactory'
};

function ConfigKeyGenerator(tableName) {
    this.tableName = tableName;
    this.configKeyCache = new sn_mab_api.ConfigKeyCache();
    this.typeMap = new sn_mab_api.A_ConfigTypeMap().typeMap;

}

/**
 *
 * @param gr {GlideRecord}
 * @param node {{}}
 * @return {TreeConfigurationNode}
 */
ConfigKeyGenerator.prototype.getTreeConfiguration = function(gr, node) {
    var classNameOverride = this.getOverrideField(node,'sys_class_name');
    var configKey = classNameOverride ? classNameOverride : gr.getValue('sys_class_name');
    return this.configKeyCache.getTreeConfigByConfigKeys([configKey]);
};

/**
 *
 * @param sysId {String}
 * @return {TreeConfigurationNode}
 */
ConfigKeyGenerator.prototype.getTreeConfigurationViaSysId = function(sysId) {
    var gr = new GlideRecord(this.tableName);
    if (!gr.get(sysId))
        return undefined;

    var configKey = gr.getValue('sys_class_name') || this.tableName;
    return this.configKeyCache.getTreeConfigByConfigKeys([configKey]);
};

/**
 *
 * @param gr {GlideRecord}
 * @return {String}
 */
ConfigKeyGenerator.prototype.getType = function(gr) {
    var className = gr.getValue('sys_class_name');

    return this.typeMap[className] ? this.typeMap[className] : gr.getClassDisplayValue();
};

ConfigKeyGenerator.prototype.getTypeForRecord = function(record, table) {
    var className = record.sys_class_name ? record.sys_class_name.value : table;

    if (this.typeMap[className])
        return this.typeMap[className];

    return ClassLabelGetterFactory.getInstance().getLabel(record, table);
}

ConfigKeyGenerator.prototype.getOverrideField = function(node, field) {
    if (node &amp;&amp; node[field])
        return node[field];

    return undefined;
}

function ConfigKeyButtonGenerator() {
    this.tableName = 'sys_sg_button';
}

// extend ConfigKeyGenerator
ConfigKeyButtonGenerator.prototype = new ConfigKeyGenerator();

/**
 *
 * @param sysId {String}
 * @return {TreeConfigurationNode}
 */
ConfigKeyButtonGenerator.prototype.getTreeConfigurationViaSysId = function(sysId) {
    var gr = new GlideRecord(this.tableName);
    if (!gr.get(sysId))
        return;

    return this.getTreeConfiguration(gr, {});
};

/**
 *
 * @param gr {GlideRecord}
 * @param node {{}}
 * @return {TreeConfigurationNode}
 */
ConfigKeyButtonGenerator.prototype.getTreeConfiguration = function(gr, node) {
    var typeOverride = this.getOverrideField(node,'type');
    var contextOverride = this.getOverrideField(node,'context');
    var type = typeOverride ? typeOverride : gr.getValue('type');
    var context = contextOverride ? contextOverride : gr.getValue('context');

    var possibleConfigKeys = [
        this.tableName + '_' + type + '_' + context,
        this.tableName + '_' + type,
        this.tableName
    ];

    return this.configKeyCache.getTreeConfigByConfigKeys(possibleConfigKeys);
};

/**
 *
 * @param gr {GlideRecord}
 * @return {String}
 */
ConfigKeyButtonGenerator.prototype.getType = function(gr) {
    var type = gr.getValue('type');

    if (type === 'write_back') {
        return 'Action';
    } else if (type === 'redirection') {
        return 'Navigation';
    } else {
        return 'Smart button';
    }
};

ConfigKeyButtonGenerator.prototype.getTypeForRecord = function(record) {
    return record.type.displayValue;
}

function ConfigKeyNativeClientGenerator() {
    this.tableName = 'sys_sg_native_client';
}
// extend ConfigKeyGenerator
ConfigKeyNativeClientGenerator.prototype = new ConfigKeyGenerator();

/**
 *
 * @param gr {GlideRecord}
 * @return {String}
 */
ConfigKeyNativeClientGenerator.prototype.getType = function(gr) {
    var type =  gr.getValue('type');

    // Capitalize First Letter
    if (type) {
        return type.charAt(0).toUpperCase() + type.slice(1);
    }

    return 'Unknown Native Client';
}

ConfigKeyNativeClientGenerator.prototype.getTypeForRecord = function(record) {
    var type =  record.type.value;

    // Capitalize First Letter
    if (type) {
        return type.charAt(0).toUpperCase() + type.slice(1);
    }

    return 'Unknown Native Client';
}

var ClassLabelGetterFactory = (function(){
    function ClassLabelGetter() {}

    var displayValueCache = {};
    var instance;

    function getLabel(record, table) {
        var sysId = record.sys_id.value;
        var className = record.sys_class_name ? record.sys_class_name.value : table;
        
        if (displayValueCache[className])
            return displayValueCache[className];

        var gr = new GlideRecord(table);
        if (!gr.isValid())
            throw new ErrorHandler().getNotFoundError('Does not exist for table: ' + table);

        gr.addQuery('sys_id', sysId);
        gr.query();
        displayValueCache[className] = gr.getClassDisplayValue();
        return displayValueCache[className];
    }

    return {
        getInstance: function() {
            if (!instance) {
                instance = new ClassLabelGetter();
                instance.getLabel = this.getLabel;
                delete instance.constructor;	
            }
            return instance;
        },
        getLabel: getLabel
    };
})();
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-11 15:32:36&lt;/sys_created_on&gt;
        &lt;sys_id&gt;48f53a89b75620108223e126de11a99c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConfigKeyFactory&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_48f53a89b75620108223e126de11a99c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-25 08:09:36&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:38</sys_created_on>
        <sys_id>768678d983f01210c6695855eeaad391</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConfigKeyFactory</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_768678d983f01210c6695855eeaad391</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:38</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
