<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>59243fe7439c31101cb092621ab8f23b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nowassist_admin.NowAdminAssistUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NowAdminAssistUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NowAdminAssistUtil = Class.create();
NowAdminAssistUtil.prototype = {
    initialize: function() {
        this.CONSTANTS = new NowAdminAssistMetadata();
        this.CONFIG = new NowAssistConfig();
        this.PLUGIN = "sn_nowassist_plugin";
        this.SKILL_FAMILY = "sn_nowassist_skill_family";
        this.SKILL_CONFIG = "sn_nowassist_skill_config";
        this.SKILL_CONFIG_UI = "sn_ns_skill_config_ui";
        this.SKILL_CONFIG_VAR_SET = "sn_nowassist_skill_config_var_set";
        this.SKILL_CONFIG_VAR_SET_UI = "sn_ns_skill_config_var_set_ui";
        this.CONFIG_SKILL_M2M = "sn_ns_config_m2m_skill";
        this.SKILL_CONFIG_TYPE = "sn_nowassist_skill_config_type";
		this.GUIDED_SETUP_STATUS = "sn_nowassist_gs_status";
        this.GEN_AI_SKILL_APPLICABILITY = "sys_gen_ai_skill_applicability";
        this.IN_PRODUCT = "In-product";
        this.NAP = "Now Assist panel";
        this.SKILL_ACTIVATED = gs.getMessage("Active");
        this.CREATOR_WORKFLOW_ID = "715ec4d7a320311079f66bcf26fcdadd";
        this.PLATFORM_WORKFLOW_ID = "00202261eb383110da1861c59c5228e4";
        this.PLUGIN_TABLE = "sys_store_app";
        this.ONE_EXTEND_DEFINITION_CONFIG = "sys_one_extend_definition_config";
        this.SEARCH_SKILL_FAMILY_ID = "eaac4f3d53303110453cddeeff7b1266";
        this.NAP_CAPABILITY = "bb25ad08438cb91006650464dbb8f2aa";
        this.llmTooltipSuffix = " LLM service";
        this.nowLlmTooltip = "ServiceNow LLM service";
        this.GEN_AI_PROVIDER_MAPPING = "sys_generative_ai_provider_mapping";
        this.EXECEPTION_MESSAGE = gs.getMessage("Something went wrong. Please contact your system administrator.");
    },

    updateOptOutStatusToGAIC: function() {
        let statusText = "";
        let result = {};
        let errorMessage = gs.getMessage("Unable to opt out of data sharing. Try again.");
        try {
            var genAIExtractionOptOutUtil = new sn_generative_ai.GenAIExtractionOptOutUtil();
            if (genAIExtractionOptOutUtil.optOut()) {
                statusText = "success";
                data = gs.getMessage("Turned off. Youâ€™ve opted out of data sharing.");
            } else {
                statusText = "failure";
                data = errorMessage;
            }

            result.status = 200;
            result.body = {
                statusText: statusText,
                data: data
            };

        } catch (e) {
            result.body = {
                data: this.EXECEPTION_MESSAGE
            };
            result.status = 500;
        }
        return result;
    },

    getHelpfulResourceForPlugins: function() {
        return this.CONSTANTS.PLUGINS_HELPFUL_RESOURCES;
    },
    getFAQs: function() {
        return this.CONSTANTS.PLUGINS_FAQS;
    },

    /**
     * This method retrieves all workflow records.
     * The returned array contains objects of individual workflow. Every such object contains details of a workflow
     * and its associated variables.
     *
     * @return {Array}
     */
    getWorkflows: function() {
        return this._getSkillFamily("", "workflow");
    },

    /**
     * This method retrieves the product details for all the records that are associated with the given workflowId.
     * The returned array contains objects of individual product. Every such object contains details of a product
     * and its associated variables.
     *
     * @param {String} workflowId(sn_nowassist_skill_config)
     * @return {Array} Contains array of objects where each object represents details of a product.
     */
    getProducts: function(workflowId) {
        if (gs.nil(workflowId)) {
            return [];
        }
        return this._getSkillFamily(workflowId, "product");
    },

    /**
     * This method retrieves the feature details for all the records that are associated with the given productId.
     * The returned array contains objects of individual feature. Every such object contains details of a feature
     * and its associated variables.
     *
     * @param {String} productId(sn_nowassist_skill_config)
     * @return {Array} Contains array of objects where each object represents details of a feature.
     */
    getFeatures: function(productId) {
        if (gs.nil(productId)) {
            return [];
        }
        return this._getSkillFamily(productId, "feature");
    },

    getFeatureById: function(featureId) {
        if (gs.nil(featureId)) {
            return {};
        }
        return this._getSkillFamilyById(featureId);
    },

    /**
     * This method retrieves the skill details for all the records that are associated with the given featureId
     * and active filter.
     * The returned array contains objects of individual skill. Every such object contains details of a skill
     * and its associated variables.
     *
     * @param {String} featureId(sn_nowassist_skill_config)
     * @optional param {Boolean} active(true/false)
     * @return {Array} Contains array of objects where each object represents details of a skill.
     */
    getSkills: function(featureId, active = "") {
        if (gs.nil(featureId)) {
            return [];
        }
        return this._getSkillConfig(featureId, active);
    },

    /**
     * This method retrieves the details of a skill configuration record along with its associated skill config variables.
     * The skill config variables can be nested to represent a hierarchical structure. The hierarchical structure of skill config
     * variables represent an override behavior.
     *
     * @param {String} skillConfigId(sn_nowassist_skill_config)
     *
     * @return An object of type {@link SkillConfigDetails} that contains the details of the skill configuration record
     * and its associated skill config variables.
     */
    getSkillConfig: function(skillConfigId) {
        return this._getSkillConfiguration(skillConfigId);
    },

    /**
     * This is the API wrapper method for getSkillConfig function, which returns the object with status and body.
     *
     * @param {String} skillConfigId(sn_nowassist_skill_config)
     *
     * @return An object that contains status and body with details of skill configuration record
     * and its associated skill config variables.
     */
    getSkillConfigAPI: function(skillConfigId) {
        let result = {};

        try {
            let skillConfig = this.getSkillConfig(skillConfigId);
            result.status = 200;
            result.body = {
                skillConfig: skillConfig
            };
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    nowAssistPanelStatusAPI: function() {
        let result = {};

        try {
            result.status = 200;
            result.body = {
                nowAssistPanelEnabled: this.CONFIG.isNowAssistPanelEnabled(),
            };
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    activateSkillConfig: function(skillConfigId, hasVarSet) {
        if (gs.nil(skillConfigId))
            throw new Error("Skill config sys_id is null.");

        let skillConfigGr = new GlideRecord(this.SKILL_CONFIG);
        if (skillConfigGr.get(skillConfigId)) {
            skillConfigGr.active = true;
            // If skill config has no var set (then no guided setup), then In product and the mapped NAP skill applicability is set to active. 
            // But is skill config has var ser, then user need to choose in product and NAP skill applicability from guided setup select display step.
            if (!hasVarSet) {
                skillConfigGr.in_product_active = true;
                var genAiSkillApplicabilities = this._getNAPSkillApplicabilities(skillConfigGr);
                if (!gs.nil(genAiSkillApplicabilities)) {
                    this.updateGenAISkillApplicability(genAiSkillApplicabilities, {
                        active: true
                    });
                }
            }
            skillConfigGr.update();
        }
    },

    activateSkillConfigAPI: function(skillConfigId, hasVarSet = false) {
        let result = {};
        try {
            this.activateSkillConfig(skillConfigId, hasVarSet);
            result.status = 200;
            result.body = {};
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    deActivateSkillConfig: function(skillConfigId) {
        if (gs.nil(skillConfigId))
            throw new Error("Skill config sys_id is null.");

        let skillConfigGr = new GlideRecord(this.SKILL_CONFIG);
        if (skillConfigGr.get(skillConfigId)) {
            skillConfigGr.active = false;
            skillConfigGr.in_product_active = false;
            var genAiSkillApplicabilities = this._getNAPSkillApplicabilities(skillConfigGr);
            if (!gs.nil(genAiSkillApplicabilities)) {
                this.updateGenAISkillApplicability(genAiSkillApplicabilities, {
                    active: false
                });
            }
            skillConfigGr.update();

			this._upsertGuidedSetupStatus(skillConfigId, "", false);
        }
    },

    deActivateSkillConfigAPI: function(skillConfigId) {
        let result = {};
        try {
            this.deActivateSkillConfig(skillConfigId);
            result.status = 200;
            result.body = {};
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    /**
     * This is the API wrapper method for getInstalledPlugins function, which returns the object with status and body.
     *
     * @return An object that contains status and body with details of plugin record
     */
    getTotalInstalledPluginsAPI: function() {
        let result = {};
        try {
            let installedPlugins = this.getInstalledPlugins();
            result.status = 200;
            result.body = {
                count: installedPlugins.length
            };
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    updateInProductEnabled: function(skillConfigId, inProductActive) {
        let skillConfigGr = new GlideRecord(this.SKILL_CONFIG);
        skillConfigGr.get(skillConfigId);
        skillConfigGr.in_product_active = inProductActive;
        skillConfigGr.update();
    },

    /**
     * DEPRECATED
     */
    updateNapEnabled: function(genAiSkillApplicabilityId, napActive) {
        let genAiSkillApplicabilityGr = new GlideRecord(this.GEN_AI_SKILL_APPLICABILITY);
        genAiSkillApplicabilityGr.get(genAiSkillApplicabilityId);
        genAiSkillApplicabilityGr.active = napActive;
        genAiSkillApplicabilityGr.update();

    },

    updateGenAISkillApplicability: function(genAiSkillApplicabilityId, genAiSkillApplicabilityData) {
        let genAiSkillApplicabilityGr = new GlideRecord(this.GEN_AI_SKILL_APPLICABILITY);
        genAiSkillApplicabilityGr.addQuery('sys_id', 'IN', genAiSkillApplicabilityId);
        genAiSkillApplicabilityGr.query();

        while (genAiSkillApplicabilityGr.next()) {
            for (let key in genAiSkillApplicabilityData) {
                genAiSkillApplicabilityGr.setValue(key, genAiSkillApplicabilityData[key]);
            }
            genAiSkillApplicabilityGr.update();
        }
    },

    updateDeliveryModeAPI: function(skillConfigId, stepCompleted, genAiSkillApplicabilityId, inProductActive, napActive, napRoles, updateRoles = true) {
        let result = {};

        try {
            this.updateInProductEnabled(skillConfigId, inProductActive);
            // Update roles only if one sys_gen_ai_skill_applicability record mapped
            if (updateRoles) {
                this.updateGenAISkillApplicability(genAiSkillApplicabilityId, {
                    active: napActive,
                    roles: napRoles
                });
            } else {
                this.updateGenAISkillApplicability(genAiSkillApplicabilityId, {
                    active: napActive
                });
            }
			this._upsertGuidedSetupStatus(skillConfigId, "select-delivery", stepCompleted);

            result.status = 200;
            result.body = {};
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    updateSkillConfigVarSet: function(skillConfigId, skillConfigVarSetId, skillConfigVarSetData) {
		if (gs.nil(skillConfigId))
			throw new Error("Skill config sys_id is null.");

        if (gs.nil(skillConfigVarSetId))
            throw new Error("Skill config var set sys_id is null.");

        let skillConfigVarSetVariableGr = new GlideRecord(this.SKILL_CONFIG_VAR_SET);
        if (skillConfigVarSetVariableGr.get(skillConfigVarSetId)) {
			if (!gs.nil(skillConfigVarSetData.props) &amp;&amp; !this._isObjectEmpty(skillConfigVarSetData.props)) {
				for (let variableName in skillConfigVarSetData.props) {
					if (variableName !== "sys_meta" &amp;&amp; variableName !== "sys_id")
						skillConfigVarSetVariableGr.vars[variableName] = skillConfigVarSetData.props[variableName];
				}

				skillConfigVarSetVariableGr.update();
			}

			this._upsertGuidedSetupStatus(skillConfigId, skillConfigVarSetId, skillConfigVarSetData.step_completed);

            if (!gs.nil(skillConfigVarSetData.override_sets)) {
                for (let override_set_index = 0; override_set_index &lt; skillConfigVarSetData.override_sets.length; override_set_index++) {
                    let override_set = skillConfigVarSetData.override_sets[override_set_index];
                    this.updateSkillConfigVarSet(override_set.sys_id, {
                        step_completed: true,
                        override_sets: override_set.override_sets,
                        props: override_set.props
                    });
                }
            }
        }
    },

	_upsertGuidedSetupStatus: function(skillConfigId, skillConfigVarSetId, stepCompleted) {
		let guidedSetupStatusGr = new GlideRecord(this.GUIDED_SETUP_STATUS);
		guidedSetupStatusGr.addQuery("skill_config", skillConfigId);
		guidedSetupStatusGr.addQuery("var_set", skillConfigVarSetId);
		guidedSetupStatusGr.query();

		if (!guidedSetupStatusGr.next()) {
			guidedSetupStatusGr.setValue("skill_config", skillConfigId);
			guidedSetupStatusGr.setValue("var_set", skillConfigVarSetId || "");
			guidedSetupStatusGr.setValue("gs_status", stepCompleted);
			guidedSetupStatusGr.insert();
		} else {
			guidedSetupStatusGr.setValue("gs_status", stepCompleted);
			guidedSetupStatusGr.update();
		}
	},

	_getGuidedSetupStatus: function(skillConfigId, skillConfigVarSetId) {
		if (gs.nil(skillConfigId))
			throw new Error("Skill config sys_id is null.");
		
		let guidedSetupStatusGr = new GlideRecord(this.GUIDED_SETUP_STATUS);
		guidedSetupStatusGr.addQuery("skill_config", skillConfigId);
		guidedSetupStatusGr.addQuery("var_set", skillConfigVarSetId || "");
		guidedSetupStatusGr.query();

		let result = {};
		if (guidedSetupStatusGr.next()) {
			result["sys_id"] = guidedSetupStatusGr.getValue("sys_id");
			result["skill_config"] = guidedSetupStatusGr.getValue("skill_config");
			result["var_set"] = guidedSetupStatusGr.getValue("var_set");
			result["gs_status"] = guidedSetupStatusGr.getDisplayValue("gs_status") === "true";
		}
		return result;
	},

	_getGuidedSetupStatuses: function(skillConfigId) {
		let guidedSetupStatusGr = new GlideRecord(this.GUIDED_SETUP_STATUS);
		if (!gs.nil(skillConfigId)) {
			guidedSetupStatusGr.addQuery("skill_config", skillConfigId);
		}
		guidedSetupStatusGr.query();

		let response = [];
		while (guidedSetupStatusGr.next()) {
			let result = {};
			result["sys_id"] = guidedSetupStatusGr.getValue("sys_id");
			result["skill_config"] = guidedSetupStatusGr.getValue("skill_config");
			result["var_set"] = guidedSetupStatusGr.getValue("var_set");
			result["gs_status"] = guidedSetupStatusGr.getDisplayValue("gs_status") === "true";
			response.push(result);
		}
		return response;
	},

	_getGuidedSetupSkillConfigStatus: function(skillConfigId) {
		let guidedSetupStatusGr = new GlideRecord(this.GUIDED_SETUP_STATUS);
		if (!gs.nil(skillConfigId)) {
			guidedSetupStatusGr.addQuery("skill_config", skillConfigId);
		}
		guidedSetupStatusGr.addNullQuery("var_set");
		guidedSetupStatusGr.query();

		let result = {};
		while (guidedSetupStatusGr.next()) {
			result[guidedSetupStatusGr.getValue("skill_config")] = {
				"sys_id": guidedSetupStatusGr.getValue("sys_id"),
				"skill_config": guidedSetupStatusGr.getValue("skill_config"),
				"var_set": guidedSetupStatusGr.getValue("var_set"),
				"gs_status": guidedSetupStatusGr.getDisplayValue("gs_status") === "true"
			};
		}
		return result;
	},

    updateSkillConfigVarSetAPI: function(skillConfigId, skillConfigVarSetId, skillConfigVarSetData) {
        let result = {};

        try {
            this.updateSkillConfigVarSet(skillConfigId, skillConfigVarSetId, skillConfigVarSetData);
            result.status = 200;
            result.body = {};
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    /**
     * This method retrieves the plugin details for all the records that are associated with the given productId (Ex: CSM, ITSM).
     * The returned array contains objects of individual plugin. Every such object contains details of a plugin
     * and its associated variables.
     *
     * @param {String} productId(sn_nowassist_skill_family)
     * @return {Array} Contains array of objects where each object represents details of a plugin.
     */
    getPluginsByProductId: function(productId = "") {
        return this._getPlugins(productId);
    },

    /**
     * This method retrieves all available plugin details or only the plugin that are associated with the worflow (Ex: IT, Customer).
     * It depends on the optional param worflowId.
     * The returned array contains objects of individual plugin. Every such object contains details of a plugin
     * and its associated variables.
     *
     * @param {Empty} || {String} worflowId(sn_nowassist_skill_family)
     * @return {Array} Contains array of objects where each object represents details of a plugin.
     */
    getPluginsByWorkflowId: function(workflowId) {
        return this._getPlugins("", workflowId);
    },

    getRolesList: function() {
        var sysUserRoleGr = new GlideRecord("sys_user_role");
        sysUserRoleGr.orderBy('name');
        sysUserRoleGr.query();
        var userRoles = [];
        while (sysUserRoleGr.next()) {
            userRoles.push({
                id: sysUserRoleGr.getValue("name"),
                label: sysUserRoleGr.getValue("name")
            });
        }
        return userRoles;
    },

    getRolesListAPI: function() {
        let result = {};
        try {
            let roles = this.getRolesList();
            result.status = 200;
            result.body = {
                roles: roles
            };
        } catch (e) {
            result.status = 400;
            result.body = {
                error: e
            };
        }

        return result;
    },

    _doesWorkflowHaveProduct: function(workflowId) {
        var skillFamilyGr = new GlideRecord(this.SKILL_FAMILY);
        skillFamilyGr.addQuery("parent", workflowId);
        skillFamilyGr.addQuery("type", "product");
        skillFamilyGr.query();
        while (skillFamilyGr.next()) {
            return true;
        }
        return false;
    },

    /**
     * Private functions
     */

    _getPlugins(productId = "", workflowId = "") {
        var pluginsGr = new GlideRecord(this.PLUGIN);

        if (!gs.nil(productId))
            pluginsGr.addQuery("skill_family", productId);

        if (!gs.nil(workflowId)) {
            if (this._doesWorkflowHaveProduct(workflowId)) {
                pluginsGr.addQuery("skill_family.parent", workflowId);
            } else {
                pluginsGr.addQuery("skill_family", workflowId);
            }
        }


        pluginsGr.orderBy('order');
        pluginsGr.query();

        let plugins = [];

        while (pluginsGr.next()) {
            let pluginData = this._getPlugin(pluginsGr);
            if (!gs.nil(pluginData))
                plugins.push(pluginData);
        }

        return plugins;
    },

    _getPlugin(pluginsGr) {
        if (gs.nil(pluginsGr.getValue("sys_id"))) {
            return {};
        }

        let pluginData = {};
        pluginData['id'] = pluginsGr.getValue("sys_id");
        pluginData['label'] = pluginsGr.getDisplayValue("name");
        pluginData['name'] = pluginsGr.getValue("name");
        pluginData['plugin_id'] = pluginsGr.getValue("plugin_id");
        pluginData['description'] = pluginsGr.getDisplayValue("description");
        pluginData['icon_url'] = pluginsGr.getValue("icon_url");
        pluginData['skill_family'] = pluginsGr.getValue('skill_family');
        return pluginData;
    },

    _getSkillFamily(parent = "", type) {
        var skillFamilyGr = new GlideRecord(this.SKILL_FAMILY);

        if (gs.nil(parent)) {
            skillFamilyGr.addNullQuery("parent");
        } else {
            skillFamilyGr.addQuery("parent", parent);
        }
        skillFamilyGr.addQuery("type", type);

        skillFamilyGr.orderBy('order');
        skillFamilyGr.query();

        let skillFamily = [];

        while (skillFamilyGr.next()) {
            var variables = {};
            variables['id'] = skillFamilyGr.getValue('sys_id');
            variables['label'] = skillFamilyGr.getDisplayValue('name');
            variables['name'] = skillFamilyGr.getValue('name');
            variables['sub_title'] = skillFamilyGr.getDisplayValue('sub_title');
            variables['description'] = skillFamilyGr.getDisplayValue('description');
            variables['image_url'] = skillFamilyGr.getValue('image_url');
            variables['preview_image'] = skillFamilyGr.getValue('preview_image');
            variables['parent'] = skillFamilyGr.getValue('parent');
            skillFamily.push(variables);
        }

        return skillFamily;
    },

    _getSkillFamilyById(id) {
        var skillFamilyGr = new GlideRecord(this.SKILL_FAMILY);
        let skillFamily = {};

        if (skillFamilyGr.get(id)) {
            skillFamily['id'] = skillFamilyGr.getValue('sys_id');
            skillFamily['label'] = skillFamilyGr.getDisplayValue('name');
            skillFamily['name'] = skillFamilyGr.getValue('name');
            skillFamily['sub_title'] = skillFamilyGr.getDisplayValue('sub_title');
            skillFamily['description'] = skillFamilyGr.getDisplayValue('description');
            skillFamily['image_url'] = skillFamilyGr.getValue('image_url');
            skillFamily['preview_image'] = skillFamilyGr.getValue('preview_image');
            skillFamily['parent'] = skillFamilyGr.getValue('parent');
            skillFamily['type'] = skillFamilyGr.type;
        }

        return skillFamily;
    },

    _getSkillConfig(skillFamilyId = "", active = "") {
        var skillConfigGr = new GlideRecord(this.SKILL_CONFIG);

        if (!gs.nil(skillFamilyId)) {
            skillConfigGr.addQuery("skill_family", skillFamilyId);
        }

        if (!gs.nil(active)) {
            skillConfigGr.addQuery("active", active);
        }

        skillConfigGr.orderBy('order');
        skillConfigGr.query();

        let skillConfigs = [];

        while (skillConfigGr.next()) {
            var variables = {};
            var configId = skillConfigGr.getValue('sys_id');
            const configUIInfo = this._getSkillConfigUIInfo(configId);
            variables['id'] = configId;
            variables['label'] = configUIInfo.name ? configUIInfo.name : skillConfigGr.getValue('name');
            variables['name'] = configUIInfo.name ? configUIInfo.name : skillConfigGr.getValue('name');
            variables['description'] = configUIInfo.description ? configUIInfo.description : skillConfigGr.getDisplayValue('description');
            variables['active'] = skillConfigGr.getDisplayValue('active') == "true";
            variables['nap_skill_applicability'] = this._getNAPSkillApplicabilities(skillConfigGr);
            variables['success_message'] = configUIInfo.success_message ? configUIInfo.success_message : skillConfigGr.getDisplayValue('success_message');
            variables['in_product_active'] = skillConfigGr.getDisplayValue('in_product_active');
            variables['delivery'] = this._getDeliveryForSkillConfig(skillConfigGr.getDisplayValue('in_product_active'), variables['nap_skill_applicability']);
            variables['sys_updated_on'] = skillConfigGr.getDisplayValue('sys_updated_on').substr(0, 16);
            variables['skill_family'] = skillConfigGr.getValue('skill_family');
            variables['has_var_set'] = this._doesSkillConfigContainVarSets(configId);
            skillConfigs.push(variables);
        }

        return skillConfigs;
    },

    _doesSkillConfigContainVarSets: function(skillConfigId) {
        var skillConfigVarSetGr = new GlideRecord(this.SKILL_CONFIG_VAR_SET);
        skillConfigVarSetGr.addQuery('skill_config', skillConfigId);
        skillConfigVarSetGr.addNullQuery('parent');
        skillConfigVarSetGr.query();

        return skillConfigVarSetGr.getRowCount() &gt; 0;
    },

    _getNAPSkillApplicabilities: function(skillConfigGr) {
        var configSkillM2M = new GlideRecord(this.CONFIG_SKILL_M2M);
        configSkillM2M.addQuery('skill_config', skillConfigGr.getValue('sys_id'));
        configSkillM2M.query();

        var napSkillApplicabilities = [];
        while (configSkillM2M.next()) {
            var nap_skill_applicability = configSkillM2M.getValue("nap_skill_applicability");
            if (!gs.nil(nap_skill_applicability)) {
                napSkillApplicabilities.push(nap_skill_applicability);
            }
        }

        return napSkillApplicabilities.join(",") || skillConfigGr.getValue('nap_skill_applicability');
    },

    _getSkillConfigUIInfo: function(skillConfigId) {
        var skillConfigUIGr = new GlideRecord(this.SKILL_CONFIG_UI);
        skillConfigUIGr.addQuery("skill_config", skillConfigId);
        skillConfigUIGr.query();
        var skillConfigUIInfo = {};

        if (skillConfigUIGr.next()) {
            var info = {};
            skillConfigUIInfo['label'] = skillConfigUIGr.getDisplayValue('name');
            skillConfigUIInfo['name'] = skillConfigUIGr.getValue('name');
            skillConfigUIInfo['description'] = skillConfigUIGr.getDisplayValue('description');
            skillConfigUIInfo['success_message'] = skillConfigUIGr.getDisplayValue('success_message');
        }

        return skillConfigUIInfo;
    },

	_getGuidedSetupStepStatus: function(skillConfigId) {
		if (gs.nil(skillConfigId))
			throw new Error("Skill config sys_id is null.");
		
		let guidedSetupStatusGr = new GlideRecord(this.GUIDED_SETUP_STATUS);
		guidedSetupStatusGr.addQuery("skill_config", skillConfigId);
		guidedSetupStatusGr.query();

		let result = {};
		while (guidedSetupStatusGr.next()) {
			result[guidedSetupStatusGr.getValue("var_set")] = guidedSetupStatusGr.getDisplayValue("gs_status") === "true";
		}
		return result;
	},

	_getAllGuidedSetupStepStatus: function() {
		let guidedSetupStatusGr = new GlideRecord(this.GUIDED_SETUP_STATUS);
		guidedSetupStatusGr.addNotNullQuery("skill_config");
		guidedSetupStatusGr.query();

		let result = {};
		while (guidedSetupStatusGr.next()) {
			if (!result.hasOwnProperty(guidedSetupStatusGr.getValue("skill_config"))) {
				result[guidedSetupStatusGr.getValue("skill_config")] = {};
			}
			result[guidedSetupStatusGr.getValue("skill_config")][guidedSetupStatusGr.getValue("var_set")] = guidedSetupStatusGr.getDisplayValue("gs_status") === "true";
		}
		return result;
	},

    _getSkillConfiguration: function(skillConfigId) {
        var result = {};

        var skillConfigGr = new GlideRecord(this.SKILL_CONFIG);
        var skillConfigUIGr = new GlideRecord(this.SKILL_CONFIG_UI);
        skillConfigUIGr.addQuery("skill_config", skillConfigId);
        skillConfigUIGr.query();


        if (skillConfigGr.get(skillConfigId)) {
            var uiOverrideGr = skillConfigUIGr.next() ? skillConfigUIGr : skillConfigGr;

            result.name = uiOverrideGr.getValue('name');
            result.active = skillConfigGr.getDisplayValue('active') === "true";
            result.skill_family = skillConfigGr.getValue('skill_family');
            result.skill_family_name = skillConfigGr.getDisplayValue('skill_family');
            result.skill_family_parent_name = skillConfigGr.getDisplayValue('skill_family.parent');
            result.skill_description = uiOverrideGr.getDisplayValue('description');
            result.in_product_active = skillConfigGr.getDisplayValue('in_product_active') === "true";
            result.nap_skill_applicability = this._getNAPSkillApplicabilities(skillConfigGr);
            if (!gs.nil(result.nap_skill_applicability)) {
                let getGenAISkillApplicability = this._getGenAISkillApplicability(result.nap_skill_applicability);
                result.nap_active = getGenAISkillApplicability.active;
                result.nap_roles = getGenAISkillApplicability.roles;
                result.nap_roles_mandatory = getGenAISkillApplicability.roles_mandatory;
            } else {
                result.nap_active = false;
                result.nap_roles = "";
            }
            result.nap_status = {
                nowAssistPanelEnabled: this.CONFIG.isNowAssistPanelEnabled(),
            };
            result.success_message = uiOverrideGr.getDisplayValue('success_message');
            // result.skill_table = skillConfigGr.getValue('skill_table');
            // result.skill_id = skillConfigGr.getValue('skill_id');
            // result.skill_id_name = skillConfigGr.getDisplayValue('skill_id');
            result.sys_scope = skillConfigGr.getValue('sys_scope');
            result.sys_domain = skillConfigGr.getValue('sys_domain');
            result.sys_id = skillConfigGr.getValue('sys_id');
			var guided_setup_step_status = this._getGuidedSetupStepStatus(skillConfigGr.getValue('sys_id'));
			result.guided_setup_step_status = guided_setup_step_status;
            result.variable_sets = this._getSkillConfigurationVariables(skillConfigId, guided_setup_step_status, true);
            result.translated_text = {
                delivery_step_title: gs.getMessage("Choose where to display"),
                delivery_step_description: gs.getMessage("Display {0} in-product or in the Now Assist panel.", result.name.toLowerCase()),
                delivery_step_in_product_description: gs.getMessage("Show {0} in all {1} products.", [result.name.toLowerCase(), result.skill_family_parent_name]),
                delivery_step_nap_description: gs.getMessage("Show {0} in the Now Assist panel.", result.name.toLowerCase()),
                delivery_user_role_title: gs.getMessage("Who can access {0} from the Now Assist panel?", result.name.toLowerCase()),
                delivery_user_role_mandatory: gs.getMessage("User role is mandatory."),
                review_step_title: gs.getMessage("Review and activate"),
                review_step_description: gs.getMessage("Go over the default setup and turn on the skill for agents."),
                review_step_info_card_title: gs.getMessage("How will it work?"),
                review_step_in_product_card_title: gs.getMessage("Will {0} display in product?", result.name.toLowerCase()),
                review_step_nap_card_title: gs.getMessage("Will {0} display in Now Assist panel?", result.name.toLowerCase()),
                review_step_nap_roles_card_title: gs.getMessage("Who can use Now Assist panel to get {0}?", result.name.toLowerCase()),
                review_step_nap_roles_card_description: gs.getMessage("{0} will be enabled in the Now Assist panel for the following roles:", result.name),
                yes: gs.getMessage("Yes"),
                no: gs.getMessage("No"),
                activate_modal_success_message: gs.getMessage("{0} is now active for {1}!", [result.name, result.skill_family_parent_name]),
                activate_modal_return_button_label: gs.getMessage("Return to {0}", result.skill_family_name),
                activatingSkillLabel: gs.getMessage("Activating Skill"),
                savingInputLabel: gs.getMessage("Saving Input Data"),
            };
        }

        return result;
    },

    _getSkillConfigurationVariables: function(skillConfigId, guidedSetupStepStatus, shouldIncludeVariableOverrides) {
        var skillConfigVarSetGr = new GlideRecord(this.SKILL_CONFIG_VAR_SET);
        skillConfigVarSetGr.addQuery('skill_config', skillConfigId);
        skillConfigVarSetGr.addNullQuery('parent');
        skillConfigVarSetGr.orderBy('order');
        skillConfigVarSetGr.query();

        var skillConfigVariables = [];
        while (skillConfigVarSetGr.next()) {
			var varSetUIData = this._getVarSetUIData(skillConfigVarSetGr.getValue("sys_id"));
            skillConfigVariables.push(this._getVariableSetInfo(skillConfigVarSetGr, shouldIncludeVariableOverrides, varSetUIData, guidedSetupStepStatus));
        }

        return skillConfigVariables;
    },

    _getVarSetUIData: function(skillVarSetId) {
        var varSetUIGr = new GlideRecord(this.SKILL_CONFIG_VAR_SET_UI);
		varSetUIGr.addQuery("var_set", skillVarSetId);
        varSetUIGr.query();

        var varSetUIInfo = {};
        if (varSetUIGr.next()) {
            varSetUIInfo[varSetUIGr.getValue('var_set')] = {
                name: varSetUIGr.getDisplayValue('name'),
                description: varSetUIGr.getDisplayValue('description'),
                hide_step: varSetUIGr.getDisplayValue('hide_step') === "true",
                title: varSetUIGr.getDisplayValue('title'),
				screen_id: varSetUIGr.getValue('screen_id'),
				screen_table: varSetUIGr.getValue('screen_table')
            };
        }

        return varSetUIInfo;
    },

    _getVariableSetInfo: function(skillConfigVarSetGr, shouldIncludeVariableOverrides, varSetUIData, guidedSetupStepStatus) {
        var step_details = {};
        var varSetUI = varSetUIData[skillConfigVarSetGr.getValue('sys_id')];

        step_details.name = varSetUI ? varSetUI.name : skillConfigVarSetGr.getValue('name');
        step_details.description = varSetUI ? varSetUI.description : skillConfigVarSetGr.getDisplayValue('description');
        step_details.sys_scope = skillConfigVarSetGr.getValue('sys_scope');
        step_details.step_completed = guidedSetupStepStatus.hasOwnProperty(skillConfigVarSetGr.getValue('sys_id')) ? guidedSetupStepStatus[skillConfigVarSetGr.getValue('sys_id')] : skillConfigVarSetGr.getDisplayValue('step_completed') === "true";
        step_details.order = skillConfigVarSetGr.getValue('order');
        step_details.hide_step = varSetUI ? varSetUI.hide_step : skillConfigVarSetGr.getDisplayValue('hide_step') === "true";
        step_details.title = varSetUI ? varSetUI.title : skillConfigVarSetGr.getDisplayValue('title');
        step_details.sys_id = skillConfigVarSetGr.getValue('sys_id');
        step_details.sys_domain = skillConfigVarSetGr.getValue('sys_domain');

        //skill var set template
        var skillVarSetTemplateGr = new GlideRecord(this.SKILL_CONFIG_TYPE);
        var configType = skillConfigVarSetGr.getValue('config_type');
        if (!gs.nil(varSetUI) &amp;&amp; !gs.nil(varSetUI.screen_id)) {
            step_details.screen_table = varSetUI.screen_table;
            step_details.screen_id = varSetUI.screen_id;
        } else if (!gs.nil(skillConfigVarSetGr.getValue('screen_id'))) {
            step_details.screen_table = skillConfigVarSetGr.getValue('screen_table');
            step_details.screen_id = skillConfigVarSetGr.getValue('screen_id');
        } else {
            if (skillVarSetTemplateGr.get(configType)) {
                step_details.screen_table = skillVarSetTemplateGr.getValue('screen_table');
                step_details.screen_id = skillVarSetTemplateGr.getValue('screen_id');
            }
        }

        //props for skill var set
        step_details.props = this._getVariables(skillConfigVarSetGr);
        step_details.propsMetadata = this._getVariableMetadata(skillConfigVarSetGr);
        if (shouldIncludeVariableOverrides) {
            step_details.override_sets = this._getVariableOverrides(skillConfigVarSetGr, varSetUIData, guidedSetupStepStatus);
        }

        return step_details;
    },

    _getVariableMetadata: function(glideRecord) {
        var propMetadata = {};
        var vars = glideRecord.vars;
        try {
            for (var item in vars) {
                // TODO: Add more metadata related to variables.
                if (item != "sys_meta") {
                    propMetadata[item] = {
                        label: vars[item].getLabel()
                    };
                }
            }
        } catch (e) {
            gs.error("NowAdminAssistUtil: Failed to compile variables for var set with id " + glideRecord.getValue('sys_id') + ": " + e.toString());
        }
        return propMetadata;
    },

    _getVariables: function(glideRecord) {
        var variables = {};
        var vars = glideRecord.vars;
        try {
            for (var item in vars) {
                if (item != "sys_meta" &amp;&amp; !vars[item].getBooleanAttribute("hide_na_var")) {
                    variables[item] = vars[item].toString();
                }
            }
        } catch (e) {
            gs.error("NowAdminAssistUtil: Failed to compile variables for var set with id " + glideRecord.getValue('sys_id') + ": " + e.toString());
        }

        return variables;
    },

    _getVariableOverrides: function(variableSetGr, varSetUIData, guidedSetupStepStatus) {
        var skillConfigVarSetGr = new GlideRecord(variableSetGr.getTableName());
        skillConfigVarSetGr.addQuery('parent', variableSetGr.getValue('sys_id'));
        skillConfigVarSetGr.orderBy('order');
        skillConfigVarSetGr.query();

        var overrideSet = [];
        while (skillConfigVarSetGr.next()) {
            overrideSet.push(this._getVariableSetInfo(skillConfigVarSetGr, true, varSetUIData, guidedSetupStepStatus));
        }

        return overrideSet;
    },

    _getGenAISkillApplicability: function(genAiSkillApplicabilityId) {
        var result = {
            active: false,
            roles: ""
        };
        var genAiSkillApplicabilityGr = new GlideRecord(this.GEN_AI_SKILL_APPLICABILITY);
        genAiSkillApplicabilityGr.addQuery('sys_id', 'IN', genAiSkillApplicabilityId);
        genAiSkillApplicabilityGr.query();

        var rowCount = genAiSkillApplicabilityGr.getRowCount();

        while (genAiSkillApplicabilityGr.next()) {
            result.active = result.active || genAiSkillApplicabilityGr.getDisplayValue('active') == "true";
            result.roles = rowCount &gt; 1 ? "" : genAiSkillApplicabilityGr.getValue("roles");
            result.roles_mandatory = rowCount &gt; 1 ? false : genAiSkillApplicabilityGr.getValue("condition_mode") === "simple";
        }
        return result;
    },

    _getNowAssistPanelActiveStatus: function(genAiSkillApplicabilityId) {
        try {
            var genAiSkillApplicabilityGr = new GlideRecord(this.GEN_AI_SKILL_APPLICABILITY);
            genAiSkillApplicabilityGr.addQuery('sys_id', 'IN', genAiSkillApplicabilityId);
            genAiSkillApplicabilityGr.query();

            while (genAiSkillApplicabilityGr.next()) {
                if (genAiSkillApplicabilityGr.getDisplayValue('active') == "true") {
                    return true;
                }
            }
            return false;
        } catch (e) {
            gs.error("Unable to fetch Gen Ai Skill Applicability record");
        }
        return false;
    },

    /**
     * This method retrieves all available plugin details or only the plugin that are associated with the worflow
     * depends on the optional param worflowId.
     * The returned array contains objects of individual plugin. Every such object contains details of a plugin
     * and its associated variables.
     *
     * @param {Empty} || {String} worflowId(sn_nowassist_skill_config)
     * @return {Array} Contains array of objects where each object represents details of a plugin.
     */
    getPlugins: function(workflowId = "") {
        var allAvailablePluginsList = this.getPluginsByWorkflowId(workflowId);
        var availablePluginsList = allAvailablePluginsList.filter(function(p) {
            return !GlidePluginManager.isActive(p.plugin_id);
        });
        return availablePluginsList;
    },

    /**
     * This method retrieves the plugin details that are associated with the workflow (Ex: IT, Customer, Employee, Creator).
     * The returned array contains objects of individual workflow cards i.e GetStartedWorkflowCard and CreatorWorkflowCard
     */
    getWorkflowsDataWithNoActivePlugin: function() {
        var getStartedWorkflowsData = [];
        var creatorWorkflowsData = [];
        var workflows = this.getWorkflows();
        var getStartedWorkflows = this.CONSTANTS.GET_STARTED_WORKFLOWS;
        for (let i = 0; i &lt; workflows.length; i++) {
            let workflow = workflows[i];
            let plugins = this._getPlugins("", workflow.id);
            let isPluginInstalled = false;
            for (let j = 0; j &lt; plugins.length; j++) {
                if (GlidePluginManager.isActive(plugins[j].plugin_id)) {
                    isPluginInstalled = true;
                    break;
                }
            }

            if (!isPluginInstalled) {
                if (getStartedWorkflows.indexOf(workflow.label) == -1) {
                    if (workflow.label == "Creator") {
                        creatorWorkflowsData.push(workflow);
                    }
                } else {
                    getStartedWorkflowsData.push(workflow);
                }
            }
        }

        return {
            getStartedWorkflowsData: getStartedWorkflowsData,
            creatorWorkflowsData: creatorWorkflowsData,
        };
    },

    getHomePageCardsOrder: function() {
        var plugins = this._getPlugins();
        var skills = this._getSkillConfig();

        var installedPlugins = plugins.filter(function(plugin) {
            return GlidePluginManager.isActive(plugin.plugin_id);
        });

        var activeSkills = skills.filter(function(skill) {
            return skill.active.toString() == "true";
        });

        var installedPluginsLen = installedPlugins.length;
        var activeSkillsLen = activeSkills.length;
        var order = {};
        var userAnalyticsCardObj = this.CONSTANTS.USER_ANALYTICS_CARD_NAMES;

        if (installedPluginsLen == 0 || installedPluginsLen &lt; 2 || activeSkillsLen &lt; 3) {
            // Order is same in First time user and immediate return experience
            order = {
                [userAnalyticsCardObj.GET_STARTED_CARD]: 0,
                [userAnalyticsCardObj.TURN_ON_NOW_ASSIST_PANEL_CARD]: 1,
                [userAnalyticsCardObj.NOW_ASSIST_SUMMARY_CARD]: 2,
                [userAnalyticsCardObj.NOW_ASSIST_ANALYTICS_CARD]: 3,
            };
        } else {
            if ((installedPluginsLen / plugins.length) &gt;= 0.75 &amp;&amp; (activeSkillsLen / skills.length) &gt;= 0.75) {
                // Long return experience
                order = {
                    [userAnalyticsCardObj.GET_STARTED_CARD]: 2,
                    [userAnalyticsCardObj.TURN_ON_NOW_ASSIST_PANEL_CARD]: 3,
                    [userAnalyticsCardObj.NOW_ASSIST_SUMMARY_CARD]: 1,
                    [userAnalyticsCardObj.NOW_ASSIST_ANALYTICS_CARD]: 0,
                };
            } else {
                // Mid return experience
                order = {
                    [userAnalyticsCardObj.GET_STARTED_CARD]: 1,
                    [userAnalyticsCardObj.TURN_ON_NOW_ASSIST_PANEL_CARD]: 2,
                    [userAnalyticsCardObj.NOW_ASSIST_SUMMARY_CARD]: 0,
                    [userAnalyticsCardObj.NOW_ASSIST_ANALYTICS_CARD]: 3,
                };
            }
        }

        return order;
    },

    /**
     * This function returns the list of installed plugins by the user
     */
    getInstalledPlugins: function() {
        var allAvailablePluginsList = this.getPluginsByWorkflowId("");
        var installedPluginsList = allAvailablePluginsList.filter(function(p) {
            return GlidePluginManager.isActive(p.plugin_id);
        });

        return installedPluginsList;
    },

	getInstalledPluginsColumns: function() {
        return this.CONSTANTS.INSTALLED_PLUGINS_COLUMNS;
    },

    getAvailableFilterOptions: function() {
        //return this._getSkillFamily("", "workflow");
        return [{
                id: "0f3e04d7a320311079f66bcf26fcdacc",
                label: gs.getMessage("Workflow: Technology")
            },
            {
                id: "676ec4d7a320311079f66bcf26fcda61",
                label: gs.getMessage("Workflow: Customer")
            },
            {
                id: "f08e88d7a320311079f66bcf26fcda70",
                label: gs.getMessage("Workflow: Employee")
            },
            {
                id: "715ec4d7a320311079f66bcf26fcdadd",
                label: gs.getMessage("Workflow: Creator")
            }
        ];
    },

    formattedFeaturesCTACardPayload: function(features) {
        var _self = this;
        var formattedPayload = [];
        features.forEach(function(feature) {
            var id = feature.id;
            var label = feature.label;
            var skills = _self.formattedSkillPayload(id);
            var description = feature.sub_title;
            if (gs.nil(description))
                description = ' ';
            var allSkillsLabel = gs.getMessage("All {0} skills", label);
            formattedPayload.push({
                "id": id,
                "title": {
                    "label": label,
                    "tag": "h3",
                    "css": "*{margin:0.25rem 0}"
                },
                "description": {
                    "visibility": true,
                    "label": description,
                    "css": {
                        "margin": "0",
                        "font-size": "1rem",
                        "padding-bottom": "1rem",
                        "color": "rgb(var(--now-color_text--tertiary)"
                    }
                },
                "card_title": {
                    "visibility": false
                },
                "banner": {
                    "visibility": true,
                    "source": feature.image_url,
                    "imageFit": "cover"
                },
                "image": {
                    "visibility": false,
                },
                "highlightedText": {
                    "visibility": false,
                },
                "action": {
                    "variant": "secondary",
                    "label": gs.getMessage("View details"),
                    "disabled": false,
                    "icon": "",
                    "configAria": {
                        "aria-label": gs.getMessage("View details for {0}", label)
                    },
                },
                "footer": {
                    "visibility": false
                },
                "skills": {
                    "label": allSkillsLabel,
                    "visibility": skills.length &gt; 0,
                    "skillValues": skills
                },
                "noSkills": {
                    "message": gs.getMessage("Not Available"),
                    "visibility": skills.length == 0
                },
            });
        });
        return formattedPayload;
    },

    formattedSkillPayload: function(featureId) {
        var _self = this;
        var skills = [];
        var featureSkills = _self.getSkills(featureId);
        var skillDetails;
        var label;
        var colour;
        var state = '';
        featureSkills.forEach(function(skill) {
            skillDetails = _self.getSkillConfigStateDetails(skill.id);
            state = skillDetails.state;
            var res = _self.getSkillDetails(state);
            label = res['label'];
            colour = res['colour'];
            skills.push({
                "skill": {
                    "label": skill.name
                },
                "highlight": {
                    "label": label,
                    "color": colour
                }
            });
        });
        return skills;
    },

    getSkillDetails: function(state) {
        var result = {};
        var label;
        var colour;
        switch (state) {
            case "draft":
                label = gs.getMessage("Draft");
                colour = 'low';
                break;
            case "active":
                label = gs.getMessage("Active");
                colour = 'positive';
                break;
            case "inactive":
                label = gs.getMessage("Inactive");
                colour = 'warning';
                break;
            case "notconfigured":
                label = gs.getMessage("Not started");
                colour = 'low';
                break;
        }
        result['label'] = label;
        result['colour'] = colour;
        return result;
    },

    getPluginStatus: function() {
        let data = [];
        let gr = new GlideRecord('sn_nowassist_plugin');
        gr.query();
        let activeCount = 0;
        let inactiveCount = 0;
        while (gr.next()) {
            var pMgr = new GlidePluginManager();
            var isActive = pMgr.isActive(gr.getValue('plugin_id'));
            if (isActive) {

                activeCount++;

            } else {
                inactiveCount++;
            }

        }
        let active = {
            "active": gs.getMessage("Installed"),
            "value": "" + activeCount
        };
        let inactive = {
            "active": gs.getMessage("Not installed"),
            "value": "" + inactiveCount
        };
        data.push(active);
        if (inactiveCount != 0) {
            data.push(inactive);
        }

		var uninstalledMsg = inactiveCount &gt; 1 ? gs.getMessage("You have {0} plugins not installed.", inactiveCount.toString()) : gs.getMessage("You have {0} plugin not installed.", inactiveCount.toString())

        let metadata = {
            "aggregateBy": 4,

            "eventData": {
                "table": ""
            },
            "dataSourceLabel": "",
            "format": {
                "unitFormat": "{0}"
            },
            "groupBy": [{
                "elements": [{
                        "id": "",
                        "label": gs.getMessage("Installed"),
                    },
                    {
                        "id": "",
                        "label": gs.getMessage("Not installed"),
                    }

                ],
                "fieldType": "reference",
                "id": "active",
                "label": "Active",
                "series": [{
                    "id": "value",
                    "label": "",
                    "type": "value"
                }]
            }],
            "metricId": ""
        };
        let res = {
            "data": data,
            "metadata": metadata,
			"uninstallMessage":uninstalledMsg
        };
        let resArr = [res];
        return resArr;
    },

    getSkillStatus: function() {
        let data = [];
        let gr = new GlideRecord(this.SKILL_CONFIG);
        gr.query();
        let activeCount = 0;
        let inactiveCount = 0;
        let notConfiguredCount = 0;
        let draftCount = 0;
		let guidedSetupSkillConfigStatus = this._getGuidedSetupSkillConfigStatus();
		let guidedSetupStepStatus = this._getAllGuidedSetupStepStatus();
		
        while (gr.next()) {
            let isActive = gr.getValue('active');
            if (isActive == 1) {
                activeCount++;
            } else if (guidedSetupSkillConfigStatus.hasOwnProperty(gr.getValue("sys_id"))) {
				//If skill config ID is present in guidedSetupSkillConfigStatus, then the skill is already activated and deactivated.
				inactiveCount++;
			} else {
				let stepCompletedData = guidedSetupStepStatus[gr.getValue('sys_id')] || {};
                let skillVarSet = new GlideRecord(this.SKILL_CONFIG_VAR_SET);
                skillVarSet.addQuery('skill_config', gr.sys_id);
				skillVarSet.addNullQuery('parent');
                skillVarSet.query();

                let stepCompleteCount = 0;
                while (skillVarSet.next()) {
					let stepCompleted = stepCompletedData.hasOwnProperty(skillVarSet.getValue("sys_id")) ? stepCompletedData[skillVarSet.getValue("sys_id")] : (skillVarSet.getValue('step_completed') == 1);
                    if (stepCompleted) {
                        stepCompleteCount++;
                    }
                }
				
				if (stepCompleteCount == 0) {
                    notConfiguredCount++;
                } else {
                    draftCount++;
                }
            }
        }

        let active = {
            "active": gs.getMessage("Active"),
            "value": "" + activeCount
        };
        let inactive = {
            "active": gs.getMessage("Inactive"),
            "value": "" + inactiveCount
        };
        let notConfigured = {
            "active": gs.getMessage("Not started"),
            "value": "" + notConfiguredCount
        };
        let draft = {
            "active": gs.getMessage("Draft"),
            "value": "" + draftCount
        };
        data.push(notConfigured);
        data.push(draft);
        data.push(inactive);
        data.push(active);

        let metadata = {
            "eventData": {
                "table": gs.getMessage("Total Skills")
            },
            "dataSourceLabel": gs.getMessage("Total skills"),
            "groupBy": [{
                "series": [{
                    "label": gs.getMessage("Total Skills"),
                    "id": "value",
                    "type": "value"
                }],
                "elements": [

                    {
                        "id": "notstarted",
                        "label": gs.getMessage("Not started"),
                    },
                    {
                        "id": "draft",
                        "label": gs.getMessage("Draft"),
                    },
                    {
                        "id": "inactive",
                        "label": gs.getMessage("Inactive"),
                    },
                    {
                        "id": "active",
                        "label": gs.getMessage("Active"),
                    },

                ],
                "fieldType": "reference",
                "id": "active",
                "label": "Active",
            }],
            "format": {
                "unitFormat": "{0}"
            },
            "aggregateBy": 4,

            "metricId": ""
        };
        let res = {
            "data": data,
            "metadata": metadata
        };
        let resArr = [res];

        return resArr;
    },

    getSkillConfigStateDetails: function(skillConfigId) {
        let skillConfig = this._getSkillConfiguration(skillConfigId);
		let guidedSetupSkillConfigStatus = this._getGuidedSetupSkillConfigStatus(skillConfigId);
        let name = skillConfig.name;

        let skillFamilyId = skillConfig.skill_family;
        let workflowId = this._getWorkflowId(skillFamilyId);
        let skillUrl = "/now/now-assist-admin/features/" + workflowId + "/" + Date.now();
        if (this._doesWorkflowHaveProduct(workflowId)) {
            let skillFamilyRec = this._getSkillFamilyById(skillFamilyId);
            let productId = skillFamilyRec.parent;
            skillUrl += "/params/productId/" + productId;
        }
        
        let state = 'active';
        if (!skillConfig.active) {
			if(guidedSetupSkillConfigStatus.hasOwnProperty(skillConfigId)) {
				state = 'inactive';
			} else {
				let stepCompletedVarSet = skillConfig.variable_sets.filter((var_set) =&gt; var_set.step_completed);
				state = stepCompletedVarSet.length &gt; 0 ? "draft" : "notconfigured";
			}
        }

        let res = {
            "name": name,
            "state": state,
            "skillUrl": skillUrl
        };
        return res;
    },
    getNotActiveSkills: function() {
        let naSkills = new GlideRecord(this.SKILL_CONFIG);
        naSkills.addQuery('active', false);
        naSkills.query();
        let inactiveSkills = [];
        let draftSkillList = [];
        let notConfigSkillList = [];
        while (naSkills.next()) {
            var skillDetails = this.getSkillConfigStateDetails(naSkills.getValue('sys_id'));
            let skillDetName = "Get " + skillDetails.name;
            let obj = {
                "name": skillDetName,
                "skillUrl": skillDetails.skillUrl,
                "configAria": {
                    "aria-label": skillDetName
                },
            };
            let state = skillDetails.state;
            if (state == 'inactive') {
                inactiveSkills.push(obj);
            } else if (state == 'notconfigured') {
                notConfigSkillList.push(obj);
            } else {
                draftSkillList.push(obj);
            }

        }
        let count = inactiveSkills.length;
        let draftCount = draftSkillList.length;
        let notConfigCount = notConfigSkillList.length;
        let skillsInactiveMsg = gs.getMessage("Skills inactive");
        let skillsInDraftMsg = gs.getMessage("Skills in draft state");
        let skillNotConfigMsg = gs.getMessage("Skills not started");
        let inactiveSkillMsg = "" + skillsInactiveMsg + " (" + count + ")";
        let draftSkillMsg = "" + skillsInDraftMsg + " (" + draftCount + ")";
        let notConfigMsg = "" + skillNotConfigMsg + " (" + notConfigCount + ")";
        let res = {
            "skillList": inactiveSkills,
            "draftSkillList": draftSkillList,
            "notConfigSkillList": notConfigSkillList,
            "count": inactiveSkills.length,
            "draftCount": draftCount,
            "notConfigCount": notConfigCount,
            "skillsMsg": inactiveSkillMsg,
            "draftSkillMsg": draftSkillMsg,
            "notConfigMsg": notConfigMsg

        };
        return res;
    },

    /* This will return delivry mode of specific skill config in string format which is shown in active skills list delivery column */
    _getDeliveryForSkillConfig: function(inProductActive, napSkillAppId) {
        var deliveryMode = "";
        if (inProductActive.toString() == "true") {
            deliveryMode = this.IN_PRODUCT;
        }
        if (!gs.nil(napSkillAppId)) {
            var applicabilityStatus = this._getNowAssistPanelActiveStatus(napSkillAppId);
            if (applicabilityStatus.toString() == "true") {
                if (!gs.nil(deliveryMode)) {
                    deliveryMode = deliveryMode + ", " + this.NAP;
                } else {
                    deliveryMode = this.NAP;
                }
            }
        }
        return deliveryMode;
    },


    /* returns active skills presentation data*/
    getActiveSkillsPresentationListData: function(featureSysId) {
        var workflowId = this._getWorkflowId(featureSysId);
        var columnsData = {
            "columns": [{
                    "key": "name",
                    "type": 'link',
                    "label": gs.getMessage("Skill Name")
                },
				{
                    "key": "provider",
                    "type": "string",
                    "label": gs.getMessage("LLM service")
                },
                {
                    "key": "status",
                    "type": "custom",
                    "componentTag": "now-highlighted-value",
                    "label": gs.getMessage("Status")
                },
                {
                    "key": "lastModified",
                    "type": "string",
                    "label": gs.getMessage("Last Modified")
                }
            ]
        };
        if (workflowId != this.CREATOR_WORKFLOW_ID &amp;&amp; workflowId != this.PLATFORM_WORKFLOW_ID)
            columnsData.columns.splice(1, 0, {
                "key": "delivery",
                "type": "string",
                "label": gs.getMessage("Delivery")
            });
        var rowsData = {
            "selectionEnabled": false,
            "actions": {
                "position": "end",
                "numActionIcons": 0,
                "actionsItems": [{
                        "id": "edit",
                        "icon": "",
                        "label": gs.getMessage("Edit"),
                        "action": "EDIT_ACTION"
                    },
                    {
                        "id": "deactivate",
                        "icon": "",
                        "label": gs.getMessage("Deactivate skill"),
                        "action": "DEACTIVATE_ACTION"
                    }
                ]
            },
            "rows": []
        };
        var activeSkills = this._getSkillConfig(featureSysId, true);
        for (var index = 0; index &lt; activeSkills.length; index++) {
            var skill = activeSkills[index];

            var excludedActions = [];
            if (skill.has_var_set.toString() == "false") {
                excludedActions.push("edit");
            }
            rowsData.rows.push({
                "key": skill.id,
                "excludedActions": excludedActions,
                "cells": {
                    "name": {
                        "value": skill.name,
						"label": skill.name,
                        "id": skill.id,
                        "nap": skill.nap_skill_applicability,
                        "has_var_set": skill.has_var_set
                    },
                    "delivery": {
                        "value": skill.delivery,
                    },
					"provider": {
						"value": skill.skill_family == this.SEARCH_SKILL_FAMILY_ID ?  "Now LLM" : this.getProviderForSkillConfig(skill.id).skillConfigLlmNames
					},
                    "status": {
                        "componentProps": {
                            "color": "positive",
                            "label": this.SKILL_ACTIVATED,
                            "variant": "tertiary",
                            "icon": "circle-fill"
                        }
                    },
                    "lastModified": {
                        "value": skill.sys_updated_on,
                    },
                }
            });
        }

        return {
            "columnsData": columnsData,
            "rowsData": rowsData
        };
    },

    _getWorkflowId: function(skillFamilyId) {
        if (gs.nil(skillFamilyId)) {
            return null;
        }
        var workflowId = "";
        var skillFamilyGr = new GlideRecord(this.SKILL_FAMILY);
        skillFamilyGr.get(skillFamilyId);
        if (skillFamilyGr.getValue("type") == "workflow") {
            return skillFamilyId;
        } else {
            workflowId = this._getWorkflowId(skillFamilyGr.getValue('parent'));
        }
        return workflowId;
    },

    getWorkflowNameByProductId: function(productId) {
        var names = {};
        let gr = new GlideRecord('sn_nowassist_skill_family');
        if (gr.get(productId + '')) {
            if (!gs.nil(gr.parent)) {
                names['productName'] = gr.getValue('name');
                names['workFlowName'] = gr.parent.name;
                names['id'] = gr.getValue('parent');
            } else {
                // Workflow does not have a product.
                names['productName'] = gr.getValue('name');
                names['workFlowName'] = gr.getValue('name');
                names['id'] = gr.getValue('sys_id');
            }
            return names;
        }
    },

    getHelpfulResourceForPanels: function() {
        return this.CONSTANTS.PANEL_HELPFUL_RESOURCES;
    },
    getFAQsforPanels: function() {
        return this.CONSTANTS.PANEL_FAQS;
    },

    disableTurnOnNAP: function() {
        let disableNAP = true;
        if (GlidePluginManager.isActive('com.glide.cs.genai')) {
            disableNAP = false;
        }
        return disableNAP;
    },
    getResourcesOrFAQsForFeatures: function(featureId, type) {
        var result = [];
        var responseObject;
        var gr = new GlideRecord('sn_nowassist_help');
        gr.addQuery('skill_family', featureId);
        gr.addQuery('type', type);
        gr.query();

        while (gr.next()) {
            responseObject = {};
            if (type == 'link') {
                responseObject['label'] = gr.getDisplayValue('title');
                responseObject['link'] = gr.getValue('link');
                responseObject['iconStart'] = "document-outline";
                responseObject['iconEnd'] = "open-link-outline";
                responseObject['configAria'] = {
                    "aria-label": gr.getDisplayValue('title')
                };
            } else {
                responseObject['question'] = gr.getDisplayValue('title');
                responseObject['answer'] = gr.getDisplayValue('content');
            }
            result.push(responseObject);
        }
        return result;
    },


     lastSyncUpTime: function() {
        var months = ["", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        var gr = new GlideRecord("pa_job_logs");
        gr.addQuery("job", "26bbee3177fc3110dfe21f130e5a9942");
        gr.orderByDesc("sys_created_on");
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            var completionTime = new GlideDateTime(gr.completed);
            var month = months[completionTime.getMonthLocalTime()];
            var day = completionTime.getDayOfMonthLocalTime();
            var time = completionTime.getUserFormattedLocalTime();
            var year = completionTime.getYearLocalTime();
            return time +", " + day + " " + month + ", " + year
        }
        return "N/A";
    },

    getDashboardId: function() {
        return 'f314698c85d1b110f877fed241d88577';
    },

    /**
     * returns the feature page url for the given plugin id
     */
    getFeaturePageUrl: function(pluginId) {
        var pluginsGr = new GlideRecord(this.PLUGIN);
        pluginsGr.addQuery("plugin_id", pluginId);
        pluginsGr.query();
        var pluginSkillFamilyId;
        while (pluginsGr.next()) {
            pluginSkillFamilyId = pluginsGr.getValue("skill_family");
        }
        var workflowId = this._getWorkflowId(pluginSkillFamilyId);
        return "now/now-assist-admin/features/" + workflowId + "/" + Date.now() + "/params/productId/" + pluginSkillFamilyId;
    },

    getGAICInstalledVersion: function() {
        var gr = new GlideRecord(this.PLUGIN_TABLE);
        if (gr.get("7cc4ec81533121106b38ddeeff7b12ee")) {
            var version = gr.getValue('version') + "";
            var translatesMessage = gs.getMessage("Version");
            return translatesMessage + " " + version;
        }
        return false;
    },

    getSkillFamilyName: function(id) {
        var skillFamilyData = this._getSkillFamilyById(id);
        return skillFamilyData.name;
    },

    getProviderFromCapability: function(capabilityId) {
        var oneExtendDefinitionConfigGr = new GlideRecord(this.ONE_EXTEND_DEFINITION_CONFIG);
        oneExtendDefinitionConfigGr.addQuery("capability", capabilityId);
        oneExtendDefinitionConfigGr.addQuery("default", "true");
        oneExtendDefinitionConfigGr.query();
        if (oneExtendDefinitionConfigGr.next()) {
            var definitionApi = oneExtendDefinitionConfigGr.definition.api;
            if (!gs.nil(definitionApi)) {
                var genAiProviderMappingGr = new GlideRecord(this.GEN_AI_PROVIDER_MAPPING);
                genAiProviderMappingGr.addQuery("provider_implementation", definitionApi);
                genAiProviderMappingGr.query();
                if (genAiProviderMappingGr.next()) {
                    return genAiProviderMappingGr.getValue("provider");
                }
            }
        }
        return "";
    },

	getProviderForSkillConfig: function(skillConfigId){
		var skillConfigLlms = new Set();
		var skillConfigLlmNames = "";
		var skillConfigM2M = new GlideRecord(this.CONFIG_SKILL_M2M);
        skillConfigM2M.addQuery('skill_config', skillConfigId);
        skillConfigM2M.query();

		if(skillConfigM2M.getRowCount() &gt; 0){
			while(skillConfigM2M.next()){
				var skillConfigLlm = this.getProviderFromCapability(skillConfigM2M.getValue('skill_id'));
				if(!gs.nil(skillConfigLlm)){
					skillConfigLlms.add(skillConfigLlm.toString());
				}
			}
			skillConfigLlmNames = this.generateLlmNamesAndTooltips(skillConfigLlms).llmNames;
		}
		else{
			var skillConfigGr = new GlideRecord(this.SKILL_CONFIG);
			skillConfigGr.get(skillConfigId);

			if(!gs.nil(skillConfigGr.getValue('skill_id'))){
				var singleSkillConfigLlm = this.getProviderFromCapability(skillConfigGr.getValue('skill_id'));
				if(!gs.nil(singleSkillConfigLlm))
					skillConfigLlms.add(singleSkillConfigLlm.toString());
				skillConfigLlmNames = this.generateLlmNamesAndTooltips(skillConfigLlms).llmNames;
			}
		}
		return {
			skillConfigLlmNames :  skillConfigLlmNames,
			skillConfigLlmSet : skillConfigLlms
		};
	},

    getProvidersForFeature: function(featureId) {
        if (!gs.nil(featureId)) {
            var llms = new Set();

			switch(featureId){
				case "nap": //place holder
					llms.add("Now LLM", looltips.get("Now LLM"));
					var napLlm = this.getProviderFromCapability(this.NAP_CAPABILITY);
					if(!gs.nil(napLlm)){
						llms.add(napLlm.toString());
					}
					var napLlmData = this.generateLlmNamesAndTooltips(llms);
					return {
						llm: napLlmData.llmNames,
						llmTooltip: napLlmData.tooltips, // for now static
						llmAriaConfig: { "aria-label": napLlmData.tooltips} // for now static
					};
				case this.SEARCH_SKILL_FAMILY_ID:
					return {
						llm: "Now LLM",
						llmTooltip: this.nowLlmTooltip,
						llmAriaConfig: { "aria-label": this.nowLlmTooltip}
					};
				default:
					var skillConfigGr = new GlideRecord(this.SKILL_CONFIG);
					skillConfigGr.addQuery("skill_family",featureId);
					skillConfigGr.query();
					while(skillConfigGr.next()){
						var llmSet = this.getProviderForSkillConfig(skillConfigGr.getUniqueValue()).skillConfigLlmSet;
						if(llmSet.size &gt; 0){
							for (var name of llmSet.keys()) {
								llms.add(name);
							}
						}
					}
					var llmData = this.generateLlmNamesAndTooltips(llms);

                    return {
                        llm: llmData.llmNames,
                            llmTooltip: llmData.tooltips,
                            llmAriaConfig: {
                                "aria-label": llmData.tooltips
                            }
                    };
            }
        }
        return {
            llm: "",
            llmTooltip: "",
            llmAriaConfig: {
                "aria-label": ""
            }
        };

    },

    generateLlmNamesAndTooltips: function(llmSet) {
        var llmNames = "";
        var tooltips = "";
        var count = 0;
        for (var name of llmSet.keys()) {
            llmNames += name;
            tooltips += name == "Now LLM" ? this.nowLlmTooltip : name + this.llmTooltipSuffix;
            count++;
            if (count != llmSet.size) {
                llmNames += ", ";
                tooltips += ", ";
            }
        }

        return {
            llmNames: llmNames,
            tooltips: tooltips
        };
    },

	/**
	 * Fetches plugin data for home page 
	 */
	getWorkflowPluginDataForHomePage: function(){
		var allAvailablePluginsList = this._getPlugins();
        var unInstalledPluginsList = [];
        var installedPluginsList = [];
        let needsAttentionPluginList = [];
       
        allAvailablePluginsList.forEach((p) =&gt; (GlidePluginManager.isActive(p.plugin_id) ? installedPluginsList : unInstalledPluginsList).push(p));

        for (let i = 0; i &lt; unInstalledPluginsList.length; i++) {
            let baseUrl = 'now/now-assist-admin/plugins/params/workflow/';
            let pluginSkillFamilyId = unInstalledPluginsList[i].skill_family;
            let pluginFamilyRec = this._getSkillFamilyById(pluginSkillFamilyId);
            let pluginSKillFamilyParent = pluginFamilyRec.parent;
            let pluginUrl = baseUrl + this._getWorkflowId(pluginSkillFamilyId);
            let name = unInstalledPluginsList[i].name;
            let accordionName = gs.getMessage("Get {0}", name);
            let obj = {
                "name": accordionName,
                "pluginId": unInstalledPluginsList[i].plugin_id,
                "pluginUrl": pluginUrl,
                "configAria": { "aria-label": accordionName },
            };
            needsAttentionPluginList.push(obj);
        }

        let pluginNotIntsalledMsg = gs.getMessage("Plugins not installed");
        var accordionMessage = "" + pluginNotIntsalledMsg + " (" + unInstalledPluginsList.length + ")";


		return  {
			"installedPluginsList": installedPluginsList,
            "needsAttentionPluginList": needsAttentionPluginList,
            "accordionMessage": accordionMessage
		};
	},

	/**
	 * Return the available plugins in the format required for UI
	 *  */ 
	getFormattedAvailablePlugins: function(filter = ""){
		var pList = this.getPlugins(filter);
		//create the required object to display the card in the UI
		var targetAvailablePluginsList = pList.map(p =&gt; ({
			"id": p.id,
			"pluginId": p.plugin_id,
			"name": p.name,
			"icon_url": p.icon_url,
			"title": {
				"label": p.label,
				"tag": "h3",
				"css": "*{margin:0.25rem 0}"
			},
			"description": {
				"label": p.description,
				"visibility": true,
				"css": {"margin":"0","font-size":"0.75rem", "padding-bottom":"1rem","color":"rgb(var(--now-color_text--primary)"}
			},
			"banner": {
				"visibility": false
			},
			"image": {
				"visibility": true,
				"source": p.icon_url
			},
			"highlightedText": {
				"visibility": false
			},
			"action": {
				"variant": "tertiary",
				"label": gs.getMessage("Get plugins"),
				"disabled": false,
				"icon": "open-link-right-fill",
				"configAria": { "aria-label": gs.getMessage("Get plugins for {0}", p.label) },
			},
			"card_title": {
				"visibility": false
			},
			"footer": {
				"visibility": false
			},
			"skills": {
				"visibility": false
			},
			"noSkills": {
				"visibility": false
			}
		}));
		return targetAvailablePluginsList;
	},

	getFormatedInstalledPlugins: function(){
		var pList = this.getInstalledPlugins();
		//format the data
		var targetInstalledPluginsList = pList.map(p =&gt; ({
			"key": p.plugin_id,
			"cells": {
				"status": {
					"componentProps": {
						"label": gs.getMessage("Installed"),
						"color": "positive",
						"variant": "tertiary",
						"showIcon": true
					}
				},
				"pluginName": {
					"value": p.label
				}
			}
		}));
		return targetInstalledPluginsList;
	},

	isNowassistVAPluginInstalled: function(){
		return GlidePluginManager.isActive('sn_nowassist_va');
	},

	_isObjectEmpty: function(obj) {
		return Object.keys(obj).length === 0;
	},
	
    type: 'NowAdminAssistUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-08-03 09:22:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;59243fe7439c31101cb092621ab8f23b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;385&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NowAdminAssistUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Now Assist Admin Console" source="sn_nowassist_admin"&gt;7c395aaa53003110453cddeeff7b123c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Now Assist Admin Console"&gt;7c395aaa53003110453cddeeff7b123c&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_59243fe7439c31101cb092621ab8f23b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-28 13:30:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:24</sys_created_on>
        <sys_id>8ab6b01d83f01210c6695855eeaad3e7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NowAdminAssistUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8ab6b01d83f01210c6695855eeaad3e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:24</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
