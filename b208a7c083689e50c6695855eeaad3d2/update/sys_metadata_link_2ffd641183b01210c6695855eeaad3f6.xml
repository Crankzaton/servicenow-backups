<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2f7278e99f1002001526317f842e708f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;false&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;license_details&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;true&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Populate scratchpads for subscription&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[function onDisplay(current, g_scratchpad) {
   //This function will be automatically called when this rule is processed.
	g_scratchpad.subscriptionWikiLink = gs.getProperty('help.base.servicenow')+ 'CSHelp:Subscription-Usage-Application';
	g_scratchpad.subscriptionWikiTitle = gs.getMessage('More Info');
	g_scratchpad.perUserDispOnlySubMsg = gs.getMessage('This subscription does not require detailed monitoring. No action is required on your part.');
	g_scratchpad.perUserSubMsg = gs.getMessage('Your organization purchased a subscription for the number of users who should be allowed to access subscription applications and capabilities. As the usage administrator, you are required to allocate eligible users to the subscription.');
	g_scratchpad.capacitySubMsg = gs.getMessage('Your ServiceNow instance auto-allocates software or hardware resources to this subscription. No action is required on your part.');
	g_scratchpad.maxUserSubMsg = gs.getMessage('Unrestricted-user licenses are auto-allocated based on the number of active users. For more details, &lt;a id="permalink" class="linked" style="color:#666666;" href="/api/now/v1/context_doc_url/types_of_subscriptions" target="_blank"&gt;view our documentation.&lt;/a&gt;');
	g_scratchpad.unlimitedUserSubMsg = gs.getMessage('All active users with a valid User ID can use this subscription. No action is required on your part.');
	g_scratchpad.paIndicatorSubMsg = gs.getMessage('Performance Analytics Indicators may be created on any tables on the applications associated with this subscription. No action is required on your part.');
	g_scratchpad.viewSubscriptionHistory = gs.getMessage('Subscription History');
	g_scratchpad.viewUserSubscriptionHistory = gs.getMessage('User Subscription History');
	g_scratchpad.hasMultipleLineItems = hasMultipleLineItems();
	g_scratchpad.hasEntitlements = hasEntitlements();
	g_scratchpad.hasApplications = hasApplications();
	g_scratchpad.hasFamilies = hasFamilies();
	g_scratchpad.invalidAllocatedMsg = gs.getMessage('Allocated: Unable to determine the number of allocated resources or users.');

	var utils = new SNSubscriptionUtils();
	var allotmentType = hasPlatformLicAllotment();
	g_scratchpad.hasPlatformLicAllotment = allotmentType;

	g_scratchpad.hasITOMRatios = hasLicenseMetadata('itom_su_ratio');
	g_scratchpad.hasIHSpokes = hasLicenseMetadata('ih_spoke');
	g_scratchpad.hasIHSpokeActions = hasLicenseMetadata('sku_ih_spoke_action');
	g_scratchpad.hasIHSpokeCallerScopes = hasLicenseMetadata("ih_spoke_caller_scope");
	g_scratchpad.hasIHProtocols = hasLicenseMetadata('ih_protocol');
	g_scratchpad.hasIHFeatures = hasLicenseMetadata('ih_feature');
	g_scratchpad.hasLicPool = hasLicenseMetadata('license_pool');
	g_scratchpad.hasGenAIFeature = hasLicenseMetadata('genai_product_metadata');
	
	g_scratchpad.entitlementLevel = SNC.UsageAnalyticsScriptUtils.getEntitlementLevel();
	g_scratchpad.autoSystemEntitlementEnabled = SNC.UsageAnalyticsScriptUtils.isAutoSystemEntitlementEnabled();

	var isIhType = SNC.UsageAnalyticsScriptUtils.isLicenseIHType(current.license_id);
	if (isIhType) {
		if(g_scratchpad.hasLicPool == true) {
			var contributed = utils._getUsageAnalyticsCount(current, utils.LIC_CCU, "count");
			if(contributed &gt; 0)
				g_scratchpad.rollingUsage = "Contributed: " + contributed;
		} else {
			var borrowed = utils._getUsageAnalyticsCount(current, utils.LIC_BCU, "count");
			if(borrowed &gt; 0)
				g_scratchpad.rollingUsage = "Used: " + current.count + " Borrowed: " + borrowed;
		}
	}

	if (allotmentType == utils.PLAT_BUNDLE_ALLOT_TYPE)
		gs.addInfoMessage(gs.getMessage('Custom tables associated to this subscription are managed through the "Manage Your Tables" link.'));
	else if (allotmentType == utils.GRANDFATHER_ALLOT_TYPE)
		gs.addInfoMessage(gs.getMessage('Please note: Once added, tables cannot be removed from this subscription'));
	else if (allotmentType == utils.PLAT_ONLY_ALLOT_TYPE) {
		var tc = SNC.UsageAnalyticsScriptUtils.getTableCount(allotmentType, current.getUniqueValue());

		if (tc &gt; 0) {
			var params = [current.count, tc];
			gs.addInfoMessage(gs.getMessage('{0} users may access up to {1} custom tables from given Custom Tables list', params));
		}
	}
}

function hasApplications() {
	var hasApps = false;
	var licAppGR = new GlideRecord('license_has_app');
	if (licAppGR.isValid()) {
		licAppGR.addQuery('license', current.getUniqueValue());
		licAppGR.query();
		hasApps = licAppGR.getRowCount() &gt; 0;
	}
	return hasApps;
}

function hasFamilies() {
	var hasFams = false;
	var licFamGR = new GlideRecord('license_has_family');
	if (licFamGR.isValid()) {
		licFamGR.addQuery('license', current.getUniqueValue());
		licFamGR.query();
		hasFams = licFamGR.getRowCount() &gt; 0;
	}
	return hasFams;
}

function hasMultipleLineItems() {
	var hasMultItems = false;
	var lineItemGR = new GlideRecord('license_details_item');
	if (lineItemGR.isValid()) {
		lineItemGR.addQuery('license_details', current.getUniqueValue());
		lineItemGR.query();
		hasMultItems = lineItemGR.getRowCount() &gt; 1;
	}
	return hasMultItems;
}

function hasEntitlements() {
	var gr = new GlideRecord('license_has_entitlement');
	if (gr.isValid()) {
		gr.addQuery('license', current.getUniqueValue());
		gr.query();
		if ( gr.getRowCount() &gt; 0)
			return true;
	}
	return false;
}

function hasPlatformLicAllotment() {
	var utils = new SNSubscriptionUtils();

	var allotGR = new GlideRecord(utils.LICENSE_CUST_ALLOTMENT_TBL);
	allotGR.addQuery(utils.SUBSCRIPTION, current.getUniqueValue());
	allotGR.query();

	if (allotGR.next())
		return allotGR.getValue(utils.ALLOTMENT_TYPE);

	return "-1";
}

function hasLicenseMetadata(metadataType) {
	var gr = new GlideRecord('license_metadata');
	if (gr.isValid()) {
		gr.addQuery('license', current.getUniqueValue());
		gr.addQuery('type_id', metadataType);
		gr.query();
		if ( gr.getRowCount() &gt; 0)
			return true;
	}
	return false;
}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-05-27 23:16:52&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;2f7278e99f1002001526317f842e708f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;51&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Populate scratchpads for subscription&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Subscription Administration Base" source="com.snc.usage_admin.base"&gt;f56830a03cf1311068bcf327dfe37f31&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_2f7278e99f1002001526317f842e708f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-27 22:56:44&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before_display&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=2f7278e99f1002001526317f842e708f"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:59:16</sys_created_on>
        <sys_id>2ffd641183b01210c6695855eeaad3f6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Populate scratchpads for subscription</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2ffd641183b01210c6695855eeaad3f6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:59:16</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
