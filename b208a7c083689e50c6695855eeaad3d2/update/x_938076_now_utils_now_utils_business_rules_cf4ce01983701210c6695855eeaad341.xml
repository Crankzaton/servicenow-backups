<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Workflow Item Variables</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
 * Return the list of available variables for a Workflow Catalog Task activity
 * 
 * The list of variables consists of all unique names of variables for each item that
 * is using the current workflow.  If no items currently have the workflow assigned,
 * then all available variable names are shown
 *
 * Note: the list of names are returned as a choice list in 'answer'
 */
function wf_variables() {
    var catItems = {};
    var variables = {};
    var items = new GlideRecord('sc_cat_item');
    items.addQuery('workflow', current.workflow_version.workflow);
    items.query();
    if (!items.hasNext()) {
        //no items have workflows, default to all variables
        addDefaultVariables(variables);
    } else {
        while (items.next()) {
            catItems[items.sys_id.toString()] = items.sys_id.toString();
        }
        addVariableSets(catItems, variables);
    }
    addWFVariables(variables); //explicitly add variables from workflow
    for (var variable in variables) {
        answer.add(variable, variables[variable]);
    }
}
//Collect all the Variable Sets associated with Scervice Catalogs
function addVariableSets(catItems, variables) {
    var variableSets = {};
    for (var catItem in catItems) {
        var sets = new GlideRecord('io_set_item');
        sets.addQuery('sc_cat_item', catItems[catItem]);
        sets.addNotNullQuery('variable_set');
        sets.groupBy('variable_set');
        sets.query();
        while (sets.next()) {
            if (sets.variable_set.type.toString() == 'one_to_one')
                variableSets[sets.variable_set.toString()] = sets.variable_set.toString();
            else
                variables[sets.variable_set.internal_name.toString()] = sets.variable_set.internal_name.toString();
        }
    }
    addVariables(catItems, variableSets, variables);
}
//Add variables for service Catalogs and Variable Sets
function addVariables(catItems, variableSets, variables) {
    var scCatItemIds = [];
    for (var catItem in catItems) {
        scCatItemIds.push(catItems[catItem]);
    }
    var scCatItemIdsList = scCatItemIds.join();
    var variableSetIds = [];
    for (var variableSet in variableSets) {
        variableSetIds.push(variableSets[variableSet]);
    }
    var variableSetIdsList = variableSetIds.join();
    var itemVars = new GlideRecord('item_option_new');
    var or = itemVars.addQuery('cat_item', 'IN', scCatItemIdsList);
    or.addOrCondition('variable_set', 'IN', variableSetIdsList);
    itemVars.addNotNullQuery('name');
    itemVars.query();
    while (itemVars.next()) {
        variables[itemVars.name.toString()] = itemVars.name.toString();
    }
}
//no items have workflows, default to all variables
function addDefaultVariables(variables) {
    var itemVars = new GlideRecord('item_option_new');
    itemVars.addNotNullQuery('name');
    var or = itemVars.addNullQuery('variable_set');
    or.addOrCondition('variable_set.type', 'one_to_one');
    itemVars.query();
    while (itemVars.next()) {
        if (itemVars.name != '') {
            variables[itemVars.name.toString()] = itemVars.name.toString();
        }
    }
    var setVars = new GlideRecord('item_option_new_set');
    setVars.addNotNullQuery('internal_name');
    setVars.query();
    while (setVars.next()) {
        if (setVars.internal_name != '') {
            variables[setVars.internal_name.toString()] = setVars.internal_name.toString();
        }
    }
}
//explicitly add variables from workflow
function addWFVariables(variables) {
    var wfVars = new GlideRecord('wf_variable');
    wfVars.addQuery('workflow', current.workflow_version);
    wfVars.query();
    while (wfVars.next()) {
        if (wfVars.name != '')
            variables['wf.' + wfVars.name.toString()] = gs.getMessage('Workflow') + ': ' + wfVars.name.toString();
    }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:52</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cf4ce01983701210c6695855eeaad341</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Workflow Item Variables</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_cf4ce01983701210c6695855eeaad341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:52</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=cf4ce01983701210c6695855eeaad341"/>
</record_update>
