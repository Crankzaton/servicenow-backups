<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>54e94d4253901010d69cddeeff7b127d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Migrate the existing Mobile Analytics Settings to the new generic Analytic Infrastructure&lt;/description&gt;
        &lt;name&gt;Mobile Analytics Settings Migration&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[migrateMobileAnalyticsSettings();

function migrateMobileAnalyticsSettings() {
	var channelGr = new GlideRecord('sys_analytics_channel');
	channelGr.addQuery('name', 'mobile');
	channelGr.query();
	channelGr.next();
	if (!channelGr.isValidRecord()) {
		gs.error('Error during Mobile Analytics setting migration, could not find \'mobile\' Analytics Channel');
		return;
	}
	
	//Get rid of all Video Settings
    deleteAllRecordsFromTable('sys_mobile_analytics_video_settings');

    // Move all existing entries to the new tables
    var mobileSettingsGR = new GlideRecord("sys_mobile_analytics_settings");
    mobileSettingsGR.setWorkflow(false);
	mobileSettingsGR.query();
    while (mobileSettingsGR.next()) {
        migrateMobileSetting(mobileSettingsGR, channelGr.getUniqueValue());
    }
}

function migrateMobileSetting(mobileSettingGR, channelSysId) {	
	var apiAuth = mobileSettingGR.getValue('api_auth');
	var apiKey = mobileSettingGR.getValue('api_key');
	var nativeClientId = mobileSettingGR.getValue('application');
	var enabled = mobileSettingGR.getValue('enabled');
	
	//Is our ApiKey valid?
	if (apiKey != (gs.getProperty('instance_id') + ':' + nativeClientId)) {
		gs.error('Error during Mobile Analytics setting migration, apiKey: ' + apiKey + ', is invalid for Native Client: ' + nativeClientId);
		return;
	}
	
	//Is our ApiAuth valid?
	if (!apiAuth) {
		gs.error('Error during Mobile Analytics setting migration, apiAuth is empty for Native Client: ' + nativeClientId);
		return;
	}
	
	//Does our native client reference exist?
	var nativeClientGR = new GlideRecord('sys_sg_native_client');
	nativeClientGR.get(nativeClientId);
	if (!nativeClientGR.isValidRecord()) {
		gs.error('Error during Mobile Analytics setting migration, invalid Native Client reference');
		return;
	}

	var bucketSysId = createBucketEntry(nativeClientGR, enabled, channelSysId);
	if (bucketSysId) {
		createAuthEntry(nativeClientId, bucketSysId, apiAuth);
		//Finally delete the entry if at least the bucket was created
		mobileSettingGR.deleteRecord();
	}
}

function createBucketEntry(nativeClientGr, enabled, channelId) {
	var gr = new GlideRecord('sys_analytics_bucket');
	gr.setWorkflow(false);
	gr.setValue('application_name', nativeClientGr.getValue('name'));
	gr.setValue('enabled', enabled);
	gr.setValue('analytics_channel', channelId);
	gr.setValue('bucket_document_id', nativeClientGr.getUniqueValue());
	gr.setValue('bucket_table_name', 'sys_sg_native_client');
	gr.setValue('bucket_type', 'mobile_' + nativeClientGr.getValue('type'));
	var bucketSysId = gr.insert();
	if (!bucketSysId) {
		gs.error('Error during Mobile Analytics setting migration, unable to create Analytics Bucket Entry for Native Client: ' + nativeClientGr.getUniqueValue() + ', error was: ' + gr.getLastErrorMessage());
	}
	return bucketSysId;
}

function createAuthEntry(nativeClientId, bucketId, apiAuth) {
	var gr = new GlideRecord('sys_analytics_authentication');
	gr.setWorkflow(false);
	gr.setValue('analytics_bucket', bucketId);
	gr.setValue('api_auth', apiAuth);
	if (!gr.insert()) {
		gs.error('Error during Mobile Analytics setting migration, unable to create Analytics Authentication Entry for Native Client: ' + nativeClientId + ', error was: ' + gr.getLastErrorMessage());
	}
}

function deleteAllRecordsFromTable(tableName) {
    var gr = new GlideRecord(tableName);
    gr.setWorkflow(false);
    gr.query();
    gr.deleteMultiple();
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-04-22 03:59:03&lt;/sys_created_on&gt;
        &lt;sys_id&gt;54e94d4253901010d69cddeeff7b127d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Mobile Analytics Settings Migration&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile Analytics" source="com.glide.mobile.analytics"&gt;e844f4a83c31311068bcf327dfe37f2b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_54e94d4253901010d69cddeeff7b127d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-04-23 00:55:44&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:21:05</sys_created_on>
        <sys_id>cbf2b09d83b01210c6695855eeaad31d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Mobile Analytics Settings Migration</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_cbf2b09d83b01210c6695855eeaad31d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:21:05</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
