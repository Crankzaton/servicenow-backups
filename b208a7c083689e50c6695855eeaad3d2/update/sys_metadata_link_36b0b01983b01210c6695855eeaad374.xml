<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1b0a587443e52110a7da21e1c9b8f21d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_install_base.InstallBaseFilterSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;InstallBaseFilterSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InstallBaseFilterSNC = Class.create();
InstallBaseFilterSNC.prototype = {
    initialize: function() {},

    isHouseholdPluginActive: function() {
        return GlidePluginManager.isActive(global.CSMBaseConstants.HOUSEHOLD_PLUGIN);
    },

    isServiceOrganizationPluginActive: function() {
        return GlidePluginManager.isActive(global.CSMBaseConstants.SERVICE_ORGANIZATION_PLUGIN);
    },

    isB2B2CPluginActive: function() {
        return GlidePluginManager.isActive(global.CSMBaseConstants.B2B2C_PLUGIN);
    },

    /*
	This method returns an encoded query for install base items considering the primary fields 
	(i.e. contact,account,consumer,household,service organization) and the related 
	parties (i.e. Authorised Contact, Authorised Consumer).
	*/

    getRefQualifierForIBonCase: function(inputVars) {
        var ibSysIDs = [];
        var q1 = this.getIBsFromPrimaryFields(inputVars);
        var q2 = this.getIBsFromRelatedParties(inputVars);

        if (gs.nil(q1) &amp;&amp; gs.nil(q2))
            return '';

        if (!gs.nil(q1) &amp;&amp; q1 != '') {
            var ibsWithGivenUserAsOwner = new GlideRecord(global.CSMBaseConstants.INSTALL_BASE_ITEM);
            ibsWithGivenUserAsOwner.addEncodedQuery(q1);
            ibsWithGivenUserAsOwner.query();
            while (ibsWithGivenUserAsOwner.next()) {
                ibSysIDs.push(ibsWithGivenUserAsOwner.getUniqueValue());
            }
        }

        if (!gs.nil(q2) &amp;&amp; q2 != '') {
            var ibsWithGivenUserAsRelatedParty = new GlideRecord(global.CSMBaseConstants.INSTALL_BASE_ITEM);
            ibsWithGivenUserAsRelatedParty.addEncodedQuery(q2);
            ibsWithGivenUserAsRelatedParty.query();
            while (ibsWithGivenUserAsRelatedParty.next()) {
                ibSysIDs.push(ibsWithGivenUserAsRelatedParty.getUniqueValue());
            }
        }

        var encodedQuery = 'sys_id' + 'IN' + ibSysIDs.join(',');
        return encodedQuery;
    },

    getIBsFromPrimaryFields: function(inputVars) {
        var encodedQuery = '';
        if (inputVars[global.CSMBaseConstants.ACCOUNT_TABLE]) {
            encodedQuery += 'account=' + inputVars[global.CSMBaseConstants.ACCOUNT_TABLE];
            var isAccessRestricted = new global.Account().isRestrictedAccessAccount(inputVars[global.CSMBaseConstants.ACCOUNT_TABLE]);
            if (inputVars[global.CSMBaseConstants.CONTACT_TABLE]) {
                var contactHasCustomerAdminRole = new global.CSHelper().userHasRole(inputVars[global.CSMBaseConstants.CONTACT_TABLE], "sn_customerservice.customer_admin");
                if (isAccessRestricted &amp;&amp; !contactHasCustomerAdminRole) {
                    encodedQuery += '^contact=' + inputVars[global.CSMBaseConstants.CONTACT_TABLE];
                }
            }
            if (inputVars[global.CSMBaseConstants.CONSUMER_TABLE] &amp;&amp; this.isB2B2CPluginActive())
                encodedQuery += '^consumer=' + inputVars[global.CSMBaseConstants.CONSUMER_TABLE];
        } else if (inputVars[global.CSMBaseConstants.CONSUMER_TABLE] || inputVars[global.CSMBaseConstants.HOUSEHOLD]) {
            if (inputVars[global.CSMBaseConstants.CONSUMER_TABLE]) {
                qr = 'consumer=' + inputVars[global.CSMBaseConstants.CONSUMER_TABLE];
                if (this.isHouseholdPluginActive()) {
                    var householdIds = new sn_csm_household.HouseHoldUtils().getHouseholdsUnderConsumer(inputVars[global.CSMBaseConstants.CONSUMER_TABLE]);
                    if (householdIds.length &gt; 0)
                        qr += '^OR' + 'household' + 'IN' + householdIds.join(',');
                }
                encodedQuery += qr;
            }
            if (this.isHouseholdPluginActive() &amp;&amp; inputVars[global.CSMBaseConstants.HOUSEHOLD]) {
                if (encodedQuery == '')
                    encodedQuery += 'household=' + inputVars[global.CSMBaseConstants.HOUSEHOLD];
                else
                    encodedQuery += '^household=' + inputVars[global.CSMBaseConstants.HOUSEHOLD];
            }
        } else if (this.isServiceOrganizationPluginActive() &amp;&amp; inputVars[global.CSMBaseConstants.SERVICE_ORGANIZATION_TABLE]) {
            encodedQuery += 'service_organization=' + inputVars[global.CSMBaseConstants.SERVICE_ORGANIZATION_TABLE];
        }

        return encodedQuery;
    },

    getIBsFromRelatedParties: function(inputVars) {
        var encodedQuery = '';
        var relatedPartyTable = global.CSMBaseConstants.INSTALL_BASE_RELATED_PARTY;
        var field = 'install_base_item';
        var params = {
            'responsibility': null,
            'access': 'FULL'
        };

        var validGRSysIdsFromRelatedParty = [];
        var glideRecord = new GlideRecordSecure(global.CSMBaseConstants.INSTALL_BASE_ITEM);
        if (!gs.nil(inputVars[global.CSMBaseConstants.CONTACT_TABLE])) {
            /* AUTHORISED CONTACT */
            var ibSysIdsForAuthorisedContact = new sn_install_base.InstallBaseUtil().getAllEntities(inputVars[global.CSMBaseConstants.CONTACT_TABLE], params);
            glideRecord.addQuery('sys_id', 'IN', ibSysIdsForAuthorisedContact.join(',')).addOrCondition('root', 'IN', ibSysIdsForAuthorisedContact.join(','));
            glideRecord.addQuery('account', inputVars[global.CSMBaseConstants.ACCOUNT_TABLE]);

        } else if (gs.nil(inputVars[global.CSMBaseConstants.ACCOUNT_TABLE]) &amp;&amp; !gs.nil(inputVars[global.CSMBaseConstants.CONSUMER_TABLE])) {
            /* AUTHORISED CONSUMER */
            encodedQuery += 'consumer!=NULL';
            if (this.isHouseholdPluginActive())
                encodedQuery += '^ORhousehold!=NULL';
            var ibSysIdsForAuthorisedConsumer = new sn_install_base.InstallBaseUtil().getAllEntities(inputVars[global.CSMBaseConstants.CONSUMER_TABLE], params);
            glideRecord.addQuery('sys_id', 'IN', ibSysIdsForAuthorisedConsumer.join(',')).addOrCondition('root', 'IN', ibSysIdsForAuthorisedConsumer.join(','));
        }

        if (glideRecord.getEncodedQuery() != '') {
            glideRecord.query();
            while (glideRecord.next()) {
                validGRSysIdsFromRelatedParty.push(glideRecord.getUniqueValue());
            }
        }

        if (validGRSysIdsFromRelatedParty.length &gt; 0) {
            if (encodedQuery == '')
                encodedQuery += 'sys_idIN' + validGRSysIdsFromRelatedParty.join(',');
            else
                encodedQuery += '^sys_idIN' + validGRSysIdsFromRelatedParty.join(',');
        } else
            encodedQuery = '';

        return encodedQuery;
    },

    type: 'InstallBaseFilterSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-10 11:29:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1b0a587443e52110a7da21e1c9b8f21d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InstallBaseFilterSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Install Base Management" source="sn_install_base"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Service Install Base Management"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1b0a587443e52110a7da21e1c9b8f21d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-13 09:20:16&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:14</sys_created_on>
        <sys_id>36b0b01983b01210c6695855eeaad374</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>InstallBaseFilterSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_36b0b01983b01210c6695855eeaad374</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:14</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
