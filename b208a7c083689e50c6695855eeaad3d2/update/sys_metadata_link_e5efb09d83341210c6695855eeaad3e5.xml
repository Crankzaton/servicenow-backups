<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a8f615eb5bf15110d9a5ce1a8581c7da</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AISearchGlideSignalsUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Script include for utility functions related to Signals&lt;/description&gt;
        &lt;name&gt;AISearchGlideSignalsUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AISearchGlideSignalsUtils = Class.create();
AISearchGlideSignalsUtils.prototype = {
    initialize: function() {
        this.recordLimit = parseInt(gs.getProperty('glide.signals.queued_signal_processing_limit', 2000));
    },

    /**
     * Reads from the queued signals staging table, sys_signal_event_queue, and sends the events in to the Signals API
     */
    processQueuedSignals: function() {
        var signalsService = new GlideSignalsService();
        var queuedEventsGr = new GlideRecord("sys_signal_event_queue");
        queuedEventsGr.setLimit(this.recordLimit);
        queuedEventsGr.orderBy("sys_created_on");
        queuedEventsGr.query();
        var errorMessageTemplate = "Failed to process signal event of type: 'EVENT_TYPE', priority: 'EVENT_PRIORITY', body: 'EVENT_BODY', created: 'EVENT_CREATION'";
        var processedEvents = [];
        while (queuedEventsGr.next()) {
            var eventAction = queuedEventsGr.getValue("event_action");
            var eventPriority = queuedEventsGr.getValue("event_priority");
            var eventBody = JSON.parse(queuedEventsGr.getValue("event_body"));
            try {
                if (eventAction == 'SEARCH_EVENT') {
                    // When server-side signal logging is enabled, we need to determin if 
                    // the search event was an "original" search, a sort, a refinement, or a pagination event
                    eventAction = signalsService.getAisSignalEventType(eventBody);
                }
                signalsService.trackEvent(eventAction, eventPriority, eventBody);
            } catch (e) {
                var errorMessage = errorMessageTemplate.replace('EVENT_TYPE', eventAction)
                    .replace('EVENT_PRIORITY', eventPriority)
                    .replace('EVENT_BODY', eventBody)
                    .replace('EVENT_CREATION', queuedEventsGr.getValue("sys_created_on"));
                gs.error(errorMessage, e);
            }
            processedEvents.push(queuedEventsGr.getUniqueValue());
        }

        if (processedEvents.length &gt; 0) {
            queuedEventsGr.initialize();
            queuedEventsGr.addQuery("sys_id", processedEvents);
            queuedEventsGr.query();
            queuedEventsGr.deleteMultiple();
        }
    },

    type: 'AISearchGlideSignalsUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-13 19:05:04&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a8f615eb5bf15110d9a5ce1a8581c7da&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AISearchGlideSignalsUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Signals" source="com.glide.signals"&gt;053878203cf1311068bcf327dfe37f62&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a8f615eb5bf15110d9a5ce1a8581c7da&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-29 18:53:16&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:31</sys_created_on>
        <sys_id>e5efb09d83341210c6695855eeaad3e5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AISearchGlideSignalsUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e5efb09d83341210c6695855eeaad3e5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:31</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
