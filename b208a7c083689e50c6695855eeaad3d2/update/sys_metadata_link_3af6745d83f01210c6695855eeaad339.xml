<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>704f9b0c53d842101194ddeeff7b1293</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_deploy_pipeline.AppPropertiesService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AppPropertiesService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AppPropertiesService = Class.create();
AppPropertiesService.checkIfUserHasSubmitPermission = function(scopeId) {
    if (gs.hasRole('admin')) {
        return true;
    }
    var permissionSet = [
        DeploymentPipelineConstants.deploymentPermissionSetID.SUBMIT_FOR_DEPLOYMENT,
        DeploymentPipelineConstants.deploymentPermissionSetID.PUBLISH_TO_APP_REPO,
        DeploymentPipelineConstants.deploymentPermissionSetID.PUBLISH_TO_APP_STORE,
        DeploymentPipelineConstants.deploymentPermissionSetID.DELEGATED_ADMIN
    ];
    var currentUserSysId = gs.getUserID();
    var scopePermSetRoleAssignmentTable = new GlideRecordSecure('sys_scope_permission_set_role_assignment');
    var userHasRoleJoinQueryCondition = scopePermSetRoleAssignmentTable.addJoinQuery('sys_user_has_role', "role", "role");
    userHasRoleJoinQueryCondition.addCondition("user", currentUserSysId);
    scopePermSetRoleAssignmentTable.addQuery("scope", scopeId);
    scopePermSetRoleAssignmentTable.addQuery("permission_set", 'IN', permissionSet);
    scopePermSetRoleAssignmentTable.query();
    return scopePermSetRoleAssignmentTable.hasNext();
};
AppPropertiesService.isExistingVersionNewer = function(existingVersion, newVersion) {
    var existingVersionParts = existingVersion.split('.').map(Number);
    var newVersionParts = newVersion.split('.').map(Number);

    for (var i = 0; i &lt; existingVersionParts.length; i++) {
        if (existingVersionParts[i] &lt; newVersionParts[i]) {
            return true; // New version is greater
        } else if (existingVersionParts[i] &gt; newVersionParts[i]) {
            return false; // Existing version is greater
        }
    }
    return false; // Versions are equal
};

AppPropertiesService.updateApplicationVersion = function(version, appId) {

    if (!version) {
        throw new sn_ws_err.ServiceError().setStatus(400).setMessage(gs.getMessage("Invalid Application Version.")).setDetail(gs.getMessage("Application version should not be empty."));
    }

    if (isNaN(parseFloat(version))) {
        throw new sn_ws_err.ServiceError().setStatus(400).setMessage(gs.getMessage("Invalid Application Version.")).setDetail(gs.getMessage("Application version should be of type number."));
    }

    var appRecord = new GlideRecord("sys_app");

    if (!appRecord.get(appId)) {
        throw new sn_ws_err.ServiceError().setStatus(404).setMessage(gs.getMessage("Unknown Application ID")).setDetail(gs.getMessage("Application not found."));
    }

    if (!appRecord.canRead()) {
        throw new sn_ws_err.ServiceError().setStatus(403).setMessage(gs.getMessage("Restricted Access.")).setDetail(gs.getMessage("User don't have access to application."));
    }

    if (!AppPropertiesService.checkIfUserHasSubmitPermission(appId)) {
        throw new sn_ws_err.ServiceError().setStatus(403).setMessage(gs.getMessage("Application Deployment Error.")).setDetail(gs.getMessage("User doesn't have application deployment permission."));
    }

    if (!AppPropertiesService.isExistingVersionNewer(appRecord.version, version)) {
        throw new sn_ws_err.ServiceError().setStatus(400).setMessage(gs.getMessage("Invalid Application Version.")).setDetail(gs.getMessage("Application version should be greater than the current version."));
    }

    appRecord.version = version;
    if (!appRecord.update()) {
        throw new sn_ws_err.ServiceError().setStatus(500).setMessage(gs.getMessage("Update Failed.")).setDetail(gs.getMessage("Failed to update the application version."));
    }
    var data = {
        "version": appRecord.getValue('version'),
        "scope": appRecord.getValue('scope'),
        "logo": appRecord.getValue('logo'),
        "name": appRecord.getValue('name'),
        "id": appRecord.getValue('sys_id'),
        "short_description": appRecord.getValue('short_description')
    };
    return data;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-02-07 06:59:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;704f9b0c53d842101194ddeeff7b1293&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AppPropertiesService&lt;/sys_name&gt;
        &lt;sys_package display_value="Deployment Pipeline" source="sn_deploy_pipeline"&gt;bb67ed7253e83010b846ddeeff7b1204&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Deployment Pipeline"&gt;bb67ed7253e83010b846ddeeff7b1204&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_704f9b0c53d842101194ddeeff7b1293&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-03-06 16:28:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:33</sys_created_on>
        <sys_id>3af6745d83f01210c6695855eeaad339</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AppPropertiesService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3af6745d83f01210c6695855eeaad339</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
