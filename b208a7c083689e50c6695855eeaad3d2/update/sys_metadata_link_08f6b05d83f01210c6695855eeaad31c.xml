<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6d23d3e453433010e530ddeeff7b12c7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFConditionalRulesEvaluator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Evaluation script for 'Conditional Rules' Evalution type&lt;/description&gt;
        &lt;name&gt;RFConditionalRulesEvaluator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFConditionalRulesEvaluator = Class.create();
RFConditionalRulesEvaluator.prototype = Object.extendsObject(sn_rf.RFEvaluatorSNC, {
    category: 'rf_evaluation_script', // DO NOT REMOVE THIS LINE!

    getEvaluationOutputSchema: function(param) {
        var defSysIds = param.inputs.conditional_definitions;
        var schemaObjectList = [];
        var addedKeys = [];

        defSysIds = defSysIds ? defSysIds.split(',') : [];
        var conditionalDefinitions = RFConditionalDefinitionService.getBySysIds(defSysIds);
        if (conditionalDefinitions.length == 0) {
            var errorDetails = new RFExceptionManager('INVALID_CONDITIONAL_DEFINITION');
            var errorMessage = errorDetails.getMessage();
            new RFLogger('RFConditionalRulesEvaluator - getEvaluationOutputSchema').logError(errorMessage);
            return {
                'status': RFConstants.ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorMessage
            };
        }

        for (var i = 0; i &lt; conditionalDefinitions.length; i++) {
            var keys = Object.keys(conditionalDefinitions[i].getRecommendation());
            for (var j = 0; j &lt; keys.length; j++) {
                if (addedKeys.indexOf(keys[j]) == -1) {
                    addedKeys.push(keys[j]);
                    RFUtils.addToSchema(schemaObjectList, keys[j], keys[j], RFConstants.evaluationOutputTypes.STRING);
                }
            }
        }

        return {
            'status': RFConstants.SUCCESS,
            'schema': schemaObjectList,
            'metaData': {
                'uniqueKey': addedKeys
            }
        };
    },

    getEvaluationOutputs: function(param) {
        var rfLogger = new RFLogger('RFConditionalRulesEvaluator - getEvaluationOutputs');
        var defSysIds = param.inputs.conditional_definitions;
        var evaluationOutputs = [];

        defSysIds = defSysIds ? defSysIds.split(',') : [];
        var conditionalDefinitions = RFConditionalDefinitionService.getBySysIds(defSysIds);
        if (conditionalDefinitions.length == 0) {
            var errorDetails = new RFExceptionManager('INVALID_CONDITIONAL_DEFINITION');
            var errorMessage = errorDetails.getMessage();
            rfLogger.logError(errorMessage);
            return {
                'status': RFConstants.ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorMessage
            };
        }

        for (var i = 0; i &lt; conditionalDefinitions.length; i++) {
            if (conditionalDefinitions[i].getTable() == param.contextRecord.getTableName()) {
                if (conditionalDefinitions[i].evaluateInputCondition(param.contextRecord)) {
                    var recommendation = conditionalDefinitions[i].getRecommendation();
                    if (Object.keys(recommendation).length != 0) {
                        evaluationOutputs.push(conditionalDefinitions[i].getRecommendation());
                    }
                }
            } else {
                var configErrorDetails = new RFExceptionManager('INVALID_CONDITIONAL_DEFINITION_CONFIG', [conditionalDefinitions[i].getTable()]);
                var configErrorMesssage = configErrorDetails.getMessage();
                rfLogger.logError(configErrorMesssage);
                return {
                    'status': RFConstants.ERROR,
                    'errorCode': configErrorDetails.getCode(),
                    'errorMessage': configErrorMesssage
                };
            }
        }

        return {
            'status': RFConstants.SUCCESS,
            'evaluationOutputs': evaluationOutputs
        };
    },

    type: 'RFConditionalRulesEvaluator'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-04 07:45:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6d23d3e453433010e530ddeeff7b12c7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFConditionalRulesEvaluator&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6d23d3e453433010e530ddeeff7b12c7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-08 03:45:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:22</sys_created_on>
        <sys_id>08f6b05d83f01210c6695855eeaad31c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFConditionalRulesEvaluator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_08f6b05d83f01210c6695855eeaad31c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:22</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
