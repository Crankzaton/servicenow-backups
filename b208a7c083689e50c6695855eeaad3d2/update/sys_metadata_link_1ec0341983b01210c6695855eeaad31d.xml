<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1ceb54a70a0a0b990022514f21de0f63</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DeliveryPlanTaskGenerator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Generates child records based on a delivery plan for a specific parent record.&amp;#13;
&amp;#13;
Example, given a change request, it'll create change tasks&amp;#13;
&lt;/description&gt;
        &lt;name&gt;DeliveryPlanTaskGenerator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");
var DeliveryPlanTaskGenerator= Class.create();

DeliveryPlanTaskGenerator.prototype = {
   initialize : function(/*DeliveryPlan*/ plan, /* GlideRecord */ parentItem) {
      this.plan = plan;
      this.parentItem = parentItem;
      this._map = {};
      this._lazy = false;
   },

   // the lazy flag is set when this is being called as part of a fix job
   // it inserts the local m2m reference records lazily. giving us better throughput
   // on the fix
   setLazy : function(/* boolean */ lazy) {
      this._lazy = lazy;
   },

   createTasks : function() {
      this._now = new GlideDateTime();
      var tokens = this.plan.getSortedTokenList();
      for (var i =0; i &lt; tokens.size(); i++) {
        var tt = tokens.get(i);
        this._createTask(tt);
      }
      this._createLocalLinks();
   },

   convertTasks : function() {
      var tn = this.plan.getTaskTable();
      if (!tn)
          tn = 'sc_task';

      var kids = new GlideRecord(tn);
      kids.addQuery('parent', this.parentItem.sys_id);
      kids.setWorkflow(false);
      kids.orderBy('number');
      kids.query();
      while (kids.next()) {
         var id = kids.delivery_task;
         var tt = this.plan.getToken(id);
         if (!tt)
            continue;

         if (tt.getType() == 1) {
            this._addApprovalDetails(tt, kids);
            kids.update();
         }

         this._map[tt.getId()] = kids.sys_id + '';
      }
      this._createLocalLinks();
   },

   _createLocalLinks : function () {
      var it = this.plan.getTokenMap().values().iterator();
      while (it.hasNext()) {
        var tt =  it.next();
	this._createLocalLink(tt);
      }
   },

   _createLocalLink : function(/* TaskToken */ tt) {
      var task_id = this._map[tt.getId()];
      if (!task_id)
         return;

      var it = tt.getPredecessors().iterator();
      while (it.hasNext()) {
         var s = it.next();
         if ('START' == s)
            continue;
 
         var pred = this._map[s];
         if (!pred)
            continue;

         var gr = new GlideRecord('execution_plan_local');
         gr.initialize();
         gr.predecessor = pred;
         gr.successor = task_id;
         if (this._lazy)
           gr.insertLazy();
         else
           gr.insert();
      }
   },

   _createTask : function(/* TaskToken */ tt) {
      var template = new GlideRecord('sc_cat_item_delivery_task');
      template.get(tt.getId());
      var description = template.short_description;	
      // if we're still nil use the task name
      if (!description) 
	  description = template.name;
		
      var task = new GlideRecord(this.plan.getTaskTable());
      task.initialize();
      this._setParentage(task);
      task.short_description = description;
      task.description = template.instructions;
      task.work_notes = template.work_notes;
      task.due_date.setValue(tt.getDueDate(this._now));
      task.assignment_group = template.group;
      task.assigned_to = template.assigned_to;
      task.delivery_task = tt.getId();
      task.expected_start.setValue(tt.getExpectedStart(this._now));
	  if (this.plan.getTaskTable() == ChangeTask.CHANGE_TASK) {
         var changeTask = new ChangeTask(task);
         changeTask.setPending();
	  } else
         task.state = -5;
      this._runTaskScript(task, tt);
      if (tt.getType() == 1)
         this._addApprovalDetails(tt, task);		
      var id = task.insert();
      this._map[tt.getId()] = id;
   },
   
   _addApprovalDetails : function (/* TaskToken */ tt, /* GlideRecord */ task) {
      task.upon_approval = 'proceed';
      task.upon_reject = 'cancel';
      task.rejection_goto = this._map[tt.getUponRejectGoto()];
      if (tt.getUponReject() == 1)
         task.upon_reject = 'goto';
      
   },

   _setParentage : function (/* GlideRecord */ task) {
      task.parent = this.parentItem.sys_id;
      if (task.getRecordClassName() == 'change_task')
         task.change_request = this.parentItem.sys_id;
   },

   _runTaskScript : function (/* GlideRecord */ task, /* TaskToken */ tt) {
      if (!tt.getGenerationScript())
         return;

      task.putCurrent();
      GlideEvaluator.evaluateString(tt.getGenerationScript() + '');
      task.popCurrent();
   }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2007-11-08 01:41:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1ceb54a70a0a0b990022514f21de0f63&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;55&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DeliveryPlanTaskGenerator&lt;/sys_name&gt;
        &lt;sys_package display_value="Execution Plan Plugin" source="com.glide.execution_plan"&gt;9e47fc683cb1311068bcf327dfe37f01&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1ceb54a70a0a0b990022514f21de0f63&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-11-14 22:08:50&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:28</sys_created_on>
        <sys_id>1ec0341983b01210c6695855eeaad31d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DeliveryPlanTaskGenerator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1ec0341983b01210c6695855eeaad31d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
