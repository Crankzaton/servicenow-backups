<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Evaluation Type Inputs</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var msg;
    if (current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_EVALUATION_TYPE) == RFConstants.evaluationTypeSysIds.CONDITIONAL_RULES) {
        var currentTable = current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_TABLE);
        var currentConditionalDefSysIds = current.evaluation_type_input.conditional_definitions;

        currentConditionalDefSysIds = currentConditionalDefSysIds ? currentConditionalDefSysIds.split(',') : [];
        for (var i = 0; i < currentConditionalDefSysIds.length; i++) {
            var conditionalDefinition = new RFConditionalDefinitionService(currentConditionalDefSysIds[i]);
            if (conditionalDefinition.hasValidRecord()) {
                if (conditionalDefinition.getTable() != currentTable) {
                    msg = gs.getMessage('Conditional definitions are added for tables other than "{0}". Please remove such records', currentTable);
                }
            }
        }
    } else if (current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_EVALUATION_TYPE) == RFConstants.evaluationTypeSysIds.SIMILARITY) {
        currentTable = current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_TABLE);
        var currentSimilarityDefinition = new RFSimilarityService(current.evaluation_type_input.similarity_definition);
        if (currentTable != currentSimilarityDefinition.getTestTableName()) {
            msg = gs.getMessage('Similarity definition is added for table other than "{0}".', currentTable);
        }
    } else if (current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_EVALUATION_TYPE) == RFConstants.evaluationTypeSysIds.SIMILARITY_WITH_TREND) {
        currentTable = current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_TABLE);
        currentSimilarityDefinition = new RFSimilarityService(current.evaluation_type_input.similarity_definition);
        if (currentTable != currentSimilarityDefinition.getTestTableName()) {
            msg = gs.getMessage('Similarity definition is added for table other than "{0}".', currentTable);
        }
        var currentTrendDefinition = new RFTrendDefinitionService(current.evaluation_type_input.trend_definition.getRefRecord());
        if (currentTable != currentTrendDefinition.getTable()) {
            msg = gs.getMessage('Trend definition is added for table other than "{0}".', currentTable);
        }
    } else if (current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_EVALUATION_TYPE) == RFConstants.evaluationTypeSysIds.CLASSIFICATION) {
        currentTable = current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_TABLE);
        var currentClassificationDefinition = new RFClassificationService(current.evaluation_type_input.classification_definition.getRefRecord());
        if (currentTable != currentClassificationDefinition.getTable()) {
            msg = gs.getMessage('Classification definition is added for table other than "{0}".', currentTable);
        }
    } else if (current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_EVALUATION_TYPE) == RFConstants.evaluationTypeSysIds.CLASSIFICATION_PIWB) {
        currentTable = current.getValue(RFConstants.fields.SN_RF_RECOMMENDATION_RULE_TABLE);
        var currentClassificationUsecase = new RFPIWBClassificationService(current.evaluation_type_input.classification_usecase);
        if (currentTable != currentClassificationUsecase.getTable()) {
            msg = gs.getMessage('Classification usecase is added for table other than "{0}".', currentTable);
        }
    }

    if (msg) {
        gs.addErrorMessage(msg);
        current.setAbortAction(true);
        return;
    }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:04</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2ceba45583701210c6695855eeaad3f3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Evaluation Type Inputs</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_2ceba45583701210c6695855eeaad3f3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:04</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=2ceba45583701210c6695855eeaad3f3"/>
</record_update>
