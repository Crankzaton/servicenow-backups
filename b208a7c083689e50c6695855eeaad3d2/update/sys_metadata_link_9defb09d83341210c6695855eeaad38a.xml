<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a816a0930535a510f8777eba8d465d65</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_now_list_common.ListTransformScriptBuilder&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Transform script builder api - exposed to transform script for making quick modification to the now-list data model&lt;/description&gt;
        &lt;name&gt;ListTransformScriptBuilder&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ListTransformScriptBuilder = Class.create();
ListTransformScriptBuilder.prototype = (function() {

    var _rowDefinitions, _columnDefinitions, _declarativeActions, _hideDAsRequiringSelection, _columnDefinitionMutations, _featureFlags;
    var rowOperations = [];
    var columnOperations = [];

    function initialize(declarativeActions) {
        _hideDAsRequiringSelection = false;
        _rowDefinitions = { rows: [] };
        _columnDefinitions = { columns: [] };
        _declarativeActions = declarativeActions || [];
        _columnDefinitionMutations = {};
        _featureFlags = {};
    }

    function getRowDefinitions() {
        return _rowDefinitions;
    }

    function setRowDefinitions(rowDefs) {
        _rowDefinitions = rowDefs;
        return this;
    }

    function getColumnDefinitions() {
        return _columnDefinitions;
    }

    function setColumnDefinitions(colDefs) {
        _columnDefinitions = colDefs;
        return this;
    }

    function setFeatureFlags(flags) {
        _featureFlags = flags;
        bootstrapFlags();
        return this;
    }

    // column mutators
    function disableLinkColumns() {
        columnOperations.push(function(column, index) {
            if (['url','link','person'].indexOf(column.type) &gt; -1 || index === 0) {
                column.disabled = true;
            }
        });
        return this;
    }

    function disableReferenceLinks() {
        columnOperations.push(function(column, index) {
            // disable all reference links but ignore first column
            if (column.type === 'link' &amp;&amp; column.metadata?.internalType === 'reference' &amp;&amp; index !== 0) {
                column.disabled = true;
            }
        });
        return this;
    }

    // dont expose for now, method name not clear what it would do
    function disableColumn(columnKey) {
        columnOperations.push(function(column) {
            if (column.key === columnKey) {
                column.disabled = true;
            }
        });
        return this;
    }

    function changeColumnLabel(columnKey, label) {
        columnOperations.push(function(column) {
            if (column.key === columnKey) {
                column.label = label;
            }
        });
        return this;
    }

    function removeCellFiltering(columnKey) {
        columnOperations.push(function(column) {
            if (!columnKey || column.key === columnKey) {
                if (column.cellActions &amp;&amp; column.cellActions.length) {
                    column.cellActions = column.cellActions.filter(action =&gt; {
                        return ['show_matching','filter_out'].indexOf(action.id) === -1;
                    });
                }
                // if no remaining actions, delete the property so the action button doesn't show
                if (!column.cellActions?.length) {
					delete column.cellActions;
				}
                
            }
        });
        return this;
    }

    function disableSortability() {
        _columnDefinitionMutations.columnHeaderTextTooltip = null;
        columnOperations.push(function(column) {
            column.metadata.isSortable = false;
        });
        return this;
    }

    function setColumnHeaderClickActionText(text) {
        _columnDefinitionMutations.columnHeaderTextTooltip = text;
        return this;
    }

    function disableColumnHeaderClick(columnKey) {
        columnOperations.push(function(column) {
            if (!columnKey || column.key === columnKey) {
                column.headerTextDisabled = true;
            }
        });
        return this;
    }

    function enableColumnHeaderClick(columnKey) {
        columnOperations.push(function(column) {
            if (!columnKey || column.key === columnKey) {
                column.headerTextDisabled = false;
            }
        });
        return this;
    }

    function setColumnMaxCharacters(maxCharNum, columnKey) {
        columnOperations.push(function(column) {
            if (!columnKey || column.key === columnKey) {
                column.maxCharacters = maxCharNum;
            }
        });
        return this;
    }

    function addColumnHeaderIcons(pos, icons, columnKey) {
        columnOperations.push(function(column) {
            if (!columnKey || column.key === columnKey) {
                if (!column.icons) column.icons = {};
                if (pos === 'start') {
                    if (!column.icons.startIcons) column.icons.startIcons = [];
                    if (Array.isArray(icons)) {
                        column.icons.startIcons = column.icons.startIcons.concat(icons);
                    } else {
                        column.icons.startIcons.push(icons);
                    }
                    
                } else if (pos === 'end') {
                    if (!column.icons.endIcons) column.icons.endIcons = [];
                    if (Array.isArray(icons)) {
                        column.icons.endIcons = column.icons.endIcons.concat(icons);
                    } else {
                        column.icons.endIcons.push(icons);
                    }
                }
            }
        });
        return this;
    }

    // not support in now-list yet, dont expose
    function setColumnWidth(width, columnKey) {
        columnOperations.push(function(column) {
            if (!columnKey || column.key === columnKey) {
                column.width = width;
            }
        });
        return this;
    }


    // row mutators
    // should we even allow this? kind of weird experience if same 
    // row keeps being selected after every fetch, even if you un selected it
    // dont expose for now
    function setSelectedRows(rowKeys) {
        rowOperations.push(function(row) {
            if (!rowKeys || !Array.isArray(rowKeys)) return;
            if (rowKeys.indexOf(row.key) &gt; -1) {
				row.isSelected = true;
			}
        });
        return this;
    }

    // declarative actions mutators
    function filterDAsRequiringSelection(actions) {
        return actions.filter(function (action) {
            if (action.recordSelectionRequired === true) {
                return false;
            }
            if (action.groupedActions) {
                action.groupedActions = filterDAsRequiringSelection(action.groupedActions);
                if (action.groupedActions.length === 0) {
                    return false;
                }
            }
            return true;
        });
    }

    function hideDAsRequiringSelection() {
        _hideDAsRequiringSelection = true;
        return this;
    }

    function bootstrapFlags() {
        if(_featureFlags.enableReferenceLinks === false) {
            disableReferenceLinks();
        }
    }

    function transform() {
        _columnDefinitions.columns.forEach(function(column, index) { 
			columnOperations.forEach(function(executeOperation) {
                executeOperation(column, index);
            });

		});

        _rowDefinitions.rows.forEach(function(row) { 
			rowOperations.forEach(function(executeOperation) {
                executeOperation(row);
                if (row.children &amp;&amp; row.children.length &gt; 0) {
                    row.children.forEach(function(childRow) {
                        executeOperation(childRow);
                    });
                }
            });
            
		});

        if (_hideDAsRequiringSelection) {
            _declarativeActions = filterDAsRequiringSelection(_declarativeActions);
        }

        for (var key in _columnDefinitionMutations) {
            _columnDefinitions[key] = _columnDefinitionMutations[key];
        }

        return {
            rowDefinitions: _rowDefinitions,
            columnDefinitions: _columnDefinitions
        };
    }

    return {
        // constructor
        initialize: initialize,
        
        // getters/setters
        get rowDefinitions() {
            return getRowDefinitions();
        },
        setRowDefinitions: setRowDefinitions,
        get columnDefinitions() {
            return getColumnDefinitions();
        },
        setColumnDefinitions: setColumnDefinitions,
        setFeatureFlags: setFeatureFlags,

        // mutators
        disableLinkColumns: disableLinkColumns,
        disableReferenceLinks: disableReferenceLinks,
        changeColumnLabel: changeColumnLabel,
        disableColumnHeaderClick: disableColumnHeaderClick,
        enableColumnHeaderClick: enableColumnHeaderClick,
        disableSortability: disableSortability,
        setColumnHeaderClickActionText: setColumnHeaderClickActionText,
        removeCellFiltering: removeCellFiltering,
        addColumnHeaderIcons: addColumnHeaderIcons,
        setColumnMaxCharacters: setColumnMaxCharacters,
        hideDAsRequiringSelection: hideDAsRequiringSelection,
        
        // execute tranform, return model
        transform: transform,

        type: 'ListTransformScriptBuilder'
    };

})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-04-10 17:04:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a816a0930535a510f8777eba8d465d65&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ListTransformScriptBuilder&lt;/sys_name&gt;
        &lt;sys_package display_value="now-list-commons" source="sn_now_list_common"&gt;015dd2fa796d247253ef940e685b9ebd&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="now-list-commons"&gt;015dd2fa796d247253ef940e685b9ebd&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a816a0930535a510f8777eba8d465d65&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-11 01:04:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:29</sys_created_on>
        <sys_id>9defb09d83341210c6695855eeaad38a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ListTransformScriptBuilder</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9defb09d83341210c6695855eeaad38a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:29</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
