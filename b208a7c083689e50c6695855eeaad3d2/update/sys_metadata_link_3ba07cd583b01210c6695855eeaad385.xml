<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>18f69e11537620102b57ddeeff7b12e5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CSUrlRedirectUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CSUrlRedirectUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CSUrlRedirectUtils = Class.create();
CSUrlRedirectUtils.prototype = {
    initialize: function() {
		this.logger = new GlideChatbotLoggerSetupUtil("com.glide.cs").setup();
	},

    insertCustomerPortalProperties: function(propertyList) {
        this.updatePortalProperties(propertyList, false, true);
    },

    updateBUPortalProperties: function(propertyList) {
        this.updatePortalProperties(propertyList, true, false);
    },

    updatePortalProperties: function(propertyList, includeFlag, insertFlag) {
        var grProp = new GlideRecord('sys_properties');
        grProp.addQuery('name', 'STARTSWITH', 'com.glide.cs.portal_url_mapping.');
        grProp.query();
        while (grProp.next()) {
            try {
                var propertySysId = grProp.getValue("sys_id");

                // Check to exclude or include the property from list.
                if (includeFlag) {
                    if (propertyList.indexOf(propertySysId) == -1) continue;
                } else {
                    if (propertyList.indexOf(propertySysId) != -1) continue;
                }

                var propName = grProp.getValue('name');
                var propScope = grProp.getValue('sys_scope');
                var keyArr = propName.split('.');
                if (keyArr.length != 6) {
                    this.logger.info("VA URL Redirect Migration: Invalid property format for" + propName);
                    continue;
                }
                var portal = keyArr[4];
                var tableName = keyArr[5];

                // Check if the mapping is Custom Portal
                if (portal != 'portal') {
                    var grPortalMapping = this.getPortalMappingGR('portal_mapping', portal, tableName);
                    var templateValue = grProp.getValue('value');
                    var description = grProp.getValue('description');
                    if (grPortalMapping.next()) {
                        if (templateValue != grPortalMapping.getValue('url_template') || description != grPortalMapping.getValue('description')) {
                            grPortalMapping.setValue('url_template', templateValue);
                            grPortalMapping.setValue('description', description);
                            grPortalMapping.update();
                        }
                    } else if (insertFlag) {
                        var portalSysId = portal != '_default' ? this.getPortalSysId(portal) : '';
                        if (portal == '_default' || portalSysId) {
                            this.insertPortalMappingGR('portal_mapping', portalSysId, tableName, templateValue, description, propScope);
                        } else {
                            this.logger.info("VA URL Redirect Migration: Portal doesn't exist for " + propName);
                        }
                    }
                } else {
                    var defaultPortalValue = grProp.getValue('value');
                    var defaultPortalDescription = grProp.getValue('description');
                    var defaultPortalSysId = this.getPortalSysId(defaultPortalValue);
                    var grDefaultPortal = this.getPortalMappingGR('default_portal', '', tableName);
                    if (grDefaultPortal.next()) {
                        if ((defaultPortalSysId &amp;&amp; defaultPortalValue != grDefaultPortal.getValue('portal.url_suffix')) || defaultPortalDescription != grDefaultPortal.getValue('description')) {
                            grDefaultPortal.setValue('portal', defaultPortalSysId ? defaultPortalSysId : grDefaultPortal.getValue('portal'));
                            grDefaultPortal.setValue('description', defaultPortalDescription);
                            grDefaultPortal.update();
                        }
                    } else if (defaultPortalSysId &amp;&amp; insertFlag) {
                        this.insertPortalMappingGR('default_portal', defaultPortalSysId, tableName, '', defaultPortalDescription, propScope);
                    } else if (insertFlag) {
                        this.logger.info("VA URL Redirect Migration: Portal doesn't exist for " + propName);
                    }
                }
            } catch (error) {
                this.logger.error("VA URL Redirect Migration: Exception while migrating key:" + propName + " with error: " + error.message);
            }
        }
    },


    getPortalMappingGR: function(type, portalSuffix, tableName) {
        var grPortalMapping = new GlideRecord('sys_cs_portal_url_mapping');
        grPortalMapping.addQuery('type', type);
        if (portalSuffix) {
            if (portalSuffix != '_default')
                grPortalMapping.addQuery('portal.url_suffix', portalSuffix);
            else
                grPortalMapping.addQuery('portal', '');
        }
        grPortalMapping.addQuery('table_name', tableName != '_default' ? tableName : '');
        grPortalMapping.query();
        return grPortalMapping;
    },

    insertPortalMappingGR: function(type, portalSysId, tableName, urlTemplate, description, propScope) {
        var grPortalMapping = new GlideRecord('sys_cs_portal_url_mapping');
        grPortalMapping.initialize();
        grPortalMapping.setValue('type', type);
        if (portalSysId)
            grPortalMapping.setValue('portal', portalSysId);
        if (tableName != '_default')
            grPortalMapping.setValue('table_name', tableName);
        if (urlTemplate)
            grPortalMapping.setValue('url_template', urlTemplate);
        grPortalMapping.setValue('description', description);
        grPortalMapping.insert();

        // Scope is not getting populated with correct value during insertion. Hence, doing an update again.
        grPortalMapping.setValue('sys_scope', propScope);
        grPortalMapping.update();
    },

    getPortalSysId: function(portalSuffix) {
        var grPortalList = new GlideRecord('sp_portal');
        grPortalList.addQuery('url_suffix', portalSuffix);
        grPortalList.query();
        if (grPortalList.next())
            return grPortalList.getValue('sys_id');
        return null;
    },

    type: 'CSUrlRedirectUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-09 04:26:05&lt;/sys_created_on&gt;
        &lt;sys_id&gt;18f69e11537620102b57ddeeff7b12e5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CSUrlRedirectUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_18f69e11537620102b57ddeeff7b12e5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-15 19:05:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:02</sys_created_on>
        <sys_id>3ba07cd583b01210c6695855eeaad385</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CSUrlRedirectUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3ba07cd583b01210c6695855eeaad385</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:02</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
