<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>426eb8ba9791211061b2bb46f053af03</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DRMDashboardGlobalUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DRMDashboardGlobalUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DRMDashboardGlobalUtils = Class.create();

DRMDashboardGlobalUtils.prototype = {
    /**
     * Initializes the DRMDashboardGlobalUtils class with required properties.
     */
    initialize: function() {
        this.DASHBOARD_PERMISSIONS_TABLE = "pa_dashboards_permissions";
        this.result = {
            "haveError": true,
            "message": ""
        };
        this.LOGGING_HELPER = new global.DRMGlobalLogging();
        this.DEBUG_PREFIX = "DRMDashboardGlobalUtils &gt;&gt;&gt;";
    },

    /**
     * Revokes a dashboard permission based on the provided sysId from DASHBOARD_PERMISSIONS_TABLE.
     * @param {String} recordId - The unique identifier of the permission record to be revoked.
     * @returns {Object} result - An object containing the result of the operation, indicating if there was an error and a message.
     */
    revokeDashboardPermission: function(recordId) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function revokeDashboardPermission. RecordId :" + recordId);
        try {
            var grDashboardPermission = new GlideRecord(this.DASHBOARD_PERMISSIONS_TABLE);
            grDashboardPermission.get(recordId);
            if (grDashboardPermission.isValidRecord()) {
                this.result.haveError = !grDashboardPermission.deleteRecord();
				this.result.message = this._validateRecordScope(grDashboardPermission.getValue("sys_scope")) == true ? "An error occured." : "Please switch to " + grDashboardPermission.getDisplayValue("sys_scope") + " application scope to make changes.";
            } else {
                this.result.message = "Invalid Record";
            }
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function revokeDashboardPermission. Response returned :" + JSON.stringify(this.result));
            return this.result;
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function revokeDashboardPermission. &gt;&gt; " + ex.message);
            this.result.message = "An exception occurred." + ex.message;
            return this.result;
        }
    },

    /**
     * Adds a dashboard permission for given users/roles/groups.
     * @param {Array} shareArr - An array of objects containing permission details (type and sysId).
     * @param {String} dashboardId - The unique identifier of the dashboard to which permissions are to be added.
     * @param {Boolean} write - Flag indicating whether the permission includes write access.
     * @returns {Object} result - An object containing the result of the operation, indicating if there was an error and a message.
     */
    addDashboardPermission: function(shareArr, dashboardId, write) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function addDashboardPermission. dashboardId :" + dashboardId + "&gt;&gt;ShareArr :" + JSON.stringify(shareArr) + "&gt;&gt;write: " + write);
        try {
            for (var item in shareArr) {
                // Get the type of permission
                var type = shareArr[item].type;
                var sysId = shareArr[item].sysId;

                // Query for the permission for given user/role/group if already exists
                if (!this._isShared(sysId, dashboardId, type, write)) {
                    var grDashboardPermission = new GlideRecord(this.DASHBOARD_PERMISSIONS_TABLE);
                    grDashboardPermission.initialize();
                    grDashboardPermission.setValue("dashboard", dashboardId);
                    grDashboardPermission.setValue("type", this._getType(type));
                    if (type == "role")
                        grDashboardPermission.setValue("role", sysId);
                    if (type == "group")
                        grDashboardPermission.setValue("group", sysId);
                    if (type == "user")
                        grDashboardPermission.setValue("user", sysId);
                    grDashboardPermission.setValue("read", true);
                    grDashboardPermission.setValue("write", write);
                    grDashboardPermission.insert();
                }

            }
            this.result.haveError = false;
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function addDashboardPermission. Response returned :" + JSON.stringify(this.result));
            return this.result;
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function addDashboardPermission. &gt;&gt; " + ex.message);
            this.result.message = ex.message;
            return this.result;
        }
    },

    /**
     * Checks if the permission is already shared for the given user/role/group on the dashboard.
     * If the permission exists, it updates the write access if required.
     * @private
     * @param {String} sysId - The unique identifier of the user/role/group.
     * @param {String} dashboardId - The unique identifier of the dashboard.
     * @param {String} type - The type of the permission (user, role, or group).
     * @param {Boolean} write - Flag indicating whether the permission includes write access.
     * @returns {Boolean} - True if the permission is already shared, False if not.
     */
    _isShared: function(sysId, dashboardId, type, write) {
        this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Inside function _isShared. sysId :" + sysId + "&gt;&gt;dashboardId :" + dashboardId + "&gt;&gt;type:" + type + "&gt;&gt;write: " + write);
        try {
            var grDashboardPermission = new GlideRecord(this.DASHBOARD_PERMISSIONS_TABLE);
            grDashboardPermission.addQuery("dashboard", dashboardId);
            grDashboardPermission.addQuery("type", this._getType(type));

            if (type == "role")
                grDashboardPermission.addQuery("role", sysId);
            if (type == "group")
                grDashboardPermission.addQuery("group", sysId);
            if (type == "user")
                grDashboardPermission.addQuery("user", sysId);

            grDashboardPermission.setLimit(1);

            grDashboardPermission.query();
            if (grDashboardPermission.next()) { // Update if already shared.
                grDashboardPermission.setValue("write", write);
                grDashboardPermission.update();
                return true;
            }
            return false;
        } catch (ex) {
            this.LOGGING_HELPER.logMessage("debug", this.DEBUG_PREFIX + "Exception in function _isShared. &gt;&gt; " + ex.message);
            this.result.message = ex.message;
            return this.result;
        }
    },

    /**
     * Returns the numerical representation of the permission type (1 for role, 2 for group, 3 for user).
     * @private
     * @param {String} type - The type of the permission (role, group, or user).
     * @returns {Number} - The numerical representation of the permission type.
     */
    _getType: function(type) {
        if (type == "role") {
            return 1;
        } else if (type == "group") {
            return 2;
        } else { // User type
            return 3;
        }
    },


    /**
     * Validate if the given scope matches with current application scope.
     * @param {string} recordScope - scope of target record for read/write/delete operations.
     * @returns {boolean} - true if scope matches. False otherwise
     */

    _validateRecordScope: function(recordScope) {
		return gs.getCurrentApplicationId() == recordScope;
    },


    type: 'DRMDashboardGlobalUtils'
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;jdsingh&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-04 09:05:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;426eb8ba9791211061b2bb46f053af03&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;28&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DRMDashboardGlobalUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_426eb8ba9791211061b2bb46f053af03&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:24:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:18</sys_created_on>
        <sys_id>7976f0d983f01210c6695855eeaad35d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DRMDashboardGlobalUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7976f0d983f01210c6695855eeaad35d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:18</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
