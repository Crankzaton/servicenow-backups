<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1bf24f1d670203008b52f3b457415acb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdEmailNotificationManager&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PwdEmailNotificationManager&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PwdEmailNotificationManager = Class.create();
PwdEmailNotificationManager.prototype = Object.extendsObject(PwdNotificationManager, {
	
	TYPE: "Email",
	NotEnrolled: "notEnrolled",
	
    initialize: function() {
    },
	
	/* 
	  Send reset code to enrolled devices or devices from user profile
	  @param requestId
	  @param verificationId
	  @param mode: subscription or notEnrolled
	*/
	sendResetCode: function(requestId, verificationId, mode) {
		var response = this.GENERIC_FAIL_RESPONSE;
		
		try {
			var isRequestInvalid = new SNC.PwdTrackingManager().isRequestInvalid(requestId);
			if (isRequestInvalid) {
				return this.SUCCESS_RESPONSE;
			}
			response = this.pwdNotifMgr.generateEmailCode(requestId, verificationId);
		
			if (this._doesResponseContainCode(response)) {
				var userSysId = this._getUserId(requestId);
				var devices = this._collectDevicesAddress(userSysId, mode);
				if (devices.length == 0)
					return this.GENERIC_FAIL_RESPONSE;

				this._sendCodeToDevices(devices, response, userSysId);
			}
		} catch (err) {
			return err;
		}	
		return response &gt; 0 ? 1 : response;
	},
	
	_doesResponseContainCode: function(response) {
    	var FAILURE = 0;
		return response &gt; FAILURE;
	}, 
	
	/*  
	  Verify reset code
	  @param requestId
	  @param verificationId
      @param code
	*/
	verifyResetCode: function(requestId, verificationId, code) {
		return this.pwdNotifMgr.verifyEmailCode(requestId, verificationId, code);
	},
	
	
	// @Override
	_getDeviceAddr: function(notifDevGr) {
		return notifDevGr.getValue("email_address");
	},
	
	// @Override
	_getDeviceAddrFromProfile: function(userId) {
		var email = this.pwdNotifHelper.getEmailFromProfile(userId);
		if (email == null)
			return null;

		var deviceId = this.pwdNotifHelper.emailEntryExists(userId, email);
		if (deviceId == null)
			deviceId = this.pwdNotifHelper.createEmail(userId, email, "Primary Email");

		var notifDevGr = new GlideRecord("cmn_notif_device");
		notifDevGr.get(deviceId);
		return this._getDeviceAddr(notifDevGr);
	},
	
	// @Override
	_sendCodeToDevices: function(devices, code, userSysId) {
		var parm1 = devices.join(",");
		
		// DEF0063745: Need to pass notification_type
		parm1 = "SMTP," + parm1;
		
		// PRB1263734: Use cmn_notif_device as the target record to check ACL
		var deviceGr = this._getDeviceGr(userSysId);
		
		gs.eventQueue(this.PWD_CODE_EVENT, deviceGr, parm1, code);
	},

    type: 'PwdEmailNotificationManager'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-10-26 00:27:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1bf24f1d670203008b52f3b457415acb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdEmailNotificationManager&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;1399f4e43cf1311068bcf327dfe37fe4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1bf24f1d670203008b52f3b457415acb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-05-12 15:53:35&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:21</sys_created_on>
        <sys_id>54c0f01983b01210c6695855eeaad34e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PwdEmailNotificationManager</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_54c0f01983b01210c6695855eeaad34e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:21</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
