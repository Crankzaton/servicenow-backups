<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0fd60b2e0b500300894181a037673ad6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_dependentclient.PluginDependency&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PluginDependency&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[            var PluginDependency = Class.create();
            PluginDependency.prototype = {
                initialize: function () {
					this._appstoreIntegration = new AppstoreIntegration();
                    this._json = new global.JSON();
                },

                /* Returns all the appstore applications dependent on the plugins given
                 * Input: a list of all the plugins for which dependent apps are required
                 * Eg. : PluginList - ["com.service.a","com.glide.b"]
                 *
                 * Output: a dictionary containing list of dependent apps based on each plugin
                 * Sample Output: DependentApps - { "com.service.a" :{[title: app1, version: 1.0.0, .....], [title: app2, version: 1.5.0, .....] },
                 *                                  "com.glide.b"   :{[title: app2, version: 1.0.0, .....], [title: app3, version: 1.2.0, .....] }
                 *                                }
                 */
                getDependentApps: function (pluginList) {
                    if (gs.nil(pluginList) || pluginList.length == 0) {
                        return {
                            "error": "Parameter pluginList is missing/empty"
                        };
                    }

                    gs.eventQueue('sn_dependentclient.check.dependent_apps', null, pluginList.join(","));
                    return this.fetchDependencyData(pluginList);
                },

                updatePluginData: function(plugins) {
                    var missingOrOldPluginRecords = this.getMissingOrOldPluginData(plugins);
                    if (missingOrOldPluginRecords.length &gt; 0)
                        this._appstoreIntegration.getPluginDependency(missingOrOldPluginRecords);
                },

                getMissingOrOldPluginData: function(pluginList) {
                    var result = [];
                    if (pluginList)
                        result = pluginList.split(",");
                    var query = "sys_updated_onRELATIVEGT@hour@ago@24^plugin_idIN" + pluginList;
                    var dependentRecords = new GlideAggregate("sn_dependentclient_app_plugin_map");
                    dependentRecords.addEncodedQuery(query);
                    dependentRecords.groupBy("plugin_id");
                    dependentRecords.query();

                    while(dependentRecords.next()) {
                        var index = result.indexOf(dependentRecords.plugin_id.toString());
                        if(index &gt; -1)
                            result.splice(index, 1);
                    }

                    return result;
                },

                fetchDependencyData: function(pluginList) {
                    var dependentApps = {};
                    var gr = new GlideRecord("sn_dependentclient_app_plugin_map");
                    gr.setWorkflow(false);
                    var grOR = gr.addQuery("plugin_id", pluginList[0]);
                    for (var i = 1; i &lt; pluginList.length; i++) {
                        grOR.addOrCondition("plugin_id", pluginList[i]);
                    }
                    gr.query();
                    while (gr.next()) {
                        var application = {};
                        application.source_app_id = gr.application.source_app_id.toString();
                        application.version = gr.application.version.toString();
                        application.title = gr.application.title.toString();
                        application.scope = gr.application.scope.toString();
                        application.compatibility = gr.application.compatibility.toString();
                        application.vendor_name = gr.application.vendor_name.toString();
                        application.tagline = gr.application.tagline.toString();
                        application.description = gr.application.description.toString();
                        application.price_type = gr.application.price_type.toString();
                        application.app_type = gr.application.app_type.toString();
                        application.trial_available = gr.application.trial_available.toString();
                        application.logo = gr.application.logo.toString();
                        application.featured_icon = gr.application.featured_icon.toString();
                        application.appstore_link = gr.application.appstore_link.toString();
                        application.demo_available = gr.application.demo_available.toString();
                        application.categories = gr.application.categories.toString().split("|");
                        application.is_installed = this._appstoreIntegration.is_installed(application.source_app_id, application.scope, application.version);
                        application.can_install_update = this._appstoreIntegration.can_install_update(application.source_app_id).toString();
                        application.artifacts = gs.nil(gr.application.artifacts) ? [] : this._json.decode(gr.application.artifacts);
                        application.description_html = gr.application.description_html.toString();
                        if (gs.nil(dependentApps[gr.plugin_id.toString()])) {
                            dependentApps[gr.plugin_id.toString()] = [];
                        }
                        dependentApps[gr.plugin_id.toString()].push(application);
                    }

                    return dependentApps;
                },

                //call this to get a fresh data of app plugin dependency from Appstore
                refreshDependentApps: function() {
                    this._appstoreIntegration.getPluginDependency();
                },

                type: 'PluginDependency'
            };
            ]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-08-03 21:45:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0fd60b2e0b500300894181a037673ad6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PluginDependency&lt;/sys_name&gt;
        &lt;sys_package display_value="App Dependency Client" source="sn_dependentclient"&gt;f1d83d71c700030089413952f0976370&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="App Dependency Client"&gt;f1d83d71c700030089413952f0976370&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0fd60b2e0b500300894181a037673ad6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-08-29 19:53:01&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:13</sys_created_on>
        <sys_id>b37030d583b01210c6695855eeaad3fe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PluginDependency</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b37030d583b01210c6695855eeaad3fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
