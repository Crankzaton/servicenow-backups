<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>217a506a776211109b5e1b7dae5a997f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;sys_ux_macroponent&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Detect Extends Circular Dependency&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	/*
		This script will traverse macroponents referenced in the extends field and attempt to prevent a circular dependency from occuring.
		There is a max depth limit of 10 before the current action is aborted due to too deep of nesting. 
	*/

	var maxRecursionDepth = 10;
	var EXTENDS = 'extends';

	if (current[EXTENDS] == '') {
		return;
	}

	function getMacroponent(sysId) {
		var gr = new GlideRecord('sys_ux_macroponent');

		if (gr.get(sysId)) {
			return {
				sysId: gr.getUniqueValue(),
				extendsSysId: gr.getValue(EXTENDS),
				name: gr.getValue('name')
			};
		}
	}

	function logAndAbort(sysId, name) {
		gs.addErrorMessage(gs.getMessage(
			"Circular dependency detected on the extends field with the following macroponent. Please address before updating record &lt;br&gt;&lt;br&gt;" +
			"'{0}' (sys_id: '{1}') extends '{2}'", [name, sysId, current['name']]
		));
		current.setAbortAction(true);
	}

	// Recursive loop that will iterate through the extends field of each macroponent trying to find a 
	// circular dependency. Depth limit of 10 
	function checkExtendsCircularDependency(extendedMacroponentSysId, currentLevel) {
		if (extendedMacroponentSysId === null) {
			return;
		}

		var macroponent = getMacroponent(extendedMacroponentSysId);

		if (macroponent.extendsSysId &amp;&amp; macroponent.extendsSysId.toString() === current.sys_id.toString()) {
			logAndAbort(macroponent.sysId, macroponent.name);
		}

		if (currentLevel == maxRecursionDepth) {
			gs.addErrorMessage(gs.getMessage("Maximum dependency level reached on 'extends' field. &lt;br&gt;&lt;br&gt;" +
			"Last checked macroponent: '{0}' (sys_id: '{1}')&lt;br&gt;&lt;br&gt;" + 
			"Please keep 'sys_ux_macroponent.extends' dependency tree at or below {2}",
			[macroponent.name, macroponent.sysId, maxRecursionDepth]));
			current.setAbortAction(true);
			return;
		}

		checkExtendsCircularDependency(macroponent.extendsSysId, ++currentLevel);
	}

	if (current[EXTENDS] &amp;&amp; current[EXTENDS].toString() === current.sys_id.toString()) {
		gs.addErrorMessage(gs.getMessage("A macroponent cannot extend itself. Please address before updating record"));
		current.setAbortAction(true);
	}  else {
		checkExtendsCircularDependency(current[EXTENDS], 1);
	}
})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-17 19:28:17&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;217a506a776211109b5e1b7dae5a997f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;46&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Detect Extends Circular Dependency&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="UX Framework" source="com.glide.uxbuilder"&gt;68e6b4e43cb1311068bcf327dfe37f56&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_217a506a776211109b5e1b7dae5a997f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;system&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-10 23:01:56&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=217a506a776211109b5e1b7dae5a997f"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:57:49</sys_created_on>
        <sys_id>d6ad20dd83701210c6695855eeaad37c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Detect Extends Circular Dependency</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d6ad20dd83701210c6695855eeaad37c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:57:49</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
