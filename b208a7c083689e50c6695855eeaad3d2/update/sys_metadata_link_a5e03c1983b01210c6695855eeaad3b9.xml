<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2124e5437745111001f9a8e48f5a9911</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_csm_case_types.ProductServiceCaseTypeProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ProductServiceCaseTypeProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ProductServiceCaseTypeProcessor = Class.create();
ProductServiceCaseTypeProcessor.prototype = {
    initialize: function() {

    },

    getProducts: function(sourceTable, sourceId, serviceId, tableName, searchTerm) {

        var productData = [];

        try {
            //Filter the products based Service/Table
            if (serviceId || tableName) {
                var tableMap = new Object();
                var productSvcId = '';
                var productSvcName = '';
                var mappedProducts = [];
                var filteredProducts = [];
                var prodSvcGr = new GlideRecord('sn_csm_case_types_product_service_rel');
				
                if (!prodSvcGr.canRead()) return [];

                productData = this.getOwnedProducts(sourceId, sourceTable, searchTerm, CSMCaseTypeConstants.PRODUCT_SERVICE_ITEMS_COUNT);

                // if the service definition contains 'All Products', we won't filter them by this service.
                var isAllProdService = false;

                if (serviceId) {
                    // check if it's a all product service
                    var serviceGr = new GlideRecord('sn_csm_case_types_product_service_rel');
                    serviceGr.addEncodedQuery('all_products=true^service=' + serviceId);
                    serviceGr.query();
                    isAllProdService = serviceGr.getRowCount() &gt; 0;

                    if (!isAllProdService) {
                        prodSvcGr.addEncodedQuery('all_products=false^service=' + serviceId);
                        prodSvcGr.query();
                        while (prodSvcGr.next()) {
                            productSvcId = prodSvcGr.getValue("product");
                            productSvcName = prodSvcGr.getDisplayValue("product");

                            if (tableMap[productSvcId])
                                continue;
                            tableMap[productSvcId] = productSvcName;

                            filteredProducts.push(productSvcId);
                        }
                    }
                } else if (tableName) {
                    prodSvcGr.addEncodedQuery('all_products=false');
                    var tableGr = prodSvcGr.addJoinQuery('sn_case_type_selection', 'service', 'sys_id');
                    tableGr.addCondition('table', tableName);
                    prodSvcGr.query();
                    while (prodSvcGr.next()) {
                        productSvcId = prodSvcGr.getValue("product");
                        productSvcName = prodSvcGr.getDisplayValue("product");

                        if (tableMap[productSvcId])
                            continue;
                        tableMap[productSvcId] = productSvcName;

                        filteredProducts.push(productSvcId);
                    }
                }

                if (filteredProducts.length &lt; 1 || isAllProdService) //selected service/table was configured for 'All products'
                    mappedProducts = this.getOwnedProducts(sourceId, sourceTable, searchTerm, CSMCaseTypeConstants.PRODUCT_SERVICE_ITEMS_COUNT);
                else {
                    for (var key in filteredProducts) {
                        for (var productKey in productData) {
                            if (productData[productKey].productId == filteredProducts[key]) {
                                mappedProducts.push(productData[productKey]);
                                break;
                            }
                        }
                    }
                }

                return mappedProducts.sort(this.sortData);
            } else {
                productData = this.getOwnedProducts(sourceId, sourceTable, searchTerm, CSMCaseTypeConstants.PRODUCT_SERVICE_ITEMS_COUNT);
            }
        } catch (exception) {
            gs.info('Error occured while loading the Products in getProducts method : ' + exception);
        }
        return productData.sort(this.sortData);
    },

    getServices: function(sourceId, sourceTable, productId, tableValue, isProductChecked, searchTerm, actionLocation, targetTable, category) {
        var serviceData = [];

        var extensionPoints = new GlideScriptedExtensionPoint().getExtensions(CSMCaseTypeConstants.OOB_SD_EXTENSION_POINT);

        for (var i = 0; i &lt; extensionPoints.length; i++) {
            if (extensionPoints[i].isValid()) {
                serviceData = extensionPoints[i].getServices(sourceId, sourceTable, productId, tableValue, isProductChecked, searchTerm, actionLocation, targetTable, category);
                break;
            }
        }

        return serviceData.sort(this.sortData);
    },

    getCaseTypes: function(sourceId, sourceTable, productId, serviceId, isProductChecked, searchTerm, actionLocation, targetTable) {
        var serviceData = [];

        var extensionPoints = new GlideScriptedExtensionPoint().getExtensions(CSMCaseTypeConstants.OOB_SD_EXTENSION_POINT);

        for (var i = 0; i &lt; extensionPoints.length; i++) {
            if (extensionPoints[i].isValid()) {
                serviceData = extensionPoints[i].getCaseTypes(sourceId, sourceTable, productId, serviceId, isProductChecked, searchTerm, actionLocation, targetTable);
                break;
            }
        }

        return serviceData.sort(this.sortData);
    },

    getRelatedServices: function(sourceSysId, sourceTable, location, targetTable, searchTerm, category) {
        var relatedServices = [];
        var extensionPoints = new GlideScriptedExtensionPoint().getExtensions(CSMCaseTypeConstants.OOB_SD_EXTENSION_POINT);

        for (var i = 0; i &lt; extensionPoints.length; i++) {
            if (extensionPoints[i].isValid()) {
                relatedServices = extensionPoints[i].getRelatedServices(sourceSysId, sourceTable, location, targetTable, searchTerm, category);
                break;
            }
        }
        return relatedServices.sort(this.sortData);
    },

    getAllCategories: function(targetTable) {
        var allCategories = [];
        var extensionPoints = new GlideScriptedExtensionPoint().getExtensions(CSMCaseTypeConstants.OOB_SD_EXTENSION_POINT);

        for (var i = 0; i &lt; extensionPoints.length; i++) {
            if (extensionPoints[i].isValid()) {
                allCategories = extensionPoints[i].getAllCategories(targetTable);
                break;
            }
        }
        return allCategories.sort(this.sortData);
    },

    getOwnedProducts: function(sourceId, sourceTable, searchTerm, count) {
        return new sn_csm_case_types.ServiceDefinitionHelper().getOwnedProducts(sourceId, sourceTable, searchTerm, count);
    },

    getServiceName: function(table, sysId) {
        var grService = new GlideRecord(table);

        if(!grService.canRead()) return "";

        grService.get(sysId);

        var grservice = grService.service.getRefRecord();

        return grservice.isValidRecord() ? grservice.getValue('name') : '';
    },

    getDefaultProducts: function(sourceTable, sourceId) {
        var res = {
            productId: "",
            productDisplayName: "",
            serviceId: "",
            serviceDisplayName: "",
            template: "",
            playbookrecordgeneratorid: "",
            casetypeId: "",
            casetypeDisplayName: "",
            table: "",
            soldProductId: "",
            installBaseId: ""
        };

        var grProd = new GlideRecord(sourceTable);

        if (!grProd.canRead()) return res;
	
        grProd.get(sourceId);

        var productId = grProd.getValue('product');
        var productDisplayName = grProd.getDisplayValue('product');
        res["productId"] = productId ? productId : "";
        res["productDisplayName"] = productDisplayName ? productDisplayName : "";


        if (res["productId"]) {
            if (sourceTable == CSMCaseTypeConstants.SOLD_PRODUCT_TABLE) {
                res["soldProductId"] = sourceId;
            } else {
                res["installBaseId"] = sourceId;
            }

            var prodSvcGr = new GlideRecord('sn_case_type_selection');
            prodSvcGr.addEncodedQuery('active=true');
            prodSvcGr.setLimit(2);

            var caseTypePostGr = prodSvcGr.addJoinQuery('sn_csm_case_types_product_service_rel', 'sys_id', 'service');

            caseTypePostGr.addOrCondition('product', productId);

            prodSvcGr.query();
            if (prodSvcGr.getRowCount() == 1 &amp;&amp; prodSvcGr.next()) {
                var serviceId = prodSvcGr.getValue("sys_id");
                var serviceDisplayName = prodSvcGr.getValue("name");
                var caseTypeTable = prodSvcGr.getValue("table");
                var playbookRecord = prodSvcGr.getValue("playbook_record_generator");

                var recordGenGr = new GlideRecord('sys_playbook_experience_record_generator');
                var templateFields;

                if (recordGenGr.isValid()) {
                    recordGenGr.get(playbookRecord);
                    templateFields = recordGenGr.getDisplayValue("template_fields") ? recordGenGr.getDisplayValue("template_fields") : prodSvcGr.getDisplayValue("template");
                }

                res["serviceId"] = serviceId ? serviceId : "";
                res["serviceDisplayName"] = serviceDisplayName ? serviceDisplayName : "";
                res["template"] = templateFields ? templateFields : "";
                res["playbookrecordgeneratorid"] = playbookRecord ? playbookRecord : "";

                var tableGr = new GlideRecord(caseTypeTable);
                var casetypeDisplayName = tableGr.getClassDisplayValue();
                res["casetypeId"] = caseTypeTable ? caseTypeTable.replaceAll('_', '') : "";
                res["casetypeDisplayName"] = casetypeDisplayName ? casetypeDisplayName : "";
                res["table"] = caseTypeTable ? caseTypeTable : "";
            }
        }

        return res;
    },

    sortData: function(serviceOne, serviceTwo) {
        var MIN_INTEGER = -2147483647; // the min number for order without value
        var orderOne = serviceOne.order ? parseInt(serviceOne.order) : MIN_INTEGER;
        var orderTwo = serviceTwo.order ? parseInt(serviceTwo.order) : MIN_INTEGER;

        if (orderOne === orderTwo) {
            return serviceOne.label.localeCompare(serviceTwo.label);
        } else {
            return orderOne - orderTwo;
        }
    },

    type: 'ProductServiceCaseTypeProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-05 23:57:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2124e5437745111001f9a8e48f5a9911&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ProductServiceCaseTypeProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="CSM Case Types" source="sn_csm_case_types"&gt;8ba29585872633003c1c8467a7cb0be4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="CSM Case Types"&gt;8ba29585872633003c1c8467a7cb0be4&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2124e5437745111001f9a8e48f5a9911&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-03 00:33:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:58</sys_created_on>
        <sys_id>a5e03c1983b01210c6695855eeaad3b9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProductServiceCaseTypeProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a5e03c1983b01210c6695855eeaad3b9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:58</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
