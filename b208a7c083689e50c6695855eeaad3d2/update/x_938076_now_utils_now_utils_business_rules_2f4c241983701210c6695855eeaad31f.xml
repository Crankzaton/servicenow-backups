<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!current.parent.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Set Project Task Data</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[setCalculationType();
getTaskEarliestSDate();
setScratchpadValuesForActuals();
setScratchpadValuesForRollupStartDate();
setScratchpadValuesForPhaseType();
setScratchpadValuesForLink();
setScratchpadValuesForParent();

function setScratchpadValuesForParent() {
 g_scratchpad.parent = current.parent;
}

function setScratchpadValuesForPhaseType() {
 g_scratchpad.projectTaskPhaseType = current.phase_type;
}

function setScratchpadValuesForLink() {
 g_scratchpad.projectTaskLink = (current.getValue('link') == '1');
}

function setScratchpadValuesForRollupStartDate() {
 var rollupProjectStartDate = GlideProperties.get('com.snc.project.rollup_project_start_date', true); 
 g_scratchpad.projectRollupStartDate = (rollupProjectStartDate == 'true');
}

function setCalculationType() {
 current.calculation_type = current.parent.top_task.calculation_type;
 g_scratchpad.projectTaskCalcType = current.calculation_type;
}

function setScratchpadValuesForActuals(){
 g_scratchpad.projectTaskActualStart = current.work_start;
 g_scratchpad.projectTaskActualEnd = current.work_end;
 g_scratchpad.projectTaskActualDuration = current.work_duration;
}

function getTaskEarliestSDate() {
 if(current.rollup && "manual" != current.calculation_type){
  //For rollup manual tasks we don't have to do do any calculation
  return;
 }
 
 var taskSysId = (current.isNewRecord())?current.parent.sys_id:current.sys_id;
 g_scratchpad.projectTaskSysId = taskSysId;
 var gr = new GlideRecord('planned_task');
 gr.addQuery("sys_id", taskSysId);
 gr.query();
 if (gr.next()) {
  // We will utilize the PlannedTaskManager script include to perform the calculations.
  // var ptm = new SNC.ProjectTaskManager();
  // ptm.loadAncestors(gr);
        // g_scratchpad.pTaskStartDate = ptm.getTaskStartDate(taskSysId);
  var plannedTaskAPI = new SNC.PlannedTaskAPI();
  g_scratchpad.pTaskStartDate = plannedTaskAPI.getEarliestConstraintDate(current.parent.sys_id);
 }
 var project = current.parent.top_task;
 var tDate = new GlideDateTime();
 if (project.work_start.nil() || current.calculation_type == 'manual') {
  tDate.setValue(current.parent.top_task.start_date);
  g_scratchpad.projectStartDate = tDate.getDisplayValue();
 }
 else {
  tDate.setValue(current.parent.top_task.work_start);
  g_scratchpad.projectStartDate = tDate.getDisplayValue();
 }
 g_scratchpad.projectCalculationType = current.parent.top_task.calculation_type;
 g_scratchpad.projectHasChildren = current.parent.top_task.rollup.toString();
 if (current.isNewRecord()) {
  
  if(current.calculation_type=='manual'){
   var projStartDate = new GlideDateTime();
   projStartDate.setValue(g_scratchpad.projectStartDate);
   var currentStartDate = new GlideDateTime();
    currentStartDate.setDisplayValue(current.start_date.getDisplayValue());
   if(currentStartDate.getDate() > projStartDate.getDate()){
    var sys_id = g_scratchpad.projectTaskSysId;
    var ptmUtil = new ProjectTaskManagerUtil();
    var scheduleId = ptmUtil.getScheduleId(sys_id);
                var scheduledDate = ptmUtil.adjustDatePerSchedule(scheduleId, currentStartDate.getDisplayValue(), "start_date");
    current.start_date = scheduledDate;
   }
   else {
    current.start_date = g_scratchpad.projectStartDate;
   }
   
   g_scratchpad.pTaskStartDate = g_scratchpad.projectStartDate;
   current.time_constraint = "start_on";
  }
  else{
   current.start_date = g_scratchpad.pTaskStartDate; //new project task should have the earliest start date
  }
 } 
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:54</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2f4c241983701210c6695855eeaad31f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Set Project Task Data</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_2f4c241983701210c6695855eeaad31f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:54</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=2f4c241983701210c6695855eeaad31f"/>
</record_update>
