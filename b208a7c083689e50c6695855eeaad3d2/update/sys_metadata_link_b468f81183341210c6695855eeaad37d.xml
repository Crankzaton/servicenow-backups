<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8421139c43457d105177603db7b8f212</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_udc.UDCUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UDCUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[class UDCUtil {
    static type = "UDCUtil";

    static assign(target) {
        for (let i = 1; i &lt; arguments.length; i++) {
            const source = arguments[i];
            for (let key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    }

    /**
     * Normalize the query params
     * @param {Object} params
     * @param {boolean} includeAll Include all the param values when it is true. When false, include only first value.
     * @returns {Object} trimmed param values
     */
    static normalizeQueryParams(params, includeAll = false) {
        const nrm = {};
        Object.keys(params).forEach(function(item) {
            if (includeAll)
                nrm[item] = params[item].map(v =&gt; v.trim());
            else
                nrm[item] = params[item][0].trim();
        });
        return nrm;
    }

    /**
     * Evaluate the glide script and returns the result
     * @param {GlideRecord} grObj
     * @param {string} scriptField
     * @param {Object} variables
     * @returns {Any} return value can be anything that returns by the script
     */
    static evaluateScript(grObj, scriptField, variables) {
        const evaluator = new GlideScopedEvaluator();
        return evaluator.evaluateScript(
            grObj,
            scriptField,
            variables
        );
    }

    /**
     * Returns URL with prefixed with "/" and append query parameters
     * @param {String} uri
     * @param {Object} queryParameters
     * @returns {String}
     */
    static createCanonicalizedUri(uri, queryParameters) {
        if (gs.nil(uri))
            return "";

        let canonicalizedUri = uri;

        if (!canonicalizedUri.startsWith("/"))
            canonicalizedUri = "/" + canonicalizedUri;

        if (gs.nil(queryParameters))
            queryParameters = {};

        if (Object.keys(queryParameters).length &gt; 0) {

            // Check to see if the canonicalized url already has query parameters. If it doesn't then
            // we append a ? because we need to add some query parameters. If it does have query parameters
            // we append a &amp; because we need to add additional query parameters.

            const queryParameterString = UDCUtil.buildQueryParameterString(queryParameters);
            if (!queryParameterString)
                return canonicalizedUri;

            if (!canonicalizedUri.contains("?"))
                canonicalizedUri = canonicalizedUri + "?";
            else
                canonicalizedUri = canonicalizedUri + "&amp;";

            canonicalizedUri = canonicalizedUri + queryParameterString;
        }

        return canonicalizedUri;
    }

    /**
     * Build query parameters string from object
     * @param {Object} queryParameters
     * @returns {String}
     */
    static buildQueryParameterString(queryParameters) {
        return Object.keys(queryParameters)
            .filter((queryParamKey) =&gt; {
                const value = queryParameters[queryParamKey]
                return value !== undefined &amp;&amp; value !== null;
            })
            .map(function(queryParamKey) {
                var queryParamValue = queryParameters[queryParamKey];
                var encodedParamValue = gs.urlEncode(queryParamValue);

                return gs.urlEncode(queryParamKey) + '=' + encodedParamValue;
            })
            .join('&amp;');

    }
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-08-30 11:14:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8421139c43457d105177603db7b8f212&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UDCUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Unified Developer Core" source="sn_udc"&gt;8a841f2bc42f457e8809ea71d35e821f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Unified Developer Core"&gt;8a841f2bc42f457e8809ea71d35e821f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8421139c43457d105177603db7b8f212&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-02 12:36:42&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:41</sys_created_on>
        <sys_id>b468f81183341210c6695855eeaad37d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UDCUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b468f81183341210c6695855eeaad37d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:41</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
