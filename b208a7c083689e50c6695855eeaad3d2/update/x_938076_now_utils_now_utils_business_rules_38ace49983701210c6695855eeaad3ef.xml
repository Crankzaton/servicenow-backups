<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>FlushActivityStreamCache</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var isCacheEnabled = gs.getProperty("com.snc.actsub.activity.stream.cache.enable") == "true";
 if (!isCacheEnabled)
  return;

 var activityType = current.activity_type_id.getRefRecord(); 
 if(activityType && activityType.undo_verb == current.verb)
  return;//do nothing for undo activities
 if (current.operation() == 'update' && !current.active.changes())
  return;

 var actSubCtx = global.ActivitySubscriptionContext.getContext();
 var subscriptionService = actSubCtx.getSubscriptionService();
 var subscribers;
 if(activityType){// Clear the cache.
  subscribers = subscriptionService.getAllSubscribers(current, activityType);
  if(subscribers){
   subscribers = filterByPermissions(current, subscribers);
   actSubCtx.getActivityService().flushStreamCacheForSubscribers(subscribers);
  }
 }
 
 function isEmpty(obj) {
  for(var prop in obj) {
   if(obj.hasOwnProperty(prop))
    return false;
  }
  return JSON.stringify(obj) === JSON.stringify({});
 }
 function filterByPermissions(current, subscribers){
  if(GlidePluginManager.isActive('com.sn_communities')){
   if(current.target_name != sn_communities.CommunityConstants.FORUM_TABLE)
    return subscribers;//Need not check for forum permissions if activity doesn't contain a forum context.
   var forumData = new sn_communities.CommunityForum(current.target_id + '').isForPublicAccess();
   //return immediately if it is a public forum
   return (forumData == true) ? subscribers : new sn_communities.CommunityActivityService().filterByPermissions(current, subscribers);
  }
  return subscribers;
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:21</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>38ace49983701210c6695855eeaad3ef</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FlushActivityStreamCache</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_38ace49983701210c6695855eeaad3ef</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:21</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=38ace49983701210c6695855eeaad3ef"/>
</record_update>
