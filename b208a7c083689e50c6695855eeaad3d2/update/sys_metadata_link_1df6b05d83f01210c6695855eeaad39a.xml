<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6ea4f504ff312110468365d7d3b8fef6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityCalculation_ContextFactory&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityCalculation_ContextFactory&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UnallocatedEntityCalculation_ContextFactory = Class.create();
UnallocatedEntityCalculation_ContextFactory.prototype = {
    initialize: function(oobRolesOnly) {
        this._oobRolesOnly = oobRolesOnly;

        this._logSourceName = `sn_entitlement.${this.type}`;

        this._v2SchemaIsInUseResult = null;
    },

    /**
     * Creates a group context object based on the current state of the schema
     *
     * @param {guid} groupId The sys_user_group.sys_id to use for the context
     * @return {GroupContext} The correct group context object for the schema
     */
    createGroupContext: function(groupId, subscriptionContext = null) {
        subscriptionContext = subscriptionContext ?
            subscriptionContext :
            this.createSubscriptionContext();

        const groupHasRoleInMemoryCache = this._getGroupHasRoleInMemoryCache();

        return this.v2SchemaIsInUse() ?
            new sn_entitlement.UnallocatedEntityCalculation_GroupContextV2(groupId, this._oobRolesOnly, subscriptionContext, groupHasRoleInMemoryCache) :
            new sn_entitlement.UnallocatedEntityCalculation_GroupContextV1(groupId, this._oobRolesOnly, subscriptionContext, groupHasRoleInMemoryCache);
    },

    /**
     * Creates a user context object based on the current state of the schema
     *
     * @param {guid} userId The sys_user.sys_id to use for the context
     * @return {UserContext} The correct user context object for the schema
     */
    createUserContext: function(userId, subscriptionContext = null) {
        subscriptionContext = subscriptionContext ?
            subscriptionContext :
            this.createSubscriptionContext();

        const userHasRoleInMemoryCache = this._getUserHasRoleInMemoryCache();
        const userHasLicenseInMemoryCache = this._getUserHasLicenseInMemoryCache();
        const userHasSubscriptionInMemoryCache = this._getUserHasSubscriptionInMemoryCache();

        return this.v2SchemaIsInUse() ?
            new sn_entitlement.UnallocatedEntityCalculation_UserContextV2(userId, this._oobRolesOnly, subscriptionContext, userHasRoleInMemoryCache, userHasSubscriptionInMemoryCache) :
            new sn_entitlement.UnallocatedEntityCalculation_UserContextV1(userId, this._oobRolesOnly, subscriptionContext, userHasRoleInMemoryCache, userHasLicenseInMemoryCache);
    },

    /**
     * Creates a subscription context object based on the current state of the schema
     *
     * @return {SubscriptionContext} The correct subscription context object for the schema
     */
    createSubscriptionContext: function() {
        return this.v2SchemaIsInUse() ?
            new sn_entitlement.UnallocatedEntityCalculation_SubscriptionsContextV2(this._oobRolesOnly) :
            new sn_entitlement.UnallocatedEntityCalculation_SubscriptionsContextV1(this._oobRolesOnly);
    },

    /**
     * Determines if the V2 schema is in use
     *
     * @return {bool} Returns true if the V2 schema is being used
     */
    v2SchemaIsInUse: function() {
        // Store the result a prevent re-calculating this for the lifetime of this object.
        if (this._v2SchemaIsInUseResult === null)
            this._v2SchemaIsInUseResult = this._v2SchemaIsInUseDetectViaFlags();
        return this._v2SchemaIsInUseResult;
    },

    /**
     * Determines if the v2 schema is in use based on glide properties
     *
     * @returns {bool} True if the flags are set to enable the V2 schema
     */
    _v2SchemaIsInUseDetectViaFlags: function() {
        // Default to V1 behavior
        const surfRouting = gs.getProperty('glide.entitlement.surf.routing', true).toLowerCase() === 'true';
        const emsDataAvailable = gs.getProperty('glide.entitlement.ems.data.available', false).toLowerCase() === 'true';
        const isV2SchemaInUse = !surfRouting &amp;&amp; emsDataAvailable;
        return isV2SchemaInUse;
    },

    /**
     * Creates or retrieves an existing UserHasRoleInMemoryCache object
     */
    _getUserHasRoleInMemoryCache: function() {
        if (!this._userHasRoleInMemoryCache) {
            const meteredRoleIds = this._getMeteredRoleIds();
            this._userHasRoleInMemoryCache = new sn_entitlement.UserHasRoleInMemoryCache(meteredRoleIds);
        }
        return this._userHasRoleInMemoryCache;
    },

    /**
     * Creates or retrieves an existing GroupHasRoleInMemoryCache object
     */
    _getGroupHasRoleInMemoryCache: function() {
        if (!this._groupHasRoleInMemoryCache) {
            const meteredRoleIds = this._getMeteredRoleIds();
            this._groupHasRoleInMemoryCache = new sn_entitlement.GroupHasRoleInMemoryCache(meteredRoleIds);
        }
        return this._groupHasRoleInMemoryCache;
    },

    /**
     * Creates or retrieves an existing UserHasLicenseInMemoryCache object
     */
    _getUserHasLicenseInMemoryCache: function() {
        if (!this._userHasLicenseInMemoryCache)
            this._userHasLicenseInMemoryCache = new sn_entitlement.UserHasLicenseInMemoryCache();
        return this._userHasLicenseInMemoryCache;
    },

    /**
     * Creates or retrieves an existing UserHasSubscriptionInMemoryCache object
     */
    _getUserHasSubscriptionInMemoryCache: function() {
        if (!this._userHasSubscriptionInMemoryCache)
            this._userHasSubscriptionInMemoryCache = new sn_entitlement.UserHasSubscriptionInMemoryCache();
        return this._userHasSubscriptionInMemoryCache;
    },

    /**
     * Retrieves an array of metered role ids
     */
    _getMeteredRoleIds: function() {
        return this.createSubscriptionContext().getRoleIdsByRequiresASubscription();
    },

    type: 'UnallocatedEntityCalculation_ContextFactory'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-20 20:29:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6ea4f504ff312110468365d7d3b8fef6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;54&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityCalculation_ContextFactory&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6ea4f504ff312110468365d7d3b8fef6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-06 17:28:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:27</sys_created_on>
        <sys_id>1df6b05d83f01210c6695855eeaad39a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityCalculation_ContextFactory</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1df6b05d83f01210c6695855eeaad39a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:27</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
