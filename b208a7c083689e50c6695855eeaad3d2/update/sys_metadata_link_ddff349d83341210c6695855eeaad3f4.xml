<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ac63ef22433c2110c2c5f59cabb8f20f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_csm_case_types.ServiceDefinitionHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Helper APIs for Service Definitions&lt;/description&gt;
        &lt;name&gt;ServiceDefinitionHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ServiceDefinitionHelper = Class.create();
ServiceDefinitionHelper.prototype = {
    initialize: function() {},

    filterRelatedActiveServices: function(parent, taskType) {
        var filter = "active=true^" + "table=" + taskType;
        if (parent) {
            var grCase = new GlideRecord(CSMCaseTypeConstants.TABLE_TYPE);
            grCase.get(parent);
            if (grCase.service) {
                var relatedServices = [];

                var grMapping = new GlideRecord(CSMCaseTypeConstants.SERVICE_TO_SERVICE_REL_TABLE);
                grMapping.addEncodedQuery("service=" + grCase.service + "^related_service.table=" + taskType);
                grMapping.query();
                while (grMapping.next()) {
                    relatedServices.push(grMapping.related_service + '');
                }
                filter = "active=true^" + "sys_idIN" + relatedServices.join();
            }
        }
        return filter;
    },

    getOwnedProducts: function(sourceId, sourceTable, searchTerm, count) {

        var productData = [];
        var context = [];
        try {
            if (this.isProductHidden())
                return productData;

            if (!sourceTable &amp;&amp; !sourceId)
                return productData;

            var tableHierarchy = new GlideTableHierarchy(sourceTable).getTables();
            var isCaseExtension = tableHierarchy.indexOf(global.CSMBaseConstants.CASE_TABLE) &gt; -1;
            var isSoldProduct = sourceTable == CSMCaseTypeConstants.SOLD_PRODUCT_TABLE;
            var isInstallBase = sourceTable == CSMCaseTypeConstants.INSTALL_BASE_TABLE;
            var isSoldProductOrInstallBase = isSoldProduct || isInstallBase;

            var gr = new GlideRecord(sourceTable);
            gr.get(sourceId);

            switch (true) {
                case sourceTable == CSMCaseTypeConstants.INTERACTION_TABLE || isCaseExtension || isSoldProductOrInstallBase:
                    if (gr.getValue("contact")) {
                        context.push({
                            table: global.CSMBaseConstants.CONTACT_TABLE,
                            value: gr.getValue("contact")
                        });
                        context.push({
                            table: global.CSMBaseConstants.ACCOUNT_TABLE,
                            value: gr.getValue("account")
                        });
                    } else if (gr.getValue("consumer")) {
                        context.push({
                            table: global.CSMBaseConstants.CONSUMER_TABLE,
                            value: gr.getValue("consumer")
                        });
                    } else if (gr.getValue("account") &amp;&amp; !gr.getValue("contact")) {
                        context.push({
                            table: global.CSMBaseConstants.ACCOUNT_TABLE,
                            value: gr.getValue("account")
                        });
                    } else context.push({
                        table: sourceTable,
                        value: sourceId
                    });
                    break;
                case sourceTable == global.CSMBaseConstants.ACCOUNT_TABLE:
                    context.push({
                        table: global.CSMBaseConstants.ACCOUNT_TABLE,
                        value: gr.getUniqueValue()
                    });
                    break;
                case sourceTable == global.CSMBaseConstants.CONTACT_TABLE:
                    context.push({
                        table: global.CSMBaseConstants.CONTACT_TABLE,
                        value: gr.getUniqueValue()
                    });
                    context.push({
                        table: global.CSMBaseConstants.ACCOUNT_TABLE,
                        value: gr.getValue("account")
                    });
                    break;
                case sourceTable == global.CSMBaseConstants.CONSUMER_TABLE:
                    context.push({
                        table: global.CSMBaseConstants.CONSUMER_TABLE,
                        value: gr.getUniqueValue()
                    });
                    break;
                case sourceTable == global.CSMBaseConstants.HOUSEHOLD:
                    context.push({
                        table: global.CSMBaseConstants.HOUSEHOLD,
                        value: gr.getUniqueValue()
                    });
                    break;
                case sourceTable == CSMCaseTypeConstants.CSM_BL_INTERNAL_TABLE || sourceTable == CSMCaseTypeConstants.CSM_BL_EXTERNAL_TABLE:
                    context.push({
                        table: CSMCaseTypeConstants.CSM_SERVICE_ORGANIZATION_TABLE,
                        value: gr.getUniqueValue()
                    });
                    break;
                default:
                    context.push({
                        table: sourceTable,
                        value: sourceId
                    });
                    break;
            }

            var extensionPoints = new GlideScriptedExtensionPoint().getExtensions(CSMCaseTypeConstants.OOB_SD_EXTENSION_POINT);

            for (var i = 0; i &lt; extensionPoints.length; i++) {
                if (extensionPoints[i].isValid()) {
                    productData = extensionPoints[i].getProductModels(context, searchTerm, count, CSMCaseTypeConstants.IS_SIMPLE_OUTPUT);
                    break;
                }
            }
        } catch (exception) {
            gs.info('Error occured while loading the Prooducts in getOwnedProducts method : ' + exception);
        }
        return productData;
    },

    isProductHidden: function() {
        var extensionPoints = new GlideScriptedExtensionPoint().getExtensions(CSMCaseTypeConstants.OOB_SD_EXTENSION_POINT);
        return !GlidePluginManager.isActive('com.snc.install_base') || extensionPoints.length &lt; 1;
    },

    type: 'ServiceDefinitionHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-07 05:51:45&lt;/sys_created_on&gt;
        &lt;sys_id&gt;ac63ef22433c2110c2c5f59cabb8f20f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ServiceDefinitionHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="CSM Case Types" source="sn_csm_case_types"&gt;8ba29585872633003c1c8467a7cb0be4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="CSM Case Types"&gt;8ba29585872633003c1c8467a7cb0be4&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_ac63ef22433c2110c2c5f59cabb8f20f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-14 05:44:22&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:46</sys_created_on>
        <sys_id>ddff349d83341210c6695855eeaad3f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ServiceDefinitionHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ddff349d83341210c6695855eeaad3f4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:46</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
