<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update estimated benefit in system curre</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var currencyService = null;
    var fpService = new FinancialsForPPM();
    var toCurrency = current.entered_currency || current.benefit_plan.currency;
    if (current.entered_currency != current.benefit_plan.functional_currency && current.estimated_benefit != 0) {
        var exchangeRates = fpService.getExchangeRates([current.fiscal_period], toCurrency, current.benefit_plan.functional_currency);
        if (exchangeRates.exchangeRatesSysIds.length) {
            current.reference_rate = exchangeRates.exchangeRatesSysIds[0];
            current.exchange_rate = exchangeRates.exchangeRates[0];
            current.exchange_rate_date = exchangeRates.exchangeRateDates[0];
            currencyService = new SNC.FMCurrency();
            if (exchangeRates.exchangeRatesSysIds[0])
                current.base_estimated_benefit = currencyService.calculateAmount(current.estimated_benefit, exchangeRates.exchangeRatesSysIds[0]);
            else {
                current.base_estimated_benefit = current.estimated_benefit;
            }
        } else {
            current.base_estimated_benefit = current.estimated_benefit;

        }
    } else {
  current.base_estimated_benefit = current.estimated_benefit;
  current.exchange_rate = "";
  current.exchange_rate_date = "";
  current.reference_rate = "";
 }

    //calculate for benefit in project currency
    var projectCurrency = current.benefit_plan.project_currency;
    if (projectCurrency) {
        if (projectCurrency == current.benefit_plan.functional_currency) {
            current.setValue(PmFieldConstants.BENEFIT_REFERENCE_RATE_PROJECT_CURRENCY, current.reference_rate);
            current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_PROJECT_CURRENCY, current.exchange_rate);
            current.setValue(PmFieldConstants.BENEFIT_PROJECT_CURRENCY, current.base_estimated_benefit);
        } else if (projectCurrency == current.entered_currency || current.estimated_benefit == 0) {
            current.setValue(PmFieldConstants.BENEFIT_PROJECT_CURRENCY, current.estimated_benefit);
            current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_PROJECT_CURRENCY, "");
            current.setValue(PmFieldConstants.BENEFIT_REFERENCE_RATE_PROJECT_CURRENCY, "");
        } else {
            var localExchangeRates = fpService.getExchangeRates([current.fiscal_period], toCurrency, projectCurrency);
            if (localExchangeRates.exchangeRatesSysIds.length) {
    current.setValue(PmFieldConstants.BENEFIT_REFERENCE_RATE_PROJECT_CURRENCY, localExchangeRates.exchangeRatesSysIds[0]);
    current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_PROJECT_CURRENCY, localExchangeRates.exchangeRates[0]);
    current.exchange_rate_date = localExchangeRates.exchangeRateDates[0];
    currencyService = new SNC.FMCurrency();
                if (localExchangeRates.exchangeRatesSysIds[0])
                    current.setValue(PmFieldConstants.BENEFIT_PROJECT_CURRENCY, currencyService.calculateAmount(current.estimated_benefit, localExchangeRates.exchangeRatesSysIds[0]));
                else
                    current.setValue(PmFieldConstants.BENEFIT_PROJECT_CURRENCY, current.estimated_benefit);
            } else {
                current.setValue(PmFieldConstants.BENEFIT_PROJECT_CURRENCY, current.estimated_benefit);
            }
        }
    }
    if (projectCurrency && current.entered_currency == current.benefit_plan.functional_currency == current.project_currency)
        current.exchange_rate_date = "";

    // Calculation for benefit in demand currency
    var demandCurrency = current.benefit_plan.demand_currency;
    if (!demandCurrency)
        return;
    if (demandCurrency == current.benefit_plan.functional_currency) {
        current.setValue(PmFieldConstants.BENEFIT_REFERENCE_RATE_DEMAND_CURRENCY, current.reference_rate);
        current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_DEMAND_CURRENCY, current.exchange_rate);
        current.setValue(PmFieldConstants.BENEFIT_DEMAND_CURRENCY, current.base_estimated_benefit);
        current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_DATE_DEMAND_CURRENCY, current.exchange_rate_date);
    } else if (demandCurrency == current.entered_currency || current.estimated_benefit == 0) {
        current.setValue(PmFieldConstants.BENEFIT_DEMAND_CURRENCY, current.estimated_benefit);
        current.setValue(PmFieldConstants.BENEFIT_REFERENCE_RATE_DEMAND_CURRENCY, "");
        current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_DEMAND_CURRENCY, "");
        current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_DATE_DEMAND_CURRENCY, "");
    } else {
        var localExchangeRatesDemandCurrency = fpService.getExchangeRates([current.fiscal_period], toCurrency, demandCurrency);
        if (localExchangeRatesDemandCurrency.exchangeRatesSysIds.length) {
   current.setValue(PmFieldConstants.BENEFIT_REFERENCE_RATE_DEMAND_CURRENCY, localExchangeRatesDemandCurrency.exchangeRatesSysIds[0]);
   current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_DEMAND_CURRENCY, localExchangeRatesDemandCurrency.exchangeRates[0]);
   current.setValue(PmFieldConstants.BENEFIT_EXCHANGE_RATE_DATE_DEMAND_CURRENCY, localExchangeRatesDemandCurrency.exchangeRateDates[0]);
   currencyService = new SNC.FMCurrency();
            if (localExchangeRatesDemandCurrency.exchangeRatesSysIds[0])
                current.setValue(PmFieldConstants.BENEFIT_DEMAND_CURRENCY, currencyService.calculateAmount(current.estimated_benefit, localExchangeRatesDemandCurrency.exchangeRatesSysIds[0]));
            else
                current.setValue(PmFieldConstants.BENEFIT_DEMAND_CURRENCY, current.estimated_benefit);
        } else {
            current.setValue(PmFieldConstants.BENEFIT_DEMAND_CURRENCY, current.estimated_benefit);
        }

    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>fbfba09583701210c6695855eeaad370</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update estimated benefit in system curre</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_fbfba09583701210c6695855eeaad370</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:33</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=fbfba09583701210c6695855eeaad370"/>
</record_update>
