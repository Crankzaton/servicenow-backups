<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b02a4bbb432b2110f3063fea8eb8f240</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.GlobalCustomTablesRecommendationDAO&lt;/api_name&gt;
        &lt;caller_access&gt;2&lt;/caller_access&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GlobalCustomTablesRecommendationDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GlobalCustomTablesRecommendationDAO = Class.create();
GlobalCustomTablesRecommendationDAO.prototype = {
    initialize: function() {
        this._tableName = 'global_custom_tables_recommendation';
    },

    insert: function(ua_custom_table_inventory_sys_id, subscription_entitlement_sys_id, weight, qualifying_data) {
        /*Check if record exists. If exists, update the updated on column with current date, so that the record
        does not get flushed when auto flush runs. Else insert new record*/

        const gr_exist = this.checkIfRecordExists(ua_custom_table_inventory_sys_id, subscription_entitlement_sys_id);
        if (gr_exist.next()) {
            gr_exist.sys_updated_on = new Date().Date;
            gr_exist.update();
        } else {
            const gr = new GlideRecord(this._tableName);
            gr.initialize();
            gr.table_name = ua_custom_table_inventory_sys_id;
            gr.recommendation_product = subscription_entitlement_sys_id;
            gr.weight = weight;
            gr.qualifying_data = JSON.stringify(qualifying_data);
            gr.insert();
        }
    },
    
    checkIfRecordExists: function(tableName, recommendedProduct) {
        const gr = new GlideRecord(this._tableName);
        gr.addQuery('table_name.sys_id', tableName);
        gr.addQuery('recommendation_product.sys_id', recommendedProduct);
        gr.query();
        return gr;
    },

    deleteRecommendationsBySysId(sysId) {
        const gr = new GlideRecord(this._tableName);
        gr.initialize();
        gr.addQuery('table_name', sysId);
        gr.query();
        return gr.deleteMultiple();
    },

    /**
     * Retrieves the value of the given field for the recommendation record with the given id
     *
     * @param {String} fieldName - the field name to get the value of
     * @param {guid} sysId - the recommendation record sys_id
     * @returns {String} The string value of the field or null
     */
    getFieldValuebySysId(fieldName, sysId) {
        const gr = new GlideRecord(this._tableName);
        return gr.get(sysId) ? gr.getValue(fieldName) : null;
    },

    type: 'GlobalCustomTablesRecommendationDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-06-27 18:05:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b02a4bbb432b2110f3063fea8eb8f240&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GlobalCustomTablesRecommendationDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b02a4bbb432b2110f3063fea8eb8f240&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-06 20:36:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:03</sys_created_on>
        <sys_id>9500099d83341210c6695855eeaad37f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GlobalCustomTablesRecommendationDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9500099d83341210c6695855eeaad37f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:03</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
