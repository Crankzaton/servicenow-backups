<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>674cd0b3432675106c4bb0117fb8f27e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_udc.FileTaxonomyCategoryMap&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;FileTaxonomyCategoryMap&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[class FileTaxonomyCategoryMap {
    static type = "FileTaxonomyCategoryMap";
    static TABLE = "sn_udc_file_taxonomy_type_category_m2m";

    /**
     * Retrieves list of categories
     * @returns {Array} array of categories
     */
    static getCategories() {
        let categories = [];
        const gr = new GlideRecord(FileTaxonomyCategoryMap.TABLE);
        gr.query();

        while (gr.next()) {
            const category = gr.category.getRefRecord();
            categories.push({
                sysId: category.getUniqueValue(),
                label: category.getDisplayValue("label") || "",
                description: category.getDisplayValue("description") || "",
                icon: category.getDisplayValue("icon") || UDCConstants.fallbackIcons.CATEGORY,
                parentCategory: gr.getDisplayValue("parent_category") || null,
                parentCategorySysId: gr.getValue("parent_category")
            });
        }
        return categories;
    }

    /**
     * Retrieves all Types with category details
     * @returns {Map} with key typeSysId and value array of categories
     */
    static getCatagoriesForType() {
        const typeCategories = new Map();
        const gr = new GlideRecord(FileTaxonomyCategoryMap.TABLE);
        gr.query();
        while (gr.next()) {
            const category = gr.category.getRefRecord();
            const categorySysId = category.getUniqueValue();
            const typeSysId = gr.getValue("taxonomy_type");

            const categoryDetail = {
                sysId: categorySysId,
                label: category.getDisplayValue('label'),
                description: category.getDisplayValue('description'),
                icon: category.getDisplayValue('icon') || UDCConstants.fallbackIcons.CATEGORY
            }
            if (typeCategories.has(typeSysId)) {
                const categories = typeCategories.get(typeSysId);
                const isCategoryExist = categories.some(element =&gt; element.sysId === categorySysId);
                if (!isCategoryExist) {
                    typeCategories.get(typeSysId).push(categoryDetail);
                }
            } else {
                typeCategories.set(typeSysId, [categoryDetail]);
            }
        }
        return typeCategories;
    }

}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-11-23 08:36:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;674cd0b3432675106c4bb0117fb8f27e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FileTaxonomyCategoryMap&lt;/sys_name&gt;
        &lt;sys_package display_value="Unified Developer Core" source="sn_udc"&gt;8a841f2bc42f457e8809ea71d35e821f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Unified Developer Core"&gt;8a841f2bc42f457e8809ea71d35e821f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_674cd0b3432675106c4bb0117fb8f27e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-19 07:42:30&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:06</sys_created_on>
        <sys_id>90e6fc1d83f01210c6695855eeaad34d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FileTaxonomyCategoryMap</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_90e6fc1d83f01210c6695855eeaad34d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
