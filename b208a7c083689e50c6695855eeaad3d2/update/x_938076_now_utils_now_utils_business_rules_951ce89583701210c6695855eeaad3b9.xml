<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Reservation Checks</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
 
 if (current.getRecordClassName() != WPConstants.TABLES.RESERVATION)
        return;

    // Reservation state is confirmed for Reservation's created using API, so we can skip doing validations
    if (current.isNewRecord() && current.state == 'confirmed')
        return;

    // Reservation state will be cancelled only from API, so we can skip doing validations
    if (current.operation() == 'update' && current.state == 'cancelled')
        return;

    // Set is_parent to true for Parent reservation
    if (current.isNewRecord() && gs.nil(current.source_reservation) && !gs.nil(current.shift))
        current.is_parent = true;


    var response = new WPReservationUtils().checkIfReservationCanBeDone(current);
    var abort = false;

    if (!gs.nil(response.locationUnavailableMsg))
        abort = displayError(response.locationUnavailableMsg);

    if (!gs.nil(response.dateInvalidMsg))
        abort = displayError(response.dateInvalidMsg);
 
 if (!gs.nil(response.invalidLocationMsg))
        abort = displayError(response.invalidLocationMsg);

    if (!gs.nil(response.spaceMissing))
        abort = displayError(response.spaceMissing);

    if (!gs.nil(response.spaceInactiveMsg))
        abort = displayError(response.spaceInactiveMsg);

    if (!gs.nil(response.spaceUnreservableMsg))
        abort = displayError(response.spaceUnreservableMsg);

    if (response.areaUnreservableMsg)
        abort = displayError(response.areaUnreservableMsg);

    if (response.floorUnreservableMsg)
        abort = displayError(response.floorUnreservableMsg);

    if (response.buildingUnreservableMsg)
        abort = displayError(response.buildingUnreservableMsg);
 
    if (!gs.nil(response.reservationCollisionMsg))
        abort = displayError(response.reservationCollisionMsg);
 
 if(!gs.nil(response.capacityExceedMessage)){
  abort = displayError(response.capacityExceedMessage);
 }

    if (abort)
        current.setAbortAction(true);
    else {
        if (current.isNewRecord())
            current.state = 'confirmed';

        // Set Reservation types
        setReservationTypes(current);

        if (current.is_parent == true) {
            gs.addInfoMessage(gs.getMessage('Child Reservations will be created/updated in background.'));
   if(current.operation() == 'update'){
    if(new WPReservationUtils().hasExceptionChild(current))
     gs.addInfoMessage(gs.getMessage('One or more Custom child reservation changes will be overridden.'));    
   }
        }
    }

    function displayError(msg) {
        gs.addErrorMessage(msg);
        return true;
    }
})(current, previous);

function setReservationTypes(current) {
    if (current.isNewRecord()) {
        if (current.is_parent == true) {
            current.setValue('reservation_type', WPConstants.RESERVATION_TYPE.SHIFT);
            current.setValue('reservation_subtype', WPConstants.RESERVATION_SUBTYPE.RECURRING_PARENT);
        } else {
            if (gs.nil(current.source_reservation)) {
                current.setValue('reservation_type', WPConstants.RESERVATION_TYPE.SINGLE);
                current.setValue('reservation_subtype', WPConstants.RESERVATION_SUBTYPE.SINGLE);
            } else {
                current.setValue('reservation_type', current.source_reservation.reservation_type);
                current.setValue('reservation_subtype', WPConstants.RESERVATION_SUBTYPE.EXCEPTION);
            }
        }
    } else {
        if (!gs.nil(current.source_reservation))
            current.setValue('reservation_subtype', WPConstants.RESERVATION_SUBTYPE.EXCEPTION);
    }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>951ce89583701210c6695855eeaad3b9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Reservation Checks</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_951ce89583701210c6695855eeaad3b9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:55</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=951ce89583701210c6695855eeaad3b9"/>
</record_update>
