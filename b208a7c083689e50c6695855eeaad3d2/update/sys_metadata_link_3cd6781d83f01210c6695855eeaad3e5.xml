<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>63088139530330107234ddeeff7b1264</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFClassificationService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;RFClassificationService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFClassificationService = Class.create();
RFClassificationService.prototype = {
    tableName: RFConstants.tables.ML_CAPABILITY_DEFINITION_CLASSIFICATION,

    initialize: function(grOrSysId) {
        if (grOrSysId &amp;&amp; grOrSysId.sys_class_name == this.tableName &amp;&amp; grOrSysId.isValidRecord()) {
            this.currentRecord = grOrSysId;
        } else {
            var solutionDefGr = new GlideRecord(this.tableName);
            if (solutionDefGr.get(grOrSysId)) {
                this.currentRecord = solutionDefGr;
            }
        }
    },

    hasValidRecord: function() {
        return Boolean(this.currentRecord);
    },

    getPredictions: function(current, additionalParameters) {
        var predictions = [];
        if (!this.hasValidRecord()) {
            return predictions;
        }
        var predictor = new global.MLPredictor();
        var solution = predictor.findActiveSolution(this.getSolutionName());
        if (solution &amp;&amp; predictor.isClassificationSolution(solution)) {
            var options = {};
            if (additionalParameters &amp;&amp; additionalParameters[RFConstants.mlPredictorOptions.TOP_N]) {
                options[RFConstants.mlPredictorOptions.TOP_N] = additionalParameters[RFConstants.mlPredictorOptions.TOP_N];
            }
            predictions = predictor.getPredictions(current, solution, options);
        }
        return predictions;
    },

    getTable: function() {
        return this.currentRecord.getValue(RFConstants.fields.ML_CAPABILITY_DEFINITION_BASE_TABLE);
    },

    getOutputField: function() {
        return this.currentRecord.getValue(RFConstants.fields.ML_CAPABILITY_DEFINITION_CLASSIFICATION_OUTPUT_FIELD);
    },

    getSolutionName: function() {
        return this.currentRecord.getValue(RFConstants.fields.ML_CAPABILITY_DEFINITION_BASE_SOLUTION_NAME);
    },

    getOutputFieldType: function() {
        var tableGR = new GlideRecord(this.getTable());
        if (tableGR.isValid()) {
            var field = tableGR.getElement(this.getOutputField());
            if (field != null) {
                return field.getED().getInternalType();
            }
        }
    },

    getOutputFieldReferenceTable: function() {
        return RFUtils.getFieldReferenceTable(this.getTable(), this.getOutputField());
    },

    type: 'RFClassificationService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-07 18:25:11&lt;/sys_created_on&gt;
        &lt;sys_id&gt;63088139530330107234ddeeff7b1264&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFClassificationService&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_63088139530330107234ddeeff7b1264&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-25 07:38:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:51</sys_created_on>
        <sys_id>3cd6781d83f01210c6695855eeaad3e5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFClassificationService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3cd6781d83f01210c6695855eeaad3e5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
