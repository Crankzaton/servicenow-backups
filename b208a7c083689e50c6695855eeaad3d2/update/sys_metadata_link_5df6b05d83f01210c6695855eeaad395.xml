<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6e92b98c47a38210cd4e1ce4316d43d4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.calcDuration&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;checkBalDuration: function(recUpdatedTime) {&amp;#13;
&amp;#13;
        /*&amp;#13;
		var timeFac = new global.calcDuration().checkBalDuration("2024-07-17 07:00:00");&amp;#13;
 		var timeParse = new global.JSON.parse(timeFac);&amp;#13;
 		gs.info("Record time in UTC " + timeParse.recTimeinUTC);&amp;#13;
 		gs.info("Record time in HKT " + timeParse.recTimeinHkt);&amp;#13;
 		gs.info("Record time in UTC " + timeParse.balDuration);&amp;#13;
		*/&amp;#13;
&amp;#13;
        //Received Record UTC Time&amp;#13;
        var recTime = new GlideDateTime(); //record time&amp;#13;
        recTime.setValue(recUpdatedTime); // pass the updated time&amp;#13;
        recTime.addSeconds(28800);&amp;#13;
        recTime.getValue();&amp;#13;
        //Received Record UTC Time&amp;#13;
&amp;#13;
        //5Pm HKT reference Time&amp;#13;
        var hktDateTime = new GlideDateTime(recTime);&amp;#13;
        hktDateTime.setValue(recTime);&amp;#13;
        var hktDate = hktDateTime.getDate(); //HKT time&amp;#13;
        var hktfivePmRef = new GlideDateTime();&amp;#13;
        hktfivePmRef.setValue(hktDate + " " + "17:00:00"); //5Pm HKT current Day &amp;#13;
        //5Pm HKT reference Time&amp;#13;
&amp;#13;
&amp;#13;
        var balTime = gs.dateDiff(recTime.getDisplayValue(), hktfivePmRef.getDisplayValue()); //past,current time difference&amp;#13;
        var balancetimer = '0' + " " + balTime; // balance duration&amp;#13;
&amp;#13;
        var timeFactors = {&amp;#13;
            "recTimeinUTC": recUpdatedTime,&amp;#13;
            "recTimeinHkt": recTime.getValue(),&amp;#13;
            "balDuration": balancetimer&amp;#13;
        };&amp;#13;
        return JSON.stringify(timeFactors);&amp;#13;
&amp;#13;
    },&lt;/description&gt;
        &lt;name&gt;calcDuration&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var calcDuration = Class.create();
calcDuration.prototype = {
        initialize: function() {},


        //Testing Snippet
        /*
    var recTime = "2024-07-17 06:00:00";

    var gt = new global.calcDuration().evalBalTimer(recTime);

    var after5PMParam = new global.JSON.parse(gt);

    gs.info("Record time in UTC " + after5PMParam.recTimeinUTC);
    gs.info("Record time in HKT " + after5PMParam.recTimeinHkt);
    gs.info("Record time in UTC " + after5PMParam.balDuration);
	*/


    //Testing Snippet

	/*
    checkMoreThanFiveHrs: function(recTime) {
        var hktTime = new GlideDateTime();
        hktTime.setValue(recTime);
        hktTime.addSeconds(28800);
        var gt = hktTime.getTime();
        var timeStr = gt.getByFormat('HH:mm:ss'); // 24 hour format
        var split = timeStr.split(":");
        var hour = split[0];
        hour = parseInt(hour);
        if (hour + 2 &gt;= 17) {
            return true;
        } else return false;
    },
	*/



    evalBalTimer: function(recTime) {
        var hktTime = new GlideDateTime();
        hktTime.setValue(recTime);
        hktTime.addSeconds(28800);
        var gt = hktTime.getTime();
        var timeStr = gt.getByFormat('HH:mm:ss'); // 24 hour format
        var split = timeStr.split(":");
        var hour = split[0];
        hour = parseInt(hour);

        //if received time is 5 or more than 5

        if (hour &gt;= 17) {
			gs.info("if the received time is more than 5 PM");
            return '0 02:00:00'; //if the received time is more than 5 PM
        } else if (hour + 2 &gt;= 17) {
			gs.info("if received time more than 5 PM after adding 2 Hours");
            return this.checkBalAfter5PmDuration(recTime); //if received time more than 5 PM after adding 2 Hours
        } else {
			gs.info("if received is less than 5 PM after adding 2 Hours");
            return this.checkBalBefore5PMDuration(recTime); //if received is less than 5 PM after adding 2 Hours
        }
    },




    checkBalAfter5PmDuration: function(recUpdatedTime) {

		gs.info("Entered in checkBalAfter5PmDuration ");

        /*
		var timeFac = new global.calcDuration().checkBalDuration("2024-07-17 07:00:00");
 		var timeParse = new global.JSON.parse(timeFac);
 		gs.info("Record time in UTC " + timeParse.recTimeinUTC);
 		gs.info("Record time in HKT " + timeParse.recTimeinHkt);
 		gs.info("Record time in UTC " + timeParse.balDuration);
		*/

        //Received Record UTC Time
        var recTime = new GlideDateTime(); //record time
        recTime.setValue(recUpdatedTime); // pass the updated time
        recTime.addSeconds(28800); //HKT conversion
        recTime.getValue();
        //Received Record UTC Time

        //5Pm HKT reference Time
        var hktDateTime = new GlideDateTime(recTime);
        hktDateTime.setValue(recTime);
        var hktDate = hktDateTime.getDate(); //HKT time
        var hktfivePmRef = new GlideDateTime();
        hktfivePmRef.setValue(hktDate + " " + "17:00:00"); //5Pm HKT current Day 
        //5Pm HKT reference Time


        var balTime = gs.dateDiff(recTime.getDisplayValue(), hktfivePmRef.getDisplayValue()); //past,current time difference
        var balancetimer = '0' + " " + balTime; // balance duration

        var timeFactors = {
            "recTimeinUTC": recUpdatedTime,
            "recTimeinHkt": recTime.getValue(),
            "balDuration": balancetimer
        };
        return balancetimer;

    },



    checkBalBefore5PMDuration: function(recUpdatedTime) {
        gs.info("Entered in checkBalBefore5PMDuration ");

        /*
		var timeFac = new global.calcDuration().checkBalDuration("2024-07-17 07:00:00");
 		var timeParse = new global.JSON.parse(timeFac);
 		gs.info("Record time in UTC " + timeParse.recTimeinUTC);
 		gs.info("Record time in HKT " + timeParse.recTimeinHkt);
 		gs.info("Record time in UTC " + timeParse.balDuration);
		*/

        //Received Record UTC Time
        var recTime = new GlideDateTime(); //record time
        recTime.setValue(recUpdatedTime); // pass the updated time
        recTime.addSeconds(28800);
        recTime.getValue();
        //Received Record UTC Time

        //Record receivedtime plus 2hrs Time
        var recAddedTime = new GlideDateTime(); //record time
        recAddedTime.setValue(recUpdatedTime); // pass the updated time
        recAddedTime.addSeconds(28800);
        recAddedTime.addSeconds(7200); //adding 2hrs
        recAddedTime.getValue();
        //Record receivedtime plus 2hrs Time


        var balTime = gs.dateDiff(recTime.getDisplayValue(), recAddedTime.getDisplayValue()); //past,current time difference
        var balancetimer = '0' + " " + balTime; // balance duration

        var timeFactors = {
            "recTimeinUTC": recUpdatedTime,
            "recTimeinHkt": recTime.getValue(),
            "balDuration": balancetimer
        };
        return balancetimer;

    },






    checkBalfromNowtoNextDay9AMDuration: function(recUpdatedTime) {

        gs.info("Entered in checkBalfromNowto9AMDuration");

        /*
		var timeFac = new global.calcDuration().checkBalDuration("2024-07-17 07:00:00");
 		var timeParse = new global.JSON.parse(timeFac);
 		gs.info("Record time in UTC " + timeParse.recTimeinUTC);
 		gs.info("Record time in HKT " + timeParse.recTimeinHkt);
 		gs.info("Record time in UTC " + timeParse.balDuration);
		*/

        //Received Record UTC Time
        var recTime = new GlideDateTime(); //record time
        recTime.setValue(recUpdatedTime); // pass the updated time
        recTime.addSeconds(28800); //HKT conversion
        recTime.getValue();
        //Received Record UTC Time

        //Next Day 9AM HKT reference Time
        var hktDateTime = new GlideDateTime(recTime);
        hktDateTime.setValue(recTime);
        hktDateTime.addDays(1); //checking next day 9PM
        var hktDate = hktDateTime.getDate(); //HKT time
        var hktfivePmRef = new GlideDateTime();
        hktfivePmRef.setValue(hktDate + " " + "09:00:00"); //9AM HKT next Day 
        //Next Day 9AM HKT reference Time


        var balTime = gs.dateDiff(recTime.getDisplayValue(), hktfivePmRef.getDisplayValue()); //past,current time difference
        var balancetimer = '0' + " " + balTime; // balance duration

        var timeFactors = {
            "recTimeinUTC": recUpdatedTime,
            "recTimeinHkt": recTime.getValue(),
            "balDuration": balancetimer
        };
        return JSON.stringify(timeFactors);

    },

    type: 'calcDuration'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-07-17 12:35:23&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6e92b98c47a38210cd4e1ce4316d43d4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;calcDuration&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6e92b98c47a38210cd4e1ce4316d43d4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-08-07 09:11:11&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:27</sys_created_on>
        <sys_id>5df6b05d83f01210c6695855eeaad395</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>calcDuration</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5df6b05d83f01210c6695855eeaad395</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:27</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
