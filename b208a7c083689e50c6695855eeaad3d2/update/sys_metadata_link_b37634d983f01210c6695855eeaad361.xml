<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>45005496cb79211050501ebfe8076dd1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_install_base.InstallBaseRelatedPartyValidationsSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;InstallBaseRelatedPartyValidationsSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InstallBaseRelatedPartyValidationsSNC = Class.create();
InstallBaseRelatedPartyValidationsSNC.prototype = {
    initialize: function() {
    },
    validate: function(current) {
        var msg = "";
        var tableName = current.type.applies_to;
        var tabName = new GlideTableHierarchy(tableName);
        if (current.type.nil() || gs.nil(tabName) || tabName.getRoot() !=  global.CSMBaseConstants.INSTALL_BASE_ITEM ) {
            current.setAbortAction(true);
            msg = 'Please select the type of related party to be created.';
            gs.addErrorMessage(gs.getMessage(msg));
            return;
        }

        var account = !gs.nil(current.account);
        var contact = !gs.nil(current.contact);
        var consumer = !gs.nil(current.consumer);
        var serviceOrg = !gs.nil(current.service_organization);
        var user = !gs.nil(current.user);

        entityType = current.type.entity_type;
        if(entityType == "customer_account") {
            if( !account || contact || consumer || serviceOrg || user)
            {
                current.setAbortAction(true);
                msg = 'Please select only Account with Authorized Account';
                gs.addErrorMessage(gs.getMessage(msg));
                return;
            }
        }
        else if(entityType == "csm_consumer") {
            if( account || contact || !consumer || user ||  serviceOrg) {
                current.setAbortAction(true);
                msg = 'Please select only Consumer with Authorized Consumer';
                gs.addErrorMessage(gs.getMessage(msg));
                return;
            }
        }
        else if(entityType == "customer_contact") {
            if( !account || !contact || consumer || user ||  serviceOrg) {
                current.setAbortAction(true);
                msg = 'Please select Account, Contact with Authorized Contact';
                gs.addErrorMessage(gs.getMessage(msg));
                return;
            }
            if (!this.validateContact(current)) {
                current.setAbortAction(true);
                return;
            }
        }
        else if(current.type.name == "Authorized Member" &amp;&amp; entityType == "sys_user") {
            if( account || contact || consumer || !user ||  !serviceOrg) {
                current.setAbortAction(true);
                msg = 'Please select SO, Contact with Authorized Member';
                gs.addErrorMessage(gs.getMessage(msg));
                return;
            }
            if(!this.validateMember(current))
            {
                current.setAbortAction(true);
                return;
            }
        }
        else if(entityType == "sys_user") {
            if( account || contact || consumer || !user ||  serviceOrg) {
                current.setAbortAction(true);
                msg = 'Please select only Contact attribute with Authorized Contributor';
                gs.addErrorMessage(gs.getMessage(msg));
                return;
            }
        }
        else if(entityType == "sn_customer_service_organization") {
            if( account || contact || consumer || user ||  !serviceOrg) {
                current.setAbortAction(true);
                msg = 'Please select only SO attribute with Authorized SO';
                gs.addErrorMessage(gs.getMessage(msg));
                return;
            }
        }

        var isValid = true;
        if(!this.validateResponsibility(current, entityType))
        {
            current.setAbortAction(true);
            return;
        }
    },
    /*
     * validate related party glide record.
     */
    isValidGlideRecord: function(gr) {
        return (gr &amp;&amp; !gs.nil(gr) &amp;&amp; gr instanceof GlideRecord);
    },
    /*
     * Contact validations:
     *
     * 1. Check whether account exists
     * 2. Check whether contact is valid for the account.
     *
     * @param rpGr - install base item glide record
     * @returns true - if the validation is succeeded.
     *          false - if the validation is failed.
     */
    validateContact: function(rpGr) {
        if (!this.isValidGlideRecord(rpGr)) {
            gs.addErrorMessage("Invalid related party glide record.");
            return false;
        }
        var isValid = true;
        if (gs.nil(rpGr.account)) {
            gs.addErrorMessage(gs.getMessage('Contact cannot exist without an account for the {0} related party.', rpGr.getDisplayValue()));
            isValid = false;
        }
        //Check the contact's account is matching with the account.
        else if (rpGr.contact.account != rpGr.account) {
            gs.addErrorMessage(gs.getMessage('{0} contact is not associated with the {1} account for the {2} related party.', [rpGr.contact.getDisplayValue(), rpGr.account.getDisplayValue(), rpGr.getDisplayValue()]));
            isValid = false;
        }
        return isValid;
    },
    /*
     * Responsibility validations:
     *
     * 1. Check whether appropriate responsibility is passed
     *
     * @param rpGr - related party glide record
     * @returns true - if the validation is succeeded.
     *          false - if the validation is failed.
     */
    validateResponsibility: function(rpGr, entityType) {
        if (!this.isValidGlideRecord(rpGr)) {
            gs.addErrorMessage("Invalid related party glide record.");
            return false;
        }
        var isValid = true;
        if(entityType == "customer_account"){
            if(rpGr.type.name == "Authorized Account") {
                if(gs.nil(rpGr.responsibility) || rpGr.responsibility.type != entityType){
                    isValid = false;
                }
            } else if(!gs.nil(rpGr.responsibility) &amp;&amp; rpGr.responsibility.type != entityType) { // if it is Listed Account
                isValid = false;
            }
            if(!isValid) {
                gs.addErrorMessage(gs.getMessage('{0} responsibility is not associated with the {1} type for the related party.', [rpGr.responsibility.getDisplayValue(), rpGr.type.getDisplayValue()]));
            }
        }
        else if(!gs.nil(rpGr.responsibility.type) &amp;&amp; rpGr.responsibility.type != entityType) {
            gs.addErrorMessage(gs.getMessage('{0} responsibility is not associated with the {1} type for the {2} related party.', [rpGr.responsibility.getDisplayValue(), rpGr.type.getDisplayValue(), rpGr.getDisplayValue()]));
            isValid = false;
        }
        return isValid;
    },
    /*
     * Member validations:
     *
     * 1. Check whether user is valid for the SO.
     *
     * @param rpGr - related party glide record
     * @returns true - if the validation is succeeded.
     *          false - if the validation is failed.
     */
    validateMember: function(rpGr) {
        if (!this.isValidGlideRecord(rpGr)) {
            gs.addErrorMessage("Invalid related party glide record.");
            return false;
        }

        var isValid = true;
        if (gs.nil(rpGr.user)) {
            gs.addErrorMessage(gs.getMessage('User cannot exist without an SO for the related party.'));
            isValid = false;
        }
        else {
            var memberGr = new GlideRecord(InstallBaseItemAPIConstants.SO_MEMBER_TABLE);
            memberGr.addQuery("user", rpGr.user);
            memberGr.addQuery("service_organization", rpGr.service_organization);
            memberGr.query();

            if(!memberGr.hasNext()) {
                gs.addErrorMessage(gs.getMessage('{0} user is not associated with the {1} SO for the related party.', [rpGr.contact.getDisplayValue(), rpGr.account.getDisplayValue()]));
                isValid = false;
            }
        }
        return isValid;
    },
    type: 'InstallBaseRelatedPartyValidationsSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-27 12:53:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;45005496cb79211050501ebfe8076dd1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InstallBaseRelatedPartyValidationsSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Install Base Management" source="sn_install_base"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Service Install Base Management"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_45005496cb79211050501ebfe8076dd1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-27 12:55:36&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:26</sys_created_on>
        <sys_id>b37634d983f01210c6695855eeaad361</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>InstallBaseRelatedPartyValidationsSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b37634d983f01210c6695855eeaad361</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:26</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
