<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0ffb209583701210c6695855eeaad3d2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules"&gt;
    &lt;x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;true&lt;/action_delete&gt;
        &lt;action_insert&gt;false&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection/&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Delete DD role on delete&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
 if (current.role.nil() || current.permission_set.nil() || current.scope.nil()) {
  gs.warn("[DeleteDDRole] Not deleting role associated with sys_scope_permission_set_role_assignment "
   + "where sys_id is: " + current.sys_id + ". Some fields empty; role: " + current.role
   + " permission_set: " + current.permission_set + " scope:" + current.scope);
  return;
 }

 var roleSysId = current.role.sys_id;
 // sys_user_role is used by both sys_user_has_role and sys_group_has_role
 var gr = new GlideRecord("sys_user_role");
 if (!gr.get(roleSysId)) {
  gs.info("[DeleteDDRole] no user or group roles associated with sys_id: " + roleSysId);
  return;
 }

 // build up role name and validate we are removing the correct record
 var roleName = gr.getValue("name");
 if (!isRoleNameValid(roleName)) {
  gs.warn("[DeleteDDRole] Invalid role name: " + roleName);
  return;
 }

 // retrieve users and groups *before* the sys_user_role record is removed
 //   otherwise we don't have a way to get to the user/group
 var usersToCheck = getUsersToCheck(roleSysId);
 var groupsToCheck = getGroupsToCheck(roleSysId);
 var executionTracker = SNC.GlideExecutionTracker.getLastRunning();
 var numUsers = usersToCheck.length.toString();
 var numGroups = groupsToCheck.length.toString();
 executionTracker.updateMessage(
  gs.getMessage("Removing developer role assignments for permission '{0}' from {1} users, {2} groups",
   [current.permission_set.getDisplayValue(),numUsers,numGroups]));

 if (!gr.deleteRecord()) {
  gs.warn("[DeleteDDRole] Unable to delete Delegated developer role with name: " + roleName);
  return;
 }

 for (var i = 0; i &lt; usersToCheck.length; i++) {
  SNC.DelegatedDevelopmentUtil.revokeDelegateDevRoleIfNotNeeded("user", usersToCheck[i]);
 }
 for (i = 0; i &lt; groupsToCheck.length; i++) {
  SNC.DelegatedDevelopmentUtil.revokeDelegateDevRoleIfNotNeeded("group", groupsToCheck[i]);
 }

})(current, previous);

function getUsersToCheck(roleSysId) {
 // retrieve ALL user sys_id(s) before the sys_user_role is deleted
 var sysUserHasRoleGr = new GlideRecord("sys_user_has_role");
 sysUserHasRoleGr.addQuery("role", roleSysId);
 sysUserHasRoleGr.addQuery("inherited", "false");
 sysUserHasRoleGr.query();
 var usersToCheck = [];
 while (sysUserHasRoleGr.next()) {
  usersToCheck.push(sysUserHasRoleGr.getValue("user"));
 }

 return usersToCheck;
}

function getGroupsToCheck(roleSysId) {
 // retrieve ALL group sys_id(s) before the sys_user_role is deleted
 var sysGroupHasRoleGr = new GlideRecord("sys_group_has_role");
 sysGroupHasRoleGr.addQuery("role", roleSysId);
 sysGroupHasRoleGr.addNullQuery("granted_by");
 sysGroupHasRoleGr.query();
 var groupsToCheck = [];
 while (sysGroupHasRoleGr.next()) {
  groupsToCheck.push(sysGroupHasRoleGr.getValue("group"));
 }

 return groupsToCheck;
}

function isRoleNameValid(roleName) {
 if (JSUtil.nil(roleName))
  return false;

 var roleNameWithoutSuffix = roleName.replace(/_rc_\d\d/, "");
 var permissionName = current.permission_set.name + '';
 var permissionSuffix = permissionName.replace(/[^\w]/g, "").toLowerCase();
 return roleNameWithoutSuffix.startsWith("sn_dd_") &amp;&amp; roleNameWithoutSuffix.endsWith("_" + permissionSuffix);
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;x_938076_now_utils_now_utils_business_rules&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-09-21 07:50:30&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;0ffb209583701210c6695855eeaad3d2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Delete DD role on delete&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Now Utils" source="x_938076_now_utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Now Utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;x_938076_now_utils_now_utils_business_rules_0ffb209583701210c6695855eeaad3d2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-09-21 07:50:30&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/x_938076_now_utils_now_utils_business_rules&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=0ffb209583701210c6695855eeaad3d2"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:56:34</sys_created_on>
        <sys_id>0c6da85d83701210c6695855eeaad331</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Delete DD role on delete</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0c6da85d83701210c6695855eeaad331</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:56:34</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
