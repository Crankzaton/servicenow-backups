<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>050741d773b303004c2e8889faf6a7eb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.Agile2ContextMenuConfig&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;Agile2ContextMenuConfig&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var Agile2ContextMenuConfig = Class.create();

Agile2ContextMenuConfig.getConfigForStory = function() {
    var gr = new GlideRecord('rm_story');
    var menuItems = [{
            id: 'move_top',
            label: gs.getMessage('Move to top'),
            onClick: 'handleStoryMoveTopClick'
        },
        {
            id: 'move_to_previous_page',
            label: gs.getMessage('Move to previous page'),
            onClick: 'handleMoveToPreviousPage'
        },
        {
            id: 'move_to_next_page',
            label: gs.getMessage('Move to next page'),
            onClick: 'handleMoveToNextPage'
        },
        {
            id: 'move_bottom',
            label: gs.getMessage('Move to bottom'),
            onClick: 'handleStoryMoveBottomClick'
        },
        {
            id: 'move_page',
            label: gs.getMessage('Move to page'),
            onClick: 'openMoveToPageDialogBox'
        },
        {
            type: 'divider'
        },
        // let's have Move to top / bottom first,
        // then the rest of the options in alpahbetical order
        {
            id: 'assigned_to',
            label: gs.getMessage('Assigned to'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'assigned_to',
            dependent: gr.getElement('assigned_to').getDependent(),
            table: 'sys_user_list'
        },
        {
            id: 'assignment_group',
            label: gs.getMessage('Assignment group'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'assignment_group',
            table: 'sys_user_group_list'
        },
        {
            id: 'epic',
            label: gs.getMessage('Epic'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'epic',
            table: 'rm_epic_list'
        },
        {
            id: 'product',
            label: gs.getMessage('Product'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'product',
            table: 'cmdb_model_list'
        }
    ];

    var projectItems = [{
            id: 'project',
            label: gs.getMessage('Project'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'project',
            table: 'pm_project_list'
        },
        {
            id: 'project_phase',
            label: gs.getMessage('Project phase'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'project_phase',
            table: 'pm_project_task_list'
        }
    ];

    var items = [{
            id: 'release',
            label: gs.getMessage('Release'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'release',
            table: 'rm_release_scrum_list'
        },
        {
            id: 'sprint',
            label: gs.getMessage('Sprint'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'sprint',
            table: 'rm_sprint_list'
        },
        {
            id: 'theme',
            label: gs.getMessage('Theme'),
            onClick: 'handleStoryReferenceFieldClick',
            field: 'theme',
            table: 'scrum_theme_list'
        }
    ];

    if (gs.tableExists("pm_project"))
        menuItems = menuItems.concat(projectItems);
    menuItems = menuItems.concat(items);

    gr.initialize();

    return {
        handlerClass: 'AgileContextMenu',
        items: menuItems.filter(function(item) {
            return item.field ? gr[item.field].canWrite() : gr.canWrite();
        })
    };
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-01-26 19:42:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;050741d773b303004c2e8889faf6a7eb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Agile2ContextMenuConfig&lt;/sys_name&gt;
        &lt;sys_package display_value="Agile Development 2.0" source="com.snc.sdlc.agile.2.0"&gt;7205e388477e0610cd4e1ce4316d43ce&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_050741d773b303004c2e8889faf6a7eb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-29 12:05:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:13</sys_created_on>
        <sys_id>8140bc5583b01210c6695855eeaad3ab</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Agile2ContextMenuConfig</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8140bc5583b01210c6695855eeaad3ab</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
