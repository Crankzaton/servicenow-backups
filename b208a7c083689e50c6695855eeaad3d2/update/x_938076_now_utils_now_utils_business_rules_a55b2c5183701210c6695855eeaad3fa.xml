<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>true</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>getRoledUsers</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[// Return an array of sys_ids of the users that have at least one role
        // optional parameters allow the exclusion (NOT IN) of some roles or
        // look for specific roles (IN)
        //
        // optional: queryCondition - 'IN' or 'NOT IN'
        // optional: roleList - a comma separated list of role names
        //
        function getRoledUsers(queryCondition, roleList) {
           var roleListIds;
           if (queryCondition && roleList) {
              roleListIds = getRoleListIds(roleList);
           }

           var ids = [];
           var prevID = '';
           var gr = new GlideRecord('sys_user_has_role');
           if (roleListIds) {
              gr.addQuery('role', queryCondition, roleListIds);
           }

            // property set to -1 - means there's no limit
            // property without valid value or not existed - means apply default limit 10M
            var limit = gs.getProperty('glide.security.get_roled_users.limit');
            if (limit > 0) {
                gr.setLimit(limit);
            } else if (limit != -1) {
                gr.setLimit(10000000);
            }

           gr.query();
           while (gr.next()) {
              var id = gr.user.toString();
              if (id != prevID) {
                ids.push(id);
                prevID = id;
              }
           }
           return ids;
        }

        // get sys_id's for the named roles
        function getRoleListIds(roleList) {
           var ids = [];
           var gr = new GlideRecord('sys_user_role');
           gr.addQuery('name','IN',roleList);
           gr.query();
           while (gr.next()) {
              ids.push(gr.sys_id.toString());
           }
           return ids;
        }]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a55b2c5183701210c6695855eeaad3fa</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>getRoledUsers</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_a55b2c5183701210c6695855eeaad3fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:40</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=a55b2c5183701210c6695855eeaad3fa"/>
</record_update>
