<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>UX Detect Valid Landing Page Placeholder</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var findValidLandingPagePlaceholder = new FindValidLandingPagePlaceholder();
 var currentPlaceholderId = current.getValue('placeholder');
 var currentPlaceholderName = current.getDisplayValue('placeholder');
 var currentPageRegistryId = current.getValue('applicable_page');
 var currentApplicability = current.getValue('applicability');
 
 // Determine if the placeholder of the element about to be persisted is a valid landing page placeholder for the
 // selected page registry (and therefor workspace)
 var isValidLandingPagePlaceholder = findValidLandingPagePlaceholder.isValidLandingPagePlaceholder(currentPlaceholderId, currentPageRegistryId, currentApplicability);
 
 // Valid lading page placeholder name is determined here (ie "Landing Page Placeholder")
 var validLandingPagePlaceholderName = findValidLandingPagePlaceholder.getValidLandingPagePlaceholderName();
  
 // ONLY modify the placeholder if its name is "Landing Page Placeholder" and the current placeholder is an
 // invalid landing page placeholder for the page registry
 if (currentPlaceholderName === validLandingPagePlaceholderName && !isValidLandingPagePlaceholder) {
  current.setValue('placeholder', findValidLandingPagePlaceholder.getValidLandingPagePlaceholder(currentPageRegistryId) || currentPlaceholderId);
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>fa4be45183701210c6695855eeaad310</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UX Detect Valid Landing Page Placeholder</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_fa4be45183701210c6695855eeaad310</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:29</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=fa4be45183701210c6695855eeaad310"/>
</record_update>
