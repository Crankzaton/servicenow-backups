<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>cb5ff909c3081010ce53bb62ef40ddf7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Check if existing classic app is already being used; in that case turn on  (set to true) classic app flag .i.e. glide.ui.m.allow_classic_mobile_app; otherwise set it to false&lt;/description&gt;
        &lt;name&gt;Update classic app based on prior usage&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[gs.log("running fix script to determine classic app prior usage");
if (!pm.isZboot() &amp;&amp; isClassicAppOAuthSafeToUpgrade()) {
    var classicAppUser = isClassicAppUser();
    gs.log("upgraded instance found; found glide.ui.m.allow_classic_mobile_app=" + classicAppUser);
    updateClassicApp(classicAppUser);
}

//update classic app status based on prior usage
function updateClassicApp(classicAppUser) {
    updateClassicAppProperty(classicAppUser);
    updateClassicOAuth(classicAppUser);
}

//update property value based on prior usage
function updateClassicAppProperty(classicAppUser) {
    gs.setProperty("glide.ui.m.allow_classic_mobile_app", classicAppUser);
}

//if user has beforehand disable classic app, don't enable it
function isClassicAppOAuthSafeToUpgrade() {
    var oAuthEntityGR = new GlideRecord('oauth_entity');
    oAuthEntityGR.get("be57bb02533102006b0fc91a8dc5877c");
    return sn_collision.CollisionAPI.willBeReplacedOnUpgrade(oAuthEntityGR);
}

//update OAuth glide record for ServiceNow Classic Mobile App
function updateClassicOAuth(classicAppUser) {
    var oAuthEntityGR = new GlideRecord('oauth_entity');
    oAuthEntityGR.get("be57bb02533102006b0fc91a8dc5877c");
    if (classicAppUser == true) {
        oAuthEntityGR.setValue('active', 1);
    } else {
        expireClassicAppTokens();
        expirePushRegistrations();
        oAuthEntityGR.setValue('active', 0);
    }
    oAuthEntityGR.update();
}

//expire register app tokens - to force logout users
function expireClassicAppTokens() {
    var oAuthGR = new GlideRecord('oauth_credential');
    oAuthGR.addQuery("peer", "be57bb02533102006b0fc91a8dc5877c");
    oAuthGR.query();
    var expires = new GlideDateTime();
    while (oAuthGR.next()) {
        oAuthGR.setValue('expires', expires);
        oAuthGR.update();
    }
}

//un-register push notification for classic app
function expirePushRegistrations() {
    var pushNotifGR = new GlideRecord('sys_push_notif_app_install');
    pushNotifGR.addQuery("sys_push_application_id", "ab704041ff1102009738ffffffffff33");
    pushNotifGR.addQuery("active", 1);
    pushNotifGR.query();
    while (pushNotifGR.next()) {
        pushNotifGR.setValue('active', 0);
        pushNotifGR.update();
    }
}

function isClassicAppUser() {
    var mobileDevicesExists = false;
    var mobileDevicesGR = new GlideRecord('sys_mobile_devices');
    if (mobileDevicesGR.isValid()) {
        mobileDevicesGR.addQuery('app_id', 'IN', 'com.servicenow.servicenow,com.servicenow.servicenow-internal');
        mobileDevicesGR.query();
        mobileDevicesExists = mobileDevicesGR.hasNext();
    } else {
        mobileDevicesExists = false;
    }
    return mobileDevicesExists;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-04-06 19:00:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;cb5ff909c3081010ce53bb62ef40ddf7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Update classic app based on prior usage&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile UI" source="com.glide.ui.m"&gt;76b3b0a43c31311068bcf327dfe37f8c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_cb5ff909c3081010ce53bb62ef40ddf7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-06-04 16:11:28&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:40:33</sys_created_on>
        <sys_id>4725cd9583741210c6695855eeaad3e3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update classic app based on prior usage</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4725cd9583741210c6695855eeaad3e3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:40:33</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
