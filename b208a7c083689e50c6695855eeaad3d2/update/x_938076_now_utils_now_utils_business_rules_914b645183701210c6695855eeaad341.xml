<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!current.is_using_mutual_auth &amp;&amp; current.container_id.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>MID Unique Logged In User Handler</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    // determine how many MID servers use the same logged in user as record that is being created/updated
    var midLoggedInUserRecords = new MIDLoggedInUserRecords();
    var numOfSameLoggedInUsers = midLoggedInUserRecords.getNumOfSameLoggedInUsers(current.user_name);
    var currOperation = current.operation();

    if (currOperation === 'insert' || currOperation === 'update') {
        // On insert or update of a MID server create, update, or resolve issue as needed

        if (numOfSameLoggedInUsers > 1 && previous.status != 'Up' && current.status == 'Up') {
            // A MID Server whose status changes from any status to up and this MID is using the same logged in user as at least one other MID server
            // Create or update MID server issues table for each MID with same logged in user as current record
            midLoggedInUserRecords.createIssues(current.user_name);
        } else if (numOfSameLoggedInUsers >= 1 && previous.user_name != current.user_name) {
            // User changes logged in user to one already in use by another MID server
            var error_msg = "It is not recommended to have multiple MID Servers logged in with the same MID Server username. MID Server " +
                current.name + " has logged in with MID username " +
                current.user_name +
                " while that username is already in use. See KB1552863 for more information.";

            // Create an issue for the current MID, as this logic runs before user name is updated
            MIDServerUtil.createOrUpdateIssue(current.getUniqueValue(), 'loggedInUserIsNotUnique', error_msg);

            // Create or update MID server issues table for each MID with same logged in user as current record
            midLoggedInUserRecords.createIssues(current.user_name);
        } else if (numOfSameLoggedInUsers == 0 && previous.user_name != current.user_name && !previous.user_name.nil()) {
            // User has fixed the logged in user of the MID to be unique
            MIDServerUtil.resolveExistingIssues(current.getUniqueValue(), 'loggedInUserIsNotUnique');

            // Case where changing logged in user for one MID server to a unique name makes the logged in user for another MID unique
            // Now both MIDs have unique login and issue for the unchanged MID login should be resolved
            var numOfSameLoggedInUsersPrev = midLoggedInUserRecords.getNumOfSameLoggedInUsers(previous.user_name);
            if (numOfSameLoggedInUsersPrev == 2)
                midLoggedInUserRecords.resolveIssue(previous.user_name, current.name);
        }
    } else if (currOperation === 'delete') {
        // On delete of a MID server, resolve issue as needed
        numOfSameLoggedInUsers = midLoggedInUserRecords.getNumOfSameLoggedInUsers(previous.user_name);

        // Since called before delete, we must check that the number of same logged in user
        // is 2 (after delete this would be 1). resolveIssue will filter out for
        // the record that is being deleted and resolve the issue for the other MID
        // server that will now have a unique login
        if (numOfSameLoggedInUsers == 2)
            midLoggedInUserRecords.resolveIssue(current.user_name, current.name);
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>914b645183701210c6695855eeaad341</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MID Unique Logged In User Handler</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_914b645183701210c6695855eeaad341</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:23</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=914b645183701210c6695855eeaad341"/>
</record_update>
