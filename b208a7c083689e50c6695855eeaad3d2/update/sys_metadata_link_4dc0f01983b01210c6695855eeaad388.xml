<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1c45cb6337321200277826877e41f1d1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ProjectWorkbenchVtb&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ProjectWorkbenchVtb&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ProjectWorkbenchVtb = Class.create();
ProjectWorkbenchVtb.prototype = {
    initialize: function() {
    },
	
	getVtbUrl: function(phaseId) {
		var url = '';
		var gr = new GlideRecord('planned_task');
		if ( !gr.get(phaseId) )
			return url;
		var config = new GlideRecord('workbench_config');
		if (gr.instanceOf('pm_project'))
			config.addQuery('phase_table', 'pm_project_task'); //because there's no config for sub projects as of now
		else
			config.addQuery('phase_table', gr.sys_class_name);
		config.addQuery('template_view', gr.phase_type);
		config.query();
		gs.log('&gt;&gt;&gt;&gt;config found?'+config.getRowCount());
		if ( config.next() )
			url = this.findOrGenerateVtbUrl(gr, config);
		return url;
	},
	
	findOrGenerateVtbUrl: function(task, config) {
		var board;
		var id;
		board = this._findVtb(task, config);
		if ( JSUtil.nil(board) ) 
			id = this._createVtb(task, config);
		else
			id = board.getValue('sys_id');
		return '/$vtb.do?sysparm_board=' + id;

	},
	
	_findVtb: function(task, config) {
		gs.log('&gt;&gt;&gt;&gt;findVtb?');
		
		var tableName = 'pm_project_task';
		if(task.phase_type == 'test')
			tableName = 'tm_test_case_instance';
		else if (task.phase_type == 'agile')
			tableName = 'rm_story';

		var board = new GlideRecord("vtb_board");
		board.addQuery("name", task.short_description);
		board.addQuery("table" , tableName);
		board.addQuery("field" , config.lane_field);
		board.addQuery("filter" , config.filter_field + '=' + task.sys_id);
		board.addQuery("owner", gs.getUserID());
		board.query();
		if(board.next())
			return board;
		else 
			return null;		
	},

	_createVtb: function(task, config) {
		gs.log('&gt;&gt;&gt;&gt;createVtb?');
		
        var boardId = this.createVtb(config.child_table, config.lane_field, config.filter_field + '=' + task.sys_id, task.short_description);
		if(config.child_table == "rm_story"){
			var map = {};
			var recChoices = new GlideRecord("sys_choice");
			recChoices.addQuery("name", "rm_story");
			recChoices.addQuery("element", "state");
			recChoices.addQuery("inactive", false);
			recChoices.addQuery("language", gs.getUser().getLanguage());
			recChoices.query();
			while (recChoices.next()) {
				map[("rm_story:" + recChoices.value)] = recChoices.sequence + "";
			}

			var laneGr = new GlideRecord("vtb_lane");
			laneGr.addQuery("board",boardId);
			laneGr.query();
			while(laneGr.next()){
				laneGr.setValue("order",map[laneGr.getValue("value")]?map[laneGr.getValue("value")]:laneGr.getValue("order"));
				laneGr.update();
			}
		}
		return boardId;
	},

    createVtb: function(table, laneField, query, name) {
        var board = GlideVTBBoardBuilder.guided(table, laneField)
            .withFilter(query)
            .withName(name)
            .withOwner(gs.getUserID())
            .hideBoardPicker()
            .hideListToggle();
        return board.create();
    },


    type: 'ProjectWorkbenchVtb'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-04-21 17:55:21&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1c45cb6337321200277826877e41f1d1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;22&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ProjectWorkbenchVtb&lt;/sys_name&gt;
        &lt;sys_package display_value="Project Workbench" source="com.snc.project_workbench"&gt;9bff8ee747e64210cd4e1ce4316d4341&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1c45cb6337321200277826877e41f1d1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-04 06:04:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:23</sys_created_on>
        <sys_id>4dc0f01983b01210c6695855eeaad388</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ProjectWorkbenchVtb</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4dc0f01983b01210c6695855eeaad388</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:23</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
