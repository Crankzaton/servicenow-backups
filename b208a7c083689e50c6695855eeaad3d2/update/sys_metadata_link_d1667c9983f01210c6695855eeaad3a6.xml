<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3afec2b21bb86d506c4a21b1604bcb4f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WFIM_Integration_API&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;WFIM_Integration_API&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WFIM_Integration_API = Class.create();
WFIM_Integration_API.prototype = {
    initialize: function() {

    },

    /**
     * Base function to return the array with field data for the records.
     * @author Ashish Sharma &lt;U819887&gt;
     * @param {Integer} limit - Number of records.
     * @param {Integer} offset - Number of initial records returned that should be ignored 
     * @param {String} fields - The fields for which the data is required. All fields are returned by default.
     * @param {String} query - Encoded query if passed
     * @param {String} record_id - sys_id of the record if you need data for a specific record
     * @param {String} table_name - The targer table to pull the data from
     * @returns {Array} records - The array of all the fields in the specifid record(s).
     */
    getData: function(limit, offset, fields, query, record_id, table_name, orderByField) {
        var records = [];

        var tableGR = new GlideRecord(table_name);
        if (record_id) tableGR.addQuery('sys_id', record_id);
        if (query) tableGR.addEncodedQuery(query);
        // if (limit) tableGR.setLimit(limit);
        tableGR.chooseWindow(offset, offset + limit);
        tableGR.orderBy(orderByField);
        tableGR.query();

        while (tableGR.next()) {
            var recordObj;

            if (fields) recordObj = this._getDataFromGR(tableGR, fields);
            else recordObj = this._getDataFromGR(tableGR);

            if (table_name == 'sn_grc_tollgate_approvals') {
                var approversObj = [];
                var approvalGR = new GlideRecord('sn_grc_tollgate_reviewers');
                approvalGR.addQuery('parent', tableGR.getUniqueValue());
                approvalGR.query();
                while (approvalGR.next()) {
                    var approverDisplay = approvalGR.assigned_to.getDisplayValue();
                    var stateVal = approvalGR.state.getDisplayValue();

                    if ((stateVal == 'Challenge - Change Required') || (stateVal == 'No Challenge')) {
                        var completedDate = recordObj["u_tollgate_completion_date"]["display_value"];
                        approversObj.push(approverDisplay + ' | ' + stateVal + ' | ' + completedDate);

                    }
                }

                recordObj["u_approver_details"]["display_value"] = recordObj["u_tollgate_reviewers"]["display_value"]; // Employee name
                recordObj["u_approver_details"]["value"] = recordObj["u_tollgate_reviewers"]["value"]; // Employee id

                records.push({
                    "TollgateRecord": recordObj,
                    "Approvers": approversObj,
                });

            } else {
                records.push(recordObj);
            }
        }

        return records;
    },

    getRecordsCount: function(table_name, query) {
        var records = new GlideAggregate(table_name);
        if (query) records.addEncodedQuery(query);

        records.addAggregate('COUNT');
        records.query();
        if (records.next()) {
            totalCount = records.getAggregate('COUNT');
        }
        return totalCount;
    },

    /**
     * Returns an object with all te field data for the record.
     * @param {Object} gr - Glide Record of the table.
     * @param {Object} fields - The fields for which the data is required. All fields are returned by default.
     * @returns {Array} records - The array of all the fields in the specifid record(s). default is 10
     */

    _getDataFromGR: function(gr, fields) {
        function addElement(obj, fname, value, displayValue) {
            obj[fname] = {};
            obj[fname]["value"] = value || "";
            obj[fname]["display_value"] = displayValue || "";
        }

        var excludeFields = ["u_accessible_users", "u_snapshot", "u_field_changed"];

        var integrationAPIHelper = new global.WFIM_Integration_API_Helper();
        var obj = {};

        // If a list of fields has not been provided, use all fields
        if (!fields) {
            fields = [];

            // getElements returns a Java array. Gotta use .size() and .get()
            var elements = gr.getElements();
            for (var i = 0; i &lt; elements.size(); i++) {
                var fieldName = elements.get(i).getName();
                if (excludeFields.indexOf(fieldName.toString()) === -1) {
                    fields.push(elements.get(i).getName());
                }
            }
        }

        var fieldsLength = fields.length;
        for (var iField = 0; iField &lt; fieldsLength; iField++) {
            var fname = fields[iField];
            if (!gr.isValidField(fname)) {
                // addElement(obj, fname, "", ""); // field doesn't exist, just add blank
                continue;
            }

            // Get the Element Descriptor for this field
            var ed = gr.getElement(fname).getED();

            // Check if this field is a choice field
            var isChoiceField = ed.isChoiceTable();

            // Get the field's type name
            var fType = "" + ed.getInternalType();

            //Get the table the field is referencing
            var referencedTableName = ed.getReference();

            // Date time fields
            var displayValueFields = ["reference", "glide_date", "glide_time", "glide_date_time"];

            // Specific value return (Unique IDs) - specific to each table referenced for Reference/Glide List Fields.
            if ((fType == 'reference' || fType == 'glide_list')) {

                if (referencedTableName == 'sys_user' || referencedTableName == 'sn_grc_choice' || referencedTableName == 'sn_grc_wf_irm_rau' || referencedTableName == 'sn_compliance_policy' || referencedTableName == 'sn_compliance_control' || referencedTableName == 'sn_grc_wf_irm_risk_type' || referencedTableName == 'sn_grc_wf_irm_corp_risk_hierarchy' || referencedTableName == 'sn_grc_wf_irm_risk_instance' || referencedTableName == 'sn_grc_wf_irm_risk_driver' || referencedTableName == 'sn_grc_item' || referencedTableName == 'sn_compliance_authority_document' || referencedTableName == 'sn_grc_wf_irm_legal_entity' || referencedTableName == 'core_country' || referencedTableName == 'sn_risk_wf_irm_risk_acceptance' || referencedTableName == 'cmdb_ci_business_app') {
                    var sysIDs = gr.getValue(fname);

                    if (sysIDs) {
                        var IDs = integrationAPIHelper.getReferenceIDs(sysIDs, referencedTableName);
                        addElement(obj, fname, IDs.toString(), gr.getDisplayValue(fname));

                        continue;
                    }
                }
            }

            //(sys_user) table will be queried to give the value in the "employee_number" field in value &amp; "preferred name" in display value.
            else if (fname == "sys_created_by" || fname == "sys_updated_by") {
                var user_id = gr.getValue(fname);

                var gr2 = new GlideRecord('sys_user');
                gr2.addQuery('user_name', user_id);
                gr2.query();
                if (gr2.next()) {

                    var empID = gr2.employee_number;
                    var empName = gr2.u_preferred_name;
                    addElement(obj, fname, empID.toString(), empName.toString());
                }
                continue;
            }

            // Choice field
            else if (isChoiceField) {
                // There's a special function to get the display value of a choice field
                addElement(obj, fname, gr.getValue(fname), gr.getElement(fname).getChoiceValue());
                continue;
            }

            // Boolean
            else if (fType == "boolean") {
                // Raw boolean values are either a 0 (false) or a 1 (true)
                var boolValue = gr.getValue(fname) == 1;
                var boolDisplayValue = gr.getDisplayValue(fname);
                addElement(obj, fname, boolValue, boolDisplayValue);
                continue;
            }

            // Fields that should return a value and a display value
            else if (displayValueFields.indexOf(fType) &gt; -1) {
                addElement(obj, fname, gr.getValue(fname), gr.getDisplayValue(fname));
                continue;
            }

            // Ordinary fields
            addElement(obj, fname, gr.getValue(fname), gr.getDisplayValue(fname));
        }

        // Return the result
        return obj;
    },


    //Get import set table name based on API query parameter
    getTableName: function(reqParam) {
        var im_dataset_jsonStr = gs.getProperty('sn_grc.wf_veritas_im_dataset');
        var im_dataset = JSON.parse(im_dataset_jsonStr);
        var im_dataset_length = im_dataset.length;

        for (var count = 0; count &lt; im_dataset_length; count++) {
            if (reqParam == im_dataset[count].label)
                return im_dataset[count].tbl_name;
        }
        return '';
    },


    // Execute 'Import Set API' to insert data into staging table and transform data.
    getImportSet: function(reqObj, is_tbl) {
        var result = {
            "records": []
        };

        if (reqObj &amp;&amp; typeof reqObj === 'object' &amp;&amp; reqObj.msg.length &gt; 0) {
            var rtypes = reqObj.msg;

            result["records"] = rtypes;
            var jsonPayload = JSON.stringify(result);

            var instanceURL = gs.getProperty('glide.servlet.uri');
            var url = instanceURL + "/api/now/import/" + is_tbl + "/insertMultiple";
            var basicAuthProfileID = gs.getProperty('wfim.inbound.basic.auth.profile.id');

            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint(url);
            request.setHttpMethod('POST');
            request.setAuthenticationProfile('basic', basicAuthProfileID);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader('Content-Type', 'application/json');
            request.setRequestBody(jsonPayload);

            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();

            return httpStatus;
        }
    },

    // get record count of all Non FRC base tables
    getCount: function(reqParam) {
        var countofAllRecords = '';
        var im_dataset_jsonStr = gs.getProperty('sn_grc.wf_veritas_im_dataset');
        var im_dataset = JSON.parse(im_dataset_jsonStr);
        var im_dataset_length = im_dataset.length;

        for (var i = 0; i &lt; im_dataset_length; i++) {
            if (reqParam == im_dataset[i].label) {

                var table_name = im_dataset[i].tbl_name;
                table_name = table_name.split(",");
                var table_name_length = table_name.length;

                for (var count = 0; count &lt; table_name_length; count++) {
                    var totalCount = '0';
                    var tbl_label;
                    var records = new GlideAggregate(table_name[count]);
                    records.addAggregate('COUNT');
                    records.query();
                    if (records.next()) {
                        tbl_label = records.getClassDisplayValue();
                        totalCount = records.getAggregate('COUNT');
                    }
                    countofAllRecords = countofAllRecords + '  ' + tbl_label + " Count:" + totalCount;
                }
            }
        }

        return countofAllRecords;
    },


    type: 'WFIM_Integration_API'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;K034179&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-07 18:20:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3afec2b21bb86d506c4a21b1604bcb4f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;305&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WFIM_Integration_API&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_3afec2b21bb86d506c4a21b1604bcb4f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:23:54&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:00</sys_created_on>
        <sys_id>d1667c9983f01210c6695855eeaad3a6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFIM_Integration_API</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d1667c9983f01210c6695855eeaad3a6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
