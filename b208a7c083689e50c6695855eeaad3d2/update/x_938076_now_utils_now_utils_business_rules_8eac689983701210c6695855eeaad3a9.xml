<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>VariableAcceleratorUtil.hasExistingPrompt(current)  &amp;&amp; !VariableAcceleratorUtil.isDeleteAction(action) &amp;&amp; !current.isActionAborted()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update existing values</name>
        <order>11</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 //we need to deconstruct the record, find the existing prompt and variable, and update them
 gs.debug("Looking up existing prompt.");
 
 var prompt = new GlideRecord("sys_cb_prompt");
 if (!prompt.get(current.getValue("existing_prompt"))) {
  current.setAbortAction("Record not found. Unrecoverable error.");
  gs.debug("Unable to find an existing prompt with ID {0}",
     current.getValue("existing_prompt")
  );
  
  return;
 }
 
 updatePrompt(prompt, current);
 
 var variable = getVariable(current.getValue("column"), current.getValue("topic"));
 
 if (variable)
  updateVariable(variable, current);
 else
  gs.debug("No related variable to update.");
 
 
 gs.setRedirect(VariableAcceleratorUtil.getEditRedirectUrl(GlideTransaction.get()));
 
 
 function getVariable(name, topic) {
  gs.debug("Looking up variable with name {0} for topic {1}", name, topic);
  
  var topic_var = new GlideRecord("topic_variable");
  topic_var.addQuery("model", topic);
  topic_var.addQuery("element", name);
  topic_var.query();
  if (topic_var.next())
   return topic_var;
  
  return null;
 }
 
 function updatePrompt(prompt, current) {
  gs.debug("Updating existing prompt {0} ({1})",
     prompt.getValue("name"),
     prompt.getUniqueValue()
  );
  
  prompt.setValue("optional", current.getValue("optional"));
  
  if (current.prompt_msg.hasMapping()) {
   gs.debug("New prompt message has mapping, setting mapping value to {0}",
      current.prompt_msg.getValueMapping()
     );
   prompt.prompt_msg.setValueMapping(current.prompt_msg.getValueMapping());
   prompt.setValue("prompt_msg", "");
  } else {
   gs.debug("New prompt message does not have mapping, setting value to {0}",
      current.getValue("prompt_msg")
     );
   prompt.setValue("prompt_msg", current.getValue("prompt_msg"));
   prompt.prompt_msg.setValueMapping("");
  }
  
  if (current.acknowledge_msg.hasMapping()) {
   gs.debug("New acknowledge message has mapping, setting mapping value to {0}",
      current.acknowledge_msg.getValueMapping()
     );
   prompt.acknowledge_msg.setValueMapping(current.acknowledge_msg.getValueMapping());
   prompt.setValue("acknowledge_msg", "");
  } else {
   gs.debug("New acknowledge message does not have mapping, setting value to {0}",
     current.getValue("acknowledge_msg")
    );
   prompt.setValue("acknowledge_msg", current.getValue("acknowledge_msg"));
   prompt.acknowledge_msg.setValueMapping("");
  }
  
  if (current.reference_nil.hasMapping()) {
   gs.debug("Ref nil message has mapping, setting mapping value to {0}",
      current.reference_nil.getValueMapping()
     );
   prompt.reference_nil.setValueMapping(current.reference_nil.getValueMapping());
   prompt.setValue("reference_nil", "");
  } else {
   gs.debug("Ref nil message does not have mapping, setting value to {0}",
     current.getValue("reference_nil")
    );
   prompt.setValue("reference_nil", current.getValue("reference_nil"));
   prompt.reference_nil.setValueMapping("");
  }
  
  prompt.setValue("name", current.getValue("prompt_label"));
  
  gs.debug("Saving prompt");
  prompt.update();
 }
 
 function updateVariable(variable, current) {
  
  gs.debug("Variable {0} new label is {1}", variable.getValue("label"), current.getValue("name"));
  variable.setValue("label", current.getValue("name"));
  
  if (current.getValue("type") == "reference") {
   gs.debug("Setting reference to {0}, qual to {1}",
      current.getValue("table"),
      current.getValue("reference_condition")
   );
  
   variable.setValue("reference", current.getValue("table"));
   variable.setValue("use_reference_qualifier", "simple");
   variable.setValue("limit", current.getValue("limit"));
   
   
   
   if (current.reference_condition.hasMapping()) {
    variable.reference_qual_condition.setValueMapping(
     current.reference_condition.getValueMapping()
    );
    variable.setValue("reference_qual_condition", "");
    gs.debug("ValueMapping set to {0}", current.reference_condition.getValueMapping());
   } else {
    variable.setValue("reference_qual_condition",
          current.getValue("reference_condition")
    );
    variable.reference_qual_condition.setValueMapping("");
    gs.debug("Regular ol' value. Setting to {0}",
       current.getValue("reference_condition")
    );
   }
   
  }
 
  if (!current.default_value.nil()) {
   gs.debug("Setting default_value to {0}", current.getValue("default"));
   variable.setValue("default_value", current.getValue("default_value"));
  }
  
  if (current.getValue("type") == "choice") {
   gs.debug("Setting choice to {0}", current.getValue("choice_type"));
   variable.setValue("choice", current.getValue("choice_type"));
  
   if (!current.choices.nil())
    makeAndInsertChoices(JSON.parse(current.getValue("choices")), variable);
  }
 
  if (current.getValue("type") == "url") {
   gs.debug("Adding query parameters to the URL");
   if (current.query_parameters.hasMapping()) {
    variable.query_parameters.setValueMapping(
     current.query_parameters.getValueMapping()
    );
    variable.setValue("query_parameters", "");
    gs.debug("ValueMapping set to {0}", current.query_parameters.getValueMapping());
   } else {
    variable.setValue("query_parameters", current.getValue("query_parameters"));
    variable.query_parameters.setValueMapping("");
    gs.debug("Regular ol' value set to {0}", current.getValue("query_parameters"));
   }
  }
  
  variable.update();
 }
 
 function makeAndInsertChoices(choices, variable) {
  //delete existing choices
  var choiceGR = new GlideRecord("sys_choice");
  choiceGR.addQuery("name", variable.getValue("name"));
  choiceGR.addQuery("element", variable.getValue("element"));
  
  choiceGR.query();
  gs.debug("Choice query: {0}", choiceGR.getEncodedQuery());
  gs.debug("Choices found? {0}", choiceGR.hasNext());
  
  if (choiceGR.hasNext())
   choiceGR.deleteMultiple();
  
  gs.debug("Creating choices for {0}", choices);
  var i = 0;
  for (var key in choices) {
   if (choices.hasOwnProperty(key)) {
    gs.debug("Making choice {0}", key);
    if (makeChoice(key, choices[key], variable, i))
     i++;
    else
     gs.addInfoMessage("Unable to create choice {0} {1}", key, choices[key]);
   }
  }
 }

 function makeChoice(label, value, variable, idx) {
  gs.debug("Making choice {0} with value {1} for variable {2}", label, value, variable.getValue("label"));
  var newChoice = new GlideRecord("sys_choice");
  newChoice.setValue("element", variable.getValue("element"));
  newChoice.setValue("name", variable.getValue("name"));
  newChoice.setValue("label", label);
  newChoice.setValue("value", value);
  newChoice.setValue("sequence", idx);
  
  return newChoice.insert();
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:27</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>8eac689983701210c6695855eeaad3a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update existing values</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_8eac689983701210c6695855eeaad3a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:27</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=8eac689983701210c6695855eeaad3a9"/>
</record_update>
