<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>17f3f86787030300b9392c7c87cb0bb9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AjaxPlannedTaskDateUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AjaxPlannedTaskDateUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AjaxPlannedTaskDateUtil = Class.create();
AjaxPlannedTaskDateUtil.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    getEndDate: function() {
        var sysparmStartDate = this.getParameter('sysparm_start_date');
        var sysparmDuration = this.getParameter('sysparm_duration');

        if (!this.isValidDate(sysparmStartDate)) {
            this.sendResponse('error', 'start_date');
            return;
        }

        if (!this.isValidDuration(sysparmDuration)) {
            this.sendResponse('error', 'duration');
            return;
        }

        var end_date = this._calculateEndDate(sysparmStartDate, sysparmDuration);

        var result = this.newItem('result');
        result.setAttribute('status', 'success');
		result.setAttribute('answer', end_date);
    },

    isValidPositiveDuration: function(duration) {
        return duration.indexOf('-') &lt; 0;
    },
	
	recalculate: function(current) {
		if (!current.isNewRecord() &amp;&amp; current.end_date.changes())
			this._setMaxEndDate(current);
		else
			this.updateEndDate(current);
		
		var duration = new GlideDuration(current.end_date.dateNumericValue() - current.start_date.dateNumericValue());
		current.setValue('duration', duration.getValue());
	},
	
	updateEndDate: function(current) {
		var startDate = current.getValue('start_date');
		var endDate = new GlideDateTime();
		endDate.setValue(startDate);
		endDate.addSeconds(current.duration.dateNumericValue() / 1000);
		current.setValue('end_date', endDate.getValue());
		this._setMaxEndDate(current);
	},
	
	_setMaxEndDate: function(current) {
		var maxEndDateFromChildren = this._getMaxEndDateFromChildren(current.getValue('sys_id'));
		if (maxEndDateFromChildren) {
			var dateTime = new GlideDateTime();
			dateTime.setValue(maxEndDateFromChildren);
			if (dateTime.getNumericValue() &gt; current.end_date.dateNumericValue())
				current.setValue('end_date', dateTime.getValue());
		}
	},
	
	_getMaxEndDateFromChildren: function(sysId) {
		var gr = new GlideRecord('planned_task');
		gr.addQuery('parent', sysId);
		gr.setLimit(1);
		gr.orderByDesc('end_date');
		gr.query();
		
		if (gr.next())
			return gr.getValue('end_date');
		
		return null;
	},

    _calculateEndDate: function(startDate, duration) {
        var dur;
        var end_date;

        startDate = this.getInternalDateFormat(startDate);

        if (!this.isValidPositiveDuration(duration)) {
            return startDate;
        }

        dur = new GlideDuration(0);
        dur.setDisplayValue(duration);
        end_date = new GlideDateTime();
        end_date.setDisplayValueInternal(startDate);
        end_date.addSeconds(dur.getNumericValue() / 1000);

        return end_date.getDisplayValue();
    },

    _calculateDuration: function(startDate, endDate) {
        var startDateInternal = this.getInternalDateFormat(startDate);
        var endDateInternal = this.getInternalDateFormat(endDate);
        var start = new GlideDateTime();
		start.setDisplayValueInternal(startDateInternal);
        var end = new GlideDateTime();
		end.setDisplayValueInternal(endDateInternal);
        var duration = GlideDateTime.subtract(start, end);
        return duration.getDurationValue();
    },

    getDuration: function() {
        var result;
        var resp = {};
        var sysparmStartDate = this.getParameter('sysparm_start_date');
        var sysparmEndDate = this.getParameter('sysparm_end_date');

        if (!this.isValidDate(sysparmStartDate)) {
            this.sendResponse('error', 'start_date');
            return;
        }

        if (!this.isValidDate(sysparmEndDate)) {
            this.sendResponse('error', 'end_date');
            return;
        }

        var duration = this._calculateDuration(sysparmStartDate, sysparmEndDate);

        result = this.newItem('result');
        result.setAttribute('status', 'success');
        result.setAttribute('answer', duration);
    },

    getInternalDateFormat: function(displayValue) {
        var dateTime = new GlideDateTime();
        dateTime.setDisplayValue(displayValue);
        if (dateTime.isValid())
            return dateTime.getDisplayValueInternal();
        else {
            var dt = new GlideDateTime();
            return dt.getDisplayValueInternal();
        }
    },

    isValidDate: function(displayValue) {
        var dateTime = new GlideDateTime();
        dateTime.setDisplayValue(displayValue);
        return dateTime.isValid();
    },

    isValidDuration: function(displayValue) {
        var duration = new GlideDuration();
        duration.setDisplayValue(displayValue);
        return duration.isValid();
    },

    sendResponse: function(status, column, answer, message) {
        var result = this.newItem("result");
        result.setAttribute("column", column);
        result.setAttribute("status", status);
        if (answer)
            result.setAttribute("answer", answer);
        if (message)
            result.setAttribute("message", message);
    },

    type: 'AjaxPlannedTaskDateUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-12-21 06:08:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;17f3f86787030300b9392c7c87cb0bb9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AjaxPlannedTaskDateUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;92ef82e747e64210cd4e1ce4316d43f1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_17f3f86787030300b9392c7c87cb0bb9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-01-21 11:29:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:57</sys_created_on>
        <sys_id>6ea0f8d583b01210c6695855eeaad38c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AjaxPlannedTaskDateUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6ea0f8d583b01210c6695855eeaad38c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
