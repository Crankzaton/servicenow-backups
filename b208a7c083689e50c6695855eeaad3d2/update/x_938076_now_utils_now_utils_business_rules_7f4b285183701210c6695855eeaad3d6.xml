<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>(current.type == "key_store" || current.type == "pkcs12_key_store") &amp;&amp; current.expiration_notification == true &amp;&amp; !current.warn_in_days_to_expire.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>SAML certificate expire notification</name>
        <order>400</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[try {
    sendNotificationEvent();
} catch (e) {
    this.logError("Failed to verify expiry for SAML Default Keystore");
    throw e;
}

function sendNotificationEvent() {
    var Date = Packages.java.util.Date;
    var notAfter = SNC.SSOUtils.getSAMLKeyStoreCertificatesExpireDate(current.sys_id);

    this.logDebug("SAML Default KeyStore's not after is=" + notAfter);
    if (notAfter == null || notAfter == undefined)
        return;

    var glideDateTime = new GlideDateTime();
    var expiresInDays = GlideDateTime.subtract(glideDateTime, new GlideDateTime(notAfter)).getRoundedDayPart();
    var daysToWarn = current.warn_in_days_to_expire;

    this.logDebug("SAML Default KeyStore's expires in days is=" + expiresInDays);
    if (expiresInDays <= 0) {
        this.logDebug('certificate.expired event is queued as notAfter is=' + notAfter);
        gs.eventQueue("certificate.expired", current, expiresInDays, daysToWarn);
    } else if (expiresInDays <= daysToWarn) {
        this.logDebug('certificate.expiring event is queued as notAfter is=' + notAfter);
        gs.eventQueue("certificate.expiring", current, expiresInDays, daysToWarn);
    }
}

function logDebug(msg) {
    if (GlideProperties.getBoolean('glide.authenticate.multisso.debug', false) 
    || GlideProperties.getBoolean('glide.authenticate.sso.saml2.debug', false)) {
        gs.log(msg, "SAML2_Certificate");
    }
}

function logError(msg) {
    gs.logError(msg, "SAML2_Certificate");
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>7f4b285183701210c6695855eeaad3d6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SAML certificate expire notification</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_7f4b285183701210c6695855eeaad3d6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:33</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=7f4b285183701210c6695855eeaad3d6"/>
</record_update>
