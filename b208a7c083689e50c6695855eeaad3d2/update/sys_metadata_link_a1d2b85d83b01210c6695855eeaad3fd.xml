<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3c3d2b0c6740030076f56c3b5685efc0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;This fix script upgrades the fulfillment type in HR Service Configuration in Human Resources: Integrations Application&lt;/description&gt;
        &lt;name&gt;Fix Script Fulfillment type&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var hrServiceWithLE = false;
var hrServiceWithJourney = false;
var hrServiceWithApprovers = false;
var hrServiceWithActivities = false;
var hrServiceWithWorkflow = false;
var resultWF;
copyApprovalOptions();

function copyApprovalOptions() {
	var gr = new GlideRecord('sn_hr_core_service_activity');
	if (!gr.isValidField('approval_options'))
		return;
	gr.addQuery('activity_type', 'approval');
	gr.addNullQuery('approval_options');
	gr.addNotNullQuery('parent_service.approval_options');
	gr.query();
	while (gr.next()) {
		gr.approval_options = gr.parent_service.approval_options;
		gr.update();
	}
}

var hrServicesWithActivities = getHrServicesWithActivities();

var grHRServices = new GlideRecord('sn_hr_core_service');
grHRServices.addQuery('sys_scope','aaa655c19f0322003be01050a57fcf65');
grHRServices.query();
while (grHRServices.next()) {
	getConditions(grHRServices);
	setHRServiceType(grHRServices);
	resetConditions();
}

function getHrServicesWithActivities() {
	var listServicesWithActivities = {};
	var grHRServiceActivity = new GlideAggregate("sn_hr_core_service_activity");
	grHRServiceActivity.groupBy("parent_service");
	grHRServiceActivity.query();
		
	while (grHRServiceActivity.next())
		listServicesWithActivities[grHRServiceActivity.parent_service.sys_id] = true;
		
	return listServicesWithActivities;
}
	
function getConditions(grHRService) {
	if (grHRService.le_type != undefined &amp;&amp; grHRService.le_type != '')
		hrServiceWithLE = true;
	if (grHRService.journey_config != undefined &amp;&amp; grHRService.journey_config != '')
		hrServiceWithJourney = true;
	if (grHRService.approval_options != undefined
			&amp;&amp; grHRService.approval_options != '')
		hrServiceWithApprovers = true;
	if (hrServicesWithActivities[grHRService.sys_id] != undefined)
		hrServiceWithActivities = true;
	getWorkflow(grHRService.template);
}
	
function setHRServiceType(grHRService) {
	if (hrServiceWithLE &amp;&amp; hrServiceWithActivities)
		grHRService.setValue('fulfillment_type', "custom");
	else if (hrServiceWithLE &amp;&amp; (hrServiceWithApprovers))
		grHRService.setValue('fulfillment_type', "custom");
	else if (hrServiceWithActivities &amp;&amp; (hrServiceWithApprovers))
		grHRService.setValue('fulfillment_type', "custom");
	else if (hrServiceWithActivities)
		grHRService.setValue('fulfillment_type', "service_activity");
	else if (hrServiceWithJourney)
		grHRService.setValue('fulfillment_type', 'journey');
	else if (hrServiceWithLE)
		grHRService.setValue('fulfillment_type', "lifecycle_event");
	else if (hrServiceWithApprovers &amp;&amp; hrServiceWithWorkflow){
		grHRService.setValue('fulfillment_type', "custom");
		grHRService.setValue('workflow_detail',resultWF);
	} else if(hrServiceWithWorkflow){
		grHRService.setValue('fulfillment_type', "workflow");
		grHRService.setValue('workflow_detail',resultWF);
	} else if(hrServiceWithApprovers)
		grHRService.setValue('fulfillment_type', "custom");
	else
		grHRService.setValue('fulfillment_type', "simple");
		
	grHRService.setWorkflow(false);
	grHRService.update();
}
	
function resetConditions() {
	hrServiceWithLE = false;
	hrServiceWithJourney = false;
	hrServiceWithApprovers = false;
	hrServiceWithActivities = false;
	hrServiceWithWorkflow = false;
}
	
function getWorkflow(templateSysId){
	var validateWF =new sn_hr_core.hrFulfillmentTypeUtil();
	resultWF  = validateWF.getWorkflow(templateSysId);
	if(resultWF !='')
		hrServiceWithWorkflow = true;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-07-14 19:32:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;3c3d2b0c6740030076f56c3b5685efc0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Fix Script Fulfillment type&lt;/sys_name&gt;
        &lt;sys_package display_value="Human Resources: Integrations" source="sn_hr_integrations"&gt;aaa655c19f0322003be01050a57fcf65&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Human Resources: Integrations"&gt;aaa655c19f0322003be01050a57fcf65&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_3c3d2b0c6740030076f56c3b5685efc0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-09-21 20:48:29&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:20:26</sys_created_on>
        <sys_id>a1d2b85d83b01210c6695855eeaad3fd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Fix Script Fulfillment type</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a1d2b85d83b01210c6695855eeaad3fd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:20:26</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
