<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9011607343513110805a71f1cbb8f2c9</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sub_man.GenAIUsageDetailsAggregate&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GenAIUsageDetailsAggregate&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GenAIUsageDetailsAggregate = Class.create();
GenAIUsageDetailsAggregate.prototype = {
    initialize: function() {
    },

    execute: function() {
      if(this._hasInsertionHasBeenDoneToday())
        return;

      var yesterdayAggData = this._getYesterdayAggDataFromUsageDefinitonJob();
      var totalAggData = this._getTotalAggDataFromGenAIAggTable();
      var mergedAggObject = this._mergeObjects(totalAggData, yesterdayAggData);

      this._populateGenAiAggData(mergedAggObject);
    },

    /**
     * Get yesterday's aggregate data from the usage definition job
     * @returns todaysAggData {object} - object with feature as key and usage as value
     */
    _getYesterdayAggDataFromUsageDefinitonJob: function() {
      var todaysAggData = {};
      var aggDataGR = new GlideRecord('ua_defn_agg_data');
      aggDataGR.addQuery('definition_id', 'DEFN2004047');
      aggDataGR.addEncodedQuery('sys_created_onONYesterday@javascript:gs.beginningOfYesterday()@javascript:gs.endOfYesterday()');
      aggDataGR.query();
      while (aggDataGR.next())
        todaysAggData[aggDataGR.getValue('group1')] = aggDataGR.getValue('agg_val');

      return todaysAggData;
    },

    /**
     * Get total aggregate data from the sn_sub_man_gen_ai_usage_details_aggregate table
     * @returns totalAggData {object} - object with feature as key and usage as value
     */
    _getTotalAggDataFromGenAIAggTable: function() {
      var totalAggData = {};
      var totalAggGR = new GlideRecord('sn_sub_man_gen_ai_usage_details_aggregate');
      totalAggGR.query();
      while (totalAggGR.next())
        totalAggData[totalAggGR.getValue('feature')] = totalAggGR.getValue('total_assist_usage');

      return totalAggData;
    },


    /**
     * Populate the sn_sub_man_gen_ai_usage_details_aggregate table
     * @param mergedAggObject {object} - object with feature as key and usage as value
     */
    _populateGenAiAggData: function(mergedAggObject) {
      for (var feature in mergedAggObject) {
        var featureUsage = parseInt(mergedAggObject[feature]);
        var today = new GlideDateTime();
        var genAIUsageGR = new GlideRecord('sn_sub_man_gen_ai_usage_details_aggregate');
        genAIUsageGR.addQuery('feature', feature);
        genAIUsageGR.query();
        if (genAIUsageGR.next()) {
          genAIUsageGR.setValue('total_assist_usage', String(featureUsage));
          genAIUsageGR.setValue('calculated_on', today);
          genAIUsageGR.update();
        } else {
          var newGenAIUsageGR = new GlideRecord('sn_sub_man_gen_ai_usage_details_aggregate');
          newGenAIUsageGR.setValue('feature', feature);
          newGenAIUsageGR.setValue('total_assist_usage', String(featureUsage));
          newGenAIUsageGR.setValue('calculated_on', today);
          newGenAIUsageGR.insert();
        }
      }
    },

    /**
     * Check if insertion has been done today
     * @returns {boolean} - true if insertion has been done today, false otherwise
     */
    _hasInsertionHasBeenDoneToday: function() {
      var gr = new GlideRecord('sn_sub_man_gen_ai_usage_details_aggregate');
      gr.addEncodedQuery('calculated_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()');
      gr.query();
      if (gr.next())
        return true;
      else
        return false;
    },

    /**
     * Merge two objects
     * @param obj1 {object} - object with feature as key and usage as value
     * @param obj2 {object} - object with feature as key and usage as value
     * @returns mergedObject {object} - object with feature as key and usage as value
     */
    _mergeObjects: function (obj1, obj2) {
      var mergedObject = {};
      for (var e in obj1) {
        if (obj1.hasOwnProperty(e))
          mergedObject[e] = obj1[e];
      }
      for (var key in obj2) {
        if (!obj2.hasOwnProperty(key))
          continue;

        var value = parseFloat(obj2[key]);
        if(isNaN(value))
          continue;

        if (mergedObject.hasOwnProperty(key))
          mergedObject[key] = parseFloat(mergedObject[key]) + value;
        else
          mergedObject[key] = value;
      }
      return mergedObject;
    },

    type: 'GenAIUsageDetailsAggregate'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-09-22 05:37:14&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9011607343513110805a71f1cbb8f2c9&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GenAIUsageDetailsAggregate&lt;/sys_name&gt;
        &lt;sys_package display_value="Subscription Management v2" source="sn_sub_man"&gt;86d7bb63ff021110468365d7d3b8fe41&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Subscription Management v2"&gt;86d7bb63ff021110468365d7d3b8fe41&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9011607343513110805a71f1cbb8f2c9&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-16 21:44:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:28</sys_created_on>
        <sys_id>0c98345183341210c6695855eeaad3b1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GenAIUsageDetailsAggregate</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0c98345183341210c6695855eeaad3b1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
