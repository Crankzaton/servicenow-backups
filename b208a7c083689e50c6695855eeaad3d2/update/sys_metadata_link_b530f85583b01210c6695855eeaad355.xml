<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>02a101390f403010c0774ee7c8767ee1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFCatalogItemProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Script that is used while processing or translating a catalog item&lt;/description&gt;
        &lt;name&gt;LFCatalogItemProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFCatalogItemProcessor = Class.create();
LFCatalogItemProcessor.prototype = Object.extendsObject(LFArtifactProcessorSNC, {
    category: 'localization_framework', // DO NOT REMOVE THIS LINE!

    /**********
     * Returns LFDocumentContent object for the given artifact record
     * 
     * @param params.tableName The table name of the artifact record
     * @param params.sysId The sys-id of the artifact record 
     * @param params.language Language into which the artifact has to be translated into (Target language)
     * @return LFDocumentContent object
     **********/
    getTranslatableContent: function(params) {
        var tableName = params.tableName;
        var sysId = params.sysId;
        var language = params.language;
        var groupName = "";
        var lfDocumentContentBuilder = new global.LFCatalogDocumentContentBuilder("v1", language, sysId, tableName);
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', sysId);
        gr.query();

        if (gr.next()) {
            lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(gr, "Basic Info");
            processVariable(gr);
            processVariableSet();
            processCatalogClientScript();
            processCatalogUIPolicy();
        }

        function processVariable(parentGR) {
            var groupNamePrefix = "";
            var grVar = new GlideRecord("item_option_new");
            if (parentGR.getTableName() === "item_option_new_set") {
                grVar.addQuery("variable_set", parentGR.getUniqueValue());
                groupNamePrefix = parentGR.getValue("title") + ": ";
            } else {
                grVar.addQuery("cat_item", parentGR.getUniqueValue());
                groupNamePrefix = "Variable: ";
            }
            grVar.query();
            while (grVar.next()) {
                groupName = groupNamePrefix + grVar.getValue("question_text");
                lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(grVar, groupName);
                processChoices(grVar, groupName);
            }
        }

        function processVariableSet() {
            var grVarSet = new GlideRecord("io_set_item");
            grVarSet.addQuery('sc_cat_item', sysId);
            grVarSet.query();
            while (grVarSet.next()) {
                var vs_sys_id = grVarSet.getValue("variable_set");
                var grVs = new GlideRecord("item_option_new_set");
                grVs.addQuery('sys_id', vs_sys_id);
                grVs.query();
                if (grVs.next()) {
                    groupName = "Variable Set: " + grVs.getValue("title");
                    lfDocumentContentBuilder.processTranslatableFieldsForSingleRecord(grVs, groupName);
                    processVariable(grVs);
                }
            }
        }

        function processChoices(variableGR, groupName) {
            if (variableGR.getValue("type") == "3" || variableGR.getValue("type") == "5") { // handling Select Box and Multiple Choice variable types
                groupName += ": Choices";
                lfDocumentContentBuilder.processTranslatableFieldsForMultipleRecords("question_choice", "question=" + variableGR.getUniqueValue(), groupName);
            }
        }

        function processCatalogClientScript() {
            var grClientScript = new GlideRecord("catalog_script_client");
            grClientScript.addQuery("cat_item", sysId);
            grClientScript.addActiveQuery();
            grClientScript.query();

            while (grClientScript.next()) {
                var script = grClientScript.getValue("script");
                groupName = "Catalog Client Script: " + grClientScript.getValue("name");
                lfDocumentContentBuilder.processScript(script, groupName, "Script");
            }
        }

        function processCatalogUIPolicy() {
            var grc = new GlideRecord("catalog_ui_policy");
            grc.addQuery("catalog_item", sysId);
            grc.addQuery("run_scripts", "true");
            grc.addActiveQuery();
            grc.query();

            while (grc.next()) {
                var scriptTrue = grc.getValue("script_true");
                var scriptFalse = grc.getValue("script_false");
                var groupName = "Catalog UI Policy: " + grc.getValue("short_description");
                if (scriptTrue)
                    lfDocumentContentBuilder.processScript(scriptTrue, groupName, "Execute if true script");
                if (scriptFalse)
                    lfDocumentContentBuilder.processScript(scriptFalse, groupName, "Execute if false script");
            }
        }

        return lfDocumentContentBuilder.build();
    },

    /**********
     * Uncomment the saveTranslatedContent function definition to write a custom save script
     * Stores translations into standard tables by default
     *
     * Optional Return
     * 
     * @param documentContent LFDocumentContent object that can be parsed to obtain translated values
     * @return 
     **********/

    /**********
        saveTranslatedContent: function(documentContent) {},
    **********/

    type: 'LFCatalogItemProcessor'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-05-11 14:48:29&lt;/sys_created_on&gt;
        &lt;sys_id&gt;02a101390f403010c0774ee7c8767ee1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFCatalogItemProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework for Service Catalog" source="com.glide.localization_framework.service_catalog"&gt;20dd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_02a101390f403010c0774ee7c8767ee1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-05-13 14:52:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:59</sys_created_on>
        <sys_id>b530f85583b01210c6695855eeaad355</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFCatalogItemProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b530f85583b01210c6695855eeaad355</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:59</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
