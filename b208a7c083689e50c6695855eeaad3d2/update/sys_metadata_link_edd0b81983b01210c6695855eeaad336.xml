<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1ef295960b322200acc30e7363673a44</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PlannedTaskNotificationService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PlannedTaskNotificationService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PlannedTaskNotificationService = Class.create();
PlannedTaskNotificationService.getNewNotifications = function(projectId) {
    var formattedNotifications = [];
    var ptn = new PlannedTaskNotification();    
    var notifications = ptn.getNewNotificationsForProject(projectId);
    var showTime = false;
    while ( notifications.next() ) {
        var n = {};
        n.id = notifications.getValue('sys_id');
        n.status = notifications.getValue('status');
        n.externalTask = {project: {}};
        n.impactedTask = {};
        
        var sourceRec = notifications.source.getRefRecord();
        var sourceTopTaskRec = notifications.source.top_task.getRefRecord();
        n.externalTask.short_description = sourceRec.getValue('short_description');
        n.externalTask.number = sourceRec.getValue('number');
        n.externalTask.sys_class_name = sourceRec.getValue('sys_class_name');
        n.externalTask.sys_id = sourceRec.getUniqueValue();
        n.externalTask.project.short_description = sourceTopTaskRec.getValue('short_description');
        n.externalTask.project.number = sourceTopTaskRec.getValue('number');
        n.externalTask.project.sys_class_name = sourceTopTaskRec.getValue('sys_class_name');
        n.externalTask.project.sys_id = sourceTopTaskRec.getUniqueValue();

        var taskRec = notifications.task.getRefRecord();
        var topTaskRec = notifications.task_top_task.getRefRecord();
        var shadowTaskRec = notifications.shadow_task.getRefRecord();
        n.impactedTask.short_description = taskRec.getValue('short_description');
        n.impactedTask.wbs = taskRec.getValue('wbs');
        n.impactedTask.number = taskRec.getValue('number');
        
        var taskStartDate = taskRec.start_date.getGlideObject().getLocalDate();
        var taskEndDate = taskRec.end_date.getGlideObject().getLocalDate();
        var shadowTaskStartDate = shadowTaskRec.start_date.getGlideObject().getLocalDate();
        var shadowTaskEndDate = shadowTaskRec.end_date.getGlideObject().getLocalDate();
        var latestStartDate = notifications.getValue('start_date');
        var latestEndDateJsonString = (new SNC.PlannedTaskAPI()).calculateEndDateInternal(latestStartDate,
                taskRec.getValue('duration'), topTaskRec.getValue("schedule"));
        var latestEndDateJson = JSON.parse(latestEndDateJsonString);
        var latestEndDate = latestEndDateJson.date;
        
        var previousStartDate, previousEndDate, currentStartDate, currentEndDate;
        if(JSUtil.notNil(notifications.getValue("previous_start_date"))) {
            previousStartDate = new GlideDateTime(notifications.getValue("previous_start_date"));
            currentStartDate = new GlideDateTime(taskRec.getValue("start_date"));
            currentEndDate = new GlideDateTime(taskRec.getValue("end_date"));
            var diffMs = currentEndDate.getNumericValue() - currentStartDate.getNumericValue();
            previousEndDate = new GlideDateTime(notifications.getValue("previous_start_date"));
            previousEndDate.add(diffMs);
        }

        //if(taskStartDate.equals(taskEndDate) || taskStartDate.equals(shadowTaskStartDate) || shadowTaskStartDate.equals(shadowTaskEndDate))
        showTime = true;
    
        if(showTime){
            n.oldStartDate = JSUtil.notNil(previousStartDate)? previousStartDate.getDisplayValue() : taskRec.getDisplayValue('start_date');
            // n.newStartDate = shadowTaskRec.getDisplayValue('start_date');
            n.newStartDate = notifications.getDisplayValue('start_date');
            n.oldEndDate = JSUtil.notNil(previousEndDate)? previousEndDate.getDisplayValue() : taskRec.getDisplayValue('end_date');
            // n.newEndDate = shadowTaskRec.getDisplayValue('end_date');
            n.newEndDate = latestEndDate;
        }else{
            n.oldStartDate = taskStartDate.getDisplayValue();
            // n.newStartDate = shadowTaskStartDate.getDisplayValue();
            n.newStartDate = (new GlideDateTime(latestStartDate).getLocalDate().getDisplayValue());
            n.oldEndDate = taskEndDate.getDisplayValue();
            // n.newEndDate = shadowTaskEndDate.getDisplayValue();
            n.newEndDate = (new GlideDateTime(latestEndDate).getLocalDate().getDisplayValue());
        }
        formattedNotifications.push(n);
    }
    return formattedNotifications;
};

PlannedTaskNotificationService.getAllNotificationsForTask = function(taskId) {
    var notifications = [];
    var gr = new GlideRecord('planned_task_notification');
    gr.addQuery('task', taskId);
    gr.query();
    while ( gr.next() ) {
        var _tempGr = new GlideRecord('planned_task_notification');
        _tempGr.get(gr.getValue('sys_id'));
        notifications.push(new PlannedTaskNotification(_tempGr));
    }
    return notifications;
};

PlannedTaskNotificationService.getNewNotificationsForTask = function(taskId) {
    var notifications = [];
    var gr = new GlideRecord('planned_task_notification');
    gr.addQuery('task', taskId);
    gr.addQuery('state', 'new');
    gr.query();
    while ( gr.next() ) {
        var _tempGr = new GlideRecord('planned_task_notification');
        _tempGr.get(gr.getValue('sys_id'));
        notifications.push(new PlannedTaskNotification(_tempGr));
    }
    return notifications;   
};

PlannedTaskNotificationService.markAllHardNotificationsAsRead = function(projectId) {
    var ptn = new PlannedTaskNotification();    
    ptn.markAllHardNotificationsAsProcessed(projectId);
};

PlannedTaskNotificationService.getArchivedNotifications = function(projectId) {
    var formattedNotifications = [];
    var ptn = new PlannedTaskNotification();    
    var notifications = ptn.getProcessedNotificationsForProject(projectId);
    while ( notifications.next() ) {
        var n = {};
        n.id = notifications.getValue('sys_id');
        n.status = notifications.getDisplayValue('status');
        n.externalTask = {project: {}};
        n.impactedTask = {};
        
        var sourceRec = notifications.source.getRefRecord();
        var sourceTopTaskRec = notifications.task.top_task.getRefRecord();
        n.externalTask.short_description = sourceRec.getValue('short_description');
        n.externalTask.number = sourceRec.getValue('number');
        n.externalTask.sys_class_name = sourceRec.getValue('sys_class_name');
        n.externalTask.sys_id = sourceRec.getUniqueValue();
        n.externalTask.project.short_description = sourceTopTaskRec.getValue('short_description');
        n.externalTask.project.number = sourceTopTaskRec.getValue('number');
        n.externalTask.project.sys_class_name = sourceTopTaskRec.getValue('sys_class_name');
        n.externalTask.project.sys_id = sourceTopTaskRec.getUniqueValue();

        var taskRec = notifications.task.getRefRecord();
        var shadowTaskRec = notifications.shadow_task.getRefRecord();
        n.impactedTask.short_description = taskRec.getValue('short_description');
        n.impactedTask.wbs = taskRec.getValue('wbs');
        n.impactedTask.number = taskRec.getValue('number');
        n.impactedTask.start_date = notifications.getDisplayValue("start_date");
        formattedNotifications.push(n);
    }
    return formattedNotifications;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-11-02 10:46:23&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1ef295960b322200acc30e7363673a44&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PlannedTaskNotificationService&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;92ef82e747e64210cd4e1ce4316d43f1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1ef295960b322200acc30e7363673a44&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-25 04:18:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:42</sys_created_on>
        <sys_id>edd0b81983b01210c6695855eeaad336</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PlannedTaskNotificationService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_edd0b81983b01210c6695855eeaad336</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:42</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
