<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8d4827410f7320106a2c6577b9767ece</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFRequestedItemUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Utility class to handle localization requested items. Customers are not expected to override these core functions &lt;/description&gt;
        &lt;name&gt;LFRequestedItemUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFRequestedItemUtils = Class.create();
LFRequestedItemUtils.prototype = {
    tableName: 'sn_lf_requested_item',

    initialize: function(grOrIdOrNumber) {
        this.NAME_FIELD_SEPARATOR = "-";
        this.logger = new LFLogger("LFRequestedItemUtils");
        this.utils = new LFUtils();
        this.luaUtils = new LFLUAUtils();
        this.settingUtils = new LFSettingUtils();
        this.lfConstants = new LFConstants();
        this.lfInsights = new LFGenerateLocalizationInsights();
        this.states = this.lfConstants.REQUESTED_ITEM_STATES;

        if (grOrIdOrNumber &amp;&amp; grOrIdOrNumber.getTableName() == this.tableName) {
            this.currentRecord = grOrIdOrNumber;
        } else if (grOrIdOrNumber) {
            var requestedItemGr = new GlideRecord(this.tableName);
            requestedItemGr.addQuery('sys_id', grOrIdOrNumber).addOrCondition('number', grOrIdOrNumber);
            requestedItemGr.query();
            if (requestedItemGr.next()) {
                this.currentRecord = requestedItemGr;
            }
        }
    },

    hasValidRecord: function() {
        return this.currentRecord &amp;&amp; this.currentRecord.getTableName() == this.tableName;
    },

    update: function() {
        if (!this.hasValidRecord()) {
            throw new Error('Update requested on invalid requested item.');
        }
        this.currentRecord.update();
    },

    getSysId: function() {
        return this.currentRecord.getValue('sys_id');
    },

    getArtifactSysId: function() {
        return this.currentRecord.getValue('document');
    },

    getLocalizationProjectSysId: function() {
        return this.currentRecord.getValue('localization_project');
    },

    getLocalizationTaskSysId: function() {
        return this.currentRecord.getValue('localization_task');
    },

    getDocumentContent: function() {
        return JSON.parse(this.currentRecord.getValue("document_content"));
    },

    setDocumentContent: function(documentContent) {
        this.currentRecord.setValue("document_content", JSON.stringify(documentContent));
    },

    setAdditionalInfo: function(additionalInfo) {
        this.currentRecord.setValue("additional_info", JSON.stringify(additionalInfo));
    },

    getAdditionalInfo: function() {
        var additionalInfo = this.currentRecord.getValue("additional_info");
        return (additionalInfo) ? JSON.parse(additionalInfo) : {};
    },

    getFieldLevelMessagesInfo: function() {
        var additionalInfo = this.getAdditionalInfo();
        return additionalInfo["fieldLevelMessages"] || {};
    },

    setFieldLevelMessagesInfo: function(fieldLevelMessagesInfo) {
        var additionalInfo = this.getAdditionalInfo();
        additionalInfo["fieldLevelMessages"] = fieldLevelMessagesInfo;
        this.setAdditionalInfo(additionalInfo);
    },

    getNumber: function() {
        return this.currentRecord.getValue("number");
    },

    getTableName: function() {
        return this.currentRecord.getValue("table_name");
    },

    getArtifactConfig: function() {
        return this.currentRecord.artifact_config;
    },

    getClosedTime: function() {
        return this.currentRecord.getValue('closed_on');
    },

    isError: function() {
        return this.currentRecord.getValue('error') == '1';
    },

    isConflict: function() {
        return this.currentRecord.getValue('conflict') == '1';
    },

    getArtifactName: function() {
        return this.currentRecord.document.getRefRecord().getDisplayValue();
    },

    getSourceLanguageCode: function() {
        return this.currentRecord.source_language.getRefRecord().getValue("id");
    },

    getSourceLanguageName: function() {
        return gs.getMessage(this.currentRecord.source_language.getRefRecord().getValue("name"));
    },

    getTargetLanguageCode: function() {
        return this.currentRecord.target_language.getRefRecord().getValue("id");
    },

    getTargetLanguageName: function() {
        return gs.getMessage(this.currentRecord.target_language.getRefRecord().getValue("name"));
    },

    getTargetLanguage: function() {
        return this.currentRecord.target_language;
    },

    getCurrentStateNumber: function() {
        return parseInt(this.getCurrentState());
    },

    getCurrentState: function() {
        return this.currentRecord.getValue('state');
    },

    getCurrentStateName: function() {
        return this.currentRecord.getDisplayValue('state');
    },

    getCurrentStatus: function() {
        return this.currentRecord.getValue('status');
    },

    getCurrentStatusName: function() {
        return this.currentRecord.getDisplayValue('status');
    },

    isInStates: function() {
        var currentState = this.getCurrentState();
        for (var idx = 0; idx &lt; arguments.length; idx++) {
            if (arguments[idx] == currentState) {
                return true;
            }
        }
        return false;
    },

    isRequestedItemCompleted: function() {
        return this.isInStates(this.states.Closed_Complete, this.states.Closed_Incomplete);
    },

    setStatus: function(status) {
        this.currentRecord.setValue('status', status);
    },

    setError: function(error) {
        this.currentRecord.setValue('error', error);
    },

    setConflict: function(conflict) {
        this.currentRecord.setValue('conflict', conflict);
    },

    setState: function(state) {
        this.currentRecord.setValue('state', state);
    },

    moveToInProgress: function() {
        this.currentRecord.setValue('state', this.states.In_Progress);
    },

    moveToClosedComplete: function() {
        this.currentRecord.setValue('state', this.states.Closed_Complete);
        this.setClosedTime();
    },

    moveToClosedIncomplete: function() {
        this.currentRecord.setValue('state', this.states.Closed_Incomplete);
        this.setClosedTime();
    },

    setClosedTime: function() {
        this.currentRecord.setValue('closed_on', new GlideDateTime());
    },

    addWorkNotes: function(workNotes) {
        this.currentRecord.work_notes = workNotes;
    },

    setLocalizationTask: function(taskSysID) {
        this.currentRecord.localization_task = taskSysID;
    },

    saveTranslatedFileContent: function(translatedXLIFF, fileNumber, tmsSourceLanguageCode, tmsTargetLanguageCode, tmsName) {
        var documentContent = this.getDocumentContent();
        var content = documentContent["content"];
        var isError = false;
        try {
            this.utils.updateContentFromXLIFF(translatedXLIFF, content, tmsSourceLanguageCode, tmsTargetLanguageCode, fileNumber);
            documentContent["content"] = content;
            this.setDocumentContent(documentContent);
            this.addWorkNotes(gs.getMessage("Successfully retrieved translations from {0} TMS.", tmsName));
        } catch (e) {
            isError = true;
        }
        var hasConflicts = this.utils.hasConflicts(content);
        this.setConflict(hasConflicts);
        if (hasConflicts) {
            this.luaUtils.sendConflictEvent("TMS", "requestedItem");
        }
        this.setStatus(new LFGenerateLocalizationInsights().getTranslationStatus(documentContent));
        this.setError(isError);
        this.setAdditionlInfo({});
        this.update();
        return {
            "isError": isError,
            "fileId": this.getSysId()
        };
    },

    createLocalizationRequestedItem: function(internalName, sysId, targetLanguage, sourceLanguage, additionalInfo) {
        try {
            var sourceOfRequest = this.lfConstants.API;
            var sourceLanguage = sourceLanguage || this.utils.getDefaultSourceLanguage();
            var artifactUtils = new LFArtifactUtils(internalName);
            if (artifactUtils.isArtifactActive()) {
                var readSaveScriptUtils = new LFReadSaveScriptUtils();
                var documentContent = readSaveScriptUtils.generateDocumentContent(internalName, sysId, targetLanguage);
                var targetLanguageDetails = this.utils.getLanguageCodeDetails(targetLanguage);
                var targetLanguageId = targetLanguageDetails.sysId;
                var sourceLanguageId = this.utils.getLanguageCodeDetails(sourceLanguage).sysId;
                var translationStatus = new LFGenerateLocalizationInsights().getTranslationStatus(documentContent);
                var configTableName = artifactUtils.getArtifactConfigurationTableName();
                var artifactRecord = new GlideRecord(configTableName);
                artifactRecord.get(sysId);
                var actualTableName = artifactRecord.getValue('sys_class_name') || configTableName;
                var requestedItemGr = new GlideRecord(this.tableName);
                requestedItemGr.initialize();
                requestedItemGr.setValue('document_content', JSON.stringify(documentContent));
                requestedItemGr.setValue('table_name', actualTableName);
                requestedItemGr.setValue('document', sysId);
                requestedItemGr.setValue('artifact_config', artifactUtils.getSysId());
                requestedItemGr.setValue('target_language', targetLanguageId);
                requestedItemGr.setValue('source_language', sourceLanguageId);
                requestedItemGr.setValue('state', this.states.Open);
                requestedItemGr.setValue('status', translationStatus);
                requestedItemGr.setValue('requested_by', gs.getUserID());
                requestedItemGr.setValue('name', artifactRecord.getDisplayValue() + this.NAME_FIELD_SEPARATOR + targetLanguageDetails.label);
                if (additionalInfo) {
                    sourceOfRequest = additionalInfo.sourceOfRequest;
                    var projectId = additionalInfo.projectId;
                    if (projectId) {
                        requestedItemGr.setValue('localization_project', projectId);
                    }
                    requestedItemGr.setValue("additional_info", JSON.stringify(additionalInfo));
                }
                requestedItemGr.insert();
                this.luaUtils.sendRequestTranslationEventForSuccess(new LFRequestedItemUtils(requestedItemGr), sourceOfRequest);
                return {
                    "isSuccess": true,
                    "sysId": requestedItemGr.getValue('sys_id'),
                    "number": requestedItemGr.getValue('number')
                };
            } else {
                this.logger.logError("Artifact config with internal name " + internalName + " does not exists or is inactive");
            }
        } catch (e) {
            this.logger.logError("Error Occurred while creating LF Requested Item for " + internalName + "with sys_id " + sysId + "for language " + targetLanguage + ". " + e);
        }
        this.luaUtils.sendErrorRequestTranslationEventForError(internalName, targetLanguage, sourceLanguage, sourceOfRequest);
        return {
            "isSuccess": false
        };
    },

    hasLocalizationProject: function() {
        var localizationProject = this.getLocalizationProjectSysId();
        return (localizationProject &amp;&amp; localizationProject != "") ? true : false;
    },

    publishLocalizationRequestedItem: function(sourceOfRequest, updateSetSuffix) {
        var isPublishSuccessful = true;
        try {
            var internalName = this.getArtifactConfigInternalName();
            var readSaveScriptUtils = new LFReadSaveScriptUtils(this.lfConstants.TASK, updateSetSuffix);
            var parms = {};
            parms[readSaveScriptUtils.SAVE_SCRIPT_INPUTS.documentContent] = this.getDocumentContent();
            parms[readSaveScriptUtils.SAVE_SCRIPT_INPUTS.language] = this.getTargetLanguageCode();
            parms[readSaveScriptUtils.SAVE_SCRIPT_INPUTS.sysId] = this.getArtifactSysId();
            parms[readSaveScriptUtils.SAVE_SCRIPT_INPUTS.taskId] = this.getLocalizationTaskSysId();
            parms[readSaveScriptUtils.SAVE_SCRIPT_INPUTS.requestItemId] = this.getSysId();
            parms["sourceOfRequest"] = sourceOfRequest;
            parms["hasProject"] = this.hasLocalizationProject();
            readSaveScriptUtils.publishTranslations(internalName, parms);
            this.moveToClosedComplete();
            this.addWorkNotes(gs.getMessage("Successfully published the translations."));
        } catch (e) {
            this.logger.logError("Error Occurred while publishing LF Requested Item " + this.currentRecord.getNumber() + "for table " + this.getTableName() + ". " + e);
            this.moveToClosedIncomplete();
            this.addWorkNotes(gs.getMessage("Error in publishing the translations."));
            isPublishSuccessful = false;
        }
        var translationStatus = this.lfInsights.getTranslationStatus(this.getDocumentContent());
        this.setStatus(translationStatus);
        this.setError(false);
        this.setFieldLevelMessagesInfo({});
        this.update();
        return isPublishSuccessful;
    },

    getArtifactConfigInternalName: function() {
        return this.getArtifactConfig().internal_name.getValue();
    },

    generateUrlForRequestedItemNumbers: function(requestedItemNumbers) {
        if (requestedItemNumbers.length == 0) {
            return;
        }
        var tableName = this.tableName;
        var queryType = (requestedItemNumbers.length == 1) ? '=' : 'IN';
        var url = "/" + tableName + '_list.do?sysparm_query=number' + queryType;
        for (var requestedItemIdx = 0; requestedItemIdx &lt; requestedItemNumbers.length - 1; requestedItemIdx++) {
            var requestedItemNumber = requestedItemNumbers[requestedItemIdx];
            url += requestedItemNumber + ",";
        }
        url += requestedItemNumbers[requestedItemIdx];
        return url;
    },

    type: 'LFRequestedItemUtils'

};

LFRequestedItemUtils.updateLocalizationRequestedItems = function(requestedItemIds, fieldsToBeUpdated) {
    if ((requestedItemIds.length == 0) || (new LFValidationUtils().isFieldTypeNonJSONObject(fieldsToBeUpdated))) {
        return;
    }
    var lfConstants = new LFConstants();
    var fieldNames = Object.keys(fieldsToBeUpdated);
    if (fieldNames.length &gt; 0) {
        var requestedItemGR = new GlideRecord('sn_lf_requested_item');
        requestedItemGR.addQuery("sys_id", "IN", requestedItemIds);

        for (var fieldIdx = 0; fieldIdx &lt; fieldNames.length; fieldIdx++) {
            var fieldName = fieldNames[fieldIdx];
            var fieldValue = fieldsToBeUpdated[fieldName] || '';
            if (fieldName === 'state' &amp;&amp; (fieldValue === lfConstants.REQUESTED_ITEM_STATES.Closed_Complete || fieldValue === lfConstants.REQUESTED_ITEM_STATES.Closed_Incomplete)) {
                requestedItemGR.setValue('closed_on', new GlideDateTime());
            }
            requestedItemGR.setValue(fieldName, fieldValue);
        }
        requestedItemGR.updateMultiple();
    }
};

LFRequestedItemUtils.updateLocalizationRequestedItemsWithJournalFields = function(requestedItemIds, fieldsToBeUpdated) {
    if ((requestedItemIds.length == 0) || (new LFValidationUtils().isFieldTypeNonJSONObject(fieldsToBeUpdated))) {
        return;
    }
    var fieldNames = Object.keys(fieldsToBeUpdated);
    if (fieldNames.length &gt; 0) {
        var requestedItemGR = new GlideRecord('sn_lf_requested_item');
        requestedItemGR.addQuery("sys_id", "IN", requestedItemIds);
        requestedItemGR.query();

        while (requestedItemGR.next()) {
            for (var fieldIdx = 0; fieldIdx &lt; fieldNames.length; fieldIdx++) {
                var fieldName = fieldNames[fieldIdx];
                var fieldValue = fieldsToBeUpdated[fieldName] || '';
                if (fieldName === 'work_notes') {
                    requestedItemGR[fieldName] = fieldValue;
                } else {
                    requestedItemGR.setValue(fieldName, fieldValue);
                }
            }
            requestedItemGR.update();
        }
    }
};

LFRequestedItemUtils.getRequestedItemsByEncodedQuery = function(encodedQuery, firstRow, lastRow) {
    var requestedItemDetails = {};
    var lfValidationUtils = new LFValidationUtils();
    var requestedItemGR = new GlideRecord("sn_lf_requested_item");
    requestedItemGR.addEncodedQuery(encodedQuery);
    if (lfValidationUtils.isFieldTypeNumber(firstRow) &amp;&amp; lfValidationUtils.isFieldTypeNumber(lastRow)) {
        requestedItemGR.chooseWindow(firstRow, lastRow);
    }
    requestedItemGR.orderBy('number');
    requestedItemGR.query();
    while (requestedItemGR.next()) {
        var requestedItemUtils = new LFRequestedItemUtils(requestedItemGR);
        requestedItemDetails[requestedItemUtils.getNumber()] = {
            "sysId": requestedItemUtils.getSysId(),
            "state": requestedItemUtils.getCurrentState(),
            "internalName": requestedItemUtils.getArtifactConfigInternalName(),
            "documentContent": requestedItemUtils.getDocumentContent(),
            "sourceLanguage": requestedItemUtils.getSourceLanguageCode(),
            "sourceLanguageLabel": requestedItemUtils.getSourceLanguageName(),
            "targetLanguage": requestedItemUtils.getTargetLanguageCode(),
            "targetLanguageLabel": requestedItemUtils.getTargetLanguageName(),
            "artifactName": requestedItemUtils.getArtifactName(),
            "statusLabel": requestedItemUtils.getCurrentStatusName(),
            "status": requestedItemUtils.getCurrentStatus(),
            "additionalInfo": requestedItemUtils.getAdditionalInfo(),
            "error": requestedItemUtils.isError()
        };
    }
    return requestedItemDetails;
};

LFRequestedItemUtils.getRequestedItemsCountByEncodedQuery = function(encodedQuery) {
    var requestedItemGA = new GlideAggregate('sn_lf_requested_item');
    requestedItemGA.addEncodedQuery(encodedQuery);
    requestedItemGA.addAggregate('COUNT', 'count');
    requestedItemGA.query();
    var relatedRequestedItemCount = 0;

    if (requestedItemGA.next()) {
        relatedRequestedItemCount = requestedItemGA.getAggregate('COUNT', 'count');
    }
    return relatedRequestedItemCount;
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-04-27 08:44:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8d4827410f7320106a2c6577b9767ece&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;27&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFRequestedItemUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;a4dd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8d4827410f7320106a2c6577b9767ece&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-20 04:04:54&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:15</sys_created_on>
        <sys_id>3888f05183341210c6695855eeaad313</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFRequestedItemUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3888f05183341210c6695855eeaad313</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
