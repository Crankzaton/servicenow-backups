<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0217ad8e735c3300f74071ef64f6a7b5</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_csm_case_digest.CaseDigestImpl&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The implementation layer for case digests functionality.&lt;/description&gt;
        &lt;name&gt;CaseDigestImpl&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CaseDigestImpl = Class.create();
CaseDigestImpl.prototype = {
	initialize: function() {
		this.caseDigestDao = new CaseDigestDao();
	},
	
    canCreatePCR: function(caseGr) {
		if(!gs.nil(caseGr) &amp;&amp; caseGr.isValidRecord()){
			if (caseGr.state ==  CaseDigestConstants.CASE_STATE_RESOLVED &amp;&amp; gs.nil(caseGr.post_case_review) &amp;&amp; !(GlidePluginManager.isActive(CaseDigestConstants.MIM_PLUGIN) &amp;&amp; caseGr.parent &amp;&amp; caseGr.parent.major_case_state == MajorCaseDigestConstants.MAJOR_CASE_STATE_ACCEPTED &amp;&amp; gs.getProperty(CaseDigestConstants.PARENT_CHILD_CASE_SYNC, false) == 'true'))
			return true;
		}
		return false;
	},
	
	createPCR: function(caseGr, uiActionHandler) {
		//Allow create PCR only by users who have create access to PCR
		if(!caseGr || !caseGr.isValidRecord())return; 
		if(!this.caseDigestDao.canCreateinTable(CaseDigestConstants.PCR_TABLE, caseGr.sys_id)) return;
		var pcrObj = this.caseDigestDao.createPCR(caseGr);
		if(!pcrObj || !pcrObj.isValidRecord())return;
		gs.addInfoMessage(gs.getMessage("The Post Case Review document for {0} has been created.", caseGr.number));
		uiActionHandler.openGlideRecord(pcrObj);
	},

	hasAccessToPCR:function(sysId){
		return this.caseDigestDao.hasAccessToPCR(sysId);
	},
	
	hasAccessToCAS:function(sysId){
		return this.caseDigestDao.hasAccessToCAS(sysId);
	},

	canReopenPCR: function(caseGr) {
		if(!gs.nil(caseGr) &amp;&amp; caseGr.isValidRecord() &amp;&amp; caseGr.canRead()){
			if (caseGr.state ==  CaseDigestConstants.CASE_STATE_RESOLVED &amp;&amp; !gs.nil(caseGr.post_case_review) &amp;&amp; caseGr.post_case_review.state == CaseDigestConstants.PCR_STATE_CLOSED &amp;&amp; this.hasAccessToPCR(caseGr.post_case_review.sys_id))
			return true;
		}
		return false;
	},

	reopenPCR: function(caseGr, uiActionHandler) {
		if(!gs.nil(caseGr) &amp;&amp; !gs.nil(uiActionHandler) &amp;&amp; caseGr.isValidRecord() &amp;&amp; caseGr.canRead() &amp;&amp; !gs.nil(caseGr.post_case_review) &amp;&amp; this.hasAccessToPCR(caseGr.post_case_review.sys_id)){
			var pcrGr = this.caseDigestDao.getPCRByCase(caseGr);
			if(pcrGr){
				this.caseDigestDao.changePCRState(pcrGr, CaseDigestConstants.PCR_STATE_IN_PROGRESS);
				gs.addInfoMessage(gs.getMessage("Post Case Review {0} re-opened", pcrGr.number));
				uiActionHandler.openGlideRecord(pcrGr);
			}
		}
	},
	
	canCreateCAS: function(caseGr) {
		if(!caseGr || !caseGr.isValidRecord())return false;
		var canCreateCAS = false;
		if (caseGr &amp;&amp; caseGr.state !=  CaseDigestConstants.CASE_STATE_NEW &amp;&amp; caseGr.state !=  CaseDigestConstants.CASE_STATE_CLOSED)
			canCreateCAS = true;
		return canCreateCAS;
	},
	
	createCAS: function(caseGr, uiActionHandler) {
		//Allow create CAS only by users who have create access to the CAS
		if(!caseGr || !caseGr.isValidRecord())return; 
		if(!this.caseDigestDao.canCreateinTable(CaseDigestConstants.CAS_TABLE, caseGr.sys_id)) return;
		var casObj = this.caseDigestDao.createCAS(caseGr);
		if(casObj)
			uiActionHandler.openGlideRecord(casObj);
	},
	
	
	canRequestApproval: function(pcrGr) {
		if(!gs.nil(pcrGr) &amp;&amp; pcrGr.isValidRecord() &amp;&amp; pcrGr.canRead()){
			if (pcrGr.state ==  CaseDigestConstants.PCR_STATE_IN_PROGRESS &amp;&amp; !gs.nil(pcrGr.case_digest_configuration) &amp;&amp; !gs.nil(pcrGr.case_digest_configuration.approval_workflow))
				return true;
		}
		return false;
	},
	
	canApproveOrSuggestChanges: function(pcrGr){
		if(!pcrGr || !this.hasAccessToPCR(pcrGr.sys_id)){
			return false;
		}
		var canApproveOrRejectPCR = false;
		if(pcrGr.state == CaseDigestConstants.PCR_STATE_AWAITING_APPROVAL &amp;&amp; !gs.nil(pcrGr.case_digest_configuration)){
			if(!gs.nil(pcrGr.approval_group) &amp;&amp; gs.getUser().isMemberOf(pcrGr.approval_group+'')){
				return true;
			}
			if(!gs.nil(pcrGr.approval_users) &amp;&amp; pcrGr.approval_users.indexOf(gs.getUserID())!=-1){
				return true;
			}
			if(!gs.nil(pcrGr.assigned_to) &amp;&amp; !gs.nil(pcrGr.assigned_to.manager) &amp;&amp; (pcrGr.assigned_to.manager+'') == gs.getUserID()){
				return true;
			}
		}
		return false;
	},
	
	requestApproval: function(pcrGr, action) {
		if(!gs.nil(pcrGr) &amp;&amp; !gs.nil(action) &amp;&amp; pcrGr.isValidRecord() &amp;&amp; pcrGr.canWrite()){
			this.caseDigestDao.changePCRState(pcrGr, CaseDigestConstants.PCR_STATE_AWAITING_APPROVAL);
			gs.addInfoMessage(gs.getMessage("This review has been submitted for approval. The approver has not yet taken action."));
			action.openGlideRecord(pcrGr);
			var wf = new global.Workflow();
			wf.cancel(pcrGr);
			if(pcrGr.case_digest_configuration &amp;&amp; pcrGr.case_digest_configuration.approval_workflow)
				wf.startFlow(pcrGr.case_digest_configuration.approval_workflow, pcrGr, pcrGr.update());
		}
	},
	
	canPublish: function(pcrGr) {
		if(!gs.nil(pcrGr) &amp;&amp; pcrGr.isValidRecord() &amp;&amp; pcrGr.canRead()){
			var template = pcrGr.case_digest_configuration ? pcrGr.case_digest_configuration.document_template : null;
			if(template &amp;&amp; !gs.nil(pcrGr.case_number) &amp;&amp; pcrGr.case_number.getRefRecord().canWrite()){
				if (pcrGr.state ==  CaseDigestConstants.PCR_STATE_APPROVED || (pcrGr.state ==  CaseDigestConstants.PCR_STATE_IN_PROGRESS &amp;&amp; gs.nil(pcrGr.case_digest_configuration.approval_workflow)))
					return true;
			}
		}
		return false;
	},

	publish: function(pcrId) {
		var pcrGr = this.caseDigestDao.getPCRbyId(pcrId);
		var message = '';
		if(pcrGr){
			if(GlidePluginManager.isActive(CaseDigestConstants.MIM_PLUGIN) &amp;&amp; pcrGr.case_number &amp;&amp; pcrGr.case_number.major_case_state == MajorCaseDigestConstants.MAJOR_CASE_STATE_ACCEPTED){
				var ep1 = new GlideScriptedExtensionPoint().getExtensions(CaseDigestConstants.MAJOR_PCR_PUBLISH_EXTENSION_POINT);
				if(ep1.length &gt; 0){
					message = ep1[0].majorCasePublish(pcrGr);
				}
			}
			else{
				var ep2 = new GlideScriptedExtensionPoint().getExtensions(CaseDigestConstants.PCR_PUBLISH_EXTENSION_POINT);
				if(ep2.length &gt; 0){
					message = ep2[0].publish(pcrGr);
				}
			}
		}
		return message;
	},
	
	canPublishCAS: function(casGr) {
		if(!casGr || !this.hasAccessToCAS(casGr.sys_id)){
			return false;
		}
		var template = casGr.case_digest_configuration ? casGr.case_digest_configuration.document_template : null;
		if (template &amp;&amp; casGr.state ==  CaseDigestConstants.CAS_STATE_IN_PROGRESS)
			return true;
		return false;
	},
	
	fetchCaseDigestConfiguration: function(caseGr, tableName) {
		if(!caseGr || !caseGr.isValidRecord())return '';
		return this.caseDigestDao.fetchCaseDigestConfiguration(caseGr, tableName);
	},
	
	getCaseState: function(caseId){
		if(!caseId)
			return "";
		return this.caseDigestDao.getCaseState(caseId);
	},
	
	closePCR: function(pcrGr) {
		this.caseDigestDao.changePCRState(pcrGr, CaseDigestConstants.PCR_STATE_CLOSED);
	},
	
	addAdditionalCommenttoCase: function(caseId, comment) {
		this.caseDigestDao.addAdditionalCommenttoCase(caseId, comment);
	},
	
	addWorkNotetoCase: function(caseId, workNote) {
		this.caseDigestDao.addWorkNotetoCase(caseId, workNote);
	},
	
	saveForm: function(tableName, sysId, fieldInfo) {
		if(!tableName || !sysId || !fieldInfo)return;
		return this.caseDigestDao.saveForm(tableName, sysId, fieldInfo);
	},
	
	checkIfCommentsAreAddedByUser: function(pcrId) {
		var pcrGr = this.caseDigestDao.getPCRbyId(pcrId);
		var latestWorkNotes = pcrGr.work_notes.getJournalEntry(1);
		//work notes format will be as below
		/*2019-04-06 18:20:33 - &lt;User Display Name&gt; (Work notes)
		&lt;work notes comment&gt;*/
		if(latestWorkNotes){
			var latestWorkNotesMetaInfo = latestWorkNotes.split("\n");
			if(latestWorkNotesMetaInfo.length &gt; 0){
				latestWorkNotesMetaInfo = latestWorkNotesMetaInfo[0];
				if(latestWorkNotesMetaInfo.indexOf(gs.getUserDisplayName()) &gt;= 0){
					return true;
				}
			}
		}
		return false;
	},
	
	updatePostCaseReviewStateToInProgress: function(pcrId){
		var pcrGr = this.caseDigestDao.getPCRbyId(pcrId);
		pcrGr.state = CaseDigestConstants.PCR_STATE_IN_PROGRESS;
		pcrGr.update();
	},
	
	getTemplateId: function(tableName, sysId){
		if(!tableName || !sysId)
			return;
		return this.caseDigestDao.getTemplateId(tableName, sysId);
	},
	
	publishCAStoCase: function(sysId, sendEmail) {
		var ep = new GlideScriptedExtensionPoint().getExtensions(CaseDigestConstants.CAS_PUBLISH_EXTENSION_POINT);
		if(ep.length &gt; 0) {
			var point = ep[0];
			return point.publishCAStoCase(sysId, sendEmail);
		}
	},
	
	validateReadOnlyFields : function(current, previous){
		if(!previous || !current || current.state != previous.state)
			return;
		var states = [
			CaseDigestConstants.PCR_STATE_AWAITING_APPROVAL,
			CaseDigestConstants.PCR_STATE_APPROVED,
			CaseDigestConstants.PCR_STATE_CLOSED,
			CaseDigestConstants.PCR_STATE_CANCELLED ];
		if(states.indexOf(previous.state.toString()) == -1)
			return;
		var readOnlyFields = ["number", "case_number", "assigned_to", "approval_users", "short_description", "summary", "symptoms", "root_cause_analysis", "solution_provided", "preventive_measures_taken", "commitment_date", "assignment_group", "approval_group"];
		var len = readOnlyFields.length;
		for (var i = 0; i &lt; len; i++) {
			if (current.getValue(readOnlyFields[i]) != previous.getValue(readOnlyFields[i])){
				var message = gs.getMessage("You cannot make changes to the post case review.");
				gs.addErrorMessage(message);
				current.setAbortAction(true);
				break;
			}
		}
	},
	
	//Do not allow updates to the fields when CAS is in closed state.
	blockCASFieldsUpdateInClosedState: function(current, previous) {
		if (!current || !previous || !current.isValidRecord() || !previous.isValidRecord() || current.state.changes() || current.state != CaseDigestConstants.CAS_STATE_CLOSED) return;
		var readOnlyFields = CaseDigestConstants.CAS_CLOSED_STATE_READ_ONLY_FIELDS;
		for (var i = 0, len = readOnlyFields.length; i &lt; len; i++) {
			if (current.getValue(readOnlyFields[i]) != previous.getValue(readOnlyFields[i])) {
				gs.addErrorMessage(gs.getMessage("You cannot make changes to the closed case action summary."));
				current.setAbortAction(true);
				break;
			}
		}
	},
	
    type: 'CaseDigestImpl'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-03-21 13:43:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0217ad8e735c3300f74071ef64f6a7b5&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CaseDigestImpl&lt;/sys_name&gt;
        &lt;sys_package display_value="Case Digests" source="sn_csm_case_digest"&gt;8fa0059c73632300f74071ef64f6a76a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Case Digests"&gt;8fa0059c73632300f74071ef64f6a76a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0217ad8e735c3300f74071ef64f6a7b5&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-26 10:22:46&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:58</sys_created_on>
        <sys_id>6930f85583b01210c6695855eeaad32b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CaseDigestImpl</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6930f85583b01210c6695855eeaad32b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:58</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
