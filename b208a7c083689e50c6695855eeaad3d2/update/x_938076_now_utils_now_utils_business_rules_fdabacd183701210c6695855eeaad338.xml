<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>GlideDBObjectManager.getAbsoluteBase(current.applies_to)  !=  'cmdb_ci'</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Allow only valid Non-CMDB tables</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

 if (!current.independent) {
  gs.addErrorMessage(gs.getMessage("Non CMDB table entry needs to be independent"));
        current.setAbortAction(true);
 }

    if (!current.applies_to) {
        gs.addErrorMessage(gs.getMessage("applies_to column cannot be empty or null"));
        current.setAbortAction(true);
    }
 // Only tables defined in the glide.identification_engine.non_cmdb_tables are allowed for global scope,
 // all non global scope tables are allowed by default
    if (getScope().toLowerCase() == 'global' && !isTableIncluded()) {
        gs.addErrorMessage(gs.getMessage("Only non CMDB tables defined in the system property glide.identification_engine.non_cmdb_tables are allowed for global scope"));
        current.setAbortAction(true);
    }

    function getScope() {
        var table = new GlideRecord("sys_db_object");
        table.addQuery('name', current.applies_to);
        table.query();
        var scope = '';
        if (table.next())
            scope = table.sys_scope;
        return scope;
    }

    function isTableIncluded() {
        var validTables = gs.getProperty("glide.identification_engine.non_cmdb_tables").toLowerCase().split(",").map(function(value) {
            return value.trim();
        });
        return validTables.indexOf(current.applies_to.toLowerCase().toString()) > -1;
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>fdabacd183701210c6695855eeaad338</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Allow only valid Non-CMDB tables</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_fdabacd183701210c6695855eeaad338</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:03</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=fdabacd183701210c6695855eeaad338"/>
</record_update>
