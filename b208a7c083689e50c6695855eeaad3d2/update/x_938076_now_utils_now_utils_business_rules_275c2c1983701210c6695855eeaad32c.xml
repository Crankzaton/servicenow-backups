<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate field types</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var addedInputFields = getAddedInputFields(current, previous);
 //Below field types are supported for the input fields
 var fieldTypesName = "choice,string,html,reference,integer,long,longint,decimal,numeric,float,boolean";
 var fieldTypesLabel = "Choice, String, HTML, Reference, Integer, Long, Longint, Decimal, Numeric, Float, Boolean";
 var validInputTypes = checkInputTypes(current.table, addedInputFields, fieldTypesName);
 if (!validInputTypes) {
  var inputErrorMessage = gs.getMessage("Input Fields are only supported for {0} types", fieldTypesLabel.toString());
        gs.addErrorMessage(inputErrorMessage);
  current.setAbortAction(true);
    }

})(current, previous);

function checkInputTypes(table, addFields, fieldTypes) {
    var tableRecord = new GlideRecord(table);
    for (var field in addFields) {
        var element = tableRecord.getElement(addFields[field]);
        var descriptor = element.getED();
        var type = descriptor.getInternalType();
        var choiceType = sn_ml.MLRecordUtil.getFieldType(table, addFields[field]);
        if (!fieldTypes.includes(type) && !fieldTypes.includes(choiceType)) {
            return false;
        }
    }
    return true;
}

function getAddedInputFields(current, previous) {
    var currentArray = current.fields.split(',');
    if (gs.nil(previous.fields)) {
        return currentArray;
    }
    var previousArray = previous.fields.split(',');
    return currentArray.filter(function(x) {
        return previousArray.indexOf(x) < 0;
    });
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:11</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>275c2c1983701210c6695855eeaad32c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate field types</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_275c2c1983701210c6695855eeaad32c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:11</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=275c2c1983701210c6695855eeaad32c"/>
</record_update>
