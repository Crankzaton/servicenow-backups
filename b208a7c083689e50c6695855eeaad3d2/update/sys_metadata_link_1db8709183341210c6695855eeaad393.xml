<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9a8c1988777961107d731dd91e5a99b0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.EntitlementAuditHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This script include records the actions done to subscription_entitlement table like insert/update/inactivate entitlement&lt;/description&gt;
        &lt;name&gt;EntitlementAuditHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var EntitlementAuditHelper = Class.create();
EntitlementAuditHelper.prototype = {
    initialize: function() {
        this.SUBSCRIPTION_ENTITLEMENT_AUDIT_LOG = "subscription_entitlement_audit_log";

        this.CREATED = "created";
        this.INACTIVATED = "inactivated";
        this.UPDATED = "updated";
        this.EXPIRED = "expired";

    },

    recordSubscriptionAdded: function(currEntitlementGR) {
        this.record(currEntitlementGR, null, this.CREATED);
    },

    recordSubscriptionInactivated: function(currEntitlementGR, prevEntitlementGR) {
        var serializedPrevEntitlement = new global.LicensingEngineGlobalHelper().serialize(prevEntitlementGR);
        this.record(currEntitlementGR, serializedPrevEntitlement, this.INACTIVATED);
    },

    recordSubscriptionExpired: function(currEntitlementGR, prevEntitlementGR) {
        var serializedPrevEntitlement = new global.LicensingEngineGlobalHelper().serialize(prevEntitlementGR);
        this.record(currEntitlementGR, serializedPrevEntitlement, this.EXPIRED);
    },

    recordSubscriptionUpdated: function(currEntitlementGR, prevEntitlementGR) {
        var serializedPrevEntitlement = new global.LicensingEngineGlobalHelper().serialize(prevEntitlementGR);
        this.record(currEntitlementGR, serializedPrevEntitlement, this.UPDATED);
    },

    record: function(currEntitlementGR, serializedPrevEntitlement, action) {
        if (!this._validateAuditInput(currEntitlementGR, action))
            return;

        var opTime = this._getOperationTime(currEntitlementGR, action);
        var entitlementName = currEntitlementGR.getValue("name");

        var gr = new GlideRecord(this.SUBSCRIPTION_ENTITLEMENT_AUDIT_LOG);
        if (!gr.isValid())
            return;
        gr.setValue("time_stamp", opTime);
        gr.setValue("subscription", currEntitlementGR.getValue("sys_id"));
        gr.setValue("action", action);
        gr.setValue("new_purchased_count", currEntitlementGR.getValue("purchased_count"));
        gr.setValue("new_start_date", currEntitlementGR.getValue("start_date"));
        gr.setValue("new_end_date", currEntitlementGR.getValue("end_date"));
        gr.setValue("previous_subscription", serializedPrevEntitlement);

        var auditRec = gr.insert();

        if (global.JSUtil.nil(auditRec))
            GlideLog.error("Subscription Audit Log failed for license: " + entitlementName);
    },

    _getOperationTime: function(currEntitlementGR, action) {

        if (action === this.CREATED)
            return currEntitlementGR.getValue("sys_created_on");
        else if (action === this.UPDATED)
            return currEntitlementGR.getValue("sys_updated_on");
        else
            return new GlideDateTime().getValue();

    },

    _validateAuditInput: function(currEntitlementGR, action) {

        if (global.JSUtil.nil(currEntitlementGR)) {
            gs.error("Skipping Subscription Audit Log for subscription " + action + "operation because GlideRecord object is null");
            return false;
        }

        if (global.JSUtil.nil(action)) {
            gs.error("Skipping Subscription Audit Log for subscription " + currEntitlementGR.name + "because operation is unknown");
            return false;
        }

        return true;
    },

    type: 'EntitlementAuditHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-20 18:40:20&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9a8c1988777961107d731dd91e5a99b0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;EntitlementAuditHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9a8c1988777961107d731dd91e5a99b0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-10 22:04:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:06</sys_created_on>
        <sys_id>1db8709183341210c6695855eeaad393</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>EntitlementAuditHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1db8709183341210c6695855eeaad393</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
