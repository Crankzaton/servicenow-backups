<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>45980c660529d910f877a261ed35bb16</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UXFormActionUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Util functions for UX Form Action&lt;/description&gt;
        &lt;name&gt;UXFormActionUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UXFormActionUtil = Class.create();

/**
 * Utility Functions for UXFormAction 
 * 
 * Has Functions to 
 *  Find Actions for given table/layout/group etc
 *  Unify Actions - consolidate Global DAs and Global UI Actions to Layout Items
 * 
 * Also has Get and Create functions for below tables
 *  1. FORM ACTION : sys_ux_form_action
 *  2. LAYOUT ITEM: sys_ux_form_action_layout_item
 *  3. LAYOUT ITEM M2M : sys_ux_m2m_action_layout_item
 * 
 */
UXFormActionUtil.prototype = {

    //Action Tables
    SYS_UI_ACTION: "sys_ui_action",
    SYS_DECLARATIVE_ACTION_ASSIGNMENT: "sys_declarative_action_assignment",
    SYS_UX_FORM_ACTION: "sys_ux_form_action",
    SYS_UX_FORM_ACTION_LAYOUT: "sys_ux_form_action_layout",
    SYS_UX_FORM_ACTION_LAYOUT_ITEM: "sys_ux_form_action_layout_item",
    SYS_UX_FORM_ACTION_LAYOUT_GROUP: "sys_ux_form_action_layout_group",
    SYS_UX_M2M_ACTION_LAYOUT_ITEM: "sys_ux_m2m_action_layout_item",

    //Layout Columns
    UX_FORM_ACTION_LAYOUT_ITEM: "ux_form_action_layout_item",
    UX_FORM_ACTION_LAYOUT: "ux_form_action_layout",
    UX_FORM_ACTION_LAYOUT_ITEM_DOT_ACTION: "ux_form_action_layout_item.action",

    //Views
    DEFAULT_VIEW: 'Default view',

    //Action Types
    UX_FORM_ACTION_TYPE: {
        UI_ACTION: "ui_action",
        DECLARATIVE_ACTION: "declarative_action"
    },

    DISPLAY_TYPE: {
        BUTTON: "0",
        OVERFLOW_MENU: "1"
    },

    UI_ACTION_COLOR_MAP: {
        "primary": "primary",
        "destructive": "primary-negative",
        "unstyled": "secondary"
    },

    UX_FORM_ACTION_LAYOUT_ITEM_TYPE: {
        ACTION: "action",
        GROUP: "group"
    },

    initialize: function() {},

    /**
     * GET - Tables 
     * Function that finds all the "tables" in hierarchy given a "tableName"
     * 
     * @param {string} tableName - Name of the table 
     * 
     * @returns {string|null} comma separated tableNames
     * ex. cmdb_ci_net_traffic will get back "cmdb_ci_net_traffic, cmdb_ci, cmdb"
     */
    getTablesWithHierarchy: function(tableName) {
        return GlideStringUtil.join(GlideDBObjectManager.getActionTables(tableName));
    },

    /**
     * GET - UI Actions 
     * Function that finds all the "ui actions" in a given "table Hierarchy"
     * 
     * @param {string} tableName - Name of the table 
     * 
     * @returns {string|null} comma separated "UI Action Sys Ids"
     */
    getUIActions: function(tableName) {
        var gr = new GlideRecord(tableName);
        var actionList = new GlideActionManager().getActions(gr, this.DEFAULT_VIEW).toArray();
        return actionList.map(function(action) {
            return action.getID();
        });
    },

    /**
     * GET - UX FORM ACTIONs
     * Function that finds all the "form actions" in a given "Layout Group"
     * 
     * @param {string} layoutGroupSysId - sys_id of the UX Form Action Layout Group 
     * 
     * @returns {string|null} comma separated "Form Action Sys Ids"
     */
    getActionsInGroup: function(layoutGroupSysId) {
        var layoutGroupGr = new GlideRecord(this.SYS_UX_FORM_ACTION_LAYOUT_GROUP);
        if (layoutGroupGr.get(layoutGroupSysId)) {
            return layoutGroupGr.actions.split(",");
        } else {
            return [];
        }
    },

    /**
     * GET - UX FORM ACTIONs
     * Function that finds all the "form actions" in a given "Layout &amp; table Hierarchy"
     * 
     * @param {string} layoutSysId - sys_id of UX Form Action Layout
     * @param {string} tables - comma separated tableNames (all tables in hierarchy)
     * 
     * @returns {formActionSysIds: {string}, uiActionSysIds: {string}, declarativeActionSysIds: {string}} 
     * Object of comma separated "Sys Ids" for FormAction, UIAction, DA
     */
    getActionsInLayout: function(layoutSysId, tables) {
        var formActionSysIds = [];
        var uiActionSysIds = [];
        var declarativeActionSysIds = [];

        var layoutItemsGr = new GlideRecord(this.SYS_UX_FORM_ACTION_LAYOUT_ITEM);
        layoutItemsGr.addQuery("table", "IN", tables)
            .addOrCondition("table", "=", "global");
        layoutItemsGr.addJoinQuery(this.SYS_UX_M2M_ACTION_LAYOUT_ITEM, "sys_id", this.UX_FORM_ACTION_LAYOUT_ITEM)
            .addCondition(this.UX_FORM_ACTION_LAYOUT, layoutSysId)
            .addActiveQuery();
        layoutItemsGr.addActiveQuery();
        layoutItemsGr.query();
        while (layoutItemsGr.next()) {
            //for type Action get the action (sys_id)
            //for type Group get all the underlying actions (sys_id)s
            if (layoutItemsGr.action) {
                formActionSysIds.push(layoutItemsGr.getValue("action"));
            } else if (layoutItemsGr.layout_group) {
                formActionSysIds = formActionSysIds.concat(this.getActionsInGroup(layoutItemsGr.layout_group));
            }
        }

        //gather the corresponding uiAction and DA sysIds
        var actionGr = new GlideRecord(this.SYS_UX_FORM_ACTION);
        formActionSysIds.forEach(
            function(formActionSysId) {
                actionGr.get(formActionSysId);

                if (this.UX_FORM_ACTION_TYPE.DECLARATIVE_ACTION == actionGr.action_type) {
                    declarativeActionSysIds.push(actionGr.getValue(this.UX_FORM_ACTION_TYPE.DECLARATIVE_ACTION));
                } else {
                    uiActionSysIds.push(actionGr.getValue(this.UX_FORM_ACTION_TYPE.UI_ACTION));
                }
            }.bind(this));

        return {
            "formActionSysIds": formActionSysIds,
            "uiActionSysIds": uiActionSysIds,
            "declarativeActionSysIds": declarativeActionSysIds
        };
    },

    /**
     * GET - UX FORM ACTIONs
     * Function that finds all the "form actions" in a given "actionType, table Hierarchy"
     * but NOT part of a given "layout"
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} layoutSysId - sys_id of UX Form Action Layout
     * @param {string} actionType - ui_action / declarative_action
     * @param {boolean} isNewLayout - is this a new Action Layout
     * 
     * @returns {string|null} comma separated "Form Action Sys Ids"
     */
    getActionsNotInLayout: function(tableName, layoutSysId, actionType, isNewLayout) {
        var formActions = [];
        var allUIActions = [];
        var actionsInLayout = {
            formActionSysIds: [],
            uiActionSysIds: [],
            declarativeActionSysIds: []
        };

        //get all the tables in hierarchy
        var tablesWithHierarchy = this.getTablesWithHierarchy(tableName);
        //get all the actions in the given Layout

        if (!isNewLayout) {
            //no actions can be in layout for a new Layout
            actionsInLayout = this.getActionsInLayout(layoutSysId, tablesWithHierarchy);
        }

        var grFormAction = new GlideRecord(this.SYS_UX_FORM_ACTION);
        grFormAction.addActiveQuery();
        grFormAction.addQuery("table", "IN", tablesWithHierarchy)
            .addOrCondition("table", "=", "global");

        //query as needed, based on actionType UI or DA or both
        if (this.UX_FORM_ACTION_TYPE.DECLARATIVE_ACTION === actionType) {
            grFormAction.addQuery("declarative_action.enable_for_all_experiences", true);
            //remove ones already in Layout
            if (actionsInLayout.declarativeActionSysIds.length) {
                grFormAction.addQuery(this.UX_FORM_ACTION_TYPE.DECLARATIVE_ACTION, "NOT IN", actionsInLayout.declarativeActionSysIds.join());
            }
        } else if (this.UX_FORM_ACTION_TYPE.UI_ACTION === actionType) {
            allUIActions = this.getUIActions(tableName);
            if (allUIActions.length) {
                grFormAction.addQuery(this.UX_FORM_ACTION_TYPE.UI_ACTION, "IN", allUIActions.join());
            }
            //remove ones already in Layout
            if (actionsInLayout.uiActionSysIds.length) {
                grFormAction.addQuery(this.UX_FORM_ACTION_TYPE.UI_ACTION, "NOT IN", actionsInLayout.uiActionSysIds.join());
            }
        } else {
            var actionTypeCondition = grFormAction.addQuery("declarative_action.enable_for_all_experiences", true);
            allUIActions = this.getUIActions(tableName);
            if (allUIActions.length) {
                actionTypeCondition.addOrCondition(this.UX_FORM_ACTION_TYPE.UI_ACTION, "IN", allUIActions.join());
            }
            //remove ones already in Layout
            if (actionsInLayout.declarativeActionSysIds.length) {
                var daActionTypeCondition = grFormAction.addQuery(this.UX_FORM_ACTION_TYPE.DECLARATIVE_ACTION, "NOT IN", actionsInLayout.declarativeActionSysIds.join());
                if (allUIActions.length) {
                    daActionTypeCondition.addOrCondition(this.UX_FORM_ACTION_TYPE.UI_ACTION, "IN", allUIActions.join());
                }
            }
            //remove ones already in Layout
            if (actionsInLayout.uiActionSysIds.length) {
                var uiActionTypeCondition = grFormAction.addQuery(this.UX_FORM_ACTION_TYPE.UI_ACTION, "NOT IN", actionsInLayout.uiActionSysIds.join());
                uiActionTypeCondition.addOrCondition("declarative_action.enable_for_all_experiences", true);
            }
        }

        //remove all the actions that are already part of the given layout
        if (actionsInLayout.formActionSysIds.length)
            grFormAction.addQuery("sys_id", "NOT IN", actionsInLayout.formActionSysIds.join());

        grFormAction.orderByDesc("specificity");
        grFormAction.query();
        while (grFormAction.next()) {
            var uiActionSysId = grFormAction.getValue(this.UX_FORM_ACTION_TYPE.UI_ACTION);
            var daActionSysId = grFormAction.getValue(this.UX_FORM_ACTION_TYPE.DECLARATIVE_ACTION);
            //Add only UI Actions and DA if not exists
            if ((uiActionSysId &amp;&amp; !this._uiActionExists(formActions, uiActionSysId)) || (daActionSysId &amp;&amp; !this._daActionExists(formActions, daActionSysId))) {
                formActions.push({
                    "sys_id": grFormAction.getUniqueValue(),
                    "name": grFormAction.getValue("name"),
                    "table": grFormAction.getValue("table"),
                    "uiActionSysId": uiActionSysId,
                    "daActionSysId": daActionSysId
                });
            }

        }
        return formActions;
    },

    /**
     * Private helper method to find if formActions has a UI Action already
     */
    _uiActionExists: function(formActions, uiActionSysId) {
        return formActions.some(function(action) {
            return action.uiActionSysId === uiActionSysId;
        });
    },

    /**
     * Private helper method to find if formActions has a DA Action already
     */
    _daActionExists: function(formActions, daActionSysId) {
        return formActions.some(function(action) {
            return action.daActionSysId === daActionSysId;
        });
    },

    /**
     * GET - UX FORM ACTION 
     * Function that finds the "Form Action" for a given "table, action and actionType"
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} actionSysId - sys_id of the corresponding UIAction / Declarative Action
     * @param {string} actionType - ui_action / declarative_action
     * 
     * @returns {string|null} sys_id of "UX Form Action" 
     */
    getUXFormAction: function(tableName, actionSysId, actionType) {
        var grFormAction = new GlideRecord(this.SYS_UX_FORM_ACTION);
        grFormAction.addQuery("table", tableName);
        grFormAction.addQuery(actionType, actionSysId);
        grFormAction.addQuery("action_type", actionType);
        grFormAction.addActiveQuery();
        grFormAction.orderByDesc("specificity");
        grFormAction.setLimit(1);
        grFormAction.query();
        if (grFormAction.next()) {
            return grFormAction.getUniqueValue();
        }
        return null;
    },

    /**
     * GET - UX FORM ACTION LAYOUT ITEM 
     * Function that finds the "Layout Item" for a given "table and form action"
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} actionSysId - sys_id of the corresponding UXForm Action / Layout Group
     * @param {boolean} onlyActions - include Groups or only Action type
     * 
     * @returns {sys_id: string, displayInfo: {color: string, overflow: boolean, order: number }}  
     * of "UX Form Action Layout Item"
     */
    getUXFormActionLayoutItem: function(tableName, actionSysId, onlyActions) {
        var grFormActionLayoutItem = new GlideRecord(this.SYS_UX_FORM_ACTION_LAYOUT_ITEM);
        grFormActionLayoutItem.addQuery("table", tableName);
        var layoutItemActionQuery = grFormActionLayoutItem.addQuery("action", actionSysId);
        //no need to include Groups for onlyActions
        if (onlyActions) {
            grFormActionLayoutItem.addQuery("item_type", this.UX_FORM_ACTION_LAYOUT_ITEM_TYPE.ACTION);
        } else {
            layoutItemActionQuery.addOrCondition("layout_group.actions", "IN", actionSysId);
        }
        grFormActionLayoutItem.addActiveQuery();
        grFormActionLayoutItem.setLimit(1);
        grFormActionLayoutItem.query();
        if (grFormActionLayoutItem.next()) {
            return {
                "sys_id": grFormActionLayoutItem.getUniqueValue(),
                "displayInfo": {
                    "color": grFormActionLayoutItem.getValue("color"),
                    "overflow": grFormActionLayoutItem.getValue("overflow"),
                    "order": grFormActionLayoutItem.getValue("order")
                }
            };
        }
        return null;
    },

    /**
     * GET - UX FORM ACTION LAYOUT ITEM M2M
     * Function that finds the "Layout Item M2M record" for a given "table, layout &amp; item"
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} layoutSysId - sys_id of UX Form Action Layout
     * @param {string} layoutItemSysId - sys_id of UX Form Action Layout Item
     * 
     * @returns {string|null} sys_id of "UX Form Action Layout Item M2M"
     */
    getUXFormActionLayoutItemM2M: function(tableName,
        layoutSysId,
        layoutItemSysId) {
        var grFormActionLayoutItemM2M = new GlideRecord(this.SYS_UX_M2M_ACTION_LAYOUT_ITEM);
        grFormActionLayoutItemM2M.addQuery("table", tableName);
        grFormActionLayoutItemM2M.addQuery(this.UX_FORM_ACTION_LAYOUT, layoutSysId);
        grFormActionLayoutItemM2M.addQuery(this.UX_FORM_ACTION_LAYOUT_ITEM, layoutItemSysId);
        grFormActionLayoutItemM2M.addActiveQuery();
        grFormActionLayoutItemM2M.setLimit(1);
        grFormActionLayoutItemM2M.query();
        if (grFormActionLayoutItemM2M.next()) {
            return grFormActionLayoutItemM2M.getUniqueValue();
        }
        return null;
    },

    /**
     * GET - UX FORM ACTION LAYOUT ITEM M2M BY ACTION
     * Function that finds the "Layout Item M2M record" for a given "layout &amp; action"
     * 
     * @param {string} layoutSysId - sys_id of UX Form Action Layout
     * @param {string} actionSysId - sys_id of UX Form Action 
     * 
     * @returns {string|null} sys_id of "UX Form Action Layout Item M2M"
     */
    getUXFormActionLayoutItemM2MByAction: function(
        layoutSysId,
        actionSysId) {
        var grFormActionLayoutItemM2M = new GlideRecord(this.SYS_UX_M2M_ACTION_LAYOUT_ITEM);
        grFormActionLayoutItemM2M.addQuery(this.UX_FORM_ACTION_LAYOUT, layoutSysId);
        grFormActionLayoutItemM2M.addQuery(this.UX_FORM_ACTION_LAYOUT_ITEM_DOT_ACTION, actionSysId);
        grFormActionLayoutItemM2M.addActiveQuery();
        grFormActionLayoutItemM2M.setLimit(1);
        grFormActionLayoutItemM2M.query();
        if (grFormActionLayoutItemM2M.next()) {
            return grFormActionLayoutItemM2M.getUniqueValue();
        }
        return null;
    },

    /**
     * CREATE - UX FORM ACTION
     * Function that creates a new SYS_UX_FORM_ACTION record
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} actionSysId - sys_id of the corresponding UIAction / Declarative Action
     * @param {string} actionType - ui_action / declarative_action
     * @param {string} formActionName - Name of the Form Action to Create
     * 
     * @returns {string} sys_id of new Row Inserted
     */
    createUXFormAction: function(tableName, actionSysId, actionType, formActionName) {
        var grAction = new GlideRecord(this.SYS_UX_FORM_ACTION);
        grAction.initialize();
        grAction.setValue("table", tableName);
        grAction.setValue(actionType, actionSysId);
        grAction.setValue("active", true);
        grAction.setValue("action_type", actionType);
        grAction.setValue("name", formActionName);
        return grAction.insert();
    },

    /**
     * Create - UX FORM ACTION LAYOUT ITEM
     * Function that creates a new SYS_UX_FORM_ACTION_LAYOUT_ITEM record
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} layoutItemName - Name of the Form Action Layout Item to Create
     * @param {string} formActionSysId - sys_id of the corresponding UXForm Action
     * 
     * @returns {string} sys_id of new Row Inserted
     */
    createUXFormActionLayoutItem: function(tableName, layoutItemName, formActionSysId, uiActionSysId, daActionSysId) {
        var layoutItemSysId = '';
        var label = layoutItemName;
        var color = this.UI_ACTION_COLOR_MAP["unstyled"];
        var overflow = false;
        var order = 0;
        //populate label from UI Action's Name or Declarative Action's Label Fields
        if (uiActionSysId) {
            var grUIAction = new GlideRecord(this.SYS_UI_ACTION);
            if (grUIAction.get(uiActionSysId)) {
                label = grUIAction.getValue("name");
                //populate color / overflow / order from UI Action
                var uiActionColor = grUIAction.getValue("form_style");
                if (uiActionColor) {
                    color = this.UI_ACTION_COLOR_MAP[uiActionColor];
                }
                overflow = grUIAction.getValue("form_menu_button_v2");
                order = grUIAction.getValue("order");
            }
        } else if (daActionSysId) {
            var grDeclarativeAction = new GlideRecord(this.SYS_DECLARATIVE_ACTION_ASSIGNMENT);
            if (grDeclarativeAction.get(daActionSysId)) {
                label = grDeclarativeAction.getValue("label");
                order = grDeclarativeAction.getValue("order");
            }
        }

        var grLayoutItem = new GlideRecord(this.SYS_UX_FORM_ACTION_LAYOUT_ITEM);
        grLayoutItem.initialize();
        grLayoutItem.setValue("table", tableName);
        grLayoutItem.setValue("name", layoutItemName);
        grLayoutItem.setValue("label", label);
        grLayoutItem.setValue("color", color);
        grLayoutItem.setValue("overflow", overflow);
        grLayoutItem.setValue("order", order);
        grLayoutItem.setValue("active", true);
        grLayoutItem.setValue("item_type", "action");
        grLayoutItem.setValue("action", formActionSysId);
        layoutItemSysId = grLayoutItem.insert();
        return {
            "sys_id": layoutItemSysId,
            "color": color,
            "overflow": overflow,
            "order": order
        };
    },

    /**
     * Create - UX FORM ACTION LAYOUT ITEM M2M
     * Function that creates a new SYS_UX_M2M_ACTION_LAYOUT_ITEM record
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} layoutSysId - sys_id of UX Form Action Layout
     * @param {string} layoutItemSysId - sys_id of UX Form Action Layout Item
     * @param {sys_id: string, layoutItemDisplayInfo: {color: string, overflow: boolean, order: number }}  
     * of "UX Form Action Layout Item"
     * 
     * @returns {string} sys_id of new Row Inserted
     */
    createUXFormActionLayoutItemM2M: function(tableName, layoutSysId, layoutItemSysId, layoutItemDisplayInfo) {

        //pass on the display info from item to item M2M
        var order = layoutItemDisplayInfo &amp;&amp; layoutItemDisplayInfo.order ? layoutItemDisplayInfo.order : '0';
        var color = layoutItemDisplayInfo &amp;&amp; layoutItemDisplayInfo.color ? layoutItemDisplayInfo.color : this.UI_ACTION_COLOR_MAP["unstyled"];
        var displayType = layoutItemDisplayInfo &amp;&amp; layoutItemDisplayInfo.overflow === this.DISPLAY_TYPE.BUTTON ? this.DISPLAY_TYPE.BUTTON : this.DISPLAY_TYPE.OVERFLOW_MENU;

        var grLayoutItemM2M = new GlideRecord(this.SYS_UX_M2M_ACTION_LAYOUT_ITEM);
        grLayoutItemM2M.initialize();
        grLayoutItemM2M.setValue("table", tableName);
        grLayoutItemM2M.setValue("order", order);
        grLayoutItemM2M.setValue("display_type", displayType);
        grLayoutItemM2M.setValue("variant", color);
        grLayoutItemM2M.setValue("active", true);
        grLayoutItemM2M.setValue(this.UX_FORM_ACTION_LAYOUT, layoutSysId);
        grLayoutItemM2M.setValue(this.UX_FORM_ACTION_LAYOUT_ITEM, layoutItemSysId);
        return grLayoutItemM2M.insert();
    },

    /**
     * Unify - FORM ACTIONs
     * Function that consolidates Global DAs and Global UI Actions to Layout Items
     * for the given "table" and "layout"
     * 
     * @param {string} tableName - Name of the table 
     * @param {string} layoutSysId - sys_id of UX Form Action Layout
     * @param {boolean} isNewLayout - is this for a new Action Layout
     * 
     */
    unifyActions: function(tableName, layoutSysId, isNewLayout) {
        //Get all Form Actions (Global DA and Global UI Actions) 
        //that does not have a corresponding mapped Layout Item
        var formActions = this.getActionsNotInLayout(tableName, layoutSysId, null, isNewLayout);
        // Create layout items and associate them to given Layout
        formActions.forEach(function(action) {
            var layoutItem;
            var layoutItemSysId = '';
            var layoutItemDisplayInfo = {};
            var layoutItemM2MSysId = '';
            var onlyActions = true;
            //check if there any existing layout item
            var table = action.table;
            layoutItem = this.getUXFormActionLayoutItem(table, action.sys_id, onlyActions);
            layoutItemSysId = layoutItem ? layoutItem.sys_id : '';
            layoutItemDisplayInfo = layoutItem ? layoutItem.displayInfo : null;
            //create Layout Item if none found for this form action
            if (!layoutItemSysId) {
                var layoutItemCreated = this.createUXFormActionLayoutItem(table, action.name, action.sys_id, action.uiActionSysId, action.daActionSysId);
                layoutItemSysId = layoutItemCreated.sys_id;
                layoutItemDisplayInfo = {
                    "color": layoutItemCreated.color,
                    "overflow": layoutItemCreated.overflow ? this.DISPLAY_TYPE.OVERFLOW_MENU : this.DISPLAY_TYPE.BUTTON,
                    "order": layoutItemCreated.order,
                };
            }

            if (isNewLayout) {
                //create M2M for this Layout / Layout Item combination
                this.createUXFormActionLayoutItemM2M(tableName, layoutSysId, layoutItemSysId, layoutItemDisplayInfo);
            } else {
                //M2M - check if layout item mapped already to this Layout
                layoutItemM2MSysId = this.getUXFormActionLayoutItemM2M(tableName, layoutSysId, layoutItemSysId);
                //create M2M if none found for this Layout / Layout Item combination
                if (!layoutItemM2MSysId) {
                    this.createUXFormActionLayoutItemM2M(tableName, layoutSysId, layoutItemSysId, layoutItemDisplayInfo);
                }
            }
        }.bind(this));

        //for existing Layout Items with existing Layout
        //hydrate m2m with color/variant/order from Layout item
        if (!isNewLayout) {
            //get all the tables in hierarchy
            var tablesWithHierarchy = this.getTablesWithHierarchy(tableName);

            //get actions in layout
            var formActionsInLayout = this.getActionsInLayout(layoutSysId, tablesWithHierarchy).formActionSysIds;
            formActionsInLayout.forEach(function(actionSysId) {
                //get layout item fr this action	
                //includeGroups
                var onlyActions = false;
                var layoutItem = this.getUXFormActionLayoutItem(tableName, actionSysId, onlyActions);
                var layoutItemSysId = layoutItem ? layoutItem.sys_id : '';
                var layoutItemDisplayInfo = layoutItem ? layoutItem.displayInfo : null;

                var order = layoutItemDisplayInfo &amp;&amp; layoutItemDisplayInfo.order ? layoutItemDisplayInfo.order : "0";
                var color = layoutItemDisplayInfo &amp;&amp; layoutItemDisplayInfo.color ? layoutItemDisplayInfo.color : this.UI_ACTION_COLOR_MAP["unstyled"];
                var displayType = layoutItemDisplayInfo &amp;&amp; layoutItemDisplayInfo.overflow === this.DISPLAY_TYPE.BUTTON ? this.DISPLAY_TYPE.BUTTON : this.DISPLAY_TYPE.OVERFLOW_MENU;

                var layoutItemM2MSysId = this.getUXFormActionLayoutItemM2M(tableName, layoutSysId, layoutItemSysId);
                //update M2M
                if (layoutItemM2MSysId) {
                    var grLayoutItemM2M = new GlideRecord(this.SYS_UX_M2M_ACTION_LAYOUT_ITEM);
                    grLayoutItemM2M.get(layoutItemM2MSysId);
                    grLayoutItemM2M.setValue("order", order);
                    grLayoutItemM2M.setValue("display_type", displayType);
                    grLayoutItemM2M.setValue("variant", color);
                    grLayoutItemM2M.update();
                }
            }.bind(this));
        }
    },

    type: 'UXFormActionUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-29 00:59:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;45980c660529d910f877a261ed35bb16&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UXFormActionUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="UX Actions" source="com.glide.ux.action"&gt;c9e6f4e43cb1311068bcf327dfe37f8b&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_45980c660529d910f877a261ed35bb16&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-01-13 00:38:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:27</sys_created_on>
        <sys_id>948634d983f01210c6695855eeaad391</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UXFormActionUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_948634d983f01210c6695855eeaad391</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:27</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
