<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ac7fa9a95bf23010e4334bbca881c76a</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VATeamsMultiInstanceBot&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VATeamsMultiInstanceBot&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VATeamsMultiInstanceBot = Class.create();

var result = {
            'error': false,
            'message': gs.getMessage('You have successfully installed the Multi Instance Bot for Microsoft Teams ')
        };
VATeamsMultiInstanceBot.prototype = {
    initialize: function() {},

	updateOidcEntity: function(tenantID,clientID,clientSecret) {

		//Check Bot ID belongs to given Tenant or not
		var csProviderRec = new GlideRecord("sys_cs_provider_application");
			csProviderRec.addQuery('inbound_id',tenantID);
			csProviderRec.query();
			if(!csProviderRec.next()){
				gs.error(gs.getMessage('VATeamsMultiInstanceBot:updateOidcEntity - Given Tenant ID does not exist -  {0}', tenantID));
				result.error = true;
				result.message = gs.getMessage('Given Tenant ID does not exist - {0}', tenantID);
			}
			else if (csProviderRec.message_auth.inbound_message_verification.oauth_oidc_entity.client_id != clientID) {
				var msg = tenantID + ' Client ID - ' + clientID;
				gs.error(gs.getMessage('VATeamsMultiInstanceBot:updateOidcEntity - Given Client ID does not belong to the given Tenant ID - {0}', msg));
				result.error = true;
				result.message = gs.getMessage('Given Client ID does not belong to the given Tenant ID');
			}
			else {
				var oauth_oidc_entity = new GlideRecord('oauth_oidc_entity');
				oauth_oidc_entity.initialize();
				oauth_oidc_entity.addQuery('client_id',clientID);
				oauth_oidc_entity.query();
				if(oauth_oidc_entity.next()){
					oauth_oidc_entity.setValue('client_secret', clientSecret);
					oauth_oidc_entity.update();
					result.error = false;
					result.message = gs.getMessage('Client secret got updated');
				}
			}
		return result;
	},

	//Create oidc_provider_configuration
	createOidcConfig: function() {

		var OIDC_provider_config_sysId = null;
        var OIDC_provider_config_GR = new GlideRecord('oidc_provider_configuration');
        OIDC_provider_config_GR.initialize();
        OIDC_provider_config_GR.addQuery('name', 'sample-botframework-oidc');
        OIDC_provider_config_GR.query();
        if (!OIDC_provider_config_GR.next()) {
            OIDC_provider_config_GR.setValue('name', 'sample-botframework-oidc');
            OIDC_provider_config_GR.setValue('oidc_url', 'https://login.botframework.com/v1/.well-known/openidconfiguration');
            OIDC_provider_config_sysId = OIDC_provider_config_GR.insert();
        } else
            OIDC_provider_config_sysId = OIDC_provider_config_GR.sys_id;

		return OIDC_provider_config_sysId;
	},

	// Create JWT  Records
	createJwt: function(OIDC_provider_config_sysId) {
		var jwt_validation_GR = new GlideRecord('jwt_claim_validation');
        jwt_validation_GR.initialize();
        jwt_validation_GR.addQuery('name', 'serviceurl');
		jwt_validation_GR.addQuery('oidc_provider', OIDC_provider_config_sysId);
        jwt_validation_GR.query();
        if (!jwt_validation_GR.next()) {
            var jwtSysId = this.jwtValidation('serviceurl', OIDC_provider_config_sysId);
            jwtSysId = this.jwtValidation('aud', OIDC_provider_config_sysId);
            jwtSysId = this.jwtValidation('iss', OIDC_provider_config_sysId);
            jwtSysId = this.jwtValidation('exp', OIDC_provider_config_sysId);
        }
	},

	jwtValidation: function(name, providerID) {
        var jwt_validation_GR = new GlideRecord('jwt_claim_validation');
        jwt_validation_GR.initialize();
        if (name == 'serviceurl') {
            jwt_validation_GR.setValue('is_standard_claim', 'false');
            jwt_validation_GR.setValue('lookup_field_path', 'serviceurl');
        } else if (name == 'exp') {
            jwt_validation_GR.setValue('claim_value_type', 'long');
        } else {
            jwt_validation_GR.setValue('is_standard_claim', 'true');
            jwt_validation_GR.setValue('claim_value_type', 'string');
        }
        jwt_validation_GR.setValue('name', name);
        jwt_validation_GR.setValue('oidc_provider', providerID);
        return (jwt_validation_GR.insert());
    },

	// Create oauth Entity Scope
	createOidcEntity: function(tenantID,clientID,clientSecret,OIDC_provider_config_sysId) {

		var oauth_oidc_entity_GR = new GlideRecord('oauth_oidc_entity');
        oauth_oidc_entity_GR.initialize();
        oauth_oidc_entity_GR.setValue('name', 'sample-msteams-oauth-consumer-' + tenantID);
        oauth_oidc_entity_GR.setValue('client_id', clientID);
        oauth_oidc_entity_GR.setValue('client_secret', clientSecret);
        oauth_oidc_entity_GR.setValue('default_grant_type', 'client_credentials');
        oauth_oidc_entity_GR.setValue('token_url', 'https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token');
        oauth_oidc_entity_GR.setValue('type', 'oauth_provider');
        oauth_oidc_entity_GR.setValue('oidc_provider_configuration', OIDC_provider_config_sysId);
        var oauth_oidc_entity_sysId = oauth_oidc_entity_GR.insert();

		return oauth_oidc_entity_sysId;
	},

	// Create oauth Entity Scope
	createEntityScope: function(oauth_oidc_entity_sysId) {

		var oauth_entity_scope_GR = new GlideRecord('oauth_entity_scope');
        oauth_entity_scope_GR.initialize();
        oauth_entity_scope_GR.setValue('name', 'scope-0');
        oauth_entity_scope_GR.setValue('oauth_entity_scope', 'https://api.botframework.com/.default');
        oauth_entity_scope_GR.setValue('oauth_entity', oauth_oidc_entity_sysId);
        var oauth_entity_scope_sysId = oauth_entity_scope_GR.insert();

		return oauth_entity_scope_sysId;
	},

	// Create oauth Entity Profile
	createEntityProfile: function(oauth_oidc_entity_sysId) {

		var oauth_entity_profile_sysId = null;
        var oauth_entity_profile_GR = new GlideRecord('oauth_entity_profile');
        oauth_entity_profile_GR.initialize();
		oauth_entity_profile_GR.addQuery('oauth_entity', oauth_oidc_entity_sysId);
		oauth_entity_profile_GR.query();
		if(!oauth_entity_profile_GR.next()) {
			oauth_entity_profile_GR.setValue('name', 'profile-for-' + oauth_oidc_entity_sysId);
			oauth_entity_profile_GR.setValue('grant_type', 'client_credentials');
			oauth_entity_profile_GR.setValue('oauth_entity', oauth_oidc_entity_sysId);
			oauth_entity_profile_sysId = oauth_entity_profile_GR.insert();
		}
		else
			oauth_entity_profile_sysId = oauth_entity_profile_GR.sys_id;

		return oauth_entity_profile_sysId;
	},

	//Create oauth Entity Profile Scope
	createEntityProfileScope: function(oauth_entity_profile_sysId,oauth_entity_scope_sysId) {
		var oauth_entity_profile_scope_GR = new GlideRecord('oauth_entity_profile_scope');
        oauth_entity_profile_scope_GR.initialize();
        oauth_entity_profile_scope_GR.setValue('oauth_entity_profile', oauth_entity_profile_sysId);
        oauth_entity_profile_scope_GR.setValue('oauth_entity_scope', oauth_entity_scope_sysId);
        return oauth_entity_profile_scope_GR.insert();
	},

	//Create OIDC Token Verification
	createOidcTokenVerification: function(oauth_oidc_entity_sysId,tenantID) {
		var oidc_token_verification_GR = new GlideRecord('oidc_token_verification');
        oidc_token_verification_GR.initialize();
        oidc_token_verification_GR.setValue('name', 'sample-msteams-inbound-app-token-' + tenantID);
        oidc_token_verification_GR.setValue('oauth_oidc_entity', oauth_oidc_entity_sysId);
        return  oidc_token_verification_GR.insert();
	},

	//Create oauth Entity Profile Verification
	createOauthProfileVerification: function(tenantID,oauth_entity_profile_sysId) {
		var oauth_entity_profile_verification_GR = new GlideRecord('oauth_entity_profile_verification');
        oauth_entity_profile_verification_GR.initialize();
        oauth_entity_profile_verification_GR.setValue('name', 'sample-msteams-outbound-app-token' + tenantID);
        oauth_entity_profile_verification_GR.setValue('oauth_entity_profile', oauth_entity_profile_sysId);
        return  oauth_entity_profile_verification_GR.insert();
	},

	//Create Message Auth
	createMessageAuth: function(tenantID,oidc_token_verification_sysId,oauth_entity_profile_verification_sysId) {
		var message_auth_GR = new GlideRecord('message_auth');
        message_auth_GR.initialize();
        message_auth_GR.setValue('name', 'sample-msteams-app-' + tenantID);
        message_auth_GR.setValue('provider_name', 'Microsoft Teams');
        message_auth_GR.setValue('group_name', tenantID);
        message_auth_GR.setValue('inbound_message_verification', oidc_token_verification_sysId);
        message_auth_GR.setValue('outbound_message_creation', oauth_entity_profile_verification_sysId);
        return  message_auth_GR.insert();
	},

	//Create Sys Provider Application
	createProviderApplication: function(botName,message_auth_sysId,tenantID,provider_GR_sysId) {
		var adapter_config_GR = new GlideRecord('sys_cs_provider_application');
        adapter_config_GR.initialize();
        adapter_config_GR.setValue('name', botName);
        adapter_config_GR.setValue('message_auth', message_auth_sysId);
        adapter_config_GR.setValue('inbound_id', tenantID);
        adapter_config_GR.setValue('provider', provider_GR_sysId);
        return adapter_config_GR.insert();
	},

   /*
	* Functions for MS Teams Diagnostic Tool.
	*/

	getNotificationStatus: function(){
                var providerId = '8ca0544053d110102f40ddeeff7b12be';
		var gr = new GlideRecord('sys_cs_channel');
		gr.get(providerId);
		return gr.enable_notification;
	},

	updateNotificationStatus: function(){
                var providerId = '8ca0544053d110102f40ddeeff7b12be';
		var gr = new GlideRecord('sys_cs_channel');
		gr.get(providerId);
		gr.enable_notification = true;
		gr.update();
	},


	getAutlolinkingStatus: function(){
		var result = {};
		var gr = new GlideRecord('sys_cs_provider');
		gr.query('name','VA Teams Adapter Provider');
		if(gr.next()){
			result.link_account_enabled = gr.link_account_enabled+'';
			result.automatic_link_enabled = gr.automatic_link_enabled+'';
			return result;
		}

	},

	updateAutlolinkingStatus: function(){
		var gr = new GlideRecord('sys_cs_provider');
		gr.query('name','VA Teams Adapter Provider');
		if(gr.next()){
			gr.link_account_enabled = true;
			gr.automatic_link_enabled = true;
			gr.update();
		}
	},

	getUserById: function(userId){
		var gr = new GlideRecord('sys_user');
		gr.get(userId);
		return gr.name;
	},

	verifyUserEmailId: function (userId) {
		var gr = new GlideRecord('sys_user');
		gr.get(userId);
		return gr.email;
	},

	isUserLinked: function (userId) {
                var providerId = '8ca0544053d110102f40ddeeff7b12be';
		var gr = new GlideRecord('sys_cs_channel_user_profile');
		gr.addQuery('channel', providerId);
		gr.query('user_document', userId);
		if(gr.next()){
			return gr.active+'';
		}
		else
			return false;
	},

	notificationDestinationCheck: function (userId, destinationId) {
		var gr = new GlideRecord('sys_destination_preference');
		if(gs.nil(destinationId))
			gr.query('recipient', userId);
		else{
			gr.addQuery('recipient', userId);
			gr.addQuery('destination', destinationId);
		}
		if(gr.next()){
			return gr.send;
		}
	},

	updateDestinationCheck: function (userId, destinationId) {
		var gr = new GlideRecord('sys_destination_preference');
		if(gs.nil(destinationId))
			gr.query('recipient', userId);
		else {
			gr.addQuery('destination', destinationId);
			gr.addQuery('recipient', userId);
			ge.query();
		}
		if(gr.next()){
			gr.send = true;
			gr.update();
		}
	},

	verifyMessageAuthIds : function (message_sys_id, tenant_id) {
		var result = {};
		var message_auth = new GlideRecord("message_auth");
		message_auth.query("sys_id", message_sys_id);

		if (!message_auth.next()) {
			result.message_auth_exists = false;
			return result;
		} else {
			result.message_auth_exists = true;
			if (message_auth.getValue("provider_name") != "Microsoft Teams") {
				result.valid_provider_name = false;
				return result;
			} else if (message_auth.getValue("group_name") != tenant_id) {
				result.valid_group_name = false;
				return result;
			} else {
				result.valid_group_name = true;
				result.valid_provider_name = true;
			}
		}

		var inbound_token_id = message_auth.getValue("inbound_message_verification");
		var outbound_token_id = message_auth.getValue("outbound_message_creation");

		if (inbound_token_id == null || outbound_token_id == null)
			result.valid_ib_ob = false;
		else {
			result.valid_ib_ob = true;
			result.ib_id = inbound_token_id;
			result.ob_token_id = outbound_token_id;
		}

		return result;
	},

	getTokenVerificationStatus : function (outbound_token_id) {
        var result = {};
		var outbound_token = new GlideRecord("token_verification");
		outbound_token.query("sys_id", outbound_token_id);

		if (!outbound_token.next()) {
			result.ob_exists = false;
			return result;
		} else {
			var token = outbound_token.getValue("token");
			if (token.length &gt; 10 &amp;&amp; token.substring(0, 10) == "teams_va_") {
				result.valid_token = false;
				return result;
			} else {
				result.valid_token = true;
				result.ob_exists = true;
			}
		}
		return result;
	},

	checkPluginDependencies: function () {
		var result = {};
		var plugin_dependencies = [
			"com.glide.cs.custom.adapter",
			"com.snc.msteams.app.core",
		];

		var gr = new GlideRecord("sys_store_app");
		gr.addQuery("source", "sn_va_teams");
		gr.query();
		if (gr.getRowCount() != 1) {
			result.va_teams_install = false;
			return result;
		}
		else
			result.va_teams_install = true;

		var plugin_installed = false;
		for (var i = 0; i &lt; plugin_dependencies.length; i++) {
			gr = new GlideRecord("sys_plugins");
			gr.addQuery("source", plugin_dependencies[i]);
			gr.query();
			//because either dependency is acceptable
			if (gr.getRowCount() == 1) {
				plugin_installed = true;
			}
		}
		result.va_plugin_installed = plugin_installed;
		return result;
	},

	checkStoreAppDependencies: function (app_dependencies, app_names) {
		var result = {};
		var appArray = [];
		for (var i = 0; i &lt; app_dependencies.length; i++) {
			var scoperes = {};
			var gr = new GlideRecord("sys_store_app");
			gr.addQuery("scope", app_dependencies[i]);
			gr.query();
			if (gr.getRowCount() == 1) {
				scoperes.app_install = true;
				scoperes.app_name = app_names[i];
			}
			else{
				scoperes.app_install = false;
				scoperes.app_name = app_names[i];
			}
			appArray.push(scoperes);
		}
		result.res = appArray;
		return result;
	},

	openConversationsInMSTeams : function () {
		var conversation_GR = new GlideRecord('sys_cs_conversation');
		conversation_GR.addQuery('device_type', 'Teams');
		conversation_GR.addQuery('state', 'open');
		conversation_GR.query();
		if (conversation_GR.next())
			return true;
		else
			return false;
	},

	cleanOpenConversationRecords : function (){
		var conversation_GR = new GlideRecord('sys_cs_conversation');
		conversation_GR.addQuery('device_type', 'Teams');
		conversation_GR.addQuery('state', 'open');
		conversation_GR.query();
		while (conversation_GR.next()) {
			conversation_GR.state = 'completed';
			conversation_GR.update();
		}
	},

	faultedConversationsInMSTeams : function () {
		var conversation_GR = new GlideRecord('sys_cs_conversation');
		conversation_GR.addQuery('device_type', 'Teams');
		conversation_GR.addQuery('state', 'faulted');
		conversation_GR.query();
		if (conversation_GR.next())
			return true;
		else
			return false;
	},

	cleanFaultedConversationRecords : function (){
		var conversation_GR = new GlideRecord('sys_cs_conversation');
		conversation_GR.addQuery('device_type', 'Teams');
		conversation_GR.addQuery('state', 'faulted');
		conversation_GR.query();
		while (conversation_GR.next()) {
			conversation_GR.state = 'completed';
			conversation_GR.update();
		}
	},

	checkNodes :function() {
		var result = {};
		var now_GR = new GlideRecord("sys_cluster_state");
		var areAllNodesOnline = true;
		now_GR.query();
		while (now_GR.next()) {
			if (now_GR.getValue("status") != "online") {
				areAllNodesOnline = false;
			}
			gs.info(
				"Teams troubleshoot: Node " +
				now_GR.getValue("system_id") +
				" is " +
				now_GR.getValue("status")
			);
		}
		result.status = areAllNodesOnline;
		return result;
	},

	checkUserRole : function() {
		return {
			check: gs.getMessage("User has admin role"),
			result:
			gs.hasRole("admin") ||
			(gs.hasRole("virtual_agent_admin") &amp;&amp;
			gs.hasRole("external_app_install_admin")),
		};
	},

	checkOIDCEntityRecord : function (inbound_token_id) {

		var result = {};
		var logReader = new MSTeamsLogReader();
		var logs = logReader.read(
			"sys_id=" + inbound_token_id,
			30,
			"sys_created_on",
			"oidc_token_verification"
		);
		if (logs.length == 0) {
			result.oidc_message_auth = false;
			return result;
		}
        result.oidc_message_auth = true;
		var oidc_entity_sys_id = logs[0]["oauth_oidc_entity"];

		if (oidc_entity_sys_id == null) {
			result.oaut_oidc_ib = false;
			return result;
		}
		result.oaut_oidc_ib = true;
		var oidc_entity = new GlideRecord("oauth_oidc_entity");
		oidc_entity.query("sys_id", oidc_entity_sys_id);
		if(oidc_entity.next())
			result.oidc_entity_exists = true;
		else
			result.oidc_entity_exists = false;

		return result;
	},

	checkCredentialRecords : function (tenantId, message_auth_id) {
		var result = {};
		result.group_name_count = 1;
		result.valid_provider_name = false;
		result.valid_token = true;
		result.valid_oidc = true;
		result.outbound_creds_record = false;
		var outboundCredsRecord = new GlideRecord('sn_va_teams_outbound_credentials');
		var tokenGr = new GlideRecord('token_verification');
		var message_auth = new GlideRecord("message_auth");
		message_auth.query("group_name", tenantId);
		var count = message_auth.getRowCount();

		if(count == 0) {
			result.group_name_count = 0;
		}

		if(count &gt; 1) {
			result.group_name_count = 2;
		}

		if(count == 1 &amp;&amp; message_auth.next()){
			result.group_name_count = 1;
			if(message_auth.provider_name == "Microsoft Teams"){
				result.valid_provider_name = true;
			}
		}

		message_auth.initialize();
		message_auth.query("sys_id", message_auth_id);
		if(message_auth.next()){
			var logReader = new MSTeamsLogReader();
			var logs = logReader.read(
				"sys_id=" + message_auth.inbound_message_verification,
				30,
				"sys_created_on",
				"oidc_token_verification"
			);
			if (logs.length == 0)
				result.valid_oidc = false;

			var oidc_token = message_auth.inbound_message_verification;
			var outbound_token = message_auth.outbound_message_creation;
			outboundCredsRecord.query('sys_id', '8adfff8b53102010ba8dddeeff7b1244');
			if(outboundCredsRecord.next()){
				result.outbound_creds_record = true;
			}
			tokenGr.query('sys_id',message_auth.outbound_message_creation);
			if(!tokenGr.next()){
				result.valid_token = false;
			}
		}
		return result;
	},

	updateProviderNameInMessageAuth : function (message_sys_id) {
		var message_auth = new GlideRecord("message_auth");
		message_auth.get(message_sys_id);
		message_auth.provider_name = 'Microsoft Teams';
		message_auth.update();
	},

	updateGroupNameInMessageAuth : function (message_sys_id, tenant_id) {
		var message_auth = new GlideRecord("message_auth");
		message_auth.get(message_sys_id);
		message_auth.group_name = tenant_id;
		message_auth.update();
	},

	checkTransationLogs : function () {
		var result = {};
		var requestSentAround = new GlideDateTime();
		var query = "GOTOurl=/api/now/v1/proxy/cs/adapter/va/teams/activity?api=api^sys_created_on&gt;javascript:gs.beginningOfLastMinute()";
		var logReader = new MSTeamsLogReader();
		var logs = logReader.read(query, 30, "sys_created_on", "syslog_transaction");
		gs.info("Transaction logs: ", (logs));
		result.transactionCounts = logs.length;
		if(result.transactionCounts == 0) {
			gs.error('Teams troubleshoot: There is no transaction record for incoming request which was sent around ' + requestSentAround);
		} else if(result.transactionCounts &gt; 1) {
			gs.error('Teams troubleshoot: Found multiple transaction records within 1 min of the "restart" request from Microsoft Teams. Please try again after 1 min. Transaction logs were checked around: ' + new GlideDateTime());
		} else {
			if (result.transactionCounts == 1) {
				var sysId = logs[0]["sys_id"];
				result.transaction_sys_id = sysId;
			}
			gs.info('Teams troubleshoot: Got the request from Microsoft Teams. Here is the transaction log sys_id for the incoming request: ' + sysId);
		}
		return result;
	},
	checkCustomAdaptorConfigurations : function () {
		// Check Custom Adaptor Configuration for OOTB Integrity
		var PROVIDER = 'e177dbf3530110102f40ddeeff7b12a7'; //VA Teams Adapter Provider
		var integrity = false;
		var agg = new GlideAggregate('sys_cs_custom_adapter_config');
		agg.addQuery('provider', PROVIDER);
		agg.addAggregate('COUNT');
		agg.query();
		if (agg.next()) {
			integrity = agg.getAggregate('COUNT') &lt; 11 ? false : true;
		}
		return integrity; 
	},

    type: 'VATeamsMultiInstanceBot'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-24 16:28:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;ac7fa9a95bf23010e4334bbca881c76a&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VATeamsMultiInstanceBot&lt;/sys_name&gt;
        &lt;sys_package display_value="Conversational Custom Chat Integration Utilities" source="com.glide.ccci.clients.utils"&gt;ac9d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_ac7fa9a95bf23010e4334bbca881c76a&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-26 07:44:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:46</sys_created_on>
        <sys_id>15ff349d83341210c6695855eeaad3fa</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VATeamsMultiInstanceBot</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_15ff349d83341210c6695855eeaad3fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:46</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
