<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6e40c012c3510110a0cd587c1f40dd17</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SMCoreConfigCacheManager&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;SM core sm config cache manager&lt;/description&gt;
        &lt;name&gt;SMCoreConfigCacheManager&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SMCoreConfigCacheManager = Class.create();
SMCoreConfigCacheManager.prototype = {
    readSmConfigRecord:function(tableName){
		var smConfig = new sn_sm.SMConfiguration();
            var smConfigRecord = smConfig.getConfigurationByTableName(tableName);
			var acceptReject = "false";
			if(!gs.nil(smConfigRecord.accept_reject)){
				acceptReject = String(smConfigRecord.accept_reject);
			}
            var smConfigVal = {
				'sys_id': String(smConfigRecord.sys_id),
                'tableName': tableName,
                'request_driven': String(smConfigRecord.request_driven),
                'task_dispatch_method': String(smConfigRecord.task_dispatch_method),
                'use_sf': String(smConfigRecord.use_sf),
                'use_location': String(smConfigRecord.use_location),
				'use_schedule': String(smConfigRecord.use_schedule),
				"use_timezone": String(smConfigRecord.use_timezone),
				"use_follow_the_sun": String(smConfigRecord.use_follow_the_sun),
				"follow_the_sun_priority": String(smConfigRecord.follow_the_sun_priority),
                'property_prefix': String(smConfigRecord.property_prefix + '.'),
                'dispatch_queue': String(smConfigRecord.dispatch_queue),
				"admin_role" :  String(smConfigRecord.admin_role),
				"agent_role" :  String(smConfigRecord.agent_role),
				"approver_role" :  String(smConfigRecord.approver_role),
				"basic_role" :  String(smConfigRecord.basic_role),
				"dispatcher_role" :  String(smConfigRecord.dispatcher_role),
				"initiator_role" :  String(smConfigRecord.initiator_role),
				"qualifier_role" :  String(smConfigRecord.qualifier_role),
				"read_role" :  String(smConfigRecord.read_role),
				'use_scheduled_state': String(smConfigRecord.use_scheduled_state),
				"accept_reject" : acceptReject,
				"managed_docs" : String(smConfigRecord.managed_docs),
				"inbound_email": String(smConfigRecord.inbound_email),
				"signature_capture" : String(smConfigRecord.signature_capture),
				"use_fsm_wfo": String(smConfigRecord.use_fsm_wfo),
				"pdf_order_summary" : String(smConfigRecord.pdf_order_summary),
				"use_document_template" : String(smConfigRecord.use_document_template),
				"qualification" : String(smConfigRecord.qualification), 
				"part_requirement" :  String(smConfigRecord.part_requirement),
				"mandatory_work_notes" : String(smConfigRecord.mandatory_work_notes),
				"track_travel" : String(smConfigRecord.track_travel),
				"time_card" : String(smConfigRecord.time_card),
				"task_activities" : String(smConfigRecord.task_activities),
				"geolocation_maps" : String(smConfigRecord.geolocation_maps),
				"onsite_arrival" : String(smConfigRecord.onsite_arrival),
				"fsm_default_territory_model": String(smConfigRecord.fsm_default_territory_model)
			};
            
        
        return smConfigVal;
	},

	 /*
     * To use the getSMConfig function, check the string value of the fields directly from results 
     */
	getSMConfig: function(tableName) {
        var smConfigCM = new sn_sm.SMConfiguration();

        var cacheEntryStr = smConfigCM.getSMConfig(tableName);
		if(cacheEntryStr == ""){
			var smConfigVal = this.readSmConfigRecord(tableName);
			var sysId = smConfigVal.sys_id;
            smConfigCM.putSMConfig(tableName, sysId, JSON.stringify(smConfigVal));
			cacheEntryStr = smConfigCM.getSMConfig(tableName);
			if(cacheEntryStr == ""){
				//in case of continuous update
				return smConfigVal;
			}
		}
        return JSON.parse(cacheEntryStr);
    },

    hasRole: function(configuration, roleStr, uid) {     
        if (gs.nil(configuration)) {
            return false;
        }
		var roles = roleStr.split(",");
        var roleIds = [];
        for (var x = 0; x &lt; roles.length; x++) {
            var roleId = configuration[roles[x] + "_role"];
            if (!gs.nil(roleId)) {
                roleIds.push(roleId);
            }
        }
        if (gs.nil(uid)) {
            var role = new GlideRecord("sys_user_role");
            role.addEncodedQuery("sys_idIN" + roleIds.join(","));
            role.query();
			var session = gs.getSession();
            while (role.next()) {
                if (session.hasRole(role.getValue("name")))
                    return true;
            }

        } else {
            var userHasRole = new GlideRecord("sys_user_has_role");
            userHasRole.addQuery("user", uid);
            userHasRole.addEncodedQuery("roleIN" + roleIds);
			userHasRole.setCategory('list');
			userHasRole.setLimit(1);
            userHasRole.query();
            if (userHasRole.hasNext())
                return true;
        }
        return false;
    },
	
    type: 'SMCoreConfigCacheManager'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-01-28 22:49:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6e40c012c3510110a0cd587c1f40dd17&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SMCoreConfigCacheManager&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Management Core" source="com.snc.service_management.core"&gt;3e6bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6e40c012c3510110a0cd587c1f40dd17&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-11 11:41:01&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:25</sys_created_on>
        <sys_id>f8f6b05d83f01210c6695855eeaad35c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SMCoreConfigCacheManager</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f8f6b05d83f01210c6695855eeaad35c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:25</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
