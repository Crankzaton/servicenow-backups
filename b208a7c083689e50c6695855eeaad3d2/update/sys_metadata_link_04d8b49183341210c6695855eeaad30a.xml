<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a400dc640f02201039534ee7c8767e79</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFTranslations&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;API related to translations for an artifact&lt;/description&gt;
        &lt;name&gt;LFTranslations&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFTranslations = Class.create();
LFTranslations.prototype = {
    initialize: function() {
        this.lfUtils = new LFUtils();
        this.lfRequestedItemUtils = new LFRequestedItemUtils();
        this.lfValidationUtils = new LFValidationUtils();
        this.lfSettingUtils = new LFSettingUtils();
        this.lfConstants = new LFConstants();
        this.arrayUtil = new ArrayUtil();
        this.requestedItemsCreated = [];
    },

    hasRequestedItems: function(sysId) {
        this.lfValidationUtils.isSysIdInvalid(sysId);
        var taskUtils = new LFTaskUtils(sysId);
        if (!taskUtils.hasValidRecord()) {
            var lfExceptionMapper = new LFExceptionMapper("INVALID_TASK_ID", sysId);
            lfExceptionMapper.throwException();
        }
        return taskUtils.hasBulkTranslations();
    },

    requestTranslations: function(artifactInternalName, sysIds, targetLanguages, additionalInfo) {
        this.lfValidationUtils.validateUserHasRole(this.lfConstants.REQUESTOR);
        this._validateInputsForRequestTranslations(artifactInternalName, sysIds, targetLanguages, additionalInfo);
        this.artifactUtils = new LFArtifactUtils(artifactInternalName);
        additionalInfo = additionalInfo || {};
        additionalInfo.sourceOfRequest = additionalInfo.sourceOfRequest || this.lfConstants.API;
        sysIds = this.arrayUtil.unique(sysIds);
        targetLanguages = this.arrayUtil.unique(targetLanguages);
        return this._createLocalizationRequestedItems(artifactInternalName, sysIds, targetLanguages, additionalInfo);
    },

    requestArtifactTranslations: function(artifactDetails, additionalInfo) {
        this._validateInputsForRequestArtifactTranslations(artifactDetails, additionalInfo);
        additionalInfo = additionalInfo || {};
        additionalInfo.sourceOfRequest = additionalInfo.sourceOfRequest || this.lfConstants.API;
        return this._createLocalizationRequestedItemsForArtifacts(artifactDetails, additionalInfo);
    },

    canRequestTranslations: function(artifactInternalName, additionalInfo) {
        var values = this._preProcessInputs(artifactInternalName, additionalInfo);
        return this._canRequestTranslations(values);
    },

    getTranslationPreferences: function(artifactInternalName, additionalInfo) {
        var values = this._preProcessInputs(artifactInternalName, additionalInfo);
        return this._getTranslationPreferences(values);
    },

    _preProcessInputs: function(artifactInternalName, additionalInfo) {
        this.lfValidationUtils.isArtifactTypeInvalid(artifactInternalName);
        this.lfValidationUtils.isAdditionalInfoInvalid(additionalInfo);
        if (additionalInfo.hasOwnProperty('targetLanguages')) {
            var targetLanguages = additionalInfo.targetLanguages;
            this.lfValidationUtils.isTargetLanguagesInvalid(targetLanguages);
        }

        var isCheckForLanguageRecordRequired = true; //record level check is not required if we are getting activeLanguages
        var artifactUtils = new LFArtifactUtils(artifactInternalName);
        var isArtifactValid = true;

        if (!artifactUtils.getArtifact()) {
            isArtifactValid = false;
            var errorDetails = this._getErrorDetails("ARTIFACT_DOES_NOT_EXIST", [artifactInternalName]);
            var code = errorDetails.code;
            var message = errorDetails.message;
        } else if (!artifactUtils.isArtifactActive()) {
            isArtifactValid = false;
            errorDetails = this._getErrorDetails("INACTIVE_ARTIFACT", [artifactInternalName]);
            code = errorDetails.code;
            message = errorDetails.message;
        }

        if (!targetLanguages) {
            targetLanguages = this.lfUtils.getActiveLanguagesList();
            isCheckForLanguageRecordRequired = false;
        } else {
            targetLanguages = this.arrayUtil.unique(targetLanguages);
        }

        return {
            "targetLanguages": targetLanguages,
            "isArtifactValid": isArtifactValid,
            "artifactInternalName": artifactInternalName,
            "isCheckForLanguageRecordRequired": isCheckForLanguageRecordRequired,
            "code": code,
            "message": message
        };
    },

    _canRequestTranslations: function(values) {
        var targetLanguages = values.targetLanguages;
        var isArtifactValid = values.isArtifactValid;
        var artifactInternalName = values.artifactInternalName;
        var isCheckForLanguageRecordRequired = values.isCheckForLanguageRecordRequired;
        var code = values.code;
        var message = values.message;
        var isRequestor = gs.hasRole(this.lfConstants.REQUESTOR);

        var response = {};
        for (var targetLanguageIdx = 0; targetLanguageIdx &lt; targetLanguages.length; targetLanguageIdx++) {
            var targetLanguage = targetLanguages[targetLanguageIdx];
            if (!isRequestor) {
                var errorDetails = this._getErrorDetails("INSUFFICIENT_ROLE", [this.lfConstants.REQUESTOR]);
                response[targetLanguage] = this._buildErrorResponseElementForCanRequestTranslations(errorDetails.code, errorDetails.message);
            } else if (!isArtifactValid) {
                response[targetLanguage] = this._buildErrorResponseElementForCanRequestTranslations(code, message);
            } else if (isCheckForLanguageRecordRequired &amp;&amp; this.lfValidationUtils._isAnyLanguageRecordInvalid([targetLanguage])) {
                errorDetails = this._getErrorDetails("INVALID_TARGET_LANGUAGE");
                response[targetLanguage] = this._buildErrorResponseElementForCanRequestTranslations(errorDetails.code, errorDetails.message);
            } else if (!this.lfSettingUtils.checkIfLanguageCodeIsConfigured(artifactInternalName, targetLanguage)) {
                errorDetails = this._getErrorDetails("SETTING_DOESNOT_EXIST");
                response[targetLanguage] = this._buildErrorResponseElementForCanRequestTranslations(errorDetails.code, errorDetails.message);
            } else {
                response[targetLanguage] = {
                    'isEnabled': true
                };
            }
        }
        return response;
    },

    _getTranslationPreferences: function(values) {
        var targetLanguages = values.targetLanguages;
        var isArtifactValid = values.isArtifactValid;
        var artifactInternalName = values.artifactInternalName;
        var isCheckForLanguageRecordRequired = values.isCheckForLanguageRecordRequired;
        var code = values.code;
        var message = values.message;

        var response = {};
        for (var targetLanguageIdx = 0; targetLanguageIdx &lt; targetLanguages.length; targetLanguageIdx++) {
            var targetLanguage = targetLanguages[targetLanguageIdx];
            if (!isArtifactValid) {
                response[targetLanguage] = this._buildErrorResponseElementForGetTranslationPreferences(code, message);
            } else if (isCheckForLanguageRecordRequired &amp;&amp; this.lfValidationUtils._isAnyLanguageRecordInvalid([targetLanguage])) {
                errorDetails = this._getErrorDetails("INVALID_TARGET_LANGUAGE");
                response[targetLanguage] = this._buildErrorResponseElementForGetTranslationPreferences(errorDetails.code, errorDetails.message);
            } else if (!this.lfSettingUtils.checkIfLanguageCodeIsConfigured(artifactInternalName, targetLanguage)) {
                errorDetails = this._getErrorDetails("SETTING_DOESNOT_EXIST");
                response[targetLanguage] = this._buildErrorResponseElementForGetTranslationPreferences(errorDetails.code, errorDetails.message);
            } else {
                response[targetLanguage] = this._buildSuccessResponseElementForGetTranslationPreferences(artifactInternalName, targetLanguage);
            }
        }
        return response;
    },

    _createLocalizationRequestedItems: function(artifactInternalName, sysIds, targetLanguages, additionalInfo) {
        var requestedItems = [];
        var languageSettingsMap = {};
        for (var targetLangIdx = 0; targetLangIdx &lt; targetLanguages.length; targetLangIdx++) {
            var targetLanguage = targetLanguages[targetLangIdx];
            var settings = LFSettingsFactoryService.getSettings(artifactInternalName, this.lfUtils.getLanguageCodeDetails(targetLanguage).sysId, additionalInfo);
            languageSettingsMap[targetLanguage] = settings;
        }

        var projectSettingsMap = {};
        for (var sysIdIndex = 0; sysIdIndex &lt; sysIds.length; sysIdIndex++) {
            for (targetLangIdx = 0; targetLangIdx &lt; targetLanguages.length; targetLangIdx++) {
                targetLanguage = targetLanguages[targetLangIdx];
                var eachSettings = languageSettingsMap[targetLanguage];
                var response = this._createLocalizationRequestedItem(artifactInternalName, sysIds[sysIdIndex], targetLanguage, additionalInfo.sourceLanguage, additionalInfo);
                requestedItems.push(response);
                if (!response.isError) {
                    if (eachSettings) {
                        if (eachSettings['enable_projects'] != "1") {
                            new LFTaskUtils().createLocalizationTask([response.requestedItemDetails.sysId], JSON.stringify(eachSettings), false);
                        } else if (eachSettings['enable_auto_creation'] == "1") {
                            if (projectSettingsMap.hasOwnProperty(eachSettings.sys_id)) {
                                projectSettingsMap[eachSettings.sys_id].requestedItemIds.push(response.requestedItemDetails.sysId);
                            } else {
                                projectSettingsMap[eachSettings.sys_id] = {
                                    'settings': eachSettings,
                                    'requestedItemIds': [response.requestedItemDetails.sysId]
                                };
                            }
                        }
                    }
                }
            }
        }
        var projectSettingsKeys = Object.keys(projectSettingsMap);
        for (var idx = 0; idx &lt; projectSettingsKeys.length; idx++) {
            var eachProjectSettings = projectSettingsMap[projectSettingsKeys[idx]];
            new LFProjectUtils().createLocalizationProject(eachProjectSettings.requestedItemIds, eachProjectSettings.settings);
        }
        var numberOfReqItemsCreated = this.requestedItemsCreated.length;
        var totalExpectedReqItems = sysIds.length * targetLanguages.length;
        var status = "Success";
        if (numberOfReqItemsCreated == 0) {
            status = 'Error';
        } else {
            if (numberOfReqItemsCreated &lt; totalExpectedReqItems) {
                status = 'Partial';
            }
            var requestedItemsLink = this.lfRequestedItemUtils.generateUrlForRequestedItemNumbers(this.requestedItemsCreated);
        }
        return {
            'status': status,
            'requestedItemsLink': requestedItemsLink,
            'details': requestedItems
        };
    },

    _createLocalizationRequestedItemsForArtifacts: function(artifactDetails, additionalInfo) {
        var requestedItems = [];
        var languageSettingsMap = {};
        var projectSettingsMap = {};
        var targetLanguages = [];
        var totalExpectedReqItems = 0;
        for (var idx = 0; idx &lt; artifactDetails.length; idx++) {
            var eachArtifactDetails = artifactDetails[idx];
            var eachArtifactInternalName = eachArtifactDetails.artifactInternalName;
            targetLanguages = this.arrayUtil.unique(eachArtifactDetails.targetLanguages);

            for (var targetLangIdx = 0; targetLangIdx &lt; targetLanguages.length; targetLangIdx++) {
                var targetLanguage = targetLanguages[targetLangIdx];
                var settingsKey = eachArtifactInternalName + ":" + targetLanguage;
                if (!languageSettingsMap[settingsKey]) {
                    var settings = LFSettingsFactoryService.getSettings(eachArtifactInternalName, this.lfUtils.getLanguageCodeDetails(targetLanguage).sysId, additionalInfo);
                    languageSettingsMap[settingsKey] = settings;
                }
            }

            var sysIds = eachArtifactDetails.sysIds;
            for (var sysIdIndex = 0; sysIdIndex &lt; sysIds.length; sysIdIndex++) {
                for (targetLangIdx = 0; targetLangIdx &lt; targetLanguages.length; targetLangIdx++) {
                    totalExpectedReqItems++;
                    targetLanguage = targetLanguages[targetLangIdx];
                    settingsKey = eachArtifactInternalName + ":" + targetLanguage;
                    var eachSettings = languageSettingsMap[settingsKey];
                    var response = this._createLocalizationRequestedItem(eachArtifactInternalName, sysIds[sysIdIndex], targetLanguage, eachArtifactDetails.sourceLanguage, additionalInfo);
                    requestedItems.push(response);
                    if (!response.isError) {
                        if (eachSettings) {
                            if (eachSettings['enable_projects'] != "1") {
                                new LFTaskUtils().createLocalizationTask([response.requestedItemDetails.sysId], JSON.stringify(eachSettings), false);
                            } else if (eachSettings['enable_auto_creation'] == "1") {
                                if (projectSettingsMap.hasOwnProperty(eachSettings.sys_id)) {
                                    projectSettingsMap[eachSettings.sys_id].requestedItemIds.push(response.requestedItemDetails.sysId);
                                } else {
                                    projectSettingsMap[eachSettings.sys_id] = {
                                        'settings': eachSettings,
                                        'requestedItemIds': [response.requestedItemDetails.sysId]
                                    };
                                }
                            }
                        }
                    }
                }
            }
        }

        var projectSettingsKeys = Object.keys(projectSettingsMap);
        for (var idx = 0; idx &lt; projectSettingsKeys.length; idx++) {
            var eachProjectSettings = projectSettingsMap[projectSettingsKeys[idx]];
            new LFProjectUtils().createLocalizationProject(eachProjectSettings.requestedItemIds, eachProjectSettings.settings);
        }
        var numberOfReqItemsCreated = this.requestedItemsCreated.length;
        var status = "Success";
        if (numberOfReqItemsCreated == 0) {
            status = 'Error';
        } else {
            if (numberOfReqItemsCreated &lt; totalExpectedReqItems) {
                status = 'Partial';
            }
            var requestedItemsLink = this.lfRequestedItemUtils.generateUrlForRequestedItemNumbers(this.requestedItemsCreated);
        }
        return {
            'status': status,
            'requestedItemsLink': requestedItemsLink,
            'details': requestedItems
        };
    },

    _createLocalizationRequestedItem: function(artifactInternalName, sysId, targetLanguage, sourceLanguage, additionalInfo) {
        var result = this.lfRequestedItemUtils.createLocalizationRequestedItem(artifactInternalName, sysId, targetLanguage, sourceLanguage, additionalInfo);
        if (result.isSuccess) {
            var requestedItemDetails = {};
            var requestedItemNumber = result.number;
            requestedItemDetails["sysId"] = result.sysId;
            requestedItemDetails["number"] = requestedItemNumber;
            requestedItemDetails["link"] = this.lfRequestedItemUtils.generateUrlForRequestedItemNumbers([requestedItemNumber]);
            this.requestedItemsCreated.push(requestedItemNumber);
            return this._buildSuccessResponseElementForRequestTranslations(sysId, targetLanguage, requestedItemDetails);
        } else {
            errorDetails = this._getErrorDetails("REQUESTED_ITEM_CREATION_FAILED", [sysId, sourceLanguage, targetLanguage]);
            return this._buildErrorResponseElementForRequestTranslations(sysId, errorDetails.code, errorDetails.message, targetLanguage);
        }
    },

    _buildSuccessResponseElementForRequestTranslations: function(sysId, targetLanguage, requestedItemDetails) {
        var response = {};
        response["sysId"] = sysId;
        response["targetLanguage"] = targetLanguage;
        response["isError"] = false;
        response["requestedItemDetails"] = requestedItemDetails;
        return response;
    },

    _buildErrorResponseElementForRequestTranslations: function(sysId, errorCode, errorMessage, targetLanguage) {
        var response = {};
        response["sysId"] = sysId;
        response["targetLanguage"] = targetLanguage;
        response["isError"] = true;
        response["code"] = errorCode;
        response["message"] = errorMessage;
        return response;
    },

    _buildErrorResponseElementForCanRequestTranslations: function(errorCode, errorMessage) {
        var response = {};
        response["isEnabled"] = false;
        response["code"] = errorCode;
        response["message"] = errorMessage;
        return response;
    },

    _getErrorDetails: function(errorConstant, placeholders) {
        lfExceptionMapper = new LFExceptionMapper(errorConstant, placeholders);
        return {
            'code': lfExceptionMapper.getCode(),
            'message': lfExceptionMapper.getMessage()
        };
    },

    _validateInputsForRequestTranslations: function(artifactInternalName, sysIds, targetLanguages, additionalInfo) {
        this.lfValidationUtils.isArtifactTypeInvalid(artifactInternalName);
        this.lfValidationUtils.validateIfSysIdsIsListOfStrings(sysIds);
        this.lfValidationUtils.isTargetLanguagesInvalid(targetLanguages);
        this.lfValidationUtils.isAdditionalInfoInvalid(additionalInfo);
        var checkForSourceLang = additionalInfo.hasOwnProperty('sourceLanguage');
        if (checkForSourceLang) {
            var sourceLanguage = additionalInfo.sourceLanguage;
            this.lfValidationUtils.isSourceLanguageInvalid(sourceLanguage);
        } else {
            sourceLanguage = this.lfUtils.getDefaultSourceLanguage();
        }
        this.lfValidationUtils.isSourceLanguageInTargetLanguages(sourceLanguage, targetLanguages);
        this.lfValidationUtils.validateArtifact(artifactInternalName, this.arrayUtil.unique(sysIds));
        this.lfValidationUtils.validateTargetLanguages(this.arrayUtil.unique(targetLanguages));
        if (checkForSourceLang) {
            this.lfValidationUtils.validateSourceLanguage(sourceLanguage);
        }
        this.lfValidationUtils.validateTargetLanguageCodeSetting(artifactInternalName, targetLanguages);
    },

    _validateInputsForRequestArtifactTranslations: function(artifactDetails, additionalInfo) {
        this.lfValidationUtils.isArtifactDetailsInvalid(artifactDetails);
        this.lfValidationUtils.isAdditionalInfoInvalid(additionalInfo);
        for (var idx = 0; idx &lt; artifactDetails.length; idx++) {
            var eachArtifactDetails = artifactDetails[idx];
            if (eachArtifactDetails.artifactInternalName != this.lfConstants.TRANSLATION_ITEM_ARTIFACT) {
                this.lfValidationUtils.validateUserHasRole(this.lfConstants.REQUESTOR);
            }
            this.lfValidationUtils.validateArtifact(eachArtifactDetails.artifactInternalName, this.arrayUtil.unique(eachArtifactDetails.sysIds));
            var checkForSourceLang = eachArtifactDetails.hasOwnProperty('sourceLanguage');
            if (checkForSourceLang) {
                var sourceLanguage = eachArtifactDetails.sourceLanguage;
                this.lfValidationUtils.validateSourceLanguage(sourceLanguage);
            } else {
                sourceLanguage = this.lfUtils.getDefaultSourceLanguage();
            }
            var targetLanguages = this.arrayUtil.unique(eachArtifactDetails.targetLanguages);
            this.lfValidationUtils.validateTargetLanguages(targetLanguages);
            LFSettingsFactoryService.validateSettings(eachArtifactDetails.artifactInternalName, targetLanguages, additionalInfo);
        }
    },

    _buildErrorResponseElementForGetTranslationPreferences: function(errorCode, errorMessage) {
        var response = {};
        response["exists"] = false;
        response["code"] = errorCode;
        response["message"] = errorMessage;
        return response;
    },

    _buildSuccessResponseElementForGetTranslationPreferences: function(artifactInternalName, targetLanguage) {
        var response = {};
        response["exists"] = true;
        var targetLanguageSysId = this.lfUtils.getLanguageCodeDetails(targetLanguage).sysId;
        var settingsNames = this.lfSettingUtils.settings;
        var lfSetting = this.lfSettingUtils.getLFSetting(artifactInternalName, targetLanguageSysId);

        function isActive(val) {
            return val == 1;
        }

        response['machineTranslate'] = {
            'isEnabled': isActive(lfSetting[settingsNames.EnableMachineTranslate])
        };
        response['tms'] = {
            'isEnabled': isActive(lfSetting[settingsNames.EnableTMS])
        };
        response['sendViaEmail'] = {
            'isEnabled': isActive(lfSetting[settingsNames.EnableEmail])
        };
        response['exportImport'] = {
            'isEnabled': isActive(lfSetting[settingsNames.EnableImportExport])
        };

        if (response.machineTranslate.isEnabled) {
            response['machineTranslate']['translatorName'] = lfSetting[settingsNames.TranslatorName];
        }

        if (response.tms.isEnabled) {
            response['tms']['tmsName'] = lfSetting[settingsNames.TMSName];
            response['tms']['additionalInfo'] = lfSetting[settingsNames.TMSAdditionalInfo];
        }

        if (response.sendViaEmail.isEnabled) {
            response.sendViaEmail['defaultFileFormat'] = lfSetting[settingsNames.EnableEmailFormat];
            response.sendViaEmail['defaultRecipients'] = this._getTrimmedStringList(lfSetting[settingsNames.DefaultRecipientsList]);
        }

        if (response.exportImport.isEnabled) {
            response.exportImport['defaultFileFormat'] = lfSetting[settingsNames.ExportFormat];
        }

        return response;
    },

    _getTrimmedStringList: function(commaSeparatedString) {
        var tmpList = commaSeparatedString.split(',');
        for (var idx = 0; idx &lt; tmpList.length; idx++) {
            tmpList[idx] = tmpList[idx].trim();
        }
        return tmpList;
    },

    type: 'LFTranslations'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-28 05:21:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a400dc640f02201039534ee7c8767e79&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFTranslations&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;a4dd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a400dc640f02201039534ee7c8767e79&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-05 04:24:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:33</sys_created_on>
        <sys_id>04d8b49183341210c6695855eeaad30a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFTranslations</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_04d8b49183341210c6695855eeaad30a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
