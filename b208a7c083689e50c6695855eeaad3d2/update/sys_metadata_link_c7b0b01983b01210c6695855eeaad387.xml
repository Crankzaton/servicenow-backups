<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1b312b4953a51110a376ddeeff7b12e7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_customerservice.CaseTaskHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Contains helper APIs for sn_customerservice_case to Case task (sn_customerservice_task) creation.&lt;/description&gt;
        &lt;name&gt;CaseTaskHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CaseTaskHelper = Class.create();
CaseTaskHelper.prototype = {
    initialize: function() {},

    /**
     * Returns the applicable contacts/accounts/consumers for case task 
     */
    getCaseTaskEntities: function(caseTaskGr, entityTable, entityField) {
        var caseTaskEntities = [];
        var parentGr = caseTaskGr.parent.getRefRecord();
        if (this._getAllCaseExtensions().indexOf(parentGr.sys_class_name + "") !== -1) {
            if (!gs.nil(parentGr.getValue(entityField)))
                caseTaskEntities.push(parentGr.getValue(entityField) + "");
            var relPartyConfigs = this._getRelatedPartyConfig(parentGr.sys_class_name, entityTable);
            return (this._getRelatedParties(relPartyConfigs.join(), parentGr.sys_id, caseTaskEntities, entityTable)).join();

        } else
            gs.info("No sn_customerservice_case reference in case task parent. Record in case task parent field " + parentGr.sys_id + " is of class - " + parentGr.sys_class_name);
    },

    _getAllCaseExtensions: function() {
        var table = new GlideTableHierarchy(CSMCaseTaskManagementConstants.CASE_TABLE);
        return table.getAllExtensions() + "";
    },

    _getRelatedPartyConfig: function(appliesTo, entityType) {
        var relPartyConfigs = [];
        var relConfigGr = new GlideRecord(CSMCaseTaskManagementConstants.RELATED_PARTY_CONFIG_TABLE);
        relConfigGr.addQuery(CSMCaseTaskManagementConstants.RELATED_PARTY_CONFIG_APPLIES_TO, appliesTo);
        relConfigGr.addQuery(CSMCaseTaskManagementConstants.RELATED_PARTY_CONFIG_ENTITY_TYPE, entityType);
        relConfigGr.query();
        while (relConfigGr.next())
            relPartyConfigs.push(relConfigGr.sys_id + "");
        return relPartyConfigs;
    },

    _getRelatedParties: function(partyConfig, caseId, caseTaskEntities, entityTable) {
        var relPartyGr = new GlideRecord(CSMCaseTaskManagementConstants.RELATED_PARTY_TABLE);
        relPartyGr.addQuery(CSMCaseTaskManagementConstants.RELATED_PARTY_CONFIG, "IN", partyConfig);
        relPartyGr.addQuery(CSMCaseTaskManagementConstants.RELATED_PARTY_CASE_RECORD, caseId);
        relPartyGr.query();
        while (relPartyGr.next())
            caseTaskEntities.push(relPartyGr.getValue(this._getRelatedPartyUserField(entityTable)) + "");
        return caseTaskEntities;
    },

    _getRelatedPartyUserField: function(entityTable) {
        var entities = CSMCaseTaskManagementConstants.RELATED_PARTY_ENTITIES;
        var userField = CSMCaseTaskManagementConstants.RELATED_PARTY_USER_FIELD;
        return userField[entities.indexOf(entityTable)];
    },

    getCaseTaskContacts: function(caseTaskGr) {
        return this.getCaseTaskEntities(caseTaskGr, CSMCaseTaskManagementConstants.CUSTOMER_CONTACT_TABLE, CSMCaseTaskManagementConstants.CASE_CONTACT_FIELD);
    },

    getCaseTaskConsumers: function(caseTaskGr) {
        return this.getCaseTaskEntities(caseTaskGr, CSMCaseTaskManagementConstants.CSM_CONSUMER_TABLE, CSMCaseTaskManagementConstants.CASE_CONSUMER_FIELD);
    },

    getCaseTaskAccounts: function(caseTaskGr) {
        return this.getCaseTaskEntities(caseTaskGr, CSMCaseTaskManagementConstants.CUSTOMER_ACCOUNT_TABLE, CSMCaseTaskManagementConstants.CASE_ACCOUNT_FIELD);
    },

    isCaseExtension: function(table) {
        var caseExtns = this._getAllCaseExtensions();
        return (caseExtns.indexOf(table) !== -1);
    },

    clearCaseTaskFields: function(caseTaskGr, clearParentCase) {
        if (clearParentCase) {
            caseTaskGr.parent_case = CSMCaseTaskManagementConstants.EMPTY_FIELD_VALUE;
        }
        caseTaskGr.account = CSMCaseTaskManagementConstants.EMPTY_FIELD_VALUE;
        caseTaskGr.contact = CSMCaseTaskManagementConstants.EMPTY_FIELD_VALUE;
        caseTaskGr.consumer = CSMCaseTaskManagementConstants.EMPTY_FIELD_VALUE;
        caseTaskGr.consumer_profile = CSMCaseTaskManagementConstants.EMPTY_FIELD_VALUE;
    },

    syncCaseTaskFields: function(caseTaskGr, parentSync) {
        if (parentSync) {
            caseTaskGr.parent_case = caseTaskGr.parent;
        } else {
            caseTaskGr.parent = caseTaskGr.parent_case;
        }
        caseTaskGr.account = caseTaskGr.parent.account;
        caseTaskGr.contact = caseTaskGr.parent.contact;
        caseTaskGr.consumer = caseTaskGr.parent.consumer;
        caseTaskGr.consumer_profile = caseTaskGr.parent.consumer_profile;
    },

    getCaseTaskParamsForRelatedPartyDeletion: function(relatedPartyGr) {
        var caseTaskParams = {},
            caseTaskLinks = [];
        var caseTaskEntity = this._getRelatedPartyEntity(relatedPartyGr.party_config.entity_type);
        var relatedPartyEntity = CSMCaseTaskManagementConstants.RELATED_PARTY_USER_FIELD[CSMCaseTaskManagementConstants.CASE_TASK_ENTITY_FIELD.indexOf(caseTaskEntity)];
        var caseTaskGr = new GlideRecord(CSMCaseTaskManagementConstants.CASE_TASK_TABLE);
        caseTaskGr.addQuery(caseTaskEntity, relatedPartyGr.getValue(relatedPartyEntity));
        caseTaskGr.addQuery(CSMCaseTaskManagementConstants.CASE_TASK_PARENT, relatedPartyGr.case_record);
        caseTaskGr.query();
        while (caseTaskGr.next()) {
            if (!caseTaskParams.hasOwnProperty("entityLabel") &amp;&amp; caseTaskEntity)
                caseTaskParams.entityLabel = caseTaskGr.getElement(caseTaskEntity).getLabel() + "";
            var caseTaskLink = "&lt;a href='/" + caseTaskGr.getTableName() + ".do" + "?sys_id=" + caseTaskGr.getUniqueValue() + "'&gt;" + caseTaskGr.number + "&lt;/a&gt;";
            caseTaskLinks.push(caseTaskLink);
        }
        if (caseTaskLinks &amp;&amp; caseTaskLinks.length &gt; 0) {
            caseTaskParams.tasks = caseTaskLinks;
            if (relatedPartyGr &amp;&amp; relatedPartyGr.getValue(String(relatedPartyEntity)))
                caseTaskParams.relatedPartyEntity = String(relatedPartyEntity);
        }
        return caseTaskParams;
    },

    _getRelatedPartyEntity: function(entityType) {
        var caseTaskEntity = CSMCaseTaskManagementConstants.EMPTY_FIELD_VALUE;
        if (String(entityType) == CSMCaseTaskManagementConstants.CUSTOMER_ACCOUNT_TABLE) {
            caseTaskEntity = CSMCaseTaskManagementConstants.CASE_ACCOUNT_FIELD;
        } else if (String(entityType) == CSMCaseTaskManagementConstants.CUSTOMER_CONTACT_TABLE) {
            caseTaskEntity = CSMCaseTaskManagementConstants.CASE_CONTACT_FIELD;
        } else if (String(entityType) == CSMCaseTaskManagementConstants.CSM_CONSUMER_TABLE) {
            caseTaskEntity = CSMCaseTaskManagementConstants.CASE_CONSUMER_FIELD;
        }
        return caseTaskEntity;
    },
	canReadCaseTask: function(sysId) {
        var gr = new GlideRecord(CSMCaseTaskManagementConstants.CASE_TASK_TABLE);
        gr.addQuery('parent_case', sysId);
        gr.query();
        while (gr.next()) {
			if(gr.canRead()){
				return true;
			}
        }
		return false;	
    },

    type: 'CaseTaskHelper'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-04-13 00:28:11&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1b312b4953a51110a376ddeeff7b12e7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;46&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CaseTaskHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service" source="sn_customerservice"&gt;51d811fad7223100b7490ee60e61034f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Customer Service"&gt;51d811fad7223100b7490ee60e61034f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1b312b4953a51110a376ddeeff7b12e7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-10-19 23:31:46&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:15</sys_created_on>
        <sys_id>c7b0b01983b01210c6695855eeaad387</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CaseTaskHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c7b0b01983b01210c6695855eeaad387</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
