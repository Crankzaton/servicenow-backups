<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>171a3771eb1101004d7763fba206fea1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PwdVerifyPersonalDataProcessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Extension which verifies the user answers match the expected data in the system.&lt;/description&gt;
        &lt;name&gt;PwdVerifyPersonalDataProcessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[// PwdVerifyPersonalDataProcessor
// This processor is used for the main business logic to verify the user 
// answers match the expected data in the system.

var PwdVerifyPersonalDataProcessor = Class.create();
PwdVerifyPersonalDataProcessor.prototype = {
    category: 'password_reset.extension.verification_form_processor',   // DO NOT REMOVE THIS LINE!
    /**********
     * Initialization stuff here
     **********/
    initialize: function() {
    },
	
    /**********
    * Process the verification form request, and return whether the user was successfully verified
    * 
    * @param params.resetRequestId The sys-id of the current password-reset request (table: pwd_reset_request)
    * @param params.userId         The sys-id of the user trying to be verified (table: sys_user)
    * @param params.verificationId The sys-id of the verification to be processed (table: pwd_verification)
    * @param request               The form request object. fields in the form can be accessed using: request.getParameter('&lt;element-id&gt;')
    * @return boolean telling whether the user is successfully verified
    **********/
    processForm: function(params, request) {
       var isVerified = false;
       try {
           isVerified = this.verify(params.resetRequestId, params.userId, params.verificationId, request);
       } catch (scriptErr) {
           gs.logError("[PwdVerifyQuestionsProcessor.processForm]: '" + scriptErr + "'");
           isVerified = false;
       }
       return isVerified;
    },	
	
	/*********
     * verify - returns true/false whether the User's response matches the data from the sys_user table
     *
     * Params: 
	 * @reset_request_id
	 * @sys_user_id
	 * @verification_id
	 * @request - the request object that was submitted by the user in the verification form
     *********/
	verify: function(reset_request_id, sys_user_id, verification_id, request) {
		var userAnswer = request.getParameter('sysparm_personal_id_' + verification_id).trim();
		
		// Get the column defined for this verification
		var column = new SNC.PwdVerificationManager().getVerificationParamValue(verification_id, "column");
		
		if (column == '') {
			gs.log("[PwdVerifyPersonalDataProcessor] Invalid verification configuration: Null value found for column.");
			return false;
		}
		
		var table = "sys_user";
		var valueFromDB;
		var gr = new GlideRecord(table);				
		gr.get(sys_user_id); // Join using the sys_user_id,
		valueFromDB = gr.getValue(column);
		gr.close();

		if (valueFromDB) {
			// Find the column type from the dictionary and figure out how to compare the values based on it
			var dict = new GlideRecord("sys_dictionary");
			dict.addQuery("name", table);
			dict.addQuery("element", column);
			dict.query();
			dict.next();
			var columnType = dict.internal_type;
			dict.close();
			
			if (columnType == 'ph_number') {
				var nonDigitRegex = /[^0-9]/g;
				// Remove all non digit chars
				var valueFromDBStripped = valueFromDB.replace(nonDigitRegex, '');
				// Force the userAnswer to be casted from object to string
				var userAnswerStripped = userAnswer.replace(nonDigitRegex, '');
				return valueFromDBStripped.equalsIgnoreCase(userAnswerStripped);
			} else {
				// default is equalsIgnoreCase compare
				return valueFromDB.equalsIgnoreCase(userAnswer);
			}
		}
		return false;
    },
	
    type: 'PwdVerifyPersonalDataProcessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2013-05-13 16:46:22&lt;/sys_created_on&gt;
        &lt;sys_id&gt;171a3771eb1101004d7763fba206fea1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;100&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PwdVerifyPersonalDataProcessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Password Reset" source="com.glideapp.password_reset"&gt;1399f4e43cf1311068bcf327dfe37fe4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_171a3771eb1101004d7763fba206fea1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-09-12 10:16:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:53</sys_created_on>
        <sys_id>21a0f8d583b01210c6695855eeaad314</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PwdVerifyPersonalDataProcessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_21a0f8d583b01210c6695855eeaad314</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
