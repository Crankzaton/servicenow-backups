<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1e2db307c33231000295b348b1d3ae8e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_kb_social_qa.SocialQAAnswer&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;SocialQAAnswer - Script include to query answers.&lt;/description&gt;
        &lt;name&gt;SocialQAAnswer&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SocialQAAnswer = Class.create();
SocialQAAnswer.prototype = {
    initialize: function() {
		this.globalUtil = new global.GlobalKnowledgeUtil();
		this.socialQACommon = new SocialQACommon();
		this.tableNames = this.socialQACommon.getTableNames();
    },
	
	_getAnswerRecord: function(id) {
		var gr = new GlideRecord(this.tableNames.table_answer);
		gr.addActiveQuery();
		gr.addQuery('sys_id', id);
		gr.query();
		return gr;
	},
	
	_populateAnswerCommentJSON: function(params) {
		var socialComment = new SocialQAComment();
		var comments = socialComment.getCommentsJSON(this.tableNames.table_answer, params.sys_id);
		return comments;
	},
	
	_populateProfileJSON: function(id) {
		var profile = this.globalUtil.getProfileDetails(id);
		return profile;
	},

	_getVoteDetail:function(referenceId,referenceName){
		var voteGR = new GlideRecord(this.socialQACommon.getTableNames().table_vote);
		voteGR.addQuery('reference_name', referenceName);
		voteGR.addQuery('reference_id', referenceId);
		voteGR.addQuery('profile', this.globalUtil.getSessionProfile());
		voteGR.query();
		if(voteGR.next()){
			 return {
				 sys_id:voteGR.getValue('sys_id'),
				 up_vote:voteGR.getValue('up_vote')=== "1" ?true:false };
		}
		return {};

	},
	
	_getACLs: function(answerGR) {
		var admin = false;
		var sessionProfile = this.globalUtil.getSessionProfile();
		
		if(gs.hasRole('admin'))
			admin = true;

		var acl = {};
		if(admin || answerGR.profile == sessionProfile) { //My Answer
			acl.can_edit = true;
			acl.can_delete = true;
			}
		else{
			acl.can_edit = false;
			acl.can_delete = false;
		}
		return acl;
	},

	hasAcceptedAnswer: function(questionID){
		var answer = new GlideRecord(this.tableNames.table_answer);
		answer.addActiveQuery();
		answer.addQuery('question', questionID);
		answer.addQuery('accepted', '1');
		answer.query();
		return answer.hasNext();
	},
	
	getAnswersJSON: function(questionId) {
		var answer = new GlideRecord(this.tableNames.table_answer);
		answer.addActiveQuery();
		answer.addQuery('question', questionId);
		answer.query();
		
		var answers = [];
		while (answer.next()) {
			answers.push(this.answerJSON(answer));
		}
		
		return answers;
	},

	answerJSON: function(answerGR) {
		var answer = {};
		answer.active = answerGR.getValue('active');
		answer.accepted = answerGR.getValue('accepted');
		answer.accepted = answer.accepted == '1' ? true : false;
		if(answer.accepted)
			answer.accepted_by = this._populateProfileJSON(answerGR.getValue('accepted_by'))
		answer.answer = answerGR.getDisplayValue('answer');
		answer.votes = answerGR.getValue('votes');
		answer.profile = this._populateProfileJSON(answerGR.getValue('profile'));
		answer.question = answerGR.getValue('question');
		answer.sys_id = answerGR.getValue('sys_id');
		answer.has_comment = answerGR.has_comment;
		if (answer.has_comment) {
			var commentData = this._populateAnswerCommentJSON({sys_id:answer.sys_id});
			answer.comments = commentData.comments;
			answer.has_more_comments = commentData.has_more;
		}
		answer.sys_created_on = answerGR.getValue('sys_created_on');
		answer.sys_updated_on = answerGR.getValue('sys_updated_on');
		answer.vote_reference = this._getVoteDetail(answerGR.getValue('sys_id'),this.tableNames.table_answer);
		answer.acls = this._getACLs(answerGR);
		return answer;
	},

    type: 'SocialQAAnswer'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-03-19 16:19:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1e2db307c33231000295b348b1d3ae8e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;77&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SocialQAAnswer&lt;/sys_name&gt;
        &lt;sys_package display_value="Social Knowledge" source="sn_kb_social_qa"&gt;11722b01473231007f47563dbb9a7154&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Social Knowledge"&gt;11722b01473231007f47563dbb9a7154&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1e2db307c33231000295b348b1d3ae8e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-12-18 09:14:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:37</sys_created_on>
        <sys_id>9cd0381983b01210c6695855eeaad3d1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SocialQAAnswer</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9cd0381983b01210c6695855eeaad3d1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:37</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
