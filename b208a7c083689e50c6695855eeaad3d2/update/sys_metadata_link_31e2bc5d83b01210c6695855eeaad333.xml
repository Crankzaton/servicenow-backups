<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>457d99700f402010ba6bfc91ff767e17</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;CMDB - Update unique index whitelist_entry of cmdb_dedup_default_rel_item table to non-unique&lt;/description&gt;
        &lt;name&gt;CMDB - Update index of Default Rel Item&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var tableName = 'cmdb_dedup_default_rel_item';
var indexName = 'whitelist_entry';

var start = new Date().getTime();
gs.info("CMDB - Update index of Default Rel Item: started.");

if (isUnique(tableName, indexName) &amp;&amp; isValidToUpdate(tableName)){
  dropIndex(tableName, indexName);
  gs.info("CMDB - Update index of Default Rel Item: Index dropped for table " + tableName);
  addIndex(tableName, indexName);
  gs.info("CMDB - Update index of Default Rel Item: Index added for table " + tableName);
}

var end = new Date().getTime();
var duration = end - start;
gs.info("CMDB - Update index of Default Rel Item: took " + duration + " ms.");

function isValidToUpdate(tableName) {
  var maxSize = 5000000;
  var count = new GlideAggregate(tableName);
  //if isValid() == false - the table doesn't exists.
  if(!count.isValid()){
    gs.info("CMDB - Update index of Default Rel Item: table " + tableName + " doesn't exists");
    return false;
  }
  count.setWorkflow(false);
  count.addAggregate('COUNT');
  count.query();
  if(count.next()){
    var tableSize = count.getAggregate('COUNT');
    if(tableSize &gt;= maxSize){
      gs.logWarning("CMDB - Update index of Default Rel Item: table " + tableName + " has size more than " + maxSize);
      gs.logWarning("CMDB - Update index of Default Rel Item: Skipped modifying index for " + tableName + " and column " + indexName);
      return false;
    }
  }
  return true;
}

function isUnique(tableName, indexName) {
  var isUnique = false;
  var td = new GlideTableDescriptor(tableName);
  td.getSchema();
  var indexes = td.getIndexDescriptors();
  for (var iter = indexes.values().iterator(); iter.hasNext();) {
    var idx = iter.next();
    if (idx.isPrimary())
    continue;
    var idxname = idx.getName();
    var unique = idx.isUnique();
    if (idxname == indexName &amp;&amp; unique) {
      gs.info("CMDB - Update index of Default Rel Item: Unique Index " + indexName + " found");
      isUnique = true;
    }
    else {
      gs.info("CMDB - Update index of Default Rel Item: Index " + indexName + " is already non-unique");
    }
    td.close();
  }
  return isUnique;
}

function dropIndex(tableName, indexName) {
  var td = new GlideTableDescriptor(tableName);
  td.getSchema();
  var indexes = td.getIndexDescriptors();
  for (var iter = indexes.values().iterator(); iter.hasNext();) {
    var idx = iter.next();
    if (idx.isPrimary())
    continue;
    var idxname = idx.getName();
    if (idxname == indexName) {
      gs.info("CMDB - Update index of Default Rel Item: Index " + indexName + " found and will be dropped");
      var dbi = new GlideDBConfiguration.getDBI(tableName);
      gs.info(new GlideDBIndex(dbi).drop(idx));
      dbi.close();
    }
    td.close();
  }
}

function addIndex(appliesTo, attributes) {
  var columns = attributes.split(',');
  var grAppliesTo = new GlideRecord(appliesTo);
  for (var i in columns) {
    var column = columns[i];
    var elem = grAppliesTo.getElement(column);
    if (elem != null) {
      var table = elem.getTableName();
      var index = new IndexCreator(table, column, false, null, "identification");
      index.execute();
    } else {
      gs.logWarning("CMDB - Update index of Default Rel Item: Index not created for attribute '" + column + "' as it doesn't yet exist on table '" + appliesTo + "'");
    }
  }
}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-10-21 18:10:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;457d99700f402010ba6bfc91ff767e17&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CMDB - Update index of Default Rel Item&lt;/sys_name&gt;
        &lt;sys_package display_value="Configuration Management (CMDB)" source="com.snc.cmdb"&gt;8f64bce83c31311068bcf327dfe37f7e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_457d99700f402010ba6bfc91ff767e17&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-21 19:53:01&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:20:44</sys_created_on>
        <sys_id>31e2bc5d83b01210c6695855eeaad333</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CMDB - Update index of Default Rel Item</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_31e2bc5d83b01210c6695855eeaad333</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:20:44</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
