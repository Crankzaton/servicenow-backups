<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a6055b5053762010c722ddeeff7b127d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.ConditionalEvaluator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Used to evaluate conditionals&lt;/description&gt;
        &lt;name&gt;ConditionalEvaluator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConditionalEvaluator = Class.create();
ConditionalEvaluator.prototype = {
	initialize: function() {
        this.errorHandler = new sn_mab_api.ErrorHandler();
    },

	type: 'ConditionalEvaluator'
};

ConditionalEvaluator.getEvaluator = function(conditionalType, conditionalValue, copyMode) {
	if (conditionalType === 'childHasKey')
		return new ChildHasKeyEvaluator(conditionalValue);
	else if (conditionalType === 'parentHasKey')
		return new ParentHasKeyEvaluator(conditionalValue);
	else if (conditionalType === 'aParentHasKey')
		return new AParentHasKeyEvaluator(conditionalValue);
	else if (conditionalType === 'noParentHasKey')
		return new NoParentHasKeyEvaluator(conditionalValue);
	else if (conditionalType === 'aParentHasAnyOfKeys')
        return new AParentHasAnyOfKeysEvaluator(conditionalValue);
	else if (conditionalType === 'noParentHasAnyOfKeys')
        return new NoParentHasAnyOfKeys(conditionalValue);
	else if (conditionalType === 'isRoot')
		return new IsRootEvaluator();
	else if (conditionalType === 'isDuplicating')
		return { evaluate: function () {
			return copyMode;
		}};
	else
		new ErrorHandler().throwBadConfigError('Invalid conditionalType received: ' + conditionalType);
};

ConditionalEvaluator.evaluate = function(conditional, configKeyStack, childConfigMetadata) {
    if (!conditional) {
        this.errorHandler.throwInternalError('condition must be provided');
    }
	var matches = true;

	Object.keys(conditional).forEach(function (conditionalType) {
		var evaluator = ConditionalEvaluator.getEvaluator(conditionalType, conditional[conditionalType]);
		if (evaluator instanceof ChildHasKeyEvaluator)
			matches &amp;= evaluator.evaluate(childConfigMetadata);
		else
			matches &amp;= evaluator.evaluate(configKeyStack);
	});

	return matches;
};

function ChildHasKeyEvaluator(conditionalValue) {
	this.conditionalValue = conditionalValue;
}
ChildHasKeyEvaluator.prototype.evaluate = function(childConfigMetadata) {
	return childConfigMetadata &amp;&amp; this.conditionalValue == childConfigMetadata.getConfigKey();
};

function ParentHasKeyEvaluator(conditionalValue) {
	this.conditionalValue = conditionalValue;
}
ParentHasKeyEvaluator.prototype.evaluate = function(configKeyStack) {
	return configKeyStack.length &amp;&amp; configKeyStack[configKeyStack.length - 1].configKey == this.conditionalValue;
};

function AParentHasKeyEvaluator(conditionalValue) {
	this.conditionalValue = conditionalValue;
}
AParentHasKeyEvaluator.prototype.evaluate = function(configKeyStack) {
	var localConditionalValue = this.conditionalValue;
	var hasKey = false;
	if (configKeyStack &amp;&amp; configKeyStack.length) {
		configKeyStack.forEach(function(currConfigKeyEntry) {
			hasKey = hasKey || (currConfigKeyEntry.configKey == localConditionalValue);
		});
	}

	return hasKey;
};

function NoParentHasKeyEvaluator(conditionalValue) {
	AParentHasKeyEvaluator.call(this, conditionalValue);
}
// extend AParentHasKeyEvaluator
NoParentHasKeyEvaluator.prototype = new AParentHasKeyEvaluator();
NoParentHasKeyEvaluator.prototype.evaluate = function(configKeyStack) {
	var aParentHasKey = AParentHasKeyEvaluator.prototype.evaluate.call(this, configKeyStack);
	return !aParentHasKey;
};

function AParentHasAnyOfKeysEvaluator(conditionalValues) {
    this.conditionalValues = conditionalValues;
}

AParentHasAnyOfKeysEvaluator.prototype.evaluate = function(configKeyStack) {
    var localConditionalValues = this.conditionalValues;
    var hasKey = false;
    if (configKeyStack &amp;&amp; configKeyStack.length) {
        configKeyStack.forEach(function(currConfigKeyEntry) {
            hasKey = hasKey || (localConditionalValues.indexOf(currConfigKeyEntry.configKey) &gt; -1);
        });
    }

    return hasKey;
};

function NoParentHasAnyOfKeys(conditionalValues) {
    AParentHasAnyOfKeysEvaluator.call(this, conditionalValues);
}

// extend AParentHasKeyOfEvaluator
NoParentHasAnyOfKeys.prototype = new AParentHasAnyOfKeysEvaluator();

NoParentHasAnyOfKeys.prototype.evaluate = function(configKeyStack) {
    var aParentHasAnyOfKeys = AParentHasAnyOfKeysEvaluator.prototype.evaluate.call(this, configKeyStack);
    return !aParentHasAnyOfKeys;
};

function IsRootEvaluator() {}
IsRootEvaluator.prototype.evaluate = function(configKeyStack) {
	// If we are the rootnode we are the only thing on the configKeyStack
	return configKeyStack.length &amp;&amp; configKeyStack.length == 1;
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-06 06:23:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a6055b5053762010c722ddeeff7b127d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConditionalEvaluator&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a6055b5053762010c722ddeeff7b127d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-06 06:49:19&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:40</sys_created_on>
        <sys_id>79d8789183341210c6695855eeaad3d6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConditionalEvaluator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_79d8789183341210c6695855eeaad3d6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:40</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
