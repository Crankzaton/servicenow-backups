<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Determine best dispatch group</name>
        <order>1000</order>
        <priority>10</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 //Determine the dispatch group for this task
 var helper = new sn_apptmnt_booking.AppointmentBookingAvailability();
 var dispatchGroups = helper._getAllDispatchGroup(current.location);

 var appointmentBookingUtil = new sn_apptmnt_booking.AppointmentBookingUtil();
 if(dispatchGroups == null){
  //This location has no dispatch group, Cannot do anything
  return;
 }
 
 if(dispatchGroups.length == 1){
  //Only one dispatch group, regular assignment should work.
  return;
 }
 
 //There is more than one dispatch group, determine the assignment method
 var smConfig = new sn_sm.SMConfiguration();
 var smConfigRecord = smConfig.getConfigurationByTableName(current.getTableName());
 if(!smConfigRecord || !smConfigRecord.isValidRecord()){
  //Some error in config
  return;
 }
 var dispatchMethod = helper.getDispatchMethod(smConfig, smConfigRecord);

 var suggestedResourceData = null;
 //Change state to pending dispatch
 current.setValue("state", 10);
 
 var bestRating = null;
 var bestDispatchGroup = null;
 for(var i=0; i<dispatchGroups.length; i++){
  var topRating = null;
  current.setValue("dispatch_group",dispatchGroups[i]);
  if(dispatchMethod == "dynamic"){
   suggestedResourceData = new global.DynamicSchedulingProcessor().process([current.sys_id], current.getTableName(), true, {}, false, false, null, null, null, null, current);
   if(appointmentBookingUtil.notNil(suggestedResourceData) && suggestedResourceData.success == true){
    if(appointmentBookingUtil.notNil(suggestedResourceData.data) && appointmentBookingUtil.notNil(suggestedResourceData.data.recommendationResponseMap)){
     var response = suggestedResourceData.data.recommendationResponseMap[current.sys_id];
     if(appointmentBookingUtil.notNil(response) && response.success == true){
      var resources = response.suggestedResources;
      if(resources.length > 0){
       topRating = resources[0].rating;
      }
     }
    }
   }
  }else if (dispatchMethod == "auto" ){
   var smAutoAssignment = new global.SMAutoAssignment();
   suggestedResourceData = smAutoAssignment.getCandidateResponseForAppointmentBooking(current);
   //TODO: verify response status
   if(appointmentBookingUtil.notNil(suggestedResourceData) && suggestedResourceData.success == true){
    var resources = suggestedResourceData.suggestedResources;
    if(resources.length > 0)
     topRating = suggestedResourceData.suggestedResources[0].rating;
   }
  }
  if(bestRating == null && topRating!=null){
   bestDispatchGroup = dispatchGroups[i];
   bestRating = topRating;
  }else if(topRating!=null && topRating > bestRating){
   bestDispatchGroup = dispatchGroups[i];
   bestRating = topRating;
  }
 }
 //Update db with the best dispatch group
 if(bestDispatchGroup!=null){
  var gr = new GlideRecord("wm_task");
  gr.get(current.sys_id);
  gr.setValue("dispatch_group",bestDispatchGroup);
  gr.update();
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9cbc6c9983701210c6695855eeaad3e7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Determine best dispatch group</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9cbc6c9983701210c6695855eeaad3e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:36</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9cbc6c9983701210c6695855eeaad3e7"/>
</record_update>
