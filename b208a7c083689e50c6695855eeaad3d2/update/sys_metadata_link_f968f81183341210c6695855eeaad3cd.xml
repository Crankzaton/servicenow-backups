<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>85deb3f673832010b5c7ed64fbf6a7c3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBUsageMetricsSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;[WARNING: Customers should NOT modify this script]&amp;#13;
&amp;#13;
The purpose of this script include is to provide default behaviours for the KBUsageMetrics script include.&amp;#13;
To change the behaviour of these methods (or add new methods), Customers should override/add new methods to the KBUsageMetrics script include.&lt;/description&gt;
        &lt;name&gt;KBUsageMetricsSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBUsageMetricsSNC = Class.create();
KBUsageMetricsSNC.prototype = {

    initialize: function() {
        this.PROP_KB_USAGE_METRICS_DURATION = "glide.knowman.usage_metrics_duration";
        this.kbUsageMetricsDuration = gs.getProperty(this.PROP_KB_USAGE_METRICS_DURATION, '60');
        this.guestUser = "5136503cc611227c0183e96598c4f706"; //sys_id of guest user
        this.TABLE_KB_USAGE_METRICS = "kb_usage_metrics";
		this.AUTHENTICATED_USER = "Authenticated";
		this.UNAUTHENTICATED_USER = "Unauthenticated";
    },

    _getEncodedQuery: function() {
        var timePeriod = "sys_created_on&gt;" + this.startTime.getValue();
        return timePeriod;
    },

    processKBUsageMetrics: function() {
        this.startTime = new GlideDateTime();
        this.endTime = new GlideDateTime();
        this.startTime.addSeconds(parseInt(this.kbUsageMetricsDuration) * -60);
        this._processUsageMetrics(false);
		this._processUsageMetrics(true);
    },

    _processUsageMetrics: function(isAuthenticatedUser) {
        var portalPagesViews = 0,
            articleViews = 0,
            knowledgeSearchQueries = 0,
            timePeriod = this._getEncodedQuery();

        if (gs.nil(timePeriod))
            return;

        try {
            //Number of Portal Page Views
            var portalGA = new GlideAggregate("sp_log");

			if(isAuthenticatedUser)
				portalGA.addEncodedQuery(timePeriod + "^type=Page View^user!=" + this.guestUser);
			else	
				portalGA.addEncodedQuery(timePeriod + "^type=Page View^user=" + this.guestUser);

			portalGA.addAggregate('COUNT');
			portalGA.setWorkflow(false);
            portalGA.query();

            if (portalGA.next()) {
                portalPagesViews = portalGA.getAggregate('COUNT');
                gs.info("Number of Portal Page hits: " + portalPagesViews);
            }

            //Number of Article Views
            var knowledgeViewGA = new GlideAggregate("kb_use");

			if(isAuthenticatedUser)
				knowledgeViewGA.addEncodedQuery(timePeriod + "^user!=" + this.guestUser);
			else
				knowledgeViewGA.addEncodedQuery(timePeriod + "^user=" + this.guestUser);

			knowledgeViewGA.addAggregate('COUNT');
			knowledgeViewGA.setWorkflow(false);
            knowledgeViewGA.query();

            if (knowledgeViewGA.next()) {
                articleViews = knowledgeViewGA.getAggregate('COUNT');
                gs.info("Number of Article views: " + articleViews);
            }

            //Number of Article Searches
            var knowledgeSearchGA = new GlideAggregate("ts_query_kb");

			if(isAuthenticatedUser)
				knowledgeSearchGA.addEncodedQuery(timePeriod + "^user!=" + this.guestUser);
            else
				knowledgeSearchGA.addEncodedQuery(timePeriod + "^user=" + this.guestUser);

            knowledgeSearchGA.addAggregate('COUNT');
            knowledgeSearchGA.setWorkflow(false);
            knowledgeSearchGA.query();

            if (knowledgeSearchGA.next()) {
                knowledgeSearchQueries = knowledgeSearchGA.getAggregate('COUNT');
                gs.info("Number of Portal searches: " + knowledgeSearchQueries);
            }

			if(isAuthenticatedUser)
				this._saveKBUsageMetrics(portalPagesViews, articleViews, knowledgeSearchQueries, this.AUTHENTICATED_USER);
			else
				this._saveKBUsageMetrics(portalPagesViews, articleViews, knowledgeSearchQueries, this.UNAUTHENTICATED_USER);

        } catch (err) {
            gs.error("Error in aggregating knowledgee usage metrics - " + err.message);
        }

    },

    _saveKBUsageMetrics: function(portalPagesViews, articleViews, knowledgeSearchQueries, userType) {
        try {
            var gr = new GlideRecord(this.TABLE_KB_USAGE_METRICS);
            gr.initialize();
            gr.setValue("portal_page_views", portalPagesViews);
            gr.setValue("article_views", articleViews);
            gr.setValue("knowledge_searches", knowledgeSearchQueries);
            gr.setValue("duration", GlideDateTime.subtract(this.startTime, this.endTime).getDurationValue());
            gr.setValue("start_time", this.startTime);
            gr.setValue("end_time", this.endTime);
			gr.setValue("user_type", userType);
            gr.insert();
        } catch (err) {
            gs.error("Error in saving portal related aggregated metrics " + err.message);
        }
    },

    type: 'KBUsageMetricsSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-26 14:06:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;85deb3f673832010b5c7ed64fbf6a7c3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBUsageMetricsSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;a8c6f4a43cb1311068bcf327dfe37f3e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_85deb3f673832010b5c7ed64fbf6a7c3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-16 07:29:33&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:46</sys_created_on>
        <sys_id>f968f81183341210c6695855eeaad3cd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>KBUsageMetricsSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f968f81183341210c6695855eeaad3cd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:46</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
