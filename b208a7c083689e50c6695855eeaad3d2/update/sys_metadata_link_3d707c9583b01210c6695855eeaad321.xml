<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0ebbe74fc7001010c24ae122c7c26009</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.IncidentUtils2SNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;IncidentUtils2SNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var IncidentUtils2SNC = Class.create();
IncidentUtils2SNC.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    initialize: function(request, responseXML, gc) {
        AbstractAjaxProcessor.prototype.initialize.call(this, request, responseXML, gc);
        this.incidentUtils = new global.IncidentUtils();
        this.log = new GSLog('com.snc.incident.copy.log', 'IncidentUtilsSNC');
    },

    ajaxFunction_getIncidentQueryParams: function() {
        var srcSysId = this.getParameter('sysparm_src_sysid');
        var uiActionType = this.getParameter('sysparm_ui_action');
        var attributesList = this.incidentUtils._getAttributeList();

        if (!attributesList)
            return false;

        var gr = new GlideRecord(this.incidentUtils.INCIDENT);
        if (gr.get(srcSysId))
            return this.incidentUtils._getRecordValuesAsEncodedQuery(gr, attributesList, uiActionType);
        else
            this.log.logErr('Invalid source incident sysid provided = ' + srcSysId);
    },

    ajaxFunction_makeIncidentCopy: function() {
        var srcSysId = this.getParameter('sysparm_sys_id');
        var gr = new GlideRecord(this.incidentUtils.INCIDENT);
        if (!gr.get(srcSysId)) {
            this.log.logErr('[makeIncidentCopy] : Invalid Source Incident SysId provided or Insufficient roles to copy the Incident');
            return false;
        }
        var fields = JSON.parse(this.getParameter('sysparm_fields'));
        var originalIncident = new GlideRecord(this.incidentUtils.INCIDENT);
        if (originalIncident.get(srcSysId)) {
            var attributeList = this.incidentUtils._getAttributeList();
            var incidentGr = this.incidentUtils._makeRecordCopy(originalIncident, attributeList);
            for (var fieldName in fields) {
                if (fieldName != 'include_attachments' &amp;&amp; incidentGr.isValidField(fieldName))
                    incidentGr.setValue(fieldName, fields[fieldName]);
                else if (fieldName == 'include_attachments')
                    this.log.logInfo("[makeIncidentCopy] : Skipping field " + fieldName + " it is a dummy field on the copy incident modal.");
                else
                    this.log.logErr("[makeIncidentCopy] : " + fieldName + " is not a valid field on the Incident table.");
            }
            incidentGr[this.incidentUtils.ATTR_WORK_NOTES] = gs.getMessage("This Incident is copied from {0}", [originalIncident.getDisplayValue()]);
            if (incidentGr.canCreate() &amp;&amp; incidentGr.insert()) {
                this.incidentUtils.copyIncidentAttachments(originalIncident.getUniqueValue(), incidentGr.getUniqueValue(), fields['include_attachments']);
                this.incidentUtils.copyIncidentRelatedLists(originalIncident.getUniqueValue(), incidentGr.getUniqueValue());
                return incidentGr.getUniqueValue();
            } else
                this.log.logErr('Failed to copy Incident.');
        } else
            this.log.logErr('Invalid Source Incident SysId provided.');
        return false;
    },

    ajaxFunction_getIncidentCopyAttachDetails: function() {
        var srcSysId = this.getParameter('sysparm_sys_id');
        var gr = new GlideRecord(this.incidentUtils.INCIDENT);
        if (gr.get(srcSysId) &amp;&amp; this.incidentUtils.canCopyIncident(gr)) {
            var answer = {};
            answer.hasAttachments = gr.hasAttachments();
            answer.copyAttachProp = gs.getProperty(this.incidentUtils.PROP_INCIDENT_COPY_ATTACH, 'true') == 'true';
            return JSON.stringify(answer);
        }
        return;
    },

    ajaxFunction_getKnowledgeGapMapping: function() {
        var incidentSysId = this.getParameter("sysparm_incident");
        var incGr = new GlideRecord("incident");
        if (incGr.get(incidentSysId)) {
            if (pm.isActive('com.snc.incident.knowledge')) {
                var map = new CSMTableMapUtil(incGr);
                map.findMapByName("incident_knowledge_gap_mapping");
                var targetQuery = map.getTargetQuery();
                if (targetQuery &amp;&amp; targetQuery.length &gt; 0)
                    return targetQuery[0];
                else
                    return null;
            } else {
                var query = "parent=" + incidentSysId + "^description=" + incGr.short_description + "^opened_by=" + gs.getUserID();
                return query;
            }
        }
        return null;
    },
	

    type: 'IncidentUtils2SNC'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-04-13 08:01:38&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0ebbe74fc7001010c24ae122c7c26009&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;IncidentUtils2SNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Incident" source="com.snc.incident"&gt;d596b0643cb1311068bcf327dfe37f08&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0ebbe74fc7001010c24ae122c7c26009&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-11 05:30:21&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:05</sys_created_on>
        <sys_id>3d707c9583b01210c6695855eeaad321</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>IncidentUtils2SNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3d707c9583b01210c6695855eeaad321</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
