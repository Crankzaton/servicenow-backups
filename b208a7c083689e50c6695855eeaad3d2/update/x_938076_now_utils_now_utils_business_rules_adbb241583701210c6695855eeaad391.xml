<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Prevent duplicate app/objective records</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 if (current.operation() === 'insert')
  abortOnDuplicateAppAndObjective();
 else // must be update
  handleUpdate();
 
 function abortOnDuplicateAppAndObjective() {
  if (thereExistsADuplicate())
   abortActionWithError();
 }
 
 function thereExistsADuplicate() {
  var duplicateAppObjectiveRecords = submitDuplicateAppObjectiveRecordsQuery();
  var numDuplicates = duplicateAppObjectiveRecords.getRowCount();
  
  return numDuplicates !== 0;
 }
 
 function submitDuplicateAppObjectiveRecordsQuery() {
  var duplicateAppObjectiveRecords = new GlideRecord('sn_admin_center_solution');
  duplicateAppObjectiveRecords.addQuery('application', current.application)
         .addCondition('objective', current.objective)
         .addCondition('sys_id', '!=', current.sys_id);
  duplicateAppObjectiveRecords.query();
  
  return duplicateAppObjectiveRecords;
 }
 
 function abortActionWithError() {
  current.setAbortAction(true);
  var errorMsg = gs.getMessage('There already exists a solution with the same business objective and application');
  gs.addErrorMessage(errorMsg);
 }
 
 function handleUpdate() {
  
  // just so we can avoid querying when possible
  if (updateDuplicationIsImpossible())
   return;
  
  abortOnDuplicateAppAndObjective();
  
 }
 
 function updateDuplicationIsImpossible() {
  var applicationWasUnchanged = current.application.toString() === previous.application.toString();
  var businessObjectiveWasUnchanged = current.objective.toString() === previous.objective.toString();
  
  return applicationWasUnchanged && businessObjectiveWasUnchanged;
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:19</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>adbb241583701210c6695855eeaad391</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prevent duplicate app/objective records</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_adbb241583701210c6695855eeaad391</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:19</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=adbb241583701210c6695855eeaad391"/>
</record_update>
