<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description>Sets the asmt_metric Min and Max based on the asmt_metric_definition Value.</description>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Reset Min/Max for metric</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[updateMinAndMax();

function updateMinAndMax() {
 // Get the parent table's min and max so they can be reset if needed
 var metricRec = new GlideRecord('asmt_metric');
 metricRec.addQuery('sys_id', current.metric);
 metricRec.query();
 
 // Generally, keep the metric's min/max driven off of existing values
 // in metric defs.  Numeric Scale, the metric defs are driven in the 
 // opposite direction, where the metric's min and max determines how many 
 // metric defs are created.
 if (metricRec.next() && metricRec.datatype != 'numericscale') {
  var min = metricRec.min;
  var max = metricRec.max;
  
  if (current.operation() == 'delete' || current.operation() == 'insert'
   || minMaxMustChange(min, max, metricRec.datatype)) {
   var minMax = getDefinitionMinAndMax(metricRec.datatype);
   metricRec.min = minMax[0];
   metricRec.max = minMax[1];
   
   metricRec.update();
   
   if ((current.operation() != 'delete') && (current.operation() != 'insert'))
    showReloadMessage();
  }
 }
}

function minMaxMustChange(min, max, datatype) {
 if (datatype == 'multiplecheckbox')
  return current.normalization_input.changes();
 
 var startingValue = previous.value;
 var currentValue = current.value;
 
 if ((Math.round(startingValue - min) == 0) && (Math.abs(Math.round(currentValue - min)) >= 1))
  return true;
 
 if ((Math.round(startingValue - max) == 0) && (Math.abs(Math.round(currentValue - max)) >= 1))
  return true;
 
 if (((currentValue < min) && (Math.abs(Math.round(currentValue - min)) >= 1)) 
  || ((currentValue > max) && (Math.abs(Math.round(currentValue - max)) >= 1)))
  return true;  
 
 return false;
}

function getDefinitionMinAndMax(datatype) {
 var minMax = [0, 0];
 var definitionRec = new GlideAggregate('asmt_metric_definition');
 definitionRec.addQuery('metric', current.metric);
 
 if (datatype == 'multiplecheckbox') {
  definitionRec.addQuery('normalization_input', '>', '0');
  
  if ((!gs.nil(current.metric)) && current.metric.maximum_normalization_input == true)
   definitionRec.addAggregate('MAX', 'normalization_input');
  else
   definitionRec.addAggregate('SUM', 'normalization_input');
  
  definitionRec.groupBy('metric');
  definitionRec.query();
  if (definitionRec.next()) {
   
   if ((!gs.nil(current.metric)) && current.metric.maximum_normalization_input == true)
    minMax[1] = definitionRec.getAggregate('MAX', 'normalization_input');
   else
    minMax[1] = definitionRec.getAggregate('SUM', 'normalization_input');
  }   

 } else {
  definitionRec.addQuery('value', '!=', '-1');
  definitionRec.addAggregate('MIN', 'value');
  definitionRec.addAggregate('MAX', 'value');
  definitionRec.groupBy('metric');
  definitionRec.query();
  if (definitionRec.next()) {
   if ((!gs.nil(current.metric)) && current.metric.maximum_normalization_input == true)
    minMax[0] = 0;
   else
    minMax[0] = definitionRec.getAggregate('MIN', 'value');
   minMax[1] = definitionRec.getAggregate('MAX', 'value');
  }
 }
 
 return minMax;
}

function showReloadMessage() {
 var transaction = GlideTransaction.get();
 if(transaction){
  var uri = gs.action.getGlideURI();
  var referredFromUrl = uri.get('x_referer');
  if (referredFromUrl != null) {
   var endOfName = referredFromUrl.indexOf("?");
   if (endOfName >= 0) {
    var srcForm = referredFromUrl.substr(0, endOfName);
    if (srcForm == 'asmt_metric.do') {
     gs.flushMessages();// prevent stacked messages on cascading deletes
     var infoMsg = gs.getMessage("Reload the page to see the updated Min and Max values");
     gs.addInfoMessage(infoMsg);
    }
   }
  }
 }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:46</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0b0c289583701210c6695855eeaad370</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Reset Min/Max for metric</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_0b0c289583701210c6695855eeaad370</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:46</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=0b0c289583701210c6695855eeaad370"/>
</record_update>
