<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>(current.agent == 'mid.self.monitor' || current.topic == 'queue.stats') &amp;&amp; current.queue == 'input' &amp;&amp; current.state == 'ready'</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>MID - Process XMLStats</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function parseStats() {
    var XMLUtil = GlideXMLUtil;
    var midName = String(current.source).split(":")[1];
    var midSysId;
    var threads = {};
 var payload = current.payload;

 var gr = new GlideRecord('ecc_agent');
    gr.addQuery('name', midName);
    gr.setLimit(1);
    gr.query();

 if (!gr.next()) { // mid is uninitialized, log and bail
        gs.warn("Unable to find MID Server named " + midName + " but received a stats ecc_queue record for it (" + current.sys_id + ")");
        return;
    }

 if (payload == '<see_attachment/>') {
  var sa = new GlideSysAttachment();
  payload = sa.get(current, 'payload');
 }

 var statsDocument = XMLUtil.parse(payload);
    if (statsDocument) {
        var root = statsDocument.getDocumentElement();
        var version = XMLUtil.getElementValueByTagName(statsDocument, "MIDServerBuildVersion");
        var jvmVersion = XMLUtil.getElementValueByTagName(statsDocument, "MIDServerJavaVersion");
        var midXmlId = XMLUtil.getElementValueByTagName(statsDocument, "MIDServerSysId");
        var newTimeStamp = XMLUtil.getElementValueByTagName(statsDocument, "MIDServerTimeStamp");
        var hostname = XMLUtil.getElementValueByTagName(statsDocument, "MIDServerHostName");

        var threadsNode = XMLUtil.selectSingleNode(root, "//threads");
        var threadsList = XMLUtil.selectNodes(threadsNode, "//thread");
        for (var i = 0; i < threadsList.getLength(); i++) {
            var thread = threadsList.item(i);
            var tName = XMLUtil.getAllText(thread);
            var tDaemon = thread.getAttribute("daemon");
            var tPriority = thread.getAttribute("priority");
            var tGroup = thread.getAttribute("threadGroup");
            var tId = thread.getAttribute("threadId");

            if (tGroup == "system")
                continue;

            threads[tId] = {};
            threads[tId].daemon = tDaemon;
            threads[tId].priority = tPriority;
            threads[tId].name = tName;
        }

        midSysId = gr.sys_id;
        if (jvmVersion && gr.isValidField("jvm_version"))
            gr.jvm_version = jvmVersion;

        if (newTimeStamp && gr.isValidField("started")) {
            var startedTime = (new GlideDateTime(gr.started)).getNumericValue();
            if (newTimeStamp > startedTime) {
                gr.version = version;
                if (hostname)
                    gr.host_name = hostname;
            }
        }

        gr.update();

        var am = new AgentMetrics();
        am.process(midSysId, statsDocument);
    }

    if (midSysId) {
        var gr = new GlideRecord('ecc_agent_thread');
        gr.addQuery('ecc_agent', midSysId);
        gr.query();
        while (gr.next()) {
            var id = gr.id;
            if (!threads[id]) {
                delete threads[id];
                gr.deleteRecord();
            } else {
                gr.name = threads[id].name;
                gr.priority = threads[id].priority;
                gr.update();
                delete threads[id];
            }
        }

        for (var id in threads) {
            gr.initialize();
            gr.id = id;
            gr.ecc_agent = midSysId;
            gr.priority = threads[id].priority;
            gr.daemon = threads[id].daemon;
            gr.name = threads[id].name;
            gr.insert();
        }
    }
}

parseStats();
current.state = 'processed';
current.processed = gs.nowDateTime();
current.update();]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:38</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9acb6c1583701210c6695855eeaad38b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MID - Process XMLStats</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9acb6c1583701210c6695855eeaad38b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:38</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9acb6c1583701210c6695855eeaad38b"/>
</record_update>
