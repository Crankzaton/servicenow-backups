<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>02b1fb46dbc1511086a072c7f496199b</documentkey>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <before>false</before>
        <description>// take today's date
var checkdate = new GlideDateTime('2022-08-03 17:30:00'); //in UTC
checkdate.addSeconds(28800); // in KL time
gs.print("checkdate: " + checkdate);

var days = 0;


// create your threshold timestamp to check
var endtime = "10:00:00";
var enddate = new GlideDateTime('2022-08-03 17:30:00');
enddate.addSeconds(28800); // in KL time

//gs.print('enddate getdate: ' + enddate.getDate());
//gs.print('enddate dispvalinternal: ' + enddate.getDisplayValueInternal());
//gs.print('enddate displayval: ' + enddate.getValue());
//enddate.addDays(2); // change date to simulate when ticket is submitted
gs.print("enddate: " + enddate);
var checkend = enddate.getDate() + " " + endtime;
gs.print("checkend: " + checkend); // today's date at 10am

// convert today 10am to gdt object
var checkcompare = new GlideDateTime(checkend);
gs.print("checkcompare: " + checkcompare);


gs.print("&gt;&gt; Exception Payment: Checking date time:" + checkdate);
var diff = gs.dateDiff(checkdate, checkcompare, true); // checkdate - current time in KL; checkcompare - current date at 10am
gs.print("current ticket raised time that is checkdate shd be here:" + checkdate); // shd give current ticket raised time
gs.print("shd give 10 am that is checkcompare shd be here:" + checkend); // shd give 10 am
gs.print("diff: " + diff);

var breachTime;
var slaDate = new GlideDate(); // start with today's date
gs.print("sladate : " + slaDate);
var nextDay = new GlideDate(); // for handling tomorrow's date
nextDay.addDays(1); // store tomorrow

// check if today is a working day
var isTodayWorking = checkSchedule(slaDate.getDisplayValue() + " 09:30:00");
var isnextDayWorking;

if (isTodayWorking) {
    if (diff &gt;= 1 &amp;&amp; diff &lt;= 36000) {
        //breachTime = slaDate.getDisplayValue() + "09:30:00";
        //calculator.calcRelativeDueDate(//calculator.startDateTime, days, "17:30:00");
        gs.print('&gt;&gt; Exception Payment: Before 10am so resolve on same day by 5:30PM');
    } else if (diff &gt;= -17999 &amp;&amp; diff &lt;= 0) {
        //slaDate.addDays(1);
        //breachTime = slaDate.getDisplayValue() + "04:00:00";
        days++;
        //calculator.calcRelativeDueDate(//calculator.startDateTime, days, "12:00:00");
        gs.print('&gt;&gt; Exception Payment: 10am - 3pm so resolve next day by 12:00PM');
    } else if (diff &gt;= -50399 &amp;&amp; diff &lt;= -18000) {
        days++;
        //calculator.calcRelativeDueDate(//calculator.startDateTime, days, "17:30:00");
        //slaDate.addDays(1);
        //breachTime = slaDate.getDisplayValue() +  "09:30:00";
        gs.print('&gt;&gt; Exception Payment: After 3pm so resolve next day by 5:30PM');
    }
} else {
    // check if tomorrow is working or not
    isnextDayWorking = checkSchedule(nextDay.getDisplayValue() + " 17:30:00");
    while (!isnextDayWorking) {
        nextDay.addDays(1); // till we find the next working day, keep adding 1
        isnextDayWorking = checkSchedule(nextDay.getDisplayValue() + " 09:30:00");
    }
    breachTime = nextDay.getDisplayValue() + " 09:30:00";
    gs.print('&gt;&gt; Exception Payment: Submitted on a non working day, set resolve next working day by 5:30PM');
}

//gs.print("&gt;&gt; Exception Payment: breachTime: " + breachTime);


function checkSchedule(datecheck) {
    gs.print("datecheck: " + datecheck);
    var glide = new GlideRecord('cmn_schedule');
    glide.addQuery('name', 'Malaysia Working Hours except Holidays');
    glide.query();
    if (glide.next()) {
        var sched = new GlideSchedule(glide.sys_id);
        var date = new GlideDateTime();
        date.setDisplayValue(datecheck);
        if (sched.isInSchedule(date)) {
            gs.print("IN schedule: " + date);
            return true;
        } else {
            gs.print("OUT of schedule: " + date);
            return false;
        }
    }
}</description>
        <name>Time Based Script</name>
        <record_for_rollback>true</record_for_rollback>
        <script/>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-03 07:41:26</sys_created_on>
        <sys_id>02b1fb46dbc1511086a072c7f496199b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Time Based Script</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global">global</sys_scope>
        <sys_update_name>sys_script_fix_02b1fb46dbc1511086a072c7f496199b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-03 07:41:26</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
]]></payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:18:48</sys_created_on>
        <sys_id>e972b81d83b01210c6695855eeaad389</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Time Based Script</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e972b81d83b01210c6695855eeaad389</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:18:48</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
