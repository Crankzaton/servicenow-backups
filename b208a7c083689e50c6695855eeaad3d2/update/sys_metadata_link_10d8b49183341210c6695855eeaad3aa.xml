<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a464b375530e1110539dddeeff7b122f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_install_base.InstallBaseStateUtilSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;This contains helper functions to keep Install Base Item table State and Active fields in sync&amp;#13;
Can be called by any server script to determine inactive states, default work, or default close states for a given table&amp;#13;
Configurations are defined in the sn_install_base_item.state dictionary element, usually using dictionary overrides since state values vary per extended table.&lt;/description&gt;
        &lt;name&gt;InstallBaseStateUtilSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var InstallBaseStateUtilSNC = Class.create();
InstallBaseStateUtilSNC.prototype = {
    ATTR_INACTIVE_STATES: "close_states",
    ATTR_DEFAULT_WORK: "default_work_state",
    ATTR_DEFAULT_CLOSE: "default_close_state",

    SYSTEM_DEFAULT_CLOSE: "inactive",
    SYSTEM_DEFAULT_WORK: "in_use",
    SYSTEM_INACTIVE_STATES: ["inactive"],

    /*
     * Init
     * called by new InstallBaseStateUtil(gr)
     * @param Install Base Item GlideRecord
     */
    initialize: function( /*GlideRecord*/ installBaseItemGr) {

        this.installBaseItem = installBaseItemGr;

        if (!installBaseItemGr || !installBaseItemGr.isValidRecord()) {
            if (!installBaseItemGr.isNewRecord()) return;
        }

        this.stateElement = installBaseItemGr.getElement('state');

        this._getTableStates();
        this._getDefaultWork();
        this._getDefaultClose();

    },

    /*
     * Get the active status of a given state
     * @param state value of the state field choice
     * @return boolean true if state is an Inactive state
     */
    isStateInactive: function(state) {
        state = state + "";
        var arrUtil = new global.ArrayUtil();
        if (arrUtil.contains(this.inactiveStates, state))
            return true;
        return false;
    },

    /*
     * Get the value for the default work state, defaults to "in_use" if not specified
     * @return int
     */
    getDefaultWorkState: function() {
        return this.defaultWork;
    },

    /*
     * Get the value for the default close state, defaults to "inactive" if not specified
     * @return int
     */
    getDefaultCloseState: function() {
        return this.defaultClose;
    },

    /*
     * Get the list of inactive state values
     * @return array
     */
    getInactiveStates: function() {
        return this.inactiveStates;
    },

    /*
     * private methods used during init
     */
    _getTableStates: function() {
        var states = this.stateElement.getAttribute(this.ATTR_INACTIVE_STATES);
        if (states)
            this.inactiveStates = states.split(";");
        else
            this.inactiveStates = this.SYSTEM_INACTIVE_STATES;
    },

    _getDefaultWork: function() {
        var value = this.stateElement.getAttribute(this.ATTR_DEFAULT_WORK);
        if (value)
            this.defaultWork = value;
        else
            this.defaultWork = this.SYSTEM_DEFAULT_WORK;
    },

    _getDefaultClose: function() {
        var value = this.stateElement.getAttribute(this.ATTR_DEFAULT_CLOSE);
        if (value)
            this.defaultClose = value;
        else
            this.defaultClose = this.SYSTEM_DEFAULT_CLOSE;
    },

    type: 'InstallBaseStateUtilSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-21 06:17:24&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a464b375530e1110539dddeeff7b122f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;InstallBaseStateUtilSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Install Base Management" source="sn_install_base"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Customer Service Install Base Management"&gt;7f1fc05477122300d7159b71a91061b7&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a464b375530e1110539dddeeff7b122f&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-09-28 11:01:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:34</sys_created_on>
        <sys_id>10d8b49183341210c6695855eeaad3aa</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>InstallBaseStateUtilSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_10d8b49183341210c6695855eeaad3aa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:34</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
