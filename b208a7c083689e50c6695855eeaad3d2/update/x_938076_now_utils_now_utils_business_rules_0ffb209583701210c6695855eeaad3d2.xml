<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Delete DD role on delete</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 if (current.role.nil() || current.permission_set.nil() || current.scope.nil()) {
  gs.warn("[DeleteDDRole] Not deleting role associated with sys_scope_permission_set_role_assignment "
   + "where sys_id is: " + current.sys_id + ". Some fields empty; role: " + current.role
   + " permission_set: " + current.permission_set + " scope:" + current.scope);
  return;
 }

 var roleSysId = current.role.sys_id;
 // sys_user_role is used by both sys_user_has_role and sys_group_has_role
 var gr = new GlideRecord("sys_user_role");
 if (!gr.get(roleSysId)) {
  gs.info("[DeleteDDRole] no user or group roles associated with sys_id: " + roleSysId);
  return;
 }

 // build up role name and validate we are removing the correct record
 var roleName = gr.getValue("name");
 if (!isRoleNameValid(roleName)) {
  gs.warn("[DeleteDDRole] Invalid role name: " + roleName);
  return;
 }

 // retrieve users and groups *before* the sys_user_role record is removed
 //   otherwise we don't have a way to get to the user/group
 var usersToCheck = getUsersToCheck(roleSysId);
 var groupsToCheck = getGroupsToCheck(roleSysId);
 var executionTracker = SNC.GlideExecutionTracker.getLastRunning();
 var numUsers = usersToCheck.length.toString();
 var numGroups = groupsToCheck.length.toString();
 executionTracker.updateMessage(
  gs.getMessage("Removing developer role assignments for permission '{0}' from {1} users, {2} groups",
   [current.permission_set.getDisplayValue(),numUsers,numGroups]));

 if (!gr.deleteRecord()) {
  gs.warn("[DeleteDDRole] Unable to delete Delegated developer role with name: " + roleName);
  return;
 }

 for (var i = 0; i < usersToCheck.length; i++) {
  SNC.DelegatedDevelopmentUtil.revokeDelegateDevRoleIfNotNeeded("user", usersToCheck[i]);
 }
 for (i = 0; i < groupsToCheck.length; i++) {
  SNC.DelegatedDevelopmentUtil.revokeDelegateDevRoleIfNotNeeded("group", groupsToCheck[i]);
 }

})(current, previous);

function getUsersToCheck(roleSysId) {
 // retrieve ALL user sys_id(s) before the sys_user_role is deleted
 var sysUserHasRoleGr = new GlideRecord("sys_user_has_role");
 sysUserHasRoleGr.addQuery("role", roleSysId);
 sysUserHasRoleGr.addQuery("inherited", "false");
 sysUserHasRoleGr.query();
 var usersToCheck = [];
 while (sysUserHasRoleGr.next()) {
  usersToCheck.push(sysUserHasRoleGr.getValue("user"));
 }

 return usersToCheck;
}

function getGroupsToCheck(roleSysId) {
 // retrieve ALL group sys_id(s) before the sys_user_role is deleted
 var sysGroupHasRoleGr = new GlideRecord("sys_group_has_role");
 sysGroupHasRoleGr.addQuery("role", roleSysId);
 sysGroupHasRoleGr.addNullQuery("granted_by");
 sysGroupHasRoleGr.query();
 var groupsToCheck = [];
 while (sysGroupHasRoleGr.next()) {
  groupsToCheck.push(sysGroupHasRoleGr.getValue("group"));
 }

 return groupsToCheck;
}

function isRoleNameValid(roleName) {
 if (JSUtil.nil(roleName))
  return false;

 var roleNameWithoutSuffix = roleName.replace(/_rc_\d\d/, "");
 var permissionName = current.permission_set.name + '';
 var permissionSuffix = permissionName.replace(/[^\w]/g, "").toLowerCase();
 return roleNameWithoutSuffix.startsWith("sn_dd_") && roleNameWithoutSuffix.endsWith("_" + permissionSuffix);
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0ffb209583701210c6695855eeaad3d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Delete DD role on delete</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_0ffb209583701210c6695855eeaad3d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:30</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=0ffb209583701210c6695855eeaad3d2"/>
</record_update>
