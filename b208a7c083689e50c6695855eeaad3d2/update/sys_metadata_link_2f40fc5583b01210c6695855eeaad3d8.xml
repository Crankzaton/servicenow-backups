<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>06997dc1a1172010fa9b12d16d68eb5d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AssetNumberAbbreviation&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Returns an abbreviated number value. It accepts a formatting function which is used to format the final number.&lt;/description&gt;
        &lt;name&gt;AssetNumberAbbreviation&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/** This is a copy of dev/now-par-components/components/utils/src/number/get-number-abbreviated.js
NUMBER_SYMBOLS = [
  thousand,
  million,
  billion,
  trillion,
  quadrillion,
  quintillion,
];
* */

var AssetNumberAbbreviation = Class.create();
AssetNumberAbbreviation.prototype = {
	initialize: function() {
		this.NUMBER_SYMBOLS = [
			gs.getMessage('thousand_abbreviated'),
			gs.getMessage('million_abbreviated'),
			gs.getMessage('billion_abbreviated'),
			gs.getMessage('trillion_abbreviated'),
			gs.getMessage('quadrillion_abbreviated'),
			gs.getMessage('quintillion_abbreviated'),
		];
	},

	getNumberAbbreviatedWithCurrency: function(field, tableName, number, formattingOptions) {
		var symbol = null;
		var currCode = null;
		var currencyCode = new GlideRecord(tableName);
		currencyCode.setLimit(1);
		currencyCode.query();
		if (currencyCode.next() &amp;&amp; !gs.nil(currencyCode[field].getReferenceCurrencyCode())) {
			if (gs.getProperty('glide.i18n.single_currency') === 'true') {
				currCode = gs.getProperty('glide.i18n.single_currency.code');
			} else {
				currCode = currencyCode[field].getReferenceCurrencyCode();
			}
			var sym = new GlideRecord('fx_currency');
			sym.addQuery('code', currCode);
			sym.query();
			if (sym.next()) {
				symbol = sym.getValue('symbol');
			}
		}
		var func = function(value, option) {
			return option.symbol + value;
		};
		var formatting = gs.nil(formattingOptions) ? {} : formattingOptions;
		formatting.symbol = symbol;

		return this.getNumberAbbreviated(number, formatting, func);
	},

	/**
	 * Returns an abbreviated number value. It accepts a formatting function which is used to format the final number.
	 * As a return value the formatted value is postfixed with the appropriate postfix which can be: K, M, B, t, q, Q
	 *
	 * Example: 1000000 is abbreviated as 1M
	 *
	 * @param  {Number}  [value] incoming number to be formatted
	 * @param  {Object}  [formattingOptions] options passed to the formatting function
	 * @param  {Function}  [formatterFunction] function to be used for additional formatting of the number
	 *
	 * @return {String} - Abbreviated number with formatting applied
	 * */
	getNumberAbbreviated: function getNumberAbbreviated(
		number,
		formattingOptions,
		formatterFunction
	) {
		var precision = formattingOptions.precision
			? formattingOptions.precision
			: 2;
		var decimalPlaces = Math.pow(10, precision); // eslint-disable-line no-restricted-properties

		var finalNumber = number;
		var postfix = '';

		var absValue = Math.abs(number);

		for (var i = this.NUMBER_SYMBOLS.length - 1; i &gt;= 0; i--) {
			var roundedLargeNumber = Math.pow(10, (i + 1) * 3); // eslint-disable-line no-restricted-properties

			if (roundedLargeNumber &gt; absValue) { continue; }

			var abbreviatedValue = Math.round((absValue * decimalPlaces) / roundedLargeNumber)
                / decimalPlaces;

			if (abbreviatedValue === 1000 &amp;&amp; i &lt; this.NUMBER_SYMBOLS.length - 1) {
				abbreviatedValue = 1;
				i += 1;
			}

			if (number &lt; 0) {
				abbreviatedValue = -abbreviatedValue;
			}

			finalNumber = abbreviatedValue;
			postfix = this.NUMBER_SYMBOLS[i];

			break;
		}

		if (typeof formatterFunction === 'function') {
			finalNumber = formatterFunction(finalNumber, formattingOptions);
		}

		return finalNumber + postfix;
	},
	type: 'AssetNumberAbbreviation',
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-04-02 04:11:25&lt;/sys_created_on&gt;
        &lt;sys_id&gt;06997dc1a1172010fa9b12d16d68eb5d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;23&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AssetNumberAbbreviation&lt;/sys_name&gt;
        &lt;sys_package display_value="Model Management" source="com.snc.model"&gt;1d64b8e83c31311068bcf327dfe37f3a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_06997dc1a1172010fa9b12d16d68eb5d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-06 20:04:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:22</sys_created_on>
        <sys_id>2f40fc5583b01210c6695855eeaad3d8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AssetNumberAbbreviation</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2f40fc5583b01210c6695855eeaad3d8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:22</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
