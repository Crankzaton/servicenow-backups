<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Table Field Validation</name>
        <order>50</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[// Prevent duplicates and convert name
 if (current.operation() == 'insert') {
   // Prevent nil names
             if (current.name.nil()) {
                current.setAbortAction(true);
                var errorMessage = gs.getMessage('Table name cannot be nil');
                current.name.setError(errorMessage);
                gs.addErrorMessage(errorMessage);
            } else if (/^[0-9]/.test(current.name)) {
    current.setAbortAction(true);
    errorMessage = gs.getMessage('Table name cannot start with numeric value');
                current.name.setError(errorMessage);
                gs.addErrorMessage(errorMessage);
   } else {
            //Logic for to make sure the table name is valid.  Starts with "u_" or the scope prefix,
   //is less than 80 characters, and is alphanumeric lowercase or underscores.
   current.name = new TableUtils().getValidTableName(current.sys_scope.toString(), current.name.toString());

   var dup = new GlideRecord('sys_db_object');
   dup.addQuery('name', current.name);
   dup.query();
   if (dup.hasNext()) {
    current.setAbortAction(true);
    current.name.setError(gs.getMessage('Table name {0} is already in use', current.name));
    gs.addErrorMessage(gs.getMessage('Table name {0} is already in use', current.name));
   }

   //make sure the super class is extensible
   if (!current.super_class.nil()) {
    var sup = new GlideRecord('sys_db_object');
    var extendable = false;
    if (sup.get(current.super_class))
     extendable = sup.is_extendable;

    if (!extendable) {
     current.setAbortAction(true);
     current.super_class.setError(gs.getMessage('{0} is not currently marked as extensible', sup.name));
     gs.addErrorMessage(gs.getMessage('{0} is not currently marked as extensible', sup.name));
    }
   }
   var prevLabel = current.label.toString();
   current.label = SNC.TableEditor.getValidDocumentationLabel(current.label, current.name);
   // Table labels are Title Case, so do that if we're auto-generating the label
   if (GlideStringUtil.nil(prevLabel))
    current.label = GlideStringUtil.toTitleCase(current.label);
            }

  } else if (current.operation() == 'update') {
   //name is enter once
   if (previous.name != current.name) {
    current.setAbortAction(true);
    current.name.setError(gs.getMessage('Cannot change the name of a table after it is created', current.name));
    gs.addErrorMessage(gs.getMessage('Cannot change the name of a table after it is created', current.name));
   }

   //super class is enter once
   if (previous.super_class != current.super_class) {
    current.setAbortAction(true);
    current.super_class.setError(gs.getMessage('Cannot change what a table extends after it is created'));
    gs.addErrorMessage(gs.getMessage('Cannot change what a table extends after it is created'));
   }

   //make sure the "notExtended" tables are not made extensible.
   if (current.is_extendable == true) {
    if (SNC.TableEditor.notExtended(previous.name)) {
     current.setAbortAction(true);
     current.is_extendable.setError(gs.getMessage('{0} is a reserved table that cannot be extended', previous.name));
     gs.addErrorMessage(gs.getMessage('{0} is a reserved table that cannot be extended', previous.name));
    }
   }
   current.label = SNC.TableEditor.getValidDocumentationLabel(current.label, current.name);
  }]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>048b6c9183701210c6695855eeaad334</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Table Field Validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_048b6c9183701210c6695855eeaad334</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:23</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=048b6c9183701210c6695855eeaad334"/>
</record_update>
