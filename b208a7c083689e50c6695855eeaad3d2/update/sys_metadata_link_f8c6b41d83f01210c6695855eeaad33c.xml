<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5db508a753222010c722ddeeff7b1241</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.ConfigResponse&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Used to store the output of the ConfigRetrievalService&lt;/description&gt;
        &lt;name&gt;ConfigResponse&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConfigResponse = Class.create();
ConfigResponse.prototype = {
    initialize: function(externalNodes) {
        this.nodes = {};
        this.nodeLinks = [];
        this.alerts = [];
        this.errorHandler = new sn_mab_api.ErrorHandler();
        this.externalParentNodes = externalNodes;
        this.floorNodes = [];

        // Returning duplicate configuration constants to frontend
        var duplicateConfigMap = new sn_mab_api.DuplicateConfigMap();
        this.descendantsToReuse = duplicateConfigMap.descendantsToReuse || {};
        this.altNameFieldMap = duplicateConfigMap.altNameFieldMap || {};
        this.recordsNotToRename = duplicateConfigMap.recordsNotToRename || [];
        this.uiRuleActionExceptions = {};
        this.itemParameterExceptions = {};
    },

    addConfigNode: function(tableName, sysId, configNode) {
        if (!tableName || !sysId || !configNode)
            return;

        if (this.nodeExists(tableName, sysId, configNode))
            this.errorHandler.throwInternalError('Configuration Node already exists in response: ' + tableName + ', id: ' + sysId);

        var tableEntries = this.nodes[tableName];
        if (!tableEntries) {
            tableEntries = {};
            this.nodes[tableName] = tableEntries;
        }

        tableEntries[sysId] = configNode;
    },

    nodeExists: function(tableName, sysId) {
        return (this.nodes[tableName] &amp;&amp; this.nodes[tableName][sysId]) ? true : false;
    },

    preSerialize: function(copyMode) {
        delete this.externalParentNodes; // avoid serialization
        delete this.errorHandler;
        // Clean up copy only keys
        if (!copyMode) {
            delete this.descendantsToReuse;
            delete this.altNameFieldMap;
            delete this.recordsNotToRename;
            delete this.uiRuleActionExceptions;
            delete this.itemParameterExceptions;
        }
    },

    existsInNodeList: function(tableName, sysId, nodeList) {
        if (!nodeList)
            return false;

        for (var i = 0; i &lt; nodeList.length; i++) {
            var node = nodeList[i];
            if (sysId === node.sys_id &amp;&amp; tableName === node.sys_class_name)
                return true;
        }

        return false;
    },

    getConfigNode: function(tableName, sysId) {
        return this.nodes[tableName] ? this.nodes[tableName][sysId] : undefined;
    },

    // If nodes is null, we will consider this ConfigResponse as empty.
    isEmpty: function() {
        return !this.nodes || this.nodes.length === 0;
    },

    validateNodeLinkParent: function(parentNodeTableName, parentNodeSysId) {
        if (!this.nodeExists(parentNodeTableName, parentNodeSysId)) {
            // parent node may be provided by the externalParentNodes data during a partial tree retrieval
            if (!this.existsInNodeList(parentNodeTableName, parentNodeSysId, this.externalParentNodes)) {
                this.errorHandler.throwInternalError('Trying to add node link to non existent node: ' + parentNodeTableName + ', id: ' + parentNodeSysId);
            }
        }
    },

    validateStandardNodeLink: function(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId) {
        this.validateNodeLinkParent(parentNodeTableName, parentNodeSysId);

        if (!this.nodeExists(childNodeTableName, childNodeSysId)) {
            this.errorHandler.throwInternalError('Trying to add node link to non existent node: ' + childNodeTableName + ', id: ' + childNodeSysId);
        }

        if (this.nodeLinkExists(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId))
            return false;

        return true;
    },

    addAlert: function(alert) {
        this.alerts.push(alert);
    },

    validateAndAddNodeLink: function(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId, isFloor) {
        var validNodeLink = this.validateStandardNodeLink(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId);
        if (validNodeLink)
            this.addNodeLink(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId, isFloor);
    },

    addNodeLink: function(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId, isFloor) {
        if (isFloor === undefined)
            isFloor = false;

        this.nodeLinks.push({
            'parentNode': {
                'tableName': parentNodeTableName,
                'sysId': parentNodeSysId
            },
            'childNode': {
                'isFloor': isFloor,
                'tableName': childNodeTableName,
                'sysId': childNodeSysId
            }
        });
    },

    addFloorNode: function(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId) {
        if (this.floorNodes.length &gt; 0) {
            for (var i = 0; i &lt; this.floorNodes.length; i++) {
                var currentNode = this.floorNodes[i];
                if (currentNode['parentNode']['tableName'] === parentNodeTableName &amp;&amp;
                    currentNode['parentNode']['sysId'] === parentNodeSysId) {
                    currentNode['childNodes'].push({
                        'tableName': childNodeTableName,
                        'sysId': childNodeSysId
                    });
                    return;
                }
            }
            this.floorNodes.push(this.createFloorNode(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId));

        } else {
            this.floorNodes.push(this.createFloorNode(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId));
        }
    },

    createFloorNode: function(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId) {
        return {
            'parentNode': {
                'tableName': parentNodeTableName,
                'sysId': parentNodeSysId
            },
            'childNodes': [{
                'tableName': childNodeTableName,
                'sysId': childNodeSysId
            }]
        };
    },

    nodeLinkExists: function(parentNodeTableName, parentNodeSysId, childNodeTableName, childNodeSysId) {
        var linkExists;
        this.nodeLinks.forEach(function(currLink) {
            if (linkExists)
                return;

            if (currLink.parentNode.tableName == parentNodeTableName &amp;&amp; currLink.parentNode.sysId == parentNodeSysId &amp;&amp;
                currLink.childNode.tableName == childNodeTableName &amp;&amp; currLink.childNode.sysId == childNodeSysId)
                linkExists = true;
        });
        return linkExists;
    },

    addUiRuleActionException: function(uiRuleActionTarget, uiRuleActionSysId) {
        this.uiRuleActionExceptions[uiRuleActionSysId] = uiRuleActionTarget;
    },

    addItemParameterException: function(itemParameterException, itemParameterSysId) {
        if (this.itemParameterExceptions[itemParameterSysId]) {
            var newFields = this.itemParameterExceptions[itemParameterSysId].parent.fields.concat(itemParameterException.parent.fields);
            this.itemParameterExceptions[itemParameterSysId] = itemParameterException;
            this.itemParameterExceptions[itemParameterSysId].parent.fields = newFields;
        } else {
            this.itemParameterExceptions[itemParameterSysId] = itemParameterException;
        }
    },

    type: 'ConfigResponse'
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-03 07:25:22&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5db508a753222010c722ddeeff7b1241&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConfigResponse&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5db508a753222010c722ddeeff7b1241&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-03 08:13:40&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:35</sys_created_on>
        <sys_id>f8c6b41d83f01210c6695855eeaad33c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConfigResponse</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f8c6b41d83f01210c6695855eeaad33c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:35</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
