<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>54f7841697aca5104b593f0e6253af9e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_appclient.PluginPreInstallService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PluginPreInstallService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PluginPreInstallService = Class.create();
PluginPreInstallService.prototype = {
    initialize: function() {
        this.licUrl = 'license_details_list.do?sysparm_query=end_date&gt;=javascript:gs.beginningOfToday()^start_date&lt;=javascript:gs.endOfToday()';
        this.pluginsData = new global.PluginsData();
    },
    getPreInstallPluginInfo: function(pluginInfo) {
        var preInstallPluginInfo = {};
        preInstallPluginInfo.licenseInfoURL = this.licUrl;
        var plugin = new GlideRecord("v_plugin");
        plugin.addEncodedQuery("id="+pluginInfo.id+"^ORsys_id="+pluginInfo.id);
        plugin.query();
        var pluginCount = plugin.getRowCount();
        if (pluginCount == 0) {
            plugin = new GlideRecord("v_plugin");
            plugin.addEncodedQuery("scopeLIKE" + pluginInfo.scope);
            plugin.query();
            pluginCount = plugin.getRowCount();
        }
        if (pluginCount &gt; 1) {
            //try strategies to get down to 1 record
            var foundPlugin = false;
            var storeGR = new GlideRecord("sys_store_app");
            storeGR.get("scope", pluginInfo.scope);
            var sysCode = global.JSUtil.notNil(storeGR.getValue("sys_code")) ? storeGR.getValue("sys_code") : "";
            while (plugin.next()) {
                //Is exact scope or plugin id match?
                if (plugin.getValue('scope') == pluginInfo.scope || sysCode == plugin.getValue('id')) {
                    foundPlugin = true;
                    break;
                }
            }
            if (!foundPlugin) {
                preInstallPluginInfo.no_plugin_found = gs.getMessage("Plugin not found");
                return;
            }

        } else if (plugin.hasNext()) {
            plugin.next();
        }

        var custVer = "none";
        var sysId = null;
        if (plugin.scope != "global") {
            var scopeGr = new GlideRecord("sys_scope");
            scopeGr.addQuery("scope", plugin.scope);
            scopeGr.addQuery("scope", "!=", "global");
            scopeGr.query();
            if (scopeGr.next())
                sysId = scopeGr.sys_id;
            if (sysId != null) {
                var customGr = new GlideRecord("sys_app_customization");
                customGr.addQuery("vendor_app", sysId);
                customGr.query();
                if (customGr.next()) {
                    var version = customGr.getValue("version");
                    if (version != 'none')
                        custVer = version;
                }
            }
        }

        preInstallPluginInfo.customizedVersion = custVer;
        preInstallPluginInfo.help = plugin.getValue('help');
        preInstallPluginInfo.has_demo_data = plugin.has_demo_data == true;
        preInstallPluginInfo.block_install = plugin.block_install;
        preInstallPluginInfo.state = plugin.state;

        var pluginDependencies = {};
        pluginDependencies.WillBeActivated = [];
        pluginDependencies.installed = [];
        var dependency = new GlideRecord("v_plugin");
        dependency.addQuery("id", "IN", plugin.requires);
        dependency.query();
        while (dependency.next()) {
            var pluginDependency = {};
            pluginDependency.Id = dependency.getValue("name");
            pluginDependency.sys_id = dependency.getValue("sys_id");
            pluginDependency.plugin_id = dependency.getValue("id");
            pluginDependency.status = gs.getMessage('will be activated');
            pluginDependencies.status_value = "will_be_activated";
            if (dependency.active == 'active') {
                pluginDependency.status = gs.getMessage('Installed');
                pluginDependencies.status_value = "installed";
                pluginDependencies.installed.push(pluginDependency);
            } else {
                pluginDependencies.WillBeActivated.push(pluginDependency);
            }
        }
        preInstallPluginInfo.dependencies = pluginDependencies;

        try {
            preInstallPluginInfo.conditionalInActivePlugins = this.pluginsData.getUninstalledConditionalPlugins(pluginInfo.id);
            preInstallPluginInfo.enableInstallation = this.enableInstallation(plugin);
        } catch (err) {

        }
        preInstallPluginInfo.checkLicenseForPlugin = this.checkLicenseForPlugin(plugin.id);
        preInstallPluginInfo.hasLicenseForPlugin = this.hasLicenseForPlugin(plugin.id);
        preInstallPluginInfo.pluginActivationMode = this.getPluginActivationMode();
        preInstallPluginInfo.showUninstallationBlockedWarning = this.showUninstallationBlockedWarning(plugin);
        return preInstallPluginInfo;
    },

    showUninstallationBlockedWarning: function(plugin) {
        return plugin.active == 'inactive' &amp;&amp; !sn_app_api.AppStoreAPI.canUninstall(plugin.scope, plugin.id);
    },

    checkLicenseForPlugin: function(pluginId) {
        var checkLic = sn_lef.GlideEntitlement.isLicenseCheckRequired(pluginId);
        return checkLic;
    },

    hasLicenseForPlugin: function(pluginId) {
        return sn_lef.GlideEntitlement.checkLicenseForPlugin(pluginId, false);
    },

    hasLicenseForApp: function(pluginID) {
        var hasLic = sn_lef.GlideEntitlement.hasLicenseForApp(pluginID);
        return hasLic;
    },

    getPluginActivationMode: function() {
        var activationMode = sn_lef.GlideEntitlement.getPluginActivationMode();
        return activationMode;
    },

    enableInstallation: function(plugin) {
        return !plugin.block_install &amp;&amp; (plugin.active == 'active' || (plugin.definition.includes('no_activate') ? new global.PluginsData().checkNoActivateTagInPluginDefn(plugin) : true));
    },

    isInstallationAllowed: function() {
        return this.pluginsData.checkPluginInstallationAllowed();
    },

    type: 'PluginPreInstallService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-24 08:58:15&lt;/sys_created_on&gt;
        &lt;sys_id&gt;54f7841697aca5104b593f0e6253af9e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;22&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PluginPreInstallService&lt;/sys_name&gt;
        &lt;sys_package display_value="Scoped App Client" source="sn_appclient"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Scoped App Client"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_54f7841697aca5104b593f0e6253af9e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-20 02:52:52&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:12</sys_created_on>
        <sys_id>4fa6701d83f01210c6695855eeaad36e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PluginPreInstallService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4fa6701d83f01210c6695855eeaad36e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:12</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
