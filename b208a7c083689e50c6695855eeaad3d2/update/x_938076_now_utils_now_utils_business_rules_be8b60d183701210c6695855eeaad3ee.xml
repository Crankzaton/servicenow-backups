<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Build scratchpad &amp; display info messages</name>
        <order>20</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[g_scratchpad._lockAsset = false;
var sf = new SMFilters();
var smConfigUtil = new sn_sm.SMConfiguration();
if(GlidePluginManager().isActive("com.snc.work_management")){
   smConfigUtil = new SMConfigUtil();
}
var p_disp = SMConstants.TASK_PENDING_DISPATCH;

g_scratchpad.qualification_property = smConfigUtil.isEnabled(current, "qualification", false);
g_scratchpad.managed_docs = smConfigUtil.isEnabled(current, "managed_docs", false);
g_scratchpad.time_card = smConfigUtil.isEnabled(current, "time_card", false);
g_scratchpad.parts = smConfigUtil.isEnabled(current, "part_requirement", false);
g_scratchpad.task_activities = smConfigUtil.isEnabled(current, "task_activities", false);
g_scratchpad.dispatchqueueOn = smConfigUtil.isEnabled(current, 'dispatch_queue', false);
g_scratchpad.schedule_required = smConfigUtil.isEnabled(current, "use_schedule", false);
g_scratchpad.track_travel = smConfigUtil.isEnabled(current, "track_travel", false);
g_scratchpad.enableSF = smConfigUtil.isEnabled(current, "use_sf", true);
g_scratchpad.assignment_filter = "";
g_scratchpad.dispatch_filter = "";
g_scratchpad.notify = GlidePluginManager.isRegistered('com.snc.notifynow');
g_scratchpad.original_assignee = current.assigned_to;
g_scratchpad.fsm_contractors_draft_state = false;

// populate scratchpad value for onsite configuration
if(GlidePluginManager.isActive("com.snc.work_management")){
 var fsmOnsiteUtil = new global.FSMOnsiteUtil();  
 g_scratchpad.enableOnsite = fsmOnsiteUtil.isOnsiteEnabled('wm_task');
}

var sc = new sn_sm.SMConfiguration();
g_scratchpad.vendor_group_type = sc.getGroupType(current, "vendor");

if (current.dispatch_group.nil()) {
    g_scratchpad.dispatch_filter = sf.filterGroups(current.sys_class_name, current.location, 'dispatch');
}
if(current.sys_class_name == "wm_task"){
 var wf = new WMFilters();
 var dispatchQueueEnabled = wf.getFieldServiceConfiguration('dispatch_queue', true);
 if((dispatchQueueEnabled == 1 && current.dispatch_group != '') || (dispatchQueueEnabled == 0)){
  var PREFERRED_INTERNAL = "internal";
  var PREFERRED_EXTERNAL = "external";
  var preferredGroup = wf.getPreferredAssignmentGroup(current);
  var qualifiedGroups="";
  var helper;
  var fallbackAssignmentGroups ="";
  var assignmentGroups = wf.filterGroupsBasedOnConfiguration(current,preferredGroup);
  if (preferredGroup == "external") { 
   helper = (new sn_fsm_contractor.FSMContractorHelper());
   qualifiedGroups = helper.getQualifyingVendorGroups(current,assignmentGroups);
   if (qualifiedGroups.indexOf('sys_idIN') == 0 && qualifiedGroups.length > 8) {
    g_scratchpad.assignment_filter = qualifiedGroups;
                if(current.state == "1")
                    g_scratchpad.fsm_contractors_draft_state = true;
   } else {
    fallbackAssignmentGroups = wf.filterGroupsBasedOnConfiguration(current,PREFERRED_INTERNAL);
    g_scratchpad.assignment_filter = fallbackAssignmentGroups;
   }
  }
  else{
   if(assignmentGroups.indexOf('sys_idIN') == 0 && assignmentGroups.length > 8){ //If internal groups are found
    g_scratchpad.assignment_filter = assignmentGroups;
   }
   else{
    //If no internal found, go to fallback
    if ((GlidePluginManager.isActive('com.snc.fsm_contractor_management'))) { //FALLBACK TO EXTERNAL IF VENDOR PLUGIN IS ACTIVE
     helper = (new sn_fsm_contractor.FSMContractorHelper());
     fallbackAssignmentGroups = wf.filterGroupsBasedOnConfiguration(current, PREFERRED_EXTERNAL);
     qualifiedGroups = helper.getQualifyingVendorGroups(current,fallbackAssignmentGroups);
     g_scratchpad.assignment_filter = qualifiedGroups;
                    if(current.state == "1")
                        g_scratchpad.fsm_contractors_draft_state = true;
    }
   }
  }

  if(g_scratchpad.assignment_filter.indexOf("sys_idIN") == -1 && g_scratchpad.assignment_filter.length <= 8){
   g_scratchpad.assignment_filter = "sys_idIN";
  }
 }
}
else
   g_scratchpad.assignment_filter = sf.filterWorkGroupBasedOnDispatchGroup(current.dispatch_group, current.getTableName(), true, current.location);
if ((smConfigUtil).isEnabled(current, "use_sf", "false") && (smConfigUtil.getDispatchMethod(current) == 'auto') && (current.assigned_to.nil()) && (current.state == p_disp) && (!current.assignment_group.nil() || !current.dispatch_group.nil()))
 if (GlidePluginManager.isActive('com.snc.fsm_task_bundle') && !current.bundle.nil())
  g_scratchpad.auto_assignment_msg = gs.getMessage('Sub tasks on a bundle cannot be auto-dispatched.');
 else
  g_scratchpad.auto_assignment_msg = gs.getMessage('Auto-dispatch failed. Change the information and save the form to run auto-dispatch again');

var dueDate = new GlideDateTime(current.parent.requested_due_by);
if (!dueDate.nil() && dueDate.getNumericValue() > 0) {
    var expectedStart = new GlideDateTime(current.expected_start);
    var estimatedDuration = new GlideDateTime(current.estimated_work_duration);

    if (expectedStart.getNumericValue() + estimatedDuration.getNumericValue() > dueDate.getNumericValue())
        g_scratchpad.requested_due_date_msg = gs.getMessage('The task will be completed after the requested due by date');
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:34</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>be8b60d183701210c6695855eeaad3ee</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Build scratchpad &amp; display info messages</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_be8b60d183701210c6695855eeaad3ee</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:34</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=be8b60d183701210c6695855eeaad3ee"/>
</record_update>
