<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate screen conditions</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var isInsert = current.operation() == 'insert';

 // check for duplicate record first in the sys_ux_screen table for inserts
 if (isInsert) {
  var screenGR = GlideRecord('sys_ux_screen');
  screenGR.addQuery('screen_condition', current.screen_condition);
  screenGR.addQuery('screen_type',current.screen_type);
  screenGR.addQuery('app_config', current.app_config);
  screenGR.addQuery('macroponent', current.macroponent);
  screenGR.addQuery('order', current.order);
  screenGR.addQuery('active', current.active);
  screenGR.addQuery('sys_domain', current.sys_domain);
  screenGR.query();
  if (screenGR.hasNext()){
   gs.addErrorMessage(gs.getMessage("Duplicate Record Found"));
   current.setAbortAction(true);
   return;
  }
 }

 if (current.parent_macroponent == current.macroponent) {
  gs.addErrorMessage(gs.getMessage("A screen cannot be a child of the same macroponent that is used as it's page definition."));
  current.setAbortAction(true);
  return;
 }

 if (!current.screen_condition)
  return;
 var encodedQuery = current.screen_condition;
 var conditions = encodedQuery.split(/\^OR|\^/);
 var alphaNumRegex = /^[0-9a-zA-Z_.-]+$/;
 for(i=0; i<conditions.length; i++){
  pair = conditions[i].split(/!=|=|STARTSWITH/);
  if (!pair[0].match(alphaNumRegex) || !pair[1].match(alphaNumRegex)){
   gs.addErrorMessage(gs.getMessage("Invalid syntax in screen condition: {0}",conditions[i]));
   current.setAbortAction(true);
   return;
  }
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f24be45183701210c6695855eeaad309</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate screen conditions</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_f24be45183701210c6695855eeaad309</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:29</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=f24be45183701210c6695855eeaad309"/>
</record_update>
