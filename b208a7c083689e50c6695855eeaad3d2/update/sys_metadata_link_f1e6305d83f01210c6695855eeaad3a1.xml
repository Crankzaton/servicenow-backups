<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6979bb5553615110456dddeeff7b1221</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_cmdb_ws.MapBase&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Standard utility methods and string constants are provided by this base class, which is utilized by Nodemap API service classes.&lt;/description&gt;
        &lt;name&gt;MapBase&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MapBase = Class.create();
MapBase.prototype = {

    initialize: function() {},

	ID: 'id',
	PARENT: 'sourceId',
	CHILD: 'targetId',
	PORT: 'port',
	CHILDREN: 'children',
	TYPE: 'type',
	REL_TYPE: '_label',
	EDGES: 'edges',
	RELATIONS: 'relations',
	REFERENCES: 'references',
	SYS_CLASS_NAME: 'sys_class_name',
	NEXT_CIS: 'nextCis',
	IDS: 'ids',
	SYS_IDS: 'sysIds',
	REL_TYPE_IDS: 'relTypeIds',
	IN_OP: 'IN',
	NOTIN_OP: 'NOT IN',
	COUNT: 'COUNT',
	LABEL: 'label',
	REF_CI_VISITED: 'refCiVisited',
	RELATED_LIST_EXCLUDED_ITEMS_USR_PREF_KEY: 'sn.cmdb.ws.node.map.user.excluded.rel.items',
	RELATED_LIST_SORT_ORDER_USR_PREF_KEY: 'sn.cmdb.ws.node.map.user.sort.order.rel.items',
	RELATED_LIST_USR_PREF_KEY: 'sn.cmdb.ws.node.map.user.excluded.rel.items',
	COMMA_DELIMITER: ',',
	CMDB_CI_ENDPOINT: 'cmdb_ci_endpoint',
	VIR_CONNECTION: "Endpoint Connection",
	CI_NODE_INFO: 'ciNodeInfo',
	NODE_INFO: 'nodeInfo',
	CURR_NODE_INFO: 'currNodeInfo',
	CURR_EDGE_COUNT: 'currentEdgeCount',
	CURR_EDGE_LIMIT: 'currEdgeLimit',
	REF_EDGE_COUNT: 'refEdgeCount',
	VALID_SYS_IDS: 'validSysIds',
	REF_CIS: 'refCis',
	EXCLUDE_REL_IDS: 'excludedRelIds',
	BACKTRACK_MAP: 'backtrackMap',
	ORPHAN_EPS: 'orphanEPs',
	TABLE_NAME: 'tableName',
	EP: 'ep',
	IS_ENDPOINT: 'isEndpoint',
	IS_GROUP: 'isGroup',
	CI_COL_META_DATA: 'ciColMetadata',
	IS_VIR_CONN: 'isVirtualConnection',
	ENDPOINTS: 'endpoints',
	TABLENAME: 'tableName',
	TABLELABEL: 'tableLabel',
	REFFIELD: 'referenceField',
	SORT_DESC: 'desc',
	SUCCESS: 'success',
	ERROR: 'error',
	RESULT: 'result',
	CI_LIST: 'ciList',
	SORT_DIR: 'sortDir',
	SORT_FIELD: 'sortField',
	START_INDEX: 'startIndex',
	END_INDEX: 'endIndex',
	LBL_LAYER: gs.getMessage('Layer'),
	LAYOUT: 'layout',
	LAYERS: 'layers',
	CI_PROFILE_INFO: 'ciProfileInfo',
	ALL_NODES: 'allNodes',
	CREATED: "Created",

	COL_SYS_ID: 'sys_id',
	COL_CI_CLASS: 'ci_class',
	COL_REF_CI_CLASS: 'referenced_ci_class',
	COL_REF_FIELD: 'reference_field',
	COL_SHOW_REVERESE: 'show_reverse',
	COL_CMDB_CLASS_NAME: 'cmdb_class_name',
	COL_ATTRIBUTES: "attributes",
	COL_FOLLOW_HIERARCHY: "follow_hierarchy",
	COL_NAME: 'name',
	COL_LOCATION: 'location',
	COL_OWNED_BY: 'owned_by',
	COL_SYS_UPDATED_ON: 'sys_updated_on',
	COL_DISCOVERY_SOURCE: 'discovery_source',
	COL_LAST_DISCOVERED: 'last_discovered',
	COL_TABLE: 'table',
	COL_CONDITIONS: 'conditions',
	COL_FIELDS: 'fields',
	COL_ORDER: 'order',
	COL_LAYER: 'layer',
	COL_CLASS: 'class',
	COL_INCLUDE_CHILD:'include_child',
	COL_PARENT: 'parent',
	COL_CHILD: 'child',
	COL_CMDB_CI_CLASS: 'cmdb_ci_class',
	COL_ORIENTATION: 'orientation',
	COL_LAYERS: 'layers',
	COL_TITLE_FIELD: 'title_field',
	COL_NUMBER_FIELD: 'number_field',
	COL_FOOTER_FIELD: 'footer_field',
	COL_SORT_FIELDS:  'sort_fields',
	COL_ACTIVE: 'active',
	COL_SYS_CREATED_ON: 'sys_created_on',
	COL_DATE_FIELD: 'date_field',
	COL_END_DATE_FIELD: 'end_date_field',
	COL_TIMELINE_ICON: 'icon',
	COL_TIMELINE_HIGHLIGHT_FIELD: 'highlight_field',
	TIMELINE_LEGEND_CATEGORY: 'timeline_legend_category',
	MAX_NODE_PROP: 'sn_cmdb_ws.node.map.max.edge.count',

	DEF_MAX_NODE_VAL: '250',
	DEF_MAX_LEVEL: 25,

	REL_TYPE_EXCLUSION: {
		"85d98503ff100200d699ffffffffff8c" : "Applicative Flow To::Applicative Flow From"
	},

	PROPERTIES: 'properties',
	CONNECTIONS: 'connections',
	APP_SVC_COUNT: 'applicationServicesCount',
	SYSID: 'sysId',
	IS_REF: 'isReference',
	RELATED_ITEM_CATEGORY_SYS_ID: 'relatedItemCategorySysId',
	CMDB_CLASS_ICON: 'sn_cmdb_ws_class_icon',
	CMDB_CLASS_ICON_MAPPING: 'sn_cmdb_ws_class_icon_mapping',
	CI_TYPE: 'ci_type',
	ICON_NAME: 'icon_name',
	ICON: 'icon',
	IMAGE: 'image',
	DEFAULT_ICON: 'configuration-item-outline',
	FIXED_LAYER: 'fixedLayer',
	VALID_GROUP_LABELS: ['inclusion','cluster'],
	CITY: "city",
	ICON_NAME_COLUMN: "icon_name",
    TABLE_NAME_COLUMN: "table_name",
	NODE_MAP_TABLE: {
		"NODE_MAP_CI_REF": "sn_cmdb_ws_node_map_reference",
		"CI_EXTENDED_PROPS": "sn_cmdb_ws_node_map_table_attributes",
		"RELATED_ITEM": "sn_cmdb_ws_node_map_related_item",
		"CMN_LOCATION": "cmn_location",
		"SYS_USER": "sys_user",
		"CMDB_REL_TYPE": "cmdb_rel_type",
		"CMDB_REL_CI": "cmdb_rel_ci",
		"CMDB_CI": "cmdb_ci",
		"CMDB_LAYER": "cmdb_layer",
		"NODE_MAP_CI_PROFILE": "sn_cmdb_ws_node_map_profiles",
	},

	arrayUtil: new global.ArrayUtil(),
	proxyExecutor: new CMDBWSProxyScriptExecutor(sn_cmdb, 'CMDBWSScriptUtil'),
	glideDigest: new GlideDigest(),

	
	/**
	  * A little hack to make multiple class prototype inheritance 
	  *
	  */
	inherit: function(classes) {
		var pThis = this;
		classes.forEach(function(_class) {

			var refService = Object.clone(_class['prototype']);  
			for (var property in refService) {
				if (property != 'initialize' &amp;&amp; property != 'type') {
					pThis[property] = refService[property];
				}
			}
		});
		
	},

	_splitIntoArray: function(str, delimit) {
		if (global.JSUtil.nil(str) &amp;&amp; global.JSUtil.nil(str.trim()))
			return [];

		if (global.JSUtil.nil(delimit))
			delimit = this.COMMA_DELIMITER;

		return str.split(delimit).filter(function (item){
			return (global.JSUtil.notNil(item) &amp;&amp; global.JSUtil.notNil(item.trim()));
		}).map(function(item) {
			return item.trim();
		});
	},

	_hasProperty: function(key, obj){
		return obj.hasOwnProperty(key);
	},

	//verify if the given object contains all the properties - if all found then return true else false
	_hasAllProperty: function(props, obj){
		for(var i = 0; i &lt; props.length; i+= 1) {
			if (!obj.hasOwnProperty(props[i]))
				return false;
		}
		return true;
	},

	//return number if input is a valid number else return 0
	_sanitizeNumber: function(value) {
		if (global.JSUtil.notNil(value)) {
			var isAnInt = function (v) {return (v == (v &gt;&gt; 0));}; //bitwise check to test for floating point numbers
			var cType = typeof value;
			if (cType == 'string') {
				if (/^\d+$/.test(value)) {
					value = parseInt(value);
					return isAnInt(value) ? value : 0;
				} else {
					return 0;
				}
			} else if (cType == 'number' &amp;&amp; isAnInt(value)) {
				return value;
			}
		}
		return 0;
	},

	_isEmptyObj: function(input) {
		if (global.JSUtil.nil(input))
			return true;
		if ((typeof input == 'object') &amp;&amp; Object.keys(input).length == 0)
			return true;
		return false;
	},
	
	_grepHighLightedStyle: function(highlightedStyles, field) {
		var output = {};
		var tmpStyleArr = highlightedStyles.filter(function(style) {
			return (style['field'] === field);
		});
		if (tmpStyleArr.length &gt; 0) {
			output = tmpStyleArr[0];
			global.JSUtil.removeFromMap(output, ['field', 'value']);
		}
		return output;
	},
	
	_extractFieldValues: function(tableName, fields, glideRecord) {
		var output = {};
		var tmpObj = {};
		var fieldName = '';
		var fieldList = this._splitIntoArray(fields, this.COMMA_DELIMITER);
		if (fieldList != null &amp;&amp; fieldList.length == 0)
			return output;

		var highlightedStyles = [];
		var _tmphighlightedStyles = this.proxyExecutor.executeStaticFunction('getHighlightedValueStyles', 
                                                                            [tableName, fields, null, glideRecord], '[]');
		if (!global.JSUtil.isEmpty(_tmphighlightedStyles))
			highlightedStyles = JSON.parse(_tmphighlightedStyles);

		for(var i = 0; i &lt; fieldList.length; i += 1){
			fieldName = fieldList[i];

			tmpObj = {};
			tmpObj['field'] = fieldName;
			// dot walk to extended property value
			if(fieldName.indexOf(".") &gt; 0) {
				var fieldArray = fieldName.split('.');
				var element;
				var label = "";
				for (var j = 0; j &lt; fieldArray.length; j++) {
					if (j == 0) {
						element = glideRecord[fieldArray[0]];
					} else {
						element = element[fieldArray[j]];
						label += ".";
					}
					// the element may not exist in some plugin configurations if the column is undefined
					if (!element &amp;&amp; element != "")
						break;

					label += element.getLabel();
				}
				if (element || element == "") {
					// add only to output if it's a valid dotwalk
					tmpObj['label'] = label;
					tmpObj['value'] = element.getDisplayValue() || element.toString() ||  gs.getMessage("None");
					tmpObj['highlightedStyle'] = this._grepHighLightedStyle(highlightedStyles, fieldName);
					output[fieldName] = tmpObj;
				}
			} else {
				// some columns in table attributes may not exist on all plugin configurations
				if (!glideRecord.isValidField(fieldName))
					continue;
				tmpObj['label'] = glideRecord[fieldName].getLabel();
				tmpObj['value'] = glideRecord.getDisplayValue(fieldName) || gs.getMessage("None");
				tmpObj['highlightedStyle'] = this._grepHighLightedStyle(highlightedStyles, fieldName);
				output[fieldName] = tmpObj;
			}
		}
		return output;
	},
	
	_cacheGet: function(key) {
		return this.proxyExecutor.executeStaticFunction('nodeMapCacheGet', key);
	},
	
	_cachePut: function(key, value) {
		this.proxyExecutor.executeStaticFunction('nodeMapCachePut', [key, value]);
	},

	_isEmpty: function(value) {
		return (global.JSUtil.nil(value) || global.JSUtil.nil(value.trim()));
	},

	_getOutputResponse: function(result) {
		var output = {};
		output[this.SUCCESS] = true;
		output[this.RESULT] = result;
		return output;
	},

	_getErrorResponse: function(errorObj) {
		var output = {};
		output[this.SUCCESS] = false;
		output[this.ERROR] = errorObj;
		return output;
	},

	_isArray: function (value) {
		return global.JSUtil.notNil(value) &amp;&amp; Array.isArray(value);
	},

	_isEmptyArray: function (value) {
		return (this._isArray(value) &amp;&amp; value.length == 0);
	},

	_generateMD5Hex: function(value) {
        return this.glideDigest.getMD5Hex(value).toLowerCase();
    },
	
    type: 'MapBase'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-08-25 20:59:36&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6979bb5553615110456dddeeff7b1221&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;121&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MapBase&lt;/sys_name&gt;
        &lt;sys_package display_value="CMDB Workspace" source="sn_cmdb_ws"&gt;c8ab76825371201032b7ddeeff7b1280&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="CMDB Workspace"&gt;c8ab76825371201032b7ddeeff7b1280&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6979bb5553615110456dddeeff7b1221&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-27 19:39:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:13</sys_created_on>
        <sys_id>f1e6305d83f01210c6695855eeaad3a1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MapBase</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f1e6305d83f01210c6695855eeaad3a1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
