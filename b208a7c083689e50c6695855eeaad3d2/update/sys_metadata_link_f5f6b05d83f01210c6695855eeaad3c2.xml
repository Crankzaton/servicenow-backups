<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6f29f4395ba320103738af151581c7fd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CustomMapTokenUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CustomMapTokenUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CustomMapTokenUtil = Class.create();
CustomMapTokenUtil.prototype = {
    initialize: function() {
    },

    type: 'CustomMapTokenUtil',
	getTokenHandler: function(process, request, response) {
		function isValidParam(param) {
			return !gs.nil(param) &amp;&amp; !gs.nil(param[0]);
		}

		function getCustomMapScreen(documentId) {
			var screenGR = new GlideRecord("sys_sg_screen");
			if (!screenGR.isValid())
				return null;
			screenGR.get(documentId);
			return screenGR;
		}

		function getCustomMapProvider(providerId) {
			var customMapProviderGR = new GlideRecord("sys_sg_custom_map_provider");
			if (!customMapProviderGR.isValid())
				return null;
			customMapProviderGR.get(providerId);
			return customMapProviderGR;
		}

		function getMappedInCredentials(customMapProviderGR) {
			var creds = {};

			if (gs.nil(customMapProviderGR))
				return creds;

			creds['clientId'] = customMapProviderGR.getValue("map_provider_app_id");
			var clientSecret = customMapProviderGR.getElement("map_provider_app_secret");
			creds['clientSecret'] = gs.nil(clientSecret) ? null : clientSecret.getDecryptedValue();
			return creds;
		}

		function isScreenAssociatedWithProvider(screenGR, providerId) {
			if(screenGR.getValue("sys_class_name") === "sys_sg_parameter_screen") {
				var customMapConfigAttribute = new GlideRecord("sys_sg_input_attribute");
				customMapConfigAttribute.addQuery("name", "CustomMapConfigId");
				customMapConfigAttribute.query();
			
				var sections = [];
				
				while(customMapConfigAttribute.next()) {
					if (customMapConfigAttribute.input.parameter_screen.getValue() === screenGR.getUniqueValue())
						return true;
					else
						sections.push(customMapConfigAttribute.input.parameter_section.getValue());
				}
				
				if(sections.length === 0)
					return false;
				
				var parameterSection = new GlideRecord("sys_sg_parameter_section_m2m");
				parameterSection.addQuery("parameter_screen", screenGR.getUniqueValue());
				parameterSection.addQuery("parameter_section", "IN", sections.join(","));
				parameterSection.setLimit(1);
				parameterSection.query();
				
				return parameterSection.next();					   
			} else if(screenGR.getValue("sys_class_name") === "sys_sg_custom_map_screen") {
				var customMapScreenGR = new GlideRecordUtil().getGR(screenGR.sys_class_name, screenGR.sys_id);
				var defaultProviderId = customMapScreenGR.getValue("default_provider");
				var providerList = customMapScreenGR.getValue("providers");
				return providerId.equals(defaultProviderId) ||
					(!gs.nil(providerList) &amp;&amp; providerList.toString().includes(providerId));
			}
			return false;
		}

		function callMappedInService(externalId, creds, response) {
			var mappedInUrl = "https://api-gateway.mappedin.com/exports/legacy/1/bundle?venue=" + externalId + "&amp;version=1.0.0";
			var httpRequest = new sn_ws.RESTMessageV2();
			httpRequest.setEndpoint(mappedInUrl);
			httpRequest.setHttpMethod('GET');
			httpRequest.setBasicAuth(creds['clientId'], creds['clientSecret']);
			var httpResponse = httpRequest.execute();
			response.setStatus(httpResponse.getStatusCode());
			if (httpResponse.getStatusCode().toString() !== '200')
				response.setError(new sn_ws_err.BadRequestError('Api call to Mappedin failed. Error : ' + httpResponse.getErrorMessage()));
			else
				response.setBody(JSON.parse(httpResponse.getBody()));
		}

		var queryParams = request.queryParams;
		if (gs.nil(queryParams) || !isValidParam(queryParams.externalId) || !isValidParam(queryParams.documentId) || !isValidParam(queryParams.providerId)) {
			response.setStatus(400);
			response.setError(new sn_ws_err.BadRequestError('Missing required parameter(s) externalId, documentId or providerId'));
			return;
		}

		var documentId = queryParams.documentId[0];
		var providerId = queryParams.providerId[0];
		var externalId = queryParams.externalId[0];

		var customMapScreenGR = getCustomMapScreen(documentId);
		if (!customMapScreenGR.isValidRecord()) {
			response.setStatus(400);
			response.setError(new sn_ws_err.BadRequestError("Can't find custom map screen with documentId :" + documentId));
			return;
		}

		if (!isScreenAssociatedWithProvider(customMapScreenGR, providerId)) {
			response.setStatus(400);
			response.setError(new sn_ws_err.BadRequestError("Invalid documentId :" + documentId + " providerId : " + providerId + " combination"));
			return;
		}

		var customMapProviderGR = getCustomMapProvider(providerId);
		if (!customMapProviderGR.isValidRecord()) {
			response.setStatus(400);
			response.setError(new sn_ws_err.BadRequestError("Can't find custom map screen provider with providerId: " + providerId));
			return;
		}

		var creds = getMappedInCredentials(customMapProviderGR);
		if (gs.nil(creds.clientId) || gs.nil(creds.clientSecret)) {		
			response.setStatus(400);
			response.setError(new sn_ws_err.BadRequestError('Mappedin credentials are not set'));
			return;
		}

		callMappedInService(externalId, creds, response);
	},
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-04-16 17:47:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6f29f4395ba320103738af151581c7fd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CustomMapTokenUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile Custom Map" source="com.glide.sg.custom_map"&gt;2244b8a83c31311068bcf327dfe37fbd&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6f29f4395ba320103738af151581c7fd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-21 21:04:56&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:28</sys_created_on>
        <sys_id>f5f6b05d83f01210c6695855eeaad3c2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CustomMapTokenUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f5f6b05d83f01210c6695855eeaad3c2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
