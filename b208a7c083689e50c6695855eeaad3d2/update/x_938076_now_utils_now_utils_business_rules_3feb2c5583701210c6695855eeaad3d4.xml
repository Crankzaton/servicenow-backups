<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.isActionAborted() != true &amp;&amp; current.type == "Column" &amp;&amp; current.encryption_type.toString().endsWith("dynamic")</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Indexed Column Encryption</name>
        <order>250</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) { 
 var tableName = current.table;
 var fieldName = current.column;
 
 var gr = new GlideRecord(tableName);
 var ge = gr.getElement(fieldName);
 if (ge === undefined || (ge + '' == 'null')) {
  // allow config to be deactivated even when field doesn't exist
  if (current.operation() == 'update' && !current.active)
   return;
  
  gs.addErrorMessage(gs.getMessage('Field does not exist: ') + fieldName);
  current.setAbortAction(true);
  return;
 }
 
 var ed = ge.getED();
 if (gs.nil(ed)) {
  gs.addErrorMessage(gs.getMessage('Failed to get ED for field name ') + fieldName);
  current.setAbortAction(true);
  return;
 }
 
 // abort if column is part of a database index
 var baseTable = ed.getTableName();
 var dbIndex = new GlideRecord('v_db_index');
 dbIndex.addQuery('table_name', baseTable);
 dbIndex.addQuery('column_names', 'CONTAINS', fieldName);
 dbIndex.query();
 if(dbIndex.next()) {
  if ((new RegExp("(;|\\[)" + fieldName + "(;|\\])")).test(dbIndex.column_names)) {
   gs.addErrorMessage(gs.getMessage('Standard encryption cannot be used in an field that has an index'));
   current.setAbortAction(true);
   return;
  }
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:17</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>3feb2c5583701210c6695855eeaad3d4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Indexed Column Encryption</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_3feb2c5583701210c6695855eeaad3d4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:17</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=3feb2c5583701210c6695855eeaad3d4"/>
</record_update>
