<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0149c9930a0a0b300041ce2777564999</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;false&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;collection&gt;global&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Role Delegation Functions&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority/&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[/**
 Service-now.com

 Description: Functions called by role delegation Record Producers and Workflows
**/ 

function getDelegatableRoles(group) {
   answer = "";

   if (gs.hasRole("admin")) {  // admin can grant any grantable role in any group
      var role = new GlideRecord("sys_user_role");
      role.addQuery("grantable", true);
      role.addQuery("can_delegate", true);
      role.query();
      var i = 0;
      while (role.next()) {
         if (i &gt; 0)
            answer += ",";
         answer += role.sys_id;
         i++;
      }
   } else {  // non-admin role delegator can delegate roles they have
      var roles = new GlideRecord("sys_user_has_role");
      roles.addQuery("user", gs.getUserID());
      roles.addQuery("role.can_delegate", true);
      roles.addQuery("role.grantable", true);
      roles.query();
      var i = 0;
      while (roles.next()) {
         if (i &gt; 0)
            answer += ",";
         answer += roles.role;
         i++;
      }
   }
   return answer;
}

function getMyRoleDelegationGroups() {
  // admin can delegate to all groups
  if (gs.hasRole("admin"))
    return "";

  // find groups where user has the role_delegator role in that group
  var hasRoles = new GlideRecord("sys_user_has_role");
  hasRoles.addQuery("user", gs.getUserID());
  hasRoles.addQuery("role.name", "role_delegator");
  hasRoles.query();
  var al = new Packages.java.util.ArrayList();
  while (hasRoles.next()) {
    if (!al.contains(hasRoles.sys_id))
      al.add(hasRoles.granted_by.sys_id);
  }

  var answer = "sys_idIN";
  for (var i = 0; i &lt; al.size(); i++) {
    if (i &gt; 0)
      answer += ",";
    answer += al.get(i);
  }
  return answer;
}

function getRoleDelegatorOptions() {
  if (current.variables.role_delegator_group == "")
    return '';

  var userIDs = [];
  var userGR = new GlideRecord('sys_user_grmember');
  userGR.addQuery("group", current.variables.role_delegator_group);
  userGR.query();
  while (userGR.next())
    userIDs.push(userGR.user.toString());
  
  return 'sys_idIN' + userIDs.join(',');
}

function getRoleDelegatorGroupOptions() {
  if (current.variables.role_delegator_user == "")
    return '';

  var groupIDs = [];
  var userGR = new GlideRecord('sys_user_grmember');
  userGR.addQuery("user", current.variables.role_delegator_user);
  userGR.query();
  while (userGR.next())
    groupIDs.push(userGR.group.toString());
  
  return 'sys_idIN' + groupIDs.join(',');
}

function getUsersForRoleDelegation() {
  if (current.variables.delegate_roles_group == "")
    return '';

  var userIDs = [];
  var userGR = new GlideRecord('sys_user_grmember');
  userGR.addQuery("group", current.variables.delegate_roles_group);
  if (!gs.hasRole("admin"))
    userGR.addQuery("user", "!=", gs.getUserID());
  userGR.query();
  while (userGR.next())
    userIDs.push(userGR.user.toString());
  
  return 'sys_idIN' + userIDs.join(',');
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;james.capaldo&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2010-02-24 18:44:43&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;0149c9930a0a0b300041ce2777564999&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;30&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Role Delegation Functions&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Role Delegation" source="com.snc.role_delegation"&gt;a167bca83cb1311068bcf327dfe37f43&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_0149c9930a0a0b300041ce2777564999&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-04-29 00:54:52&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;after&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=0149c9930a0a0b300041ce2777564999"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:55:43</sys_created_on>
        <sys_id>932d681d83701210c6695855eeaad338</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Role Delegation Functions</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_932d681d83701210c6695855eeaad338</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:55:43</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
