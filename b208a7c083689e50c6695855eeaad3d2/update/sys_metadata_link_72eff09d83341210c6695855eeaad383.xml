<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a9d43b1f77cd011066cfa9ff9a5a99dd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_table_bldr_wzd.ExcelSpreadsheetColumns&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ExcelSpreadsheetColumns&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExcelSpreadsheetColumns = Class.create();
ExcelSpreadsheetColumns.prototype = {
    initialize: function(queryParams) {
        this.headerRow = this._getHeaderRow(queryParams.headerRow);
        this.attachmentSysId = this._getAttachmentSysId(queryParams.attachmentSysId);
        this.sheetNumber = this._getSheetNumber(queryParams.sheetNumber);
    },

    build: function() {
        var attachmentStream = new GlideSysAttachment().getContentStream(this.attachmentSysId);

        var parser = new sn_impex.GlideExcelParser();
        parser.setHeaderRowNumber(this.headerRow);
        parser.setSheetNumber(this.sheetNumber);
        if (!parser.parse(attachmentStream)) {
            throw gs.getMessage("Attachment could not be parsed as an Excel Spreadsheet '{0}'", this.attachmentSysId);
        }

        var columns = {};
        var tableInfo = parser.getTableInfo();
        for (var name in tableInfo) {
            columns[name] = {
                label: name,
                internal_type: tableInfo[name].getType(),
                max_length: Math.max(tableInfo[name].getLength(), TBWConstants.MIN_COLUMN_LENGTH)
            };
        }

        return {
            columns: columns
        };
    },

    _getAttachmentSysId: function(sysId) {
        if (!sysId) {
            throw gs.getMessage("Attachment SysID is required ");
        }

        var res = Validators.isValidAttachment(sysId);
        if (!res.isValid) {
			throw TBWUtil.error(res);
        }

        return sysId;
    },

    _getHeaderRow: function(headerRowParam) {
        // Note: GlideExcelParser expects a zero-based header row number.
        var row = headerRowParam ? (+headerRowParam[0] - 1) : 0;
        if (isNaN(row) || typeof row !== "number") {
            throw gs.getMessage("Header row invalid '{0}'", headerRowParam);
        }

        return row;
    },

    _getSheetNumber: function(sheetNumberParam) {
        // Note: GlideExcelParser expects a zero-based sheetNumber
        var sheetNumber = sheetNumberParam ? (+sheetNumberParam[0] - 1) : 0;
        if (isNaN(sheetNumber) || typeof sheetNumber !== "number") {
            throw gs.getMessage("Sheet Number invalid '{0}'", sheetNumberParam);
        }

        return sheetNumber;
    },

    type: 'ExcelSpreadsheetColumns'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-01-20 08:56:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a9d43b1f77cd011066cfa9ff9a5a99dd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExcelSpreadsheetColumns&lt;/sys_name&gt;
        &lt;sys_package display_value="AES Table Builder Wizard" source="sn_table_bldr_wzd"&gt;5fc95d0df025bde7fac20ba52d0ecc05&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="AES Table Builder Wizard"&gt;5fc95d0df025bde7fac20ba52d0ecc05&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a9d43b1f77cd011066cfa9ff9a5a99dd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-24 13:21:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:36</sys_created_on>
        <sys_id>72eff09d83341210c6695855eeaad383</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExcelSpreadsheetColumns</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_72eff09d83341210c6695855eeaad383</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
