<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4dcf17db53562010c440ddeeff7b12e3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAAISearchEventMetricCollector&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Collects the search event metrics of AI search. The collected metrics will be sent to Glide Signals API and sys_ci_analytics table for VA analytics&lt;/description&gt;
        &lt;name&gt;VAAISearchEventMetricCollector&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAAISearchEventMetricCollector = Class.create();

VAAISearchEventMetricCollector.GENIUS_RESULT_TYPE = global.AISearchConstants.RESULT_TYPE_GENIUS;
VAAISearchEventMetricCollector.REGULAR_RESULT_TYPE = global.AISearchConstants.RESULT_TYPE_SEARCH;

VAAISearchEventMetricCollector.prototype = Object.extendsObject(global.VAAISearchMetricCollector, {
	
	vaVars: null,
	glideSignalsEvent: null,
	
	initialize: function(searchMetadata, vaSystem, vaInputs, vaVars) {
		this.vaVars = vaVars;
		vaVars.time = global.VAClickMetrics.getCurrentTime();
		VAAISearchMetricCollector.prototype.initialize.call(this, searchMetadata, vaSystem, vaInputs, vaVars);
		
		// if the click-metrics feature is disabled, don't proceed
		if (!this.isOperationAllowed())
			return;

		// For Click Metrics 
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_NAME, VAClickMetricsConstants.VALUE_SEARCH_TRIGGERED);
		
		// response time including overheads. 
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_RESPONSE_TIME, searchMetadata.execution_time+''); 
		this.setClickMetricsValue(VAClickMetricsConstants.KEY_SEARCH_TERM, this.getQueryTerm(vaInputs));
	},
	
	/**
	* This method will be called after the searchResultMetadata is set.
	*/
	postSearchResultMetadata: function(searchResultMetadata) {
		
		var language = this._getLanguage(this.vaVars, searchResultMetadata);
		
		// language
		this.setParamBagForGlideSignalsEvent(global.AISearchConstants.QUERY_LANGUAGE, language);

		// analytics payload
		this.setParamBagForGlideSignalsEvent(
			global.AISearchConstants.SEARCH_ANALYTICS_PAYLOAD, this._getSearchAnalyticsPayload(searchResultMetadata));

		// intents for click metrics
		this.setClickMetricsValue(global.VAClickMetricsConstants.KEY_LANGUAGE, language);
		this.setClickMetricsValue(global.VAClickMetricsConstants.KEY_INTENT, this._getIntentForClickMetrics(searchResultMetadata));

		this.glideSignalsEvent 
			= new AISearchGlideSignalsSearchEvent(
				this.getSearchResultMetadata(), this.getParamBagForGlideSignalsEvent());

	},
	
	// Returns the search analytics payload from the search metadata 
	_getSearchAnalyticsPayload: function(searchResultMetadata) {
		return gs.nil(searchResultMetadata.searchAnalyticsPayload) ? {} : searchResultMetadata.searchAnalyticsPayload;
	},

	_getLanguage: function(vaVars, searchResultMetadata) {
		
		if(gs.nil(searchResultMetadata)) 
			return vaVars.language;
		
		var lang = searchResultMetadata[global.AISearchConstants.QUERY_LANGUAGE];
		return gs.nil(lang) ? vaVars.language : lang;
	},
	
	/**
	*  Returns the intents from the payload. Intents can be a comma-separated string.
	*/
	_getIntentForClickMetrics: function(searchResultMetadata) {
		
		var arr = [];
		
		// matched query intents for regular search
		var intents = searchResultMetadata[global.AISearchConstants.MATCHED_QEURY_INTENTS];
		
		if(!gs.nil(intents))
			arr.push(intents);
		
		// matched query intents for genius search.
		intents = searchResultMetadata[global.AISearchConstants.MATCHED_GENIUS_RESULT_INTENTS];
		if(!gs.nil(intents))
			arr.push(intents);
		
		return arr.join(',');
	},
	
	/**
	* Collect required search result metrics
	*/
	collect: function(resultType, searchResults) {
		
		if (!this.isOperationAllowed())
			return;

		if (gs.nil(this.glideSignalsEvent)) {
			this.glideSignalsEvent 
				= new AISearchGlideSignalsSearchEvent(
					this.getSearchResultMetadata(), this.getParamBagForGlideSignalsEvent());
		}

		this.glideSignalsEvent.buildPayload(resultType, searchResults);
	},
	
	getGlideSignalsPayload: function() {
		
		if (gs.nil(this.glideSignalsEvent))
			return {};
		return this.glideSignalsEvent.getPayload();
	},
	
	getGlideSignalsEventType : function() {
		return global.AISearchConstants.EVENT_TYPE_SEARCH_EVENT;
	},
	
	type: 'VAAISearchEventMetricCollector'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-18 18:21:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4dcf17db53562010c440ddeeff7b12e3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;238&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAAISearchEventMetricCollector&lt;/sys_name&gt;
        &lt;sys_package display_value="Virtual Agent Platform Topic Blocks" source="com.glide.cs.topic_blocks"&gt;289d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4dcf17db53562010c440ddeeff7b12e3&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-12-07 06:30:35&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:54</sys_created_on>
        <sys_id>2296f8d983f01210c6695855eeaad3e1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAAISearchEventMetricCollector</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2296f8d983f01210c6695855eeaad3e1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
