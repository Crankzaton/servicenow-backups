<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>014115813720200003c78c00dfbe5dff</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MIDPackage&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Represents a MID server DistPackage.&lt;/description&gt;
        &lt;name&gt;MIDPackage&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MIDPackage = Class.create();

MIDPackage.BUILDSTAMP_REGEX = /(\d{2})-(\d{2})-(\d{4})_(\d{4})$/;

MIDPackage._DOT = '.';
MIDPackage._FILENAME_SUFFIX = '.zip';
MIDPackage._MSI_SUFFIX = '.msi';
MIDPackage._RPM_SUFFIX = '.rpm';
MIDPackage._DEB_SUFFIX = '.deb';
MIDPackage._DASH = '-';
MIDPackage._UNDERSCORE = '_';
MIDPackage._EMPTY_STRING = '';

/**
 * Converts a 'modern' buildstamp (YYYY-MM-DD-hhmm) to the legacy format (MM-DD-YYYY_hhmm).
 * @param string modernBuildstamp
 * @return string
 * @throws IllegalArgumentException If the specified modern buildstamp is invalid.
 */
MIDPackage.createLegacyBuildstamp = function(modernBuildstamp) {
    var matches = MIDPackage.BUILDSTAMP_REGEX.exec(modernBuildstamp);
    if (matches === null)
        throw new IllegalArgumentException('Invalid modern buildstamp `' + modernBuildstamp + '`.');
    
    var legacyBuildstamp = MIDPackage._EMPTY_STRING + matches[1]
    + MIDPackage._DASH + matches[2]
    + MIDPackage._DASH + matches[3]
    + MIDPackage._UNDERSCORE + matches[4];
    return legacyBuildstamp;
};

MIDPackage.prototype = {
  initialize: function(name, buildstamp, operatingSystem, architecture) {
    this._name = name;
    this._buildstamp = buildstamp;
    this._operatingSystem = operatingSystem;
    this._architecture = architecture;

    this._suffix = MIDPackage._FILENAME_SUFFIX;
    if (this._name === "mid-windows-installer")
        this._suffix = MIDPackage._MSI_SUFFIX;
    else if (this._name === "mid-linux-rpm-installer") {
        this._name = "mid-linux-installer";
        this._suffix = MIDPackage._RPM_SUFFIX;
    } else if (this._name === "mid-linux-deb-installer") {
        this._name = "mid-linux-installer";
        this._suffix = MIDPackage._DEB_SUFFIX;
    }
  },

  getName: function() {
    return this._name;
  },

  getBuildStamp: function() {
    return this._buildstamp;
  },

  getOperatingSystem: function() {
    return this._operatingSystem;
  },

  getOperatingSystemName: function() {
    switch(this._operatingSystem) {
      case 'windows':
        return 'Windows';
      case 'linux':
        return 'Linux';
      case 'osx':
        return 'OSX';
    }

    return this._operatingSystem;
  },

  getArchitecture: function() {
    return this._architecture;
  },

  getArchitectureName: function() {
    return this._architecture;
  },

  getFilename: function() {
    var filename = this._name;
    if (JSUtil.notNil(this._buildstamp)) // handle headless build filenames
        filename += MIDPackage._DOT + this._buildstamp;
      
    filename += MIDPackage._DOT + this._operatingSystem
    + MIDPackage._DOT + this._architecture + this._suffix;

    return filename;
  },

  // Gets pre-geneva file name for backward compatibility, converting the buildstamp
  // from 'branchname_MM-DD-YYYY_hhmm' to 'YYYY-MM-DD-hhmm'
  getLegacyFilename: function() {
    var matches = MIDPackage.BUILDSTAMP_REGEX.exec(this._buildstamp);
    if (matches === null)
        throw new IllegalArgumentException('Invalid buildstamp `' + this._buildstamp + '`.');
    
    var legacyBuildstamp = matches[3]
      + MIDPackage._DASH + matches[1]
      + MIDPackage._DASH + matches[2]
      + MIDPackage._DASH + matches[4];
    var filename = this._name
      + MIDPackage._DOT + legacyBuildstamp
      + MIDPackage._DOT + this._operatingSystem
      + MIDPackage._DOT + this._architecture
      + MIDPackage._FILENAME_SUFFIX;
    return filename;
  },

  type: 'MIDPackage'
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2012-03-01 21:33:40&lt;/sys_created_on&gt;
        &lt;sys_id&gt;014115813720200003c78c00dfbe5dff&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MIDPackage&lt;/sys_name&gt;
        &lt;sys_package display_value="MID Server" source="com.glideapp.agent"&gt;a6877ce83cb1311068bcf327dfe37f69&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_014115813720200003c78c00dfbe5dff&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;nagesh.santhapuri&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-08-26 08:31:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:55</sys_created_on>
        <sys_id>bc30b85583b01210c6695855eeaad3cf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MIDPackage</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bc30b85583b01210c6695855eeaad3cf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
