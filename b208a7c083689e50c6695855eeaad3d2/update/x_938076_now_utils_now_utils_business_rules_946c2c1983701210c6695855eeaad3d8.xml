<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>(current.name == "glide.authenticate.multifactor.browser.fingerprint.validity") || (current.name == "glide.authenticate.multifactor.remembered.browser.max.count")</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate MFA Browser FP Cookie Life Span</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var propValue = current.value;
 var propName = current.name;
 var prevValue = previous.value;
 
 this.fingerprintValidityDefaultVal = 8;
 this.fingerprintValidityMinVal = 1;
 this.fingerprintValidityMaxVal = 24;

 this.maxRememberedBrowserDefaultVal = 5;
 this.maxRememberedBrowserMinVal = 1;
 this.maxRememberedBrowserMaxVal = 10;
 
 if(propName == "glide.authenticate.multifactor.browser.fingerprint.validity"){
  propValue = validateMFABrowserCookieSpanInHours(propValue, prevValue);
  if(prevValue != propValue){
   //update auto flush job definition
   updateAutoFlushRecord(propValue*60*60);
  }
 } else if(propName == "glide.authenticate.multifactor.remembered.browser.max.count")
  propValue = validateMFAMaxRememberedBrowsers(propValue, prevValue);

 current.value = String(parseInt(propValue));
})(current, previous);

function validateMFABrowserCookieSpanInHours(fpValidityInHours, prevValue){
 if (fpValidityInHours == '' || isNaN(fpValidityInHours)) {
  if(!isNaN(prevValue)){
   gs.addInfoMessage(gs.getMessage("Invalid value of browser fingerprint validity; retained existing value: {0} hours", prevValue));
   return prevValue;
  }
  gs.addInfoMessage(gs.getMessage("Invalid value of browser fingerprint validity; replaced with default value: {0} hours", this.fingerprintValidityDefaultVal));
  return this.fingerprintValidityDefaultVal;
 } else if (fpValidityInHours < this.fingerprintValidityMinVal) {
  gs.addInfoMessage(gs.getMessage("Browser fingerprint validity cannot be less than {0} hour; replaced with minimum allowed value: {0} hour", this.fingerprintValidityMinVal));
  return this.fingerprintValidityMinVal;
 } else if (fpValidityInHours > this.fingerprintValidityMaxVal) {
  gs.addInfoMessage(gs.getMessage("Browser fingerprint validity cannot be more than {0} hours; replaced with maximum allowed value: {0} hours", this.fingerprintValidityMaxVal));
  return this.fingerprintValidityMaxVal;
 }
 return fpValidityInHours;
}

function validateMFAMaxRememberedBrowsers(value, prevValue){
 if (value == '' || isNaN(value)) {
  if(!isNaN(prevValue)){
   gs.addInfoMessage(gs.getMessage("Invalid value of maximum number of remembered browsers per user; replaced with existing value: {0}", prevValue));
   return prevValue;
  }
  gs.addInfoMessage(gs.getMessage("Invalid value of maximum number of remembered browsers per user; replaced with default value: {0}", this.maxRememberedBrowserDefaultVal));
  return this.maxRememberedBrowserDefaultVal;
 } else if (value < this.maxRememberedBrowserMinVal) {
  gs.addInfoMessage(gs.getMessage("At least {0} browser per user must be allowed to remember; replaced with minimum allowed value: {0}", this.maxRememberedBrowserMinVal));
  return this.maxRememberedBrowserMinVal;
 } else if (value > this.maxRememberedBrowserMaxVal) {
  gs.addInfoMessage(gs.getMessage("More than {0} browsers per user cannot be remembered; replaced with maximum allowed value: {0}", this.maxRememberedBrowserMaxVal));
  return this.maxRememberedBrowserMaxVal;
 }
 return value;
}

function updateAutoFlushRecord(ageInSeconds){
 var gr = new GlideRecord("sys_auto_flush");
 if(gr.isValid()){
  gr.get("fa213ae073033300fdbd04fbc4f6a77e");
  gr.query();
  if(gr.next()){
   gr.age=ageInSeconds;
   gr.update();
   gs.log('Updated MFA browser fingerprint table auto flush job age to : '+ ageInSeconds + " seconds.");
  }
 }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:13</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>946c2c1983701210c6695855eeaad3d8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate MFA Browser FP Cookie Life Span</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_946c2c1983701210c6695855eeaad3d8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:13</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=946c2c1983701210c6695855eeaad3d8"/>
</record_update>
