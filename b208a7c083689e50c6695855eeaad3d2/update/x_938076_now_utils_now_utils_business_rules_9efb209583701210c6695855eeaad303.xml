<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.name=='glide.authenticate.multifactor' &amp;&amp; gs.getProperty('glide.authenticate.auth.policy.enabled') == 'true'  &amp;&amp; current.value.changesTo(false)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>RestrictDisablingMFAProp</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var policyId = fetchDefaultPolicyReferencedInMFAContextRecord();

    //check if the policy is active
    if (isAuthPolicyRecordActive(policyId)) {
        gs.addErrorMessage(gs.getMessage("Restricting deactivation of Multi-Factor Authentication property as Adaptive Authentication Policy referenced in MFA Context is Active and may enforce MFA during User Login"));
        current.setAbortAction(true);
        return;
    }

    function isAuthPolicyRecordActive(policyId) {
        var glideRecord = new GlideRecord("sys_authentication_policy");
        glideRecord.addActiveQuery();
        glideRecord.addQuery("sys_id", policyId);
        glideRecord.query();
        if (glideRecord.next())
            return true;
        return false;
    }

    // get the default policy ref from the MFA context
    function fetchDefaultPolicyReferencedInMFAContextRecord() {
        var glideRecord = new GlideRecord("sys_mfa_policy_context");
        glideRecord.get('c4895d9373512010616ca9843cf6a79f');
        if (glideRecord.isValidRecord()) {
            var defaultPolicy = glideRecord.getValue("default_policy");
            return glideRecord.getValue(defaultPolicy);
        }
        return null;
    }


})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:28</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9efb209583701210c6695855eeaad303</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RestrictDisablingMFAProp</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9efb209583701210c6695855eeaad303</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:28</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9efb209583701210c6695855eeaad303"/>
</record_update>
