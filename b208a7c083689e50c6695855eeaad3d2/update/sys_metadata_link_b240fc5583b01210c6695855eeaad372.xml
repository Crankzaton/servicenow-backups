<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>05bf438a872233001bf5bd6ec7cb0b65</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ConnectionAndCredentialHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Client callable utility functions for generating Connections and Credentials&lt;/description&gt;
        &lt;name&gt;ConnectionAndCredentialHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConnectionAndCredentialHelper = Class.create();
ConnectionAndCredentialHelper.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    createConnectionAndCredential: function() {
        if (!this._isAuthorized()) {
            gs.logWarning("Failed to create connection and credential records. Access denied.");
            return;
        }
		
		var formSubmitData = this.getParameter("sysparm_formData");
        var aliasSysID = this.getParameter("sysparm_aliasSysID");
        var ccBuilder = new sn_cc.ConnectionBuilder();
        ccBuilder.setCheckACL(false);
        var ccResponse = ccBuilder.createCCWithDynamicInputs(aliasSysID, formSubmitData);
        
        return this._createJSONResponse(ccResponse.getStatus(),ccResponse.getID(),ccResponse.getMessage());
    },
	
	_isAuthorized: function() {
		var allowedRoles = ['admin', 'connection_admin'];
        if (gs.hasRole(allowedRoles))
            return true;
		return false;
	},
	
    getOAuthEntityProfileFromConnection: function() {
		if (!this._isAuthorized()) {
            gs.error("Failed to read OAuth entity profile. Access denied.");
            return;
        }
		var connectionSysId = this.getParameter("sysparm_connection_sys_id");
		var connectionGR = new GlideRecord('sys_connection');
		connectionGR.addQuery("sys_id",connectionSysId);
		connectionGR.setWorkflow(false);
		connectionGR.query();
		if (connectionGR.next()) {
			var credentialSysId = connectionGR.getValue('credential');
			var credentialGR = new GlideRecord('oauth_2_0_credentials');
			credentialGR.addQuery("sys_id",credentialSysId);
			credentialGR.setWorkflow(false);
			credentialGR.query();
			if (credentialGR.next()) {
				var oauth_entity_profile_id = credentialGR.getValue('oauth_entity_profile');
				var grant_type = this._getGrantTypeFromOAuthEntityProfile(oauth_entity_profile_id);
				if ((oauth_entity_profile_id != null) &amp;&amp; (grant_type != null)) {
					var result = this.newItem("result");
					result.setAttribute("oauth_entity_profile_id", oauth_entity_profile_id);
					result.setAttribute("grant_type", grant_type);
					result.setAttribute("oauth_credentials_sys_id", credentialSysId);
				} else {
					gs.error("Invalid oauth_entity_profile:" + oauth_entity_profile_id + " or grant_type:" + grant_type);
				}
			}
		} else {
			gs.error('No connection record found for sys_id:' + connectionSysId);
		}
		return null;
	},

    _getGrantTypeFromOAuthEntityProfile: function(oauthProfileId) {
		var oauthProfileGR = new GlideRecord('oauth_entity_profile');
		oauthProfileGR.addQuery("sys_id",oauthProfileId);
		oauthProfileGR.setWorkflow(false);
		oauthProfileGR.query();
		if (oauthProfileGR.next()) {
			return oauthProfileGR.getValue('grant_type');
		} else {
			gs.error('No OAuth Entity Profile record found for sys_id:' + oauthProfileId);
			return null;
		}
	},
	
	_createErrorResponse: function(errorMessage){
		return {status:"FAIL",sysId:null, message:errorMessage};
	},
	
	_createSuccessResponse: function(sys_Id){
		return {status:"SUCCESS",sysId:sys_Id, message:""};
	},
	
	_createJSONResponse: function(rStatus,sys_Id,eMessage){
		return new JSON().encode({status:rStatus,sysId:sys_Id, message:eMessage});
	},

    type: 'ConnectionAndCredentialHelper'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-07-11 17:48:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;05bf438a872233001bf5bd6ec7cb0b65&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConnectionAndCredentialHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Centralized Connection and Credential" source="com.snc.core.automation.connection_credential"&gt;b0a7f42c3cb1311068bcf327dfe37fb9&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_05bf438a872233001bf5bd6ec7cb0b65&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-09-30 19:47:54&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:19</sys_created_on>
        <sys_id>b240fc5583b01210c6695855eeaad372</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConnectionAndCredentialHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b240fc5583b01210c6695855eeaad372</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
