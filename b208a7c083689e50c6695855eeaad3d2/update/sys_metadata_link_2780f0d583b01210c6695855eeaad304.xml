<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>12bcd3e40f826010b25fea12ff767eb8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ISCReportUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;This script include will be used to adjust report filtering for ISC export metrics.&lt;/description&gt;
        &lt;name&gt;ISCReportUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ISCReportUtil = Class.create();
ISCReportUtil.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    constants: new ISCConstants(),
    /**
     * This function will filter the export metrics by the date specified and classification
     * @return {string} - comma separated sys_id values of records from isc_export_event
     */
    getUserExportTrends: function() {
        var userId = gs.getUserID();

        // Fetch user export setting
        var exportSetting = this._getUserExportSetting(userId);

        // Build query
        if (exportSetting) {
            // Get date and classification settings
            var date = exportSetting.date;
            var classifications = exportSetting.classification_metric.toString().split(",");

            // Build encoded query
            var query = '';

            // If there are no classifications selected, show all data without classifications
            if (classifications != null &amp;&amp; classifications[0] === '') {
                query = 'classificationISEMPTY';
            } else {
                for (var i = 0; i &lt; classifications.length; i++) {
                    classifications[i] = 'classificationLIKE' + classifications[i];
                }
                query = classifications.join('^OR');
            }

            // Add date
            query += '^sys_created_on&gt;=' + gs.daysAgoStart(date);

            // Fetch all records under this date and classification setting to display on report
            return this._getExportRecords(query);
        } else {
            return '';
        }
    },
    /**
     * This function will filter the export metrics for all exports by the date specified
     * @return {string} - comma separated sys_id values of records from isc_export_event
     */
    getAllExportTrends: function() {
        var userId = gs.getUserID();

        // Fetch user export setting
        var exportSetting = this._getUserExportSetting(userId);

        if (exportSetting) {
            // Fetch user date setting
            var date = exportSetting.date;

            // Build encoded query
            var query = 'sys_created_on&gt;=' + gs.daysAgoStart(date);

            // Fetch all records under this date setting to display on report
            return this._getExportRecords(query);
        } else {
            return '';
        }
    },
    /**
     * This function will fetch the export setting record for the user
     * @param {string} userId - sys_id of current user
     * @return {GlideRecord} - the user export setting GlideRecord
     */
    _getUserExportSetting: function(userId) {
        var userExpSettingGr = new GlideRecordSecure(this.constants.tables.ISC_EXP_SETTING);
        userExpSettingGr.addQuery('user', userId);
        userExpSettingGr.query();

        return userExpSettingGr.next() ? userExpSettingGr : '';
    },
    /**
     * This function will fetch the export records from the export events table
     * @param {string} encodedQuery - encoded query for export table
     */
    _getExportRecords: function(encodedQuery) {
        var records = [];
        var exportGr = new GlideRecordSecure(this.constants.tables.ISC_EXPORT);
        exportGr.addEncodedQuery(encodedQuery);
        exportGr.query();
        while (exportGr.next()) {
            records.push(exportGr.sys_id.toString());
        }

        return records;
    },
    type: 'ISCReportUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-28 18:47:39&lt;/sys_created_on&gt;
        &lt;sys_id&gt;12bcd3e40f826010b25fea12ff767eb8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;23&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ISCReportUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Instance Security Center" source="com.glide.instance_sec_center"&gt;387a706c3cf1311068bcf327dfe37f96&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_12bcd3e40f826010b25fea12ff767eb8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-30 23:52:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:28</sys_created_on>
        <sys_id>2780f0d583b01210c6695855eeaad304</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ISCReportUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2780f0d583b01210c6695855eeaad304</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:28</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
