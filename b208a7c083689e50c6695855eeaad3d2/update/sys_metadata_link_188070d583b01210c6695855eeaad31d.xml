<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>101243fbffa36110468365d7d3b8fe70</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UserHasSubscriptionInMemoryCache&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UserHasSubscriptionInMemoryCache&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UserHasSubscriptionInMemoryCache = Class.create();
UserHasSubscriptionInMemoryCache.prototype = {
    /**
     * Create an in-memory cache of the data in user_has_subscription
     */
    initialize: function() {
        this._membershipInMemoryCache = this._constructInMemoryCache();
    },

    /**
     * Retrieve the subscription ids assigned to the user
     *
     * @param userId The sys_user.sys_id to retrieve subscription ids for
     * @returns {string[]} An array of subscription_entitlement.sys_id values
     */
    getSubscriptionIdsByUserId: function(userId) {
        return this._membershipInMemoryCache.getValsById(userId) || [];
    },

    /**
     * Setup the in-memory cache to hold the appropriate data
     *
     * @returns {sn_entitlement.MembershipInMemoryCache} A configured in-memory cache object
     * @private
     */
    _constructInMemoryCache: function() {
        const licenseCount = this._getLicenseCount();
        const keyName = 'user';
        const valName = 'subscription';
        const gr = new GlideRecord('user_has_subscription');
        this._addUnexpiredSubscriptionQueryCondition(gr, 'subscription');
        gr.addQuery('subscription.subscription_type', 0); // per-user
        gr.addActiveQuery();
        gr.query();
        return new sn_entitlement.MembershipInMemoryCache(gr, keyName, valName, licenseCount);
    },

    /**
     * Retrieves the number of active subscriptions
     * 
     * @returns {number} A value 0 or greater indicating the number of active per-user subscriptions
     */
    _getLicenseCount: function() {
        const ga = new GlideAggregate('subscription_entitlement');
        this._addUnexpiredSubscriptionQueryCondition(ga);
        ga.addQuery('subscription_type', 0); // per user
        ga.addAggregate('COUNT');
        ga.query();
        ga.next();
        return parseInt(ga.getAggregate('COUNT'));
    },

    /**
     * Adds query conditions for the license_details record to filter out
     * licenses that are not active
     *
     * @param {GlideRecord} gr The GlideRecord object to add the conditions to
     * @param {string} prefix Optional value to prefix the column names by (e.g. for dot walking)
     * @returns {array} An array of license_details.sys_id values the group is subscribed to
     */
    _addUnexpiredSubscriptionQueryCondition: function(gr, prefix = '') {
        prefix = prefix &amp;&amp; prefix.length &gt; 0 ?
            prefix + '.' :
            '';

        const now = new GlideDate().getValue();

        gr.addQuery(`${prefix}status`, 0); // Active
        gr.addQuery(`${prefix}start_date`, '&lt;=', now);
        gr.addQuery(`${prefix}end_date`, '&gt;=', now);
    },

    type: 'UserHasSubscriptionInMemoryCache'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-06-27 17:37:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;101243fbffa36110468365d7d3b8fe70&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UserHasSubscriptionInMemoryCache&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_101243fbffa36110468365d7d3b8fe70&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-08 02:08:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:15</sys_created_on>
        <sys_id>188070d583b01210c6695855eeaad31d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UserHasSubscriptionInMemoryCache</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_188070d583b01210c6695855eeaad31d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
