<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>gs.getProperty("com.snc.incident.incident_task.closure") == "true" &amp;&amp; (!GlidePluginManager.isActive('com.sn_ot_inc_mgmt') || new TableUtils('sn_ot_incident').getAllExtensions().indexOf(current.getTableName()) &lt; 0)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Cascade closure of Incident Tasks</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous) {

 var incidentSysId = current.sys_id;
 var incDisplayValue = current.getDisplayValue();
 var incTaskGrDefault = new GlideRecord("incident_task");
 incTaskGrDefault.newRecord();
 var taskStateUtil = new TaskStateUtil(incTaskGrDefault);
 var INACTIVE_STATES = taskStateUtil.getInactiveStates() || taskStateUtil.SYSTEM_INACTIVE_STATES;
 var incTaskGr = new GlideRecord("incident_task");
 incTaskGr.addActiveQuery();
 incTaskGr.addQuery("incident", incidentSysId);
 incTaskGr.addQuery("state", "NOT IN", INACTIVE_STATES);
 incTaskGr.query();
 if(current.state == IncidentState.CLOSED)
  closeOpenIncidentTasks();
 else if(current.state == IncidentState.CANCELED)
  cancelOpenIncidentTasks();

 function closeOpenIncidentTasks() {
  var CLOSED_INCOMPLETE_STATE = 4;
  while(incTaskGr.next()) {
   incTaskGr.work_notes = gs.getMessage("Incident Task is Closed Incomplete based on closure of {0}.", incDisplayValue);
   incTaskGr.setValue("state", CLOSED_INCOMPLETE_STATE);
   incTaskGr.update();
  }
 }

 function cancelOpenIncidentTasks() {
  var CLOSED_SKIPPED_STATE = 7;
  while(incTaskGr.next()) {
   incTaskGr.work_notes = gs.getMessage("Incident Task is Closed Skipped based on cancelation of {0}.", incDisplayValue);
   incTaskGr.setValue("state", CLOSED_SKIPPED_STATE);
   incTaskGr.update();
  }
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:10</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>27aba01583701210c6695855eeaad31c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Cascade closure of Incident Tasks</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_27aba01583701210c6695855eeaad31c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:10</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=27aba01583701210c6695855eeaad31c"/>
</record_update>
