<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>069b28d183701210c6695855eeaad329</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules"&gt;
    &lt;x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection/&gt;
        &lt;condition&gt;(current.source_table != '' &amp;amp;&amp;amp; new TableUtils(current.source_table).getAbsoluteBase() != 'task') &amp;amp;&amp;amp; current.state.changes()&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Approval Events (Non-Task)&lt;/name&gt;
        &lt;order&gt;1001&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[var isFD = isFlowDesigner(current);
sendEventsNonTask();

function getApproverUserName(approver) {
 var username = approver.getDisplayValue();
 if (!GlideDomainSupport.isDataSeparationEnabled()) 
  return username;
 if (GlideStringUtil.notNil(username))
  return username;
 return sn_fd.FlowAPI.getApproverUsername(approver.sys_id);
}

function isFlowDesigner(me) {
   if (!me.wf_activity.nil())
      return false;
   if (!me.group.nil() &amp;&amp; (me.group.wait_for == "process_flow"))
      return true;

   var listenerGr = new GlideRecord('sys_flow_listener');
   listenerGr.addQuery('listening_to', me.document_id);
   listenerGr.addQuery('source_table', me.source_table);
   listenerGr.addQuery('name', 'Ask For Approval');
   listenerGr.addQuery('state', 'WAITING');
   listenerGr.query();
   return listenerGr.hasNext();
}

function getComment(isFlowDesigner, username, comment) {
 if (isFlowDesigner) {
  var myComment = "{0} " + comment;
  return gs.getMessage(myComment, username);
 }
 return username + " " + comment;
}

function getEventPrefix(sourceTable) {
 if (sourceTable!=null &amp;&amp; sourceTable.startsWith('kb_template')) {
  return "kb_knowledge";
 }
 return sourceTable;
}

function sendEventsNonTask() {
   if (!current.state.changes()) 
      return;

   var event = getEventPrefix(current.source_table);
   var approvalComment = "";
   switch (current.state + "") {    
      case 'cancelled':
         event += ".approval.cancelled";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         break;
      case 'requested':
         event += ".approval.inserted";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         approvalComment = getComment(isFD, getApproverUserName(current.approver), "requested to approve task");
         updateRecord(current, approvalComment);
  break;
      case 'rejected':
         event += ".approval.rejected";
         gs.eventQueue(event, current, current.state, previous.state);
         var isAuto = ((current.operation() == 'insert') &amp;&amp; isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "rejected the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         notifyMyFriends(current);
         break;
      case 'approved':
         var isAuto = ((current.operation() == 'insert') &amp;&amp; isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "approved the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         break;
      default: 
   }
         
 }

function notifyMyFriends(me) {
   var friends = new GlideRecord('sysapproval_approver');
   friends.addQuery('document_id', me.document_id);
   friends.query();
   while(friends.next()) {
      if (friends.approver.toString() != me.approver.toString()) {
         gs.eventQueue(me.source_table + ".approval.rej.other", me, friends.approver);
      }
   }
}

function updateRecord(me, journal, comments) {
   var isWorkflow = false;
   var isProcessGuide = false;
   if (isFD) {
      if (gs.getProperty("com.glide.hub.flow.approval.history_comment", "true") != "true")
         return;
   }
   else {
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      var isWorkflow = !current.wf_activity.nil();
      // if this is for a group approval, don't log this user action since the Group Approval Activity will handle the logging
      if (!current.group.nil())
         return;
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      isWorkflow = !current.wf_activity.nil();
      if (isWorkflow &amp;&amp; (gs.getProperty("glide.workflow.user_approval_history") != "true"))
         return;
      isProcessGuide = !current.process_step.nil();

   }

 if (comments)
  journal += "\n\n" + gs.getMessage("Approval comments") + ":\n" + comments;
 
 var approvingRecord = new GlideRecord(me.source_table);
 if (approvingRecord.get(me.document_id)) {
  if (isWorkflow || isProcessGuide)
   approvingRecord.setUseEngines(false);
  
  if (!me.approval_journal_column.nil()) {
   if (typeof approvingRecord[me.approval_journal_column].setJournalEntry === 'function') {
    approvingRecord[me.approval_journal_column].setJournalEntry(journal);
    approvingRecord.update();
    return;
   }
  }
  
  if (typeof approvingRecord.approval_history.setJournalEntry === 'function') {
   approvingRecord.approval_history.setJournalEntry(journal);
   approvingRecord.update();
   return;
  }
 }
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;x_938076_now_utils_now_utils_business_rules&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-09-21 07:48:48&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;069b28d183701210c6695855eeaad329&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Approval Events (Non-Task)&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Now Utils" source="x_938076_now_utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Now Utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;x_938076_now_utils_now_utils_business_rules_069b28d183701210c6695855eeaad329&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-09-21 07:48:48&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/x_938076_now_utils_now_utils_business_rules&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=069b28d183701210c6695855eeaad329"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:55:59</sys_created_on>
        <sys_id>9b3dac1d83701210c6695855eeaad313</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Approval Events (Non-Task)</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9b3dac1d83701210c6695855eeaad313</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:55:59</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
