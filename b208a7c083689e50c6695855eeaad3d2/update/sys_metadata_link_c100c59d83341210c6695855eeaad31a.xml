<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>afd2b689b75620108223e126de11a994</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.ConfigKeyDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ConfigKeyDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConfigKeyDAO = Class.create();

ConfigKeyDAO.prototype = {
    initialize: function() {
        this.glideRecord = new GlideRecord('sys_sg_mobile_builder_config');
        this.familyVersionMap = {
            'vancouver': 24,
            'utah': 23,
            'tokyo': 22,
        };
    },

    getFamilyVersionNumber: function() {
        var sessionService = new sn_mab_api.SessionService();
        var familyVersion = sessionService
            .getFamilyVersion();

        return this.familyVersionMap[familyVersion];
    },

    evaluateCompatibility: function(familyVersion, gr) {
        var evaluator = new GlideScopedEvaluator();
        evaluator.putVariable('FAMILY_VERSION', familyVersion);

        return evaluator.evaluateScript(gr, 'compatible', null);
    },
    /**
     *
     * @param configKeys {[]}
     * @return {null|*|{TreeConfigurationNode}}
     */
    getTreeConfigByConfigKeys: function(configKeys) {
        var gr = this.glideRecord;
        gr.addQuery('config_key', 'IN', configKeys.join(','));
        gr.orderByDesc('config_key');

        gr.query();

        if (gr.getRowCount() &gt; 1) {
            var familyVersionNumber = this.getFamilyVersionNumber();
            var compatibleRecords = [];
            var emptyCompatibleRecords = [];
            while (gr.next()) {
                var tn = new sn_mab_api.TreeConfigurationNode(gr);
                if (tn.compatible &amp;&amp; this.evaluateCompatibility(familyVersionNumber, gr)) {
                    compatibleRecords.push(tn);
                } else if (!tn.compatible) {
                    emptyCompatibleRecords.push(tn);
                }
            }

            if (compatibleRecords.length &gt; 1) {
                var versionedDuplicateConfigKey = compatibleRecords[0].configKey;
                new sn_mab_api.ErrorHandler().throwBadConfigError(gs.getMessage("{0} contains overlapping versioned mobile builder configs", versionedDuplicateConfigKey));
            }
            if (emptyCompatibleRecords.length &gt; 1) {
                var baseDuplicateConfigKey = emptyCompatibleRecords[0].configKey;
                new sn_mab_api.ErrorHandler().throwBadConfigError(gs.getMessage("{0} contains overlapping base mobile builder configs", baseDuplicateConfigKey));
            }

            if (compatibleRecords.length === 1) {
                return compatibleRecords[0];
            }

            if (emptyCompatibleRecords.length === 1) {
                return emptyCompatibleRecords[0];
            }
        }
        if (gr.next())
            return new sn_mab_api.TreeConfigurationNode(gr);

        return null;
    },

    type: 'ConfigKeyDAO'
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-11 15:18:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;afd2b689b75620108223e126de11a994&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConfigKeyDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_afd2b689b75620108223e126de11a994&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-02-11 15:18:28&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:01</sys_created_on>
        <sys_id>c100c59d83341210c6695855eeaad31a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConfigKeyDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c100c59d83341210c6695855eeaad31a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:01</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
