<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9cd5d0f077902110c918256a5b5a99d0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_appclient.AppManagerHandler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;App Manager utility to handle install/update/activate/repair of apps/plugins&lt;/description&gt;
        &lt;name&gt;AppManagerHandler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AppManagerHandler = Class.create();
AppManagerHandler.prototype = {
    initialize: function() {
        this.appManagerAPI = global.AppManagerAPI;
        this.useQueuedInstall = gs.getProperty("sn_appclient.use_queued_installation") == 'true';
        this.appUpgarder = new AppUpgrader();
    },

    _trackAndBuildResponse: function(inputPayload, response, id, type, mode) {
        var trackerPayload = CommonUtils.parse(response);
        var trackerId = trackerPayload &amp;&amp; trackerPayload.links &amp;&amp; trackerPayload.links.progress &amp;&amp; trackerPayload.links.progress.id;
        if (trackerId)
            trackerPayload.trackerId = trackerId;
        CommonUtils.addProgressTracker(inputPayload, trackerPayload, id, type, mode);
        return trackerPayload;
    },

    _trackAndBuildBatchResponse: function(inputPayload, response, id, type, mode) {
        var trackerPayload = CommonUtils.parse(response);
        var trackerId = trackerPayload &amp;&amp; trackerPayload.links &amp;&amp; trackerPayload.links.progress &amp;&amp; trackerPayload.links.progress.id;
        var batchInstallId = trackerPayload &amp;&amp; trackerPayload.links &amp;&amp; trackerPayload.links.results &amp;&amp; trackerPayload.links.results.id;
        if (trackerId) {
            trackerPayload.batchInfo = {};
            trackerPayload.batchInfo[Constants.EXECUTION_TRACKER_ID] = trackerId;
            trackerPayload.batchInfo[Constants.BATCH_INSTALLATION_ID] = batchInstallId;
        }
        trackerPayload.trackerId = trackerPayload.batchInfo[Constants.EXECUTION_TRACKER_ID];
        CommonUtils.addProgressTracker(inputPayload, trackerPayload, id, type, mode);
        return trackerPayload;
    },
    
    getOptionalApps: function(selectedOptionalApps) {
		var optionals = null;
		if(selectedOptionalApps &amp;&amp; selectedOptionalApps.length &gt; 0 ) {
			optionals = [];
			for(var i = 0; i &lt; selectedOptionalApps.length; i++)
				optionals.push(selectedOptionalApps[i].split(":")[0]);
		}
		return optionals;
	},
    

    installApp: function(params) {
        var queryParams = params.queryParams || {};
        var applicationId, response;
        var isReinstall = queryParams['isReinstall'] || false;
        var jumboConfig = JSON.parse(queryParams['jumbo_config'] || "{}");
        if (!this.useQueuedInstall) {
            applicationId = queryParams.app_id;
            response = this.appUpgarder.installAndUpdateApps(queryParams);
        } else {
            var inputPayload = this._getApplicationParams(params.queryParams);
            var applicationId = inputPayload.appId;
            var version = inputPayload.version;
            var customizationVersion = inputPayload.customizationVersion;
            var loadDemoData = inputPayload.loadDemoData;
            if(Object.keys(jumboConfig).length &gt; 0) {
            	var optionals = this.getOptionalApps(jumboConfig.selectedOptionals);
            	response = isReinstall ? AppManagerAPI.repairApplicationV2(applicationId, version, customizationVersion, loadDemoData, jumboConfig.source, optionals) : 
            	AppManagerAPI.installApplicationV2(applicationId, queryParams[Constants.VERSION], customizationVersion, loadDemoData, jumboConfig.source, optionals);
            } else {
            	response = isReinstall ? AppManagerAPI.repairApplication(applicationId, version, customizationVersion, loadDemoData) :
                AppManagerAPI.installApplication(applicationId, version, customizationVersion, loadDemoData);
			}
        }
        return this._trackAndBuildResponse(queryParams, response, applicationId, Constants.APPLICATION, isReinstall ? Constants.REINSTALL : Constants.INSTALL);
    },

    updateApp: function(params) {
        var queryParams = params.queryParams || {};
        var applicationId, response;
		var jumboConfig = JSON.parse(queryParams['jumbo_config'] || "{}");
        if (!this.useQueuedInstall) {
            applicationId = queryParams.app_id;
            response = this.appUpgarder.installAndUpdateApps(queryParams);
        } else {
            var inputPayload = this._getApplicationParams(params.queryParams);
            var applicationId = inputPayload.appId;
            var version = inputPayload.version;
            var customizationVersion = inputPayload.customizationVersion;
            var loadDemoData = inputPayload.loadDemoData;
            if(Object.keys(jumboConfig).length &gt; 0) {
            	var optionals = this.getOptionalApps(jumboConfig.selectedOptionals);
            	response = AppManagerAPI.updateApplicationV2(applicationId, version, customizationVersion, loadDemoData, jumboConfig.source, optionals);
            } else {
            	response = AppManagerAPI.updateApplication(applicationId, version, customizationVersion, loadDemoData);
            }
        }
        return this._trackAndBuildResponse(queryParams, response, applicationId, Constants.APPLICATION, Constants.UPDATE);
    },

    repairApp: function(params) {
        var queryParams = params.queryParams || {};
        queryParams.isReinstall = true;
        var applicationId, response;
        if (!this.useQueuedInstall) {
            applicationId = queryParams.app_id;
            response = this.appUpgarder.installAndUpdateApps(queryParams);
        } else {
            var inputPayload = this._getApplicationParams(params.queryParams);
            var applicationId = inputPayload.appId;
            var version = inputPayload.version;
            var customizationVersion = inputPayload.customizationVersion;
            var loadDemoData = inputPayload.loadDemoData;
            response = AppManagerAPI.repairApplication(applicationId, version, customizationVersion, loadDemoData);
        }
        return this._trackAndBuildResponse(queryParams, response, applicationId, Constants.APPLICATION, Constants.REPAIR);
    },

    activatePlugin: function(params) {
        var inputPayload = this._getPluginParams(params.queryParams);
        var pluginId = inputPayload.pluginId;
        var customizationVersion = inputPayload.customizationVersion;
        var loadDemoData = inputPayload.loadDemoData;
        var response = AppManagerAPI.activatePlugin(pluginId, customizationVersion, loadDemoData);
        return this._trackAndBuildResponse(inputPayload, response, pluginId, Constants.PLUGIN, Constants.ACTIVATE);
    },

    repairPlugin: function(params) {
        var inputPayload = this._getPluginParams(params.queryParams);
        var pluginId = inputPayload.pluginId;
        var customizationVersion = inputPayload.customizationVersion;
        var loadDemoData = inputPayload.loadDemoData;
        var response = AppManagerAPI.repairPlugin(pluginId, customizationVersion, loadDemoData);
        return this._trackAndBuildResponse(inputPayload, response, pluginId, Constants.PLUGIN, Constants.REPAIR);
    },

    installProduct: function(installationPlan) {
        var productId = installationPlan.product_id;
        var response = {};
        if (!this.useQueuedInstall)
            response = this.appUpgarder.installProductByPlan(installationPlan);
        else
            response = AppManagerAPI.installBatch(JSON.stringify(installationPlan));
        return this._trackAndBuildBatchResponse(installationPlan, response, productId, Constants.PRODUCT, Constants.INSTALL);
    },

    _isBaseOnlyInstall: function(version, installedVersion, customizationVersion, installedCustomizationVersion) {
        return version &amp;&amp; version != installedVersion &amp;&amp; customizationVersion == installedCustomizationVersion;
    },

    _isCustomizedInstall: function(version, installedVersion, customizationVersion, installedCustomizationVersion) {
        return customizationVersion &amp;&amp; version == installedVersion &amp;&amp; customizationVersion != installedCustomizationVersion;
    },

    _getApplicationParams: function(queryParams) {
        var appId = queryParams[Constants.APP_ID] || '';
        var loadDemoData = queryParams[Constants.LOAD_DEMO_DATA] ? CommonUtils.getBooleanParam(queryParams, Constants.LOAD_DEMO_DATA) : false;
        var version = queryParams[Constants.VERSION] || '';
        var customizationVersion = queryParams[Constants.CUSTOMIZATION_VERSION] || '';
        if (Constants.NONE == customizationVersion.toLowerCase())
            customizationVersion = '';
        var installedVersion = CommonUtils.getInstalledVersion(appId);
        var installedCustomizationVersion = CommonUtils.getInstalledCustomizationVersion(appId) || '';
        var isReinstall = queryParams['isReinstall'] || false;

        if (this._isBaseOnlyInstall(version, installedVersion, customizationVersion, installedCustomizationVersion))
            customizationVersion = '';
        else if (!isReinstall &amp;&amp; this._isCustomizedInstall(version, installedVersion, customizationVersion, installedCustomizationVersion))
            version = '';

        return {
            appId: appId,
            version: version,
            customizationVersion: customizationVersion,
            loadDemoData: loadDemoData,
        };
    },

    _getPluginParams: function(queryParams) {
        var customizationVersion = queryParams[Constants.CUSTOMIZATION_VERSION] || '';
        if (Constants.NONE == customizationVersion.toLowerCase())
            customizationVersion = '';
        return {
            pluginId: queryParams[Constants.PLUGIN_ID_PARAM] || '',
            customizationVersion: customizationVersion,
            loadDemoData: queryParams[Constants.LOAD_DEMO_DATA] ? CommonUtils.getBooleanParam(queryParams, Constants.LOAD_DEMO_DATA) : false
        };
    },

    type: 'AppManagerHandler'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-07 07:53:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9cd5d0f077902110c918256a5b5a99d0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AppManagerHandler&lt;/sys_name&gt;
        &lt;sys_package display_value="Scoped App Client" source="sn_appclient"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Scoped App Client"&gt;781f36a96fef21005be8883e6b3ee43d&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9cd5d0f077902110c918256a5b5a99d0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-12 11:14:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:11</sys_created_on>
        <sys_id>6eb8b09183341210c6695855eeaad348</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AppManagerHandler</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6eb8b09183341210c6695855eeaad348</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
