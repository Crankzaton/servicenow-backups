<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>786376d4539a01105400ddeeff7b12e0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AISearchGlideSignalsSearchEvent&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Collects SEARCH_EVENT metrics of AI search. The payload will be sent to Glide Signals API &lt;/description&gt;
        &lt;name&gt;AISearchGlideSignalsSearchEvent&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AISearchGlideSignalsSearchEvent = Class.create();

AISearchGlideSignalsSearchEvent.prototype = Object.extendsObject(global.AISearchGlideSignalsEvent, {
	
	initialize: function(searchResultMetadata, paramBag) {
		
		this.payload = {};
		this.searchResultMetadata = searchResultMetadata;
		this.payload = searchResultMetadata[global.AISearchConstants.SEARCH_ANALYTICS_PAYLOAD];
		
		//Need to override userId and sessionId. If not, maint / SYSTEM will be used. 
		if(!gs.nil(this.payload) &amp;&amp; !gs.nil(paramBag)) {
			this.payload[global.AISearchConstants.SESSION_ID] = paramBag[global.AISearchConstants.SESSION_ID];
			this.payload[global.AISearchConstants.USER_ID] = paramBag[global.AISearchConstants.USER_ID];
		}
	},
	
	/**
	* Build the events
	*/
	buildPayload: function(resultType, searchResult) {
		// do nothing. analytics payload contains all.
	},
	
	getEventType : function() {
		return global.AISearchConstants.EVENT_TYPE_SEARCH_EVENT;
	},
	type: 'AISearchGlideSignalsSearchEvent'
});

/**
* Returns the query language from searchResultMetadata
*/
AISearchGlideSignalsSearchEvent.getQueryLanguageFromSearchResultMetadata = function(searchResultMetadata) {
	return searchResultMetadata[global.AISearchConstants.QUERY_LANGUAGE];
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-13 23:46:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;786376d4539a01105400ddeeff7b12e0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;72&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AISearchGlideSignalsSearchEvent&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_786376d4539a01105400ddeeff7b12e0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-04-08 23:54:27&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:00</sys_created_on>
        <sys_id>d117f85d83f01210c6695855eeaad324</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AISearchGlideSignalsSearchEvent</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d117f85d83f01210c6695855eeaad324</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
