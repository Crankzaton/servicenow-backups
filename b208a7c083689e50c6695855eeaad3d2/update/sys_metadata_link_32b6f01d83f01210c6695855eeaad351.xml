<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>5af72e6b83ccd210c6695855eeaad3c0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UIpageUpdate&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UIpageUpdate&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UIpageUpdate = Class.create();
UIpageUpdate.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    assignOtherUser: function() {

        var user = this.getParameter('sysparm_user'); //user
        var tsk = this.getParameter('sysparm_taskid'); //task

        var gt = new GlideRecord('sn_customerservice_case');
        gt.addEncodedQuery('sys_idIN' + tsk);
        gt.query();
        while (gt.next()) {
            gt.assigned_to = user;
            gt.update();
        }
        var updatedTasks = '/sn_customerservice_case_list.do?sysparm_query=sys_idIN' + tsk;
        return updatedTasks;

    },

    assignToMe: function() {

        var tsk = this.getParameter('sysparm_taskid'); //task

        var gt = new GlideRecord('sn_customerservice_case');
        gt.addEncodedQuery('sys_idIN' + tsk);
        gt.query();
        while (gt.next()) {
            gt.assigned_to = gs.getUserID();
            gt.update();
        }
        var updatedTasks = '/sn_customerservice_case_list.do?sysparm_query=sys_idIN' + tsk;
        return updatedTasks;

    },

    limitUsers: function() {
        var finalUsers = []; //Users in Groups of Logged in User
        var uniqArr = new ArrayUtil();

        var myGrps = gs.getUser().getMyGroups().toString().replace(']', "").replace(']', "");

        //Users in Logged in User Groups
        var myGrpUsers = new GlideRecord("sys_user_grmember");
        myGrpUsers.addEncodedQuery('group.sys_idIN' + myGrps);
        myGrpUsers.query();
        while (myGrpUsers.next()) {
            finalUsers.push(myGrpUsers.user + '');
        }
        var uniqUsers = uniqArr.unique(finalUsers);
        //Users in Logged in User Groups

        var myGropUsersQuery = 'sys_idIN' + uniqUsers.toString() + '^sys_id!=javascript:gs.getUserID()';

        return myGropUsersQuery;

        /*
        var myGroups = []; // Groups of Logged in User
        var finalUsers = []; //Users in Groups of Logged in User
        var uniqArr = new ArrayUtil();

        //Logged in user Groups
        var memberGroupGr = new GlideRecord("sys_user_grmember");
        memberGroupGr.addQuery('user', gs.getUserID());
        memberGroupGr.query();
        while (memberGroupGr.next()) {
            myGroups.push(memberGroupGr.group + '');
        }
        var uniqueGrps = uniqArr.unique(myGroups);
        //Logged in user Groups

        //Users in Logged in User Groups
        var myGrpUsers = new GlideRecord("sys_user_grmember");
        myGrpUsers.addEncodedQuery('group.sys_idIN' + uniqueGrps);
        myGrpUsers.query();
        while (myGrpUsers.next()) {
            finalUsers.push(myGrpUsers.user + '');
        }
        var uniqUsers = uniqArr.unique(finalUsers);
        //Users in Logged in User Groups

		var myGropUsersQuery = 'sys_idIN' + uniqUsers.toString() +'^sys_id!=javascript:gs.getUserID()';

        return myGropUsersQuery;
		*/
    },

    evalifAssignedtoMe: function() {
        var flag = false;
        var tsk = this.getParameter('sysparm_taskids'); //task
        gs.info('HEllo12222' + tsk);
        var gt = new GlideRecord('sn_customerservice_case');
        gt.addEncodedQuery('sys_idIN' + tsk);
        gt.query();
        while (gt.next()) {
            if (gt.assigned_to != gs.getUserID()) {
                flag = false;
                break;
            } else {
                flag = true;
            }
        }
        gs.info('flagAnswer' + flag);

        return flag;
    },

    unAssignTasks: function() {
        var tsk = this.getParameter('sysparm_taskid'); //task

        var gt = new GlideRecord('sn_customerservice_case');
        gt.addEncodedQuery('sys_idIN' + tsk);
        gt.query();
        while (gt.next()) {
            gt.assigned_to = '';
            gt.update();
        }
        var updatedTasks = '/sn_customerservice_case_list.do?sysparm_query=sys_idIN' + tsk;
        return updatedTasks;

    },

	evalifUnassigned: function(){
		var flag = false;
        var tsk = this.getParameter('sysparm_taskids'); //task
        gs.info('HEllo12222' + tsk);
        var gt = new GlideRecord('sn_customerservice_case');
        gt.addEncodedQuery('sys_idIN' + tsk);
        gt.query();
        while (gt.next()) {
            if (gt.assigned_to != '') {
                flag = false;
                break;
            } else {
                flag = true;
            }
        }
        gs.info('flagAnswer' + flag);

        return flag;


	},


    type: 'UIpageUpdate'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-08-22 09:52:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;5af72e6b83ccd210c6695855eeaad3c0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UIpageUpdate&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_5af72e6b83ccd210c6695855eeaad3c0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-08-26 08:15:27&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:27</sys_created_on>
        <sys_id>32b6f01d83f01210c6695855eeaad351</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UIpageUpdate</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_32b6f01d83f01210c6695855eeaad351</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:27</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
