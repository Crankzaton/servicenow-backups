<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9e1c9e47ff212110468365d7d3b8fe26</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.UnallocatedEntityCalculation_GroupContextV1&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UnallocatedEntityCalculation_GroupContextV1&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UnallocatedEntityCalculation_GroupContextV1 = Class.create();
UnallocatedEntityCalculation_GroupContextV1.prototype = {

    /**
     * @param {guid} groupId The sys_user_group.sys_id the context represents
     * @param {bool} oobRolesOnly A boolean flag that filters the roles to out-of-box roles when true.
     */
    initialize: function(groupId, oobRolesOnly, subscriptionContext, groupHasRoleCache) {
        this._groupId = groupId;
        this._oobRolesOnly = oobRolesOnly;

        this._subscriptionContext = subscriptionContext;

        this._licenseDetailsDaoV1 = new sn_entitlement.PassThroughCache(new sn_entitlement.LicenseDetailDaoV1());
        this._licenseRoleServiceV1 = new sn_entitlement.LicenseRoleServiceV1(oobRolesOnly);
        this._groupHasRoleCache = groupHasRoleCache;
    },

    /**
     * The key used to identify the sys_user_group.sys_id value
     * 
     * @returns {string} A string to be used as a key
     */
    getEntityKeyName: function() {
        return 'sys_user_group.sys_id';
    },

    /**
     * The ID value for the sys_user_group.sys_id output
     * 
     * @returns {string} A string to be used as the value to identify this record
     */
    getEntityKeyValue: function() {
        return this._groupId;
    },

    /**
     * Retrieves the subscription Ids the group is subscribed to
     *
     * @returns {array} An array of license_details.sys_id values
     */
    getSubscriptionIdsSubscribed: function() {
        return this._licenseDetailsDaoV1.getLicenseIdsByGroupIdAndIsPerUser(this._groupId);
    },

    /**
     * Retrieves all of the metered role IDs assigned to a group.
     * 
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsAssigned: function() {
        return this._groupHasRoleCache.getRoleIdsByGroupId(this._groupId);
    },

    /**
     * Retrieves all of the role IDs subscribed to by a group.
     * 
     * @returns {array} An array of sys_user_role.sys_id values
     */
    getRoleIdsSubscribed: function() {
        const roleIds = this._licenseDetailsDaoV1.getLicenseIdsByGroupIdAndIsPerUser(this._groupId)
            .flatMap(licenseId =&gt; this._licenseRoleServiceV1.getRoleIdsByLicenseIdAndRequiresALicense(licenseId, this._oobRolesOnly));
        return Array.from(new Set(roleIds));
    },

    type: 'UnallocatedEntityCalculation_GroupContextV1'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-17 20:49:21&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9e1c9e47ff212110468365d7d3b8fe26&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UnallocatedEntityCalculation_GroupContextV1&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9e1c9e47ff212110468365d7d3b8fe26&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-25 22:16:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:15</sys_created_on>
        <sys_id>bbb8b09183341210c6695855eeaad3f1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UnallocatedEntityCalculation_GroupContextV1</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bbb8b09183341210c6695855eeaad3f1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
