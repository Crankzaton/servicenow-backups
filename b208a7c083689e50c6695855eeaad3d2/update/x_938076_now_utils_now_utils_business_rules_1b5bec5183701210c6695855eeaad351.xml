<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>true</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Prevent prefix collisions</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
* Prevents creating sys_number records with colliding prefix:
* - Same prefix
* - Prefix ending with a number and same alphanumerical prefix as an existing record
* - We get the alphanumerical prefix by selecting all characters up to the last non-digit one
* - On the same table family, TASK and TASK67 collide, TASK and TASK3b5 don't
*/

function onBefore(current, previous) {
 var tableBase = new TableUtils(current.category).getAbsoluteBase();
 var tableFamily = new TableUtils(tableBase).getAllExtensions();
 tableFamily = tableFamily.toArray().join(',');
 //We trim the last digits
 var stemMatcher = /^(.*\D+)\d*$/i.exec(current.prefix);
 var stem = stemMatcher ? stemMatcher[1] : '';
 var potentialCollisions = getPotentialCollisions(stem, current.sys_id, tableFamily);
 while (potentialCollisions.next()) {
  if (isCollision(stem, potentialCollisions.prefix)) {
   msg = gs.getMessage('The prefix {0} collides with the prefix of an existing record', current.prefix);
   gs.addErrorMessage(msg);
   current.setAbortAction(true);
  } 
 }
 
 //Get potential collisions for the given stem
 //i.e records with prefix that starts with the same stem, other than the current one
 function getPotentialCollisions(stem, sys_id, tableFamily) {
  var numbers = new GlideRecord('sys_number');
  numbers.addQuery('prefix', 'STARTSWITH', stem);
  numbers.addQuery('sys_id', '!=', sys_id);
  numbers.addQuery('category', 'IN', tableFamily);
  numbers.query();
  return numbers;
 }
 
 //returns true if the prefix is a collision for the given stem
 //i.e if it is the stem followed by any number
 function isCollision(stem, prefix) {
  var re = new RegExp("^" + stem + "\\d*$", "i");
  return re.test(prefix);
 }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:48</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1b5bec5183701210c6695855eeaad351</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prevent prefix collisions</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_1b5bec5183701210c6695855eeaad351</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:48</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=1b5bec5183701210c6695855eeaad351"/>
</record_update>
