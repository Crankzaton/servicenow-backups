<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>026db1610b6203008d9ac74363673a85</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PmFinancialBaseline&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Captures Financial related baseline for Project and its cost plans, benefit plans, cost plan breakdowns, benefit plan breakdowns, project funding.&amp;#13;
Uses BaselineAPI.&lt;/description&gt;
        &lt;name&gt;PmFinancialBaseline&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/*
*@author sunil.bn/ServiceNow
*/
var PmFinancialBaseline = Class.create();
PmFinancialBaseline.prototype = Object.extendsObject(PmBaseDecorator, {
    initialize: function() {
    },
	
	createFinancialBaseline: function(baseId){
		try{
			var gr = new GlideRecord(PmTableConstants.BASELINE);
			if(gr.get(baseId)){
				var enabled = gr.getValue('enable_financial_baseline');
				if(enabled){
					var extraFieldsMap =  {
						planned_task_baseline: baseId
					};
					var metaInfo = {
						name: gr.getValue('name'),
						baselineConfig: 'e273c7270bd203008d9ac74363673aee',//hardcoded config 
						primarySysId: gr.getValue('top_task'),
						considerChildren: true,
						postAction: null,
						extraFieldMaps: extraFieldsMap
					};
					var baselineAPI = new BaselineAPI();
					baselineAPI.startBaselineJob(metaInfo);	
				}
			}
		}catch(e){
			gs.debug("PmFinancialBaseline: Error occured in occured in creating the job");
			gs.debug(JSON.stringify(e));
		}
	},
	
	createBaselineForPlan: function(params){
		//create baseline header
		var baseline = new GlideRecord(PmTableConstants.BASELINE);
		baseline.name = params.name;
		baseline.top_task = params.task;
		baseline.enable_financial_baseline = params.enable_financial_baseline;
		baseline.enable_task_baseline = params.enable_task_baseline;
		baseline.description = params.description;
		baseline.plan = params.plan;
		baseline.system = params.system;
		var baseId = baseline.insert();
		
		//build config required for baseline
		var metaInfo = {
			name: params.name,
			baselineConfig: 'e273c7270bd203008d9ac74363673aee',//hardcoded demand baseline config 
			primarySysId: params.task,
			considerChildren: true,
			postAction: null,
			extraFieldMaps: { planned_task_baseline : baseId }
		};
		
		//Call SYNC Baseline API
		var baselineAPI = new BaselineAPI();
		baselineAPI.createBaseline(metaInfo);
	},
	
	deleteBaseline: function(params){
		if(params !== null &amp;&amp; params !== undefined){
			var baselines = new GlideRecord(PmTableConstants.BASELINE);
			baselines.addNotNullQuery('plan');
			baselines.addQuery("plan.fiscal_period", params.fiscalPeriod);
			baselines.addQuery("plan.type", params.planType);
			baselines.addQuery("plan.origin_plan", params.originalPlan);
			baselines.addQuery("plan.sys_id","!=", params.newPlan);
			baselines.deleteMultiple();
		}
	},
	/* API to create baselines for the plan verison.
	params = {
				newPlan: newPlan,//sys_id
				originalPlan: planID,
				planType: planType,
				fiscalPeriod: planPeriodID
			};*/
	captureBaselinesForPlan: function(params){
		
		gs.info("PmFinancialBaseline - captureBaselinesForPlan: Started");
		var dmBaseline = new DemandBaseline();
		var pmBaseline = this;
		//delete old
		gs.info("PmFinancialBaseline - captureBaselinesForPlan: Deleting old records started");
		dmBaseline.deleteBaseline(params);
		this.deleteBaseline(params);
		gs.info("PmFinancialBaseline - captureBaselinesForPlan: Deleting old records finished");
		//Query Plan version to get original plan
		var planVersion = new GlideAggregate('itfm_plan_versions');
		if(planVersion.get(params.newPlan)){
			gs.info("PmFinancialBaseline - captureBaselinesForPlan: Demand baselines creation started");
			//for new plan version, fetch all demands
			var pi = new GlideAggregate('itfm_plan_item');
			pi.addQuery('plan', params.newPlan);
			pi.addNotNullQuery('demand');
			pi.groupBy('demand');
			pi.query();
			while(pi.next()){
				var input = {
					name: planVersion.getValue("name"), 
					task: pi.getValue("demand"),
					description: "System generated",
					system: true,
					plan: params.newPlan
				};
				dmBaseline.createBaselineForPlan(input);
			}

			gs.info("PmFinancialBaseline - captureBaselinesForPlan: Demand baselines creation ended");
			
			gs.info("PmFinancialBaseline - captureBaselinesForPlan: Project baselines creation started");
			//for new plan version, fetch all projects
			var gr = new GlideAggregate('itfm_plan_item');
			gr.addQuery('plan', params.newPlan);
			gr.addNotNullQuery('pm_project');
			gr.groupBy('pm_project');
			gr.query();
			while(gr.next()){
				var input1 = {
					name: planVersion.getValue("name"), 
					task: gr.getValue("pm_project"),
					description: "System generated", 
					enable_financial_baseline: true,
					enable_task_baseline: false,
					system: true,
					plan: params.newPlan
				};
				this.createBaselineForPlan(input1);
			}
			
			gs.info("PmFinancialBaseline - captureBaselinesForPlan: Project baselines creation ended");
			gs.info("PmFinancialBaseline - captureBaselinesForPlan: Ended");
		}
	},
	
	/*Async Job for creating baselines in bulk for a given plan*/
	captureBaselinesForPlanJob: function(params){
		var scheduledJobGR = new GlideRecord('sys_trigger');
		scheduledJobGR.initialize();
		scheduledJobGR.name = 'PmFinancialBaseline: Create Baseline Job';
		scheduledJobGR.next_action.setDateNumericValue(0); /* Execute Now */
		scheduledJobGR.script = "new PmFinancialBaseline().captureBaselinesForPlan("+JSON.stringify(params)+")";
		scheduledJobGR.job_id.setDisplayValue('RunScriptJob');
		scheduledJobGR.state = 0; /* Ready */
		scheduledJobGR.trigger_type = 0; /* Run Once */
		scheduledJobGR.insert();
		gs.debug("BaselineAPI has scheduled a job");
	},

    type: 'PmFinancialBaseline'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-11-20 10:22:41&lt;/sys_created_on&gt;
        &lt;sys_id&gt;026db1610b6203008d9ac74363673a85&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PmFinancialBaseline&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_026db1610b6203008d9ac74363673a85&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-25 05:44:54&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:59</sys_created_on>
        <sys_id>7d30f85583b01210c6695855eeaad336</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PmFinancialBaseline</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7d30f85583b01210c6695855eeaad336</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:59</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
