<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>55c1200fc3a63010965e070e9140dd4d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_sow.SOWUpcomingLinksService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SOWUpcomingLinksService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SOWUpcomingLinksService = Class.create();
SOWUpcomingLinksService.prototype = {
    type: 'SOWUpcomingLinksService',
    initialize: function() {},
    _getDate: function(input, defaultValue) {
        var out = defaultValue;
        try {
            if ('function' == typeof gs[input]) {
                out = gs[input]();
            } else {
                out = new GlideDateTime(input);
            }
        } catch (e1) {
            try {
                out = new GlideDateTime(input);
            } catch (e2) {}
        }
        return out;
    },
    getAssginToQuery: function() {
        var user = gs.getUserID();
        var assginToQuery = "assigned_to=" + user;
        var gr = new GlideRecordSecure("sys_user_delegate");
        gr.addQuery("delegate", user);
        gr.addQuery("assignments", "true");
        gr.addQuery("starts", "&lt;=", gs.daysAgo(0));
        gr.addQuery("ends", "&gt;=", gs.daysAgo(0));
        gr.query();
        while (gr.next()) {
            assginToQuery = assginToQuery + "^ORassigned_to=" + gr.user;
        }
        return assginToQuery;
    },
    process: function(request) {
        if (gs.nil(request)) {
            throw gs.getMessage("Missing required parameter: request");
        }
        var fromDateTime = this._getDate(request.from, null);
        var toDateTime = this._getDate(request.to, null);
        if (gs.nil(fromDateTime)) {
            throw gs.getMessage("Missing/Invalid request parameter: from");
        }
        if (gs.nil(toDateTime)) {
            throw gs.getMessage("Missing/Invalid request parameter: to");
        }
        var response = {};
        var errors = {};
        var status = {};
        var items = [];
        var count = -1; // No extensions processed
        var extensions = new GlideScriptedExtensionPoint().getExtensions("sn_sow.UpcomingLinkProvider");
        if (extensions.length &gt; 0) {
            count = 0;
            var assginToQuery = this.getAssginToQuery();
            for (var i = 0; i &lt; extensions.length; i++) {
                var extension = extensions[i];
                var extensionStatus = {};
                var extensionId = extension.type;
                status[extensionId] = extensionStatus;
                var startTime = Date.now();
                try {
                    var subItems = extension.process(request, fromDateTime, toDateTime, assginToQuery);
                    for (var j = 0; j &lt; subItems.length; j++) {
                        count++;
                        items.push(subItems[j]);
                    }
                } catch (e) {
                    try {
                        extensionStatus.error = JSON.stringify(e);
                    } catch (e) {
                        extensionStatus.error = "Unknown error";
                    }
                }
                var executionTime = Date.now() - startTime;
                extensionStatus.runtime = executionTime;
            }
        }
        response.from = fromDateTime;
        response.to = toDateTime;
        response.count = count;
        response.links = items;
        response.providers = status;
        return response;
    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-16 16:30:26&lt;/sys_created_on&gt;
        &lt;sys_id&gt;55c1200fc3a63010965e070e9140dd4d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SOWUpcomingLinksService&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Operations Workspace Core" source="sn_sow"&gt;5ca1bcb3733320103e366238edf6a706&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Service Operations Workspace Core"&gt;5ca1bcb3733320103e366238edf6a706&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_55c1200fc3a63010965e070e9140dd4d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-24 16:05:27&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:16</sys_created_on>
        <sys_id>80b6701d83f01210c6695855eeaad3e9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SOWUpcomingLinksService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_80b6701d83f01210c6695855eeaad3e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:16</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
