<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a521c8d573123010ae42d31ee2f6a7a4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CatalogRequestUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CatalogRequestUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CatalogRequestUtil = Class.create();
CatalogRequestUtil.prototype = {
    initialize: function(requestGr) {
		this.requestGr = requestGr;
	},

    cascadeRequestApproval: function() {
        if (!this.requestGr || !this.requestGr.isValidRecord())
            return;
        var gr = new GlideRecord("sc_req_item");
        gr.addQuery("request", this.requestGr.getUniqueValue());
        gr.query();

        while (gr.next()) {
            if (this.isPendingSequencedReqItem(gr))
				this.changeStageToNotStarted(gr);
			else
				this.cascadeApprovalToReqItem(gr, false);
        }
    },
	
	changeStageToNotStarted: function(reqItemGr) {
		if (this.requestGr.approval == "approved"){
			reqItemGr.setValue("stage", "not_started");
			reqItemGr.update();
		}
	},

    cascadeApprovalForSequencedReqItem: function(reqItemGr) {
        if (!reqItemGr || !reqItemGr.isValidRecord())
            return;
        this.cascadeApprovalToReqItem(reqItemGr, true);

    },

    cascadeApprovalToReqItem: function(gr, pendingReqItem) {
        // We handle this differently for delivery plans vs. workflows
        if (this.hasWorkflow(gr))
            this.cascadeRequestApprovalWorkflow(gr, pendingReqItem);
        else if (this.hasFlowDesigner(gr))
            this.cascadeRequestApprovalFlowDesigner(gr, pendingReqItem);
        else
            this.cascadeRequestApprovalDeliveryPlan(gr, pendingReqItem);
        gr.update();
    },

    /**
     * Cascade the request approval to the request item:
     *
     *   approved -&gt; if item is waiting for approval, get first stage of the delivery plan
     *   rejected -&gt; mark item as Request Cancelled
     */
    cascadeRequestApprovalDeliveryPlan: function(gr, pendingReqItem) {
        if (gr.cat_item.delivery_plan.nil())
            return;

        gr.approval = this.requestGr.approval;
        if ((gr.stage == "waiting_for_approval" || pendingReqItem) &amp;&amp; this.requestGr.approval == "approved") {
            gr.stage = this.getNextStage(gr);
			if (pendingReqItem)
				gr.state = 1;
		}
        else if (this.requestGr.approval == 'rejected') {
            gr.stage = 'Request Cancelled';
            gr.state = 4;
        }
    },

    cascadeRequestApprovalWorkflow: function(gr, pendingReqItem) {
        if ((gr.stage == "waiting_for_approval" || pendingReqItem) &amp;&amp; this.requestGr.approval == "approved") {
            gr.approval = "requested";
            gr.stage = "request_approved";
            if (pendingReqItem)
                gr.state = 1;
        } else if (this.requestGr.approval == 'rejected') {
            gr.approval = "rejected";
            gr.stage = "Request Cancelled";
            gr.state = 4;
        }
    },

    cascadeRequestApprovalFlowDesigner: function(gr, pendingReqItem) {
        if ((gr.stage == "waiting_for_approval" || pendingReqItem) &amp;&amp; this.requestGr.approval == "approved") {
            gr.approval = "requested";
            gr.stage = "request_approved";
            if (pendingReqItem)
                gr.state = 1;
        } else if (this.requestGr.approval == 'rejected') {
            gr.approval = "rejected";
            gr.stage = "Request Cancelled";
            gr.state = 4;
        }
    },

    hasWorkflow: function(gr) {
		var vv = gr.cat_item.workflow &amp;&amp; !gr.cat_item.workflow.nil();
        // Check if Catalog Item is using Workflow
        if (gr.cat_item.workflow &amp;&amp; !gr.cat_item.workflow.nil())
            return true;

        return false;
    },

    hasFlowDesigner: function(gr) {
        // Check if Catalog Item is using Workflow
        if (gr.cat_item.flow_designer_flow &amp;&amp; !gr.cat_item.flow_designer_flow.nil())
            return true;

        return false;
    },

    getNextStage: function(reqitem) {
        // return the first delivery task
        var nextStage = "nothing";
        var planID = GlideappDeliveryPlan.resolvePlanID(reqitem);
        var gr = new GlideRecord("sc_cat_item_delivery_task");
        gr.addQuery("delivery_plan", planID);
        gr.orderBy("order");
        gr.query();
        if (gr.next())
            nextStage = gr.name.getDisplayValue();

        return nextStage;
    },

    isPendingSequencedReqItem: function(gr) {
		if (JSUtil.nil((gr.getValue('order_guide'))))
			return false;
        return JSUtil.notNil(new sn_sc.CatItem(gr.getValue('order_guide')).getSequencingProcess()) 
				&amp;&amp; gr.state == -10 // Not started
				&amp;&amp; gr.stage == "waiting_for_approval"
				&amp;&amp; this.requestGr.approval != 'rejected';
    },

    type: 'CatalogRequestUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-29 17:10:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a521c8d573123010ae42d31ee2f6a7a4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CatalogRequestUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Catalog Platform" source="com.glideapp.servicecatalog.platform"&gt;3607b4283cb1311068bcf327dfe37fee&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a521c8d573123010ae42d31ee2f6a7a4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-09-15 16:39:23&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:36</sys_created_on>
        <sys_id>78d8389183341210c6695855eeaad3ae</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CatalogRequestUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_78d8389183341210c6695855eeaad3ae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:36</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
