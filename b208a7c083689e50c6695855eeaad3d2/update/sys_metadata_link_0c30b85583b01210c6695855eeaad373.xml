<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0036d3d8d732120058c92cf65e61038c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.MatchingRuleForAssignment&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Utility to configure AssignmentWorkbench&lt;/description&gt;
        &lt;name&gt;MatchingRuleForAssignment&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MatchingRuleForAssignment = Class.create();

var CONFIG_TABLE = "matching_rule";
var MATCHING_DIMENSION_FOR_ASSIGNMENT_TABLE = "matching_dimension_for_assignment";
var WORKBENCH_NAME = "assignment_workbench";
var BASE_CONFIG_SYS_ID = "da1727e0d723020058c92cf65e6103bf";
var MATCHING_DIMENSION = "matching_dimension";
var CONFIG_ERROR_MESSAGE_NOT_FOUND = gs.getMessage("Configuration for Assignment Workbench is not found");

MatchingRuleForAssignment.getConfiguration = function () {
	var grUserConfig = new GlideRecordSecure(CONFIG_TABLE);
	var currentUserId = gs.getUserID();
	grUserConfig.addQuery("user", currentUserId);
	grUserConfig.query();
	if (grUserConfig.next()) {
		return grUserConfig;
	} else {
		config.preferenceId = null;
		return null;
	}
};

MatchingRuleForAssignment.getConfigData = function(taskData){
	var awConfig = {};
	awConfig.configData = [];
	var currentUserId = gs.getUserID();
	if(taskData &amp;&amp; taskData.tableName &amp;&amp; taskData.taskId){
		var taskRec = new GlideRecordSecure(taskData.tableName);
		taskRec.get(taskData.taskId);
		var grconfig = new GlideRecord(CONFIG_TABLE);
		//grconfig.addQuery('user',currentUserId);
		grconfig.addActiveQuery();
		grconfig.addQuery('matching_options', 'recommendation criteria');
		grconfig.addQuery('table',taskData.tableName);
		grconfig.query();
		var match = false;
		while(grconfig.next()){
			if(JSUtil.nil(grconfig.getValue('condition')))
				match = true;
			else{
				var filter = new GlideFilter(grconfig.getValue('condition'), "rule-condition");
				filter.setCaseSensitive(true);
				match = filter.match(taskRec, true);
				}
			if(match){
				var cdata = {};
				cdata["tableName"]= grconfig.getDisplayValue("table");
				cdata["tableSysId"] = grconfig.getValue("table");

				var dimensionforAssignmentConfig = {};
				var grDim = new GlideRecordSecure(MATCHING_DIMENSION_FOR_ASSIGNMENT_TABLE);
				grDim.addQuery("matching_rule",grconfig.getValue('sys_id'));
				//grDim.addQuery("user",currentUserId);
				grDim.orderBy('order');
				grDim.query();

				while(grDim.next()){
					var singleDimensionData = {};
					singleDimensionData["dimensionId"] = grDim.getValue("dimension");
					var dimensionDisplayValue = JSUtil.nil(grDim.getDisplayValue("dimension.display_name")) ? grDim.getDisplayValue("dimension") : grDim.getDisplayValue("dimension.display_name");
					singleDimensionData["dimensionName"] = dimensionDisplayValue;
					singleDimensionData["dimensionOrder"] = grDim.getDisplayValue("order");
					singleDimensionData["dimensionSelected"] = grDim.getValue("selected");
					singleDimensionData["dimensionWeight"] = grDim.getDisplayValue("weight");
					singleDimensionData["dimensionOrder"] = grDim.getValue("order");
					singleDimensionData["dimensionUse"] = grDim.getValue("dimension_type");
					singleDimensionData["dimensionRef"] = {};
					var dimRecord = new GlideRecord("matching_dimension");
					dimRecord.addQuery("sys_id",grDim.getValue("dimension"));
					dimRecord.query();
					if(dimRecord.next()){
						if(dimRecord.getValue("use_reference")== true){
							var dimensionRefObj = {};
							dimensionRefObj["tableName"] = dimRecord.getValue("reference_table");
							dimensionRefObj["fieldName"] = dimRecord.getValue("reference_field");
							dimensionRefObj["filterCond"] = dimRecord.getValue("reference_filter");
							dimensionRefObj["filterLabel"] = dimRecord.getDisplayValue("reference_label");
							singleDimensionData["dimensionRef"] = dimensionRefObj;
						}
					}
					dimensionforAssignmentConfig[grDim.getValue("dimension")] = singleDimensionData;
				}	
			var groupFilterData = {};
				groupFilterData['table'] = "sys_user_group";
				groupFilterData['encodedQuery'] = "";
				groupFilterData['readonly'] = false;
				groupFilterData['searchField'] = 'name';
				groupFilterData['attributes'] = '';
			awConfig.configData.push({"conData":cdata,
								"dimData":dimensionforAssignmentConfig,
								"sysID":grconfig.getValue('sys_id'),
						"noofAgents":GlideProperties.get("assignment_workbench_no_of_agents",20),
						"groupFilterData":groupFilterData});
			awConfig.result = "success";
			break;
			}
		}
		if(!match){
			awConfig.result = "failure";
			awConfig.msg = CONFIG_ERROR_MESSAGE_NOT_FOUND;
		}
	}else{
		awConfig.result = "failure";
		awConfig.msg = CONFIG_ERROR_MESSAGE_NOT_FOUND;
	}
	return awConfig;
},

MatchingRuleForAssignment.createNewConfiguration = function(current) {
	var currentBaseRecord = new GlideRecordSecure(CONFIG_TABLE);
	currentBaseRecord.get(BASE_CONFIG_SYS_ID);
	for ( var prop in currentBaseRecord) {
		if (prop != "sys_id" &amp;&amp; prop != "sys_class_name") {
			current.setValue(prop, currentBaseRecord.getValue(prop));
			if(new CSMUtil().isDebugOn())
				gs.log("prop=" + prop + " value=" + currentBaseRecord.getValue(prop));
		}
	}
};

MatchingRuleForAssignment.getMatchingDimensions = function(){
	var gr = new GlideRecordSecure(MATCHING_DIMENSION);
	gr.query();
	while (gr.next()) {
		answer.add(gr.getValue("name"), gr.getDisplayValue("name"));
	}
};

]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-04-11 17:32:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0036d3d8d732120058c92cf65e61038c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;64&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MatchingRuleForAssignment&lt;/sys_name&gt;
        &lt;sys_package display_value="Assignment Workbench" source="com.snc.assignment_workbench"&gt;b82cca6b47664210cd4e1ce4316d4308&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0036d3d8d732120058c92cf65e61038c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-21 07:12:11&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:52</sys_created_on>
        <sys_id>0c30b85583b01210c6695855eeaad373</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MatchingRuleForAssignment</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0c30b85583b01210c6695855eeaad373</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:52</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
