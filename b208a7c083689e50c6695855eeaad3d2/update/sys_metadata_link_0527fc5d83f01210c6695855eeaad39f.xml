<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7c4a6777537701107234ddeeff7b12fa</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nb_action.TrendDefinitionService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TrendDefinitionService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var TrendDefinitionService = Class.create();
TrendDefinitionService.prototype = {
    tableName: Constants.TBL_TREND_DEFINITION,
    ids: "ids",

    initialize: function(grOrSysId) {
        if (grOrSysId &amp;&amp; grOrSysId.sys_class_name == this.tableName &amp;&amp; grOrSysId.isValidRecord) {
            this.trendDefinition = grOrSysId;
        } else {
            var trendDefinitionGr = new GlideRecord(this.tableName);
            if (trendDefinitionGr.get(grOrSysId)) {
                this.trendDefinition = trendDefinitionGr;
            }
        }
    },

    hasValidRecord: function() {
        return this.trendDefinition &amp;&amp; this.trendDefinition.sys_class_name == this.tableName &amp;&amp; this.trendDefinition.isValidRecord();
    },

    getTrendDefinitionId: function() {
        return this.trendDefinition.getValue(Constants.COL_SYS_ID);
    },

    isActive: function() {
        return this.trendDefinition.getValue(Constants.COL_ACTIVE) == "1";
    },

    getInputTable: function() {
        return this.trendDefinition.getValue(Constants.COL_INPUT_TABLE);
    },

    getThreshold: function() {
        return this.trendDefinition.getValue(Constants.COL_THRESHOLD);
    },

    getType: function() {
        return this.trendDefinition.getValue(Constants.COL_TYPE);
    },

    getCommonValueField: function() {
        return this.trendDefinition.getValue(Constants.COL_COMMON_VALUE_FIELD);
    },

    getCommonValueFieldType: function() {
        var inputTableGR = new GlideRecord(this.getInputTable());
        if (inputTableGR.isValid()) {
            var field = inputTableGR.getElement(this.getCommonValueField());
            if (field != null) {
                return field.getED().getInternalType();
            }
        }
    },

    getCommonValueFieldReferenceTable: function() {
        var inputTableGR = new GlideRecord(this.getInputTable());
        if (inputTableGR.isValid()) {
            var field = inputTableGR.getElement(this.getCommonValueField());
            if (field != null) {
                return field.getED().getReference();
            }
        }
    },

    getReferenceTable: function() {
        return this.trendDefinition.getValue(Constants.COL_REFERENCE_TABLE);
    },

    getInputField: function() {
        return this.trendDefinition.getValue(Constants.COL_INPUT_FIELD);
    },

    getCommonReferenceField: function() {
        return this.trendDefinition.getValue(Constants.COL_COMMON_REFERENCE_FIELD);
    },

    getConditionBuilder: function() {
        return this.trendDefinition.getValue(Constants.COL_CONDITION_BUILDER);
    },

    getSourceTable: function() {
        var trendType = this.getType();
        if (trendType == Constants.TREND_TYPE_GROUP_BY_VALUE) {
            return this.getCommonValueFieldReferenceTable();
        } else if (trendType == Constants.TREND_TYPE_GROUP_BY_REFERENCE) {
            return NextBestActionUtil.getFieldReferenceTable(this.getReferenceTable(), this.getCommonReferenceField());
        }
    },

    getTrendResult: function(recordSysIds) {
        this.recordSysIds = recordSysIds;
        this.isTrendConfigValid = true;
        this.trendData = [];
        this._buildRecordsAgeMap();

        switch (this.getType()) {
            case Constants.TREND_TYPE_GROUP_BY_VALUE:
                this._processCommonValue();
                break;
            case Constants.TREND_TYPE_GROUP_BY_REFERENCE:
                this._processCommonReference();
                break;
            case Constants.TREND_TYPE_COMMON_CONDITION:
                this._processCommonCondition();
                break;
        }
        if (!this.isTrendConfigValid) {
            var errorDetails = new RAExceptionManager("INVALID_TREND_DEFINITION_CONFIG");
            var logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, "TrendDefinitionService");
            logger.error("Trend definition " + this.getTrendDefinitionId() + " has invalid configuration");
            return {
                "status": Constants.STATUS_ERROR,
                "errorCode": errorDetails.getCode(),
                "errorMessage": errorDetails.getMessage()
            };
        }
        return {
            "status": Constants.STATUS_SUCCESS,
            "trendData": this.trendData
        };
    },

    _buildRecordsAgeMap: function() {
        this.recordsAgeMap = {};
        var gr = new GlideRecord(this.getInputTable());
        gr.addQuery("sys_id", "IN", this.recordSysIds);
        gr.query();
        while (gr.next()) {
            this.recordsAgeMap[gr.getValue(Constants.COL_SYS_ID)] = gr.getValue(Constants.COL_SYS_CREATED_ON);
        }
    },

    _processCommonValue: function() {
        var commonValueField = this.getCommonValueField();
        this._getCommonValueOrCommonReferenceResults(this.getInputTable(), commonValueField, Constants.COL_SYS_ID);
    },

    _processCommonReference: function() {
        var commonReferenceFieldReferenceTable = NextBestActionUtil.getFieldReferenceTable(this.getReferenceTable(), this.getCommonReferenceField());
        var inputFieldReferenceTable = NextBestActionUtil.getFieldReferenceTable(this.getReferenceTable(), this.getInputField());
        if (!commonReferenceFieldReferenceTable || !inputFieldReferenceTable) {
            this.isTrendConfigValid = false;
            return;
        }
        this._getCommonValueOrCommonReferenceResults(this.getReferenceTable(), this.getCommonReferenceField(), this.getInputField());
    },

    _processCommonCondition: function() {
        var conditions = this.getConditionBuilder();
        var recordsGr = new GlideRecord(this.getInputTable());
        recordsGr.addQuery(Constants.COL_SYS_ID, "IN", this.recordSysIds);
        if (conditions) {
            recordsGr.addEncodedQuery(conditions);
        }
        recordsGr.query();
        if (recordsGr.getRowCount() &gt;= this.getThreshold()) {
            this._getCommonConditionResults(recordsGr);
        }
    },

    _getCommonConditionResults: function(recordsGr) {
        var ids = [];
        while (recordsGr.next()) {
            var sysId = recordsGr.getValue(Constants.COL_SYS_ID);
            ids.push(sysId);
        }
        var groupDetails = this._getGroupDetails(ids);
        var groupData = {};
        groupData[Constants.TREND_DATA_COUNT] = ids.length;
        groupData[Constants.TREND_DATA_OLDEST_RECORD] = groupDetails[Constants.TREND_DATA_OLDEST_RECORD];
        groupData[Constants.TREND_DATA_HIGHEST_CONFIDENCE_RECORD] = groupDetails[Constants.TREND_DATA_HIGHEST_CONFIDENCE_RECORD];
        groupData[Constants.QUALIFIED_RECORD_IDS] = JSON.stringify(ids);
        this.trendData = [groupData];
    },

    _getCommonValueOrCommonReferenceResults: function(queryTable, groupField, queryField) {
        var groupMap = {};
        var gr = new GlideRecord(queryTable);
        gr.addQuery(queryField, "IN", this.recordSysIds);
        gr.addNotNullQuery(groupField);
        gr.query();
        while (gr.next()) {
            var groupKey = gr.getElement(groupField).toString();
            if (!groupMap[groupKey]) {
                groupMap[groupKey] = {};
                groupMap[groupKey][this.ids] = [];
                groupMap[groupKey][Constants.TREND_DATA_DISPLAY_VALUE] = gr.getElement(groupField).getDisplayValue();
            }
            groupMap[groupKey][this.ids].push(gr.getValue(queryField));
        }

        var resultList = [];
        var isCommonValueNonReference = (this.getType() == Constants.TREND_TYPE_GROUP_BY_VALUE) &amp;&amp; (this.getCommonValueFieldType() != Constants.FIELD_TYPE_REFERENCE);
        for (var key in groupMap) {
            if (groupMap[key][this.ids].length &lt; this.getThreshold()) {
                continue;
            }
            var ids = groupMap[key][this.ids];

            var groupDetails = this._getGroupDetails(ids);
            var groupData = {};
            groupData[Constants.TREND_DATA_COUNT] = ids.length;
            groupData[Constants.TREND_DATA_OLDEST_RECORD] = groupDetails[Constants.TREND_DATA_OLDEST_RECORD];
            groupData[Constants.TREND_DATA_HIGHEST_CONFIDENCE_RECORD] = groupDetails[Constants.TREND_DATA_HIGHEST_CONFIDENCE_RECORD];
            groupData[Constants.QUALIFIED_RECORD_IDS] = JSON.stringify(ids);

            if (isCommonValueNonReference) {
                groupData[Constants.TREND_DATA_DISPLAY_VALUE] = groupMap[key][Constants.TREND_DATA_DISPLAY_VALUE];
                groupData[Constants.TREND_DATA_VALUE] = key;
            } else {
                groupData[Constants.TREND_DATA_SOURCE_RECORD] = key;
            }
            resultList.push(groupData);
        }
        resultList.sort(function(a, b) {
            return b.count - a.count;
        });
        this.trendData = resultList;
    },

    _getGroupDetails: function(ids) {
        //It returns the oldest created record and the highest ML confidence record in trend group
        var oldestCreatedAt = (new GlideDateTime()).toString();
        var oldestRecordSysId = ids[0];
        var highestConfidenceRecordIdx = this.recordSysIds.length;
        for (var i = 0; i &lt; ids.length; i++) {
            var sysId = ids[i];
            if (this.recordsAgeMap[sysId] &lt; oldestCreatedAt) {
                oldestCreatedAt = this.recordsAgeMap[sysId];
                oldestRecordSysId = sysId;
            }
            // Find index of the record in 'recordSysIds' list, having highest ML confidence among all of the records in 'ids' list
            var sysIdIndex = this.recordSysIds.indexOf(sysId);
            if (sysIdIndex &lt; highestConfidenceRecordIdx) {
                highestConfidenceRecordIdx = sysIdIndex;
            }
        }
        var groupDetails = {};
        groupDetails[Constants.TREND_DATA_OLDEST_RECORD] = oldestRecordSysId;
        groupDetails[Constants.TREND_DATA_HIGHEST_CONFIDENCE_RECORD] = this.recordSysIds[highestConfidenceRecordIdx];
        return groupDetails;
    },

    type: "TrendDefinitionService"
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-06-07 14:19:28&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7c4a6777537701107234ddeeff7b12fa&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TrendDefinitionService&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommended Actions" source="sn_nb_action"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommended Actions"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7c4a6777537701107234ddeeff7b12fa&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-24 07:52:13&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:15</sys_created_on>
        <sys_id>0527fc5d83f01210c6695855eeaad39f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TrendDefinitionService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_0527fc5d83f01210c6695855eeaad39f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
