<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a476d44553303010532cddeeff7b12f6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.OnCallPushRequestSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;OnCallPushRequestSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var OnCallPushRequestSNC = Class.create();
OnCallPushRequestSNC.prototype = {

	initialize: function() {
		this._log = new GSLog('com.snc.on_call_rotation.log.level', this.type);
	},

	// TABLE
	ON_CALL_PUSH_REQUEST: 'on_call_push_request',

	// FIELDS
	ACCEPTOR: 'acceptor',
	SOURCE_TABLE: 'source_table',
	DOCUMENT_ID: 'document_id',
	STATE: 'state',
	ACTIVE: 'active',
	ITERATION: 'iteration',

	REQUESTED: 'requested',
	NOT_REQUIRED: 'not_required',

	createOrUpdatePush: function(userSysId, sourceTable, documentID) {
		userSysId = userSysId || this._userSysId;
		sourceTable = sourceTable || this._sourceTable;
		documentID = documentID || this._documentID;

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.logDebug('[createOrUpdatePush] userSysId: ' + userSysId + ' sourceTable: ' + sourceTable + ' documentID: ' + documentID);

		if (JSUtil.nil(userSysId) || JSUtil.nil(sourceTable) || JSUtil.nil(documentID))
			return this;

		var sysId = '';
		var gr = new GlideRecord(this.ON_CALL_PUSH_REQUEST);
		gr.addActiveQuery();
		gr.addQuery(this.ACCEPTOR, userSysId);
		gr.addQuery(this.SOURCE_TABLE, sourceTable);
		gr.addQuery(this.DOCUMENT_ID, documentID);
		gr.addQuery(this.STATE, this.REQUESTED);
		gr.query();
		if (gr.next()) {
			var iteration = parseInt(gr.getValue('iteration'));
			iteration = isNaN(iteration) ? 1 : iteration + 1;
			gr.setValue('iteration', iteration);
			sysId = gr.update();
		} else {
			gr.initialize();
			gr.setValue(this.ACCEPTOR, userSysId);
			gr.setValue(this.SOURCE_TABLE, sourceTable);
			gr.setValue(this.DOCUMENT_ID, documentID);
			gr.setValue(this.STATE, this.REQUESTED);
			sysId = gr.insert();
		}

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.logDebug('[createOrUpdatePush] sysId: ' + sysId);

		return this;
	},

	expireMobileNotifications: function(userSysId, sourceTable, documentID) {
		userSysId = userSysId || this._userSysId;
		sourceTable = sourceTable || this._sourceTable;
		documentID = documentID || this._documentID;

		if (this._log.atLevel(GSLog.DEBUG))
			this._log.logDebug('[expireMobileNotifications] userSysId: ' + userSysId + ' sourceTable: ' + sourceTable + ' documentID: ' + documentID);

		if (JSUtil.nil(userSysId) || JSUtil.nil(sourceTable) || JSUtil.nil(documentID))
			return this;

		// Expire notifications that are no longer required
		var notRequiredGr = new GlideRecord(this.ON_CALL_PUSH_REQUEST);
		notRequiredGr.addActiveQuery();
		notRequiredGr.addQuery(this.ACCEPTOR, '!=', userSysId);
		notRequiredGr.addQuery(this.SOURCE_TABLE, sourceTable);
		notRequiredGr.addQuery(this.DOCUMENT_ID, documentID);
		notRequiredGr.addQuery(this.STATE, this.REQUESTED);
		notRequiredGr.query();
		notRequiredGr.setValue(this.STATE, this.NOT_REQUIRED);
		notRequiredGr.setValue(this.ACTIVE, false);
		notRequiredGr.updateMultiple();

		// Deactivated all notifications on acceptance
		var activeNotifGr = new GlideRecord(this.ON_CALL_PUSH_REQUEST);
		activeNotifGr.addActiveQuery();
		activeNotifGr.addQuery(this.SOURCE_TABLE, sourceTable);
		activeNotifGr.addQuery(this.DOCUMENT_ID, documentID);
		activeNotifGr.query();
		activeNotifGr.setValue(this.ACTIVE, false);
		activeNotifGr.updateMultiple();

		return this;
	},

	setUserSysId: function(userSysId) {
		this._userSysId = userSysId;
		return this;
	},

	setSourceTable: function(sourceTable) {
		this._sourceTable = sourceTable;
		return this;
	},

	setDocumentID: function(documentID) {
		this._documentID = documentID;
		return this;
	},

    type: 'OnCallPushRequestSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-06-15 10:32:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a476d44553303010532cddeeff7b12f6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;OnCallPushRequestSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="On-Call Scheduling" source="com.snc.on_call_rotation"&gt;4bca78ec3cf1311068bcf327dfe37f86&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a476d44553303010532cddeeff7b12f6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-07-20 12:32:13&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:34</sys_created_on>
        <sys_id>98d8f49183341210c6695855eeaad32b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>OnCallPushRequestSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_98d8f49183341210c6695855eeaad32b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:34</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
