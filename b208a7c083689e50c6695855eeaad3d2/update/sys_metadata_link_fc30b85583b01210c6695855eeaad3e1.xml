<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0146773153c33010e530ddeeff7b12f8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_rf.RFUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;It provides utility functions for the Recommendation Framework.&lt;/description&gt;
        &lt;name&gt;RFUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var RFUtils = Class.create();

RFUtils.addToSchema = function(schema, name, label, type, referenceTable) {
    var schemaElement = {
        'name': name,
        'label': label,
        'type': type
    };
    if (type == RFConstants.evaluationOutputTypes.REFERENCE) {
        schemaElement['referenceTable'] = referenceTable;
    }
    schema.push(schemaElement);
};

RFUtils.getFieldReferenceTable = function(table, field) {
    if (table &amp;&amp; field) {
        var tableGr = (new GlideRecord(table));
        var referenceField = tableGr.isValid() &amp;&amp; tableGr.getElement(field);
        if (referenceField == null || referenceField.getED().getInternalType() != RFConstants.evaluationOutputTypes.REFERENCE)
            return;
        return referenceField.getReferenceTable();
    }
};

RFUtils.evaluateScript = function(script, inputs, output) {
    var scriptGr = new GlideRecord(RFConstants.tables.SYS_SCRIPT_INCLUDE);
    scriptGr.get(RFConstants.EVALUATOR_RECORD_SYS_ID);

    scriptGr.script = 'try {' + script + '} catch(e){ gs.error(e);' + output + ' = { status: RFConstants.EXCEPTION, error: e }; }';

    var evaluator = new GlideScopedEvaluator();
    var keys = Object.keys(inputs);
    for (var idx = 0; idx &lt; keys.length; idx++) {
        evaluator.putVariable(keys[idx], inputs[keys[idx]]);
    }
    evaluator.putVariable(output, {});
    evaluator.evaluateScript(scriptGr);
    return evaluator.getVariable(output);
};

RFUtils.sortByProperty = function(property) {
    return function(a, b) {
        if (a[property] &gt; b[property])
            return 1;
        else if (a[property] &lt; b[property])
            return -1;

        return 0;
    };
};

RFUtils.evaluateUserCriteria = function(userCriteriaId) {
    var propVars = RFConstants.configurationPropertyVars;
    var roleOverridePropertyName = propVars.PREFIX + RFConstants.DOT + propVars.RECOMMENDATION + RFConstants.DOT + propVars.ROLES_OVERRIDE;
    var rolesOverrideString = gs.getProperty(roleOverridePropertyName, '["maint", "admin"]');
    try {
        var rolesOverride = JSON.parse(rolesOverrideString);
    } catch (e) {
        rolesOverride = [];
        new RFLogger("RFUtils - evaluateUserCriteria").logError("Invalid list provided in property " +
            roleOverridePropertyName + " : " + rolesOverrideString);
    }
    if (!Array.isArray(rolesOverride)) {
        rolesOverride = [];
    }
    for (var idx = 0; idx &lt; rolesOverride.length; idx++) {
        var hasRole = gs.hasRole(rolesOverride[idx]);
        if (hasRole) {
            return true;
        }
    }
    return sn_uc.UserCriteriaLoader.userMatches(gs.getUserID(), [userCriteriaId]);
};

RFUtils.getScriptingRuleImplementations = function() {
    var implementations = [];
    var instanceGr = new GlideRecord(RFConstants.tables.SYS_EXTENSION_INSTANCE);
    instanceGr.addActiveQuery();
    instanceGr.addQuery(RFConstants.fields.SYS_EXTENSION_INSTANCE_POINT, RFConstants.extensionPoint.SCRIPTING_RULE_INTERFACE);
    instanceGr.addQuery(RFConstants.fields.SYS_EXTENSION_INSTANCE_SCRIPT_INCLUDE +
        RFConstants.DOT + RFConstants.fields.ACTIVE, RFConstants.TRUE);
    instanceGr.query();
    while (instanceGr.next()) {
        var scriptInclude = instanceGr.getValue(RFConstants.fields.SYS_EXTENSION_INSTANCE_SCRIPT_INCLUDE);
        if (scriptInclude) {
            implementations.push(scriptInclude);
        }
    }
    return implementations;
};

RFUtils.timeAgo = function(dateTime) {
    var duration = GlideDateTime.subtract(dateTime, new GlideDateTime());
    return RFUtils._toTimeAgo(duration.getNumericValue());
};

RFUtils._toTimeAgo = function(distanceMillis) {
    var msgs = {
        ago: gs.getMessage('%d ago'),
        fromNow: gs.getMessage('%d from now'),
        justNow: gs.getMessage('just now'),
        seconds: gs.getMessage('less than a minute'),
        minute: gs.getMessage('about a minute'),
        minutes: gs.getMessage('%d minutes'),
        hour: gs.getMessage('about an hour'),
        hours: gs.getMessage('about %d hours'),
        day: gs.getMessage('a day'),
        days: gs.getMessage('%d days'),
        month: gs.getMessage('about a month'),
        months: gs.getMessage('%d months'),
        year: gs.getMessage('about a year'),
        years: gs.getMessage('%d years')
    };
    var seconds = Math.abs(distanceMillis) / 1000;
    var minutes = seconds / 60;
    var hours = minutes / 60;
    var days = hours / 24;
    var years = days / 365;
    var ago = msgs.ago;

    // handle 'just now' message suffix
    if (seconds &lt; 45) {
        ago = '%d';
    }

    // handle future times
    if (distanceMillis &lt; 0) {
        ago = msgs.fromNow;
    }

    function substitute(message, number) {
        return message.replace(/%d/i, number);
    }

    var words = seconds &lt; 45 &amp;&amp; (distanceMillis &gt;= 0) &amp;&amp; substitute(msgs.justNow, Math.round(seconds)) ||
        seconds &lt; 45 &amp;&amp; substitute(msgs.seconds, Math.round(seconds)) ||
        seconds &lt; 90 &amp;&amp; substitute(msgs.minute, 1) ||
        minutes &lt; 45 &amp;&amp; substitute(msgs.minutes, Math.round(minutes)) ||
        minutes &lt; 90 &amp;&amp; substitute(msgs.hour, 1) ||
        hours &lt; 24 &amp;&amp; substitute(msgs.hours, Math.round(hours)) ||
        hours &lt; 42 &amp;&amp; substitute(msgs.day, 1) ||
        days &lt; 30 &amp;&amp; substitute(msgs.days, Math.ceil(days)) ||
        days &lt; 45 &amp;&amp; substitute(msgs.month, 1) ||
        days &lt; 365 &amp;&amp; substitute(msgs.months, Math.round(days / 30)) ||
        years &lt; 1.5 &amp;&amp; substitute(msgs.year, 1) ||
        substitute(msgs.years, Math.round(years));

    return substitute(ago, words);
};

RFUtils.getConfigurationPropertyName = function(tableName, fieldName, sysId) {
    var prefix = RFConstants.configurationPropertyVars.PREFIX;
    var tableShortName = RFConstants.configurationPropertyVars[tableName];
    var fieldShortName = RFConstants.configurationPropertyVars[fieldName];
    return prefix + RFConstants.DOT + tableShortName + RFConstants.DOT + sysId + RFConstants.DOT + fieldShortName;
};

RFUtils.getSideComponentFooterProperties = function(tableName) {
    var propertyName = RFConstants.configurationPropertyVars.PREFIX + RFConstants.DOT + tableName + RFConstants.DOT + RFConstants.configurationPropertyVars.FOOTER_VISIBLE;
    return {
        "isHidden": !(gs.getProperty(propertyName, false) == "true")
    };

};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-10-08 07:17:16&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0146773153c33010e530ddeeff7b12f8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RFUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommendation Framework" source="sn_rf"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommendation Framework"&gt;30a32ce6c7313010dd7ab6c427c2600e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0146773153c33010e530ddeeff7b12f8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-02-03 19:23:24&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:55</sys_created_on>
        <sys_id>fc30b85583b01210c6695855eeaad3e1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RFUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_fc30b85583b01210c6695855eeaad3e1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:55</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
