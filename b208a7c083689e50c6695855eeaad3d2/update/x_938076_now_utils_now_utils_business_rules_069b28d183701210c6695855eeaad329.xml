<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>(current.source_table != '' &amp;&amp; new TableUtils(current.source_table).getAbsoluteBase() != 'task') &amp;&amp; current.state.changes()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Approval Events (Non-Task)</name>
        <order>1001</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var isFD = isFlowDesigner(current);
sendEventsNonTask();

function getApproverUserName(approver) {
 var username = approver.getDisplayValue();
 if (!GlideDomainSupport.isDataSeparationEnabled()) 
  return username;
 if (GlideStringUtil.notNil(username))
  return username;
 return sn_fd.FlowAPI.getApproverUsername(approver.sys_id);
}

function isFlowDesigner(me) {
   if (!me.wf_activity.nil())
      return false;
   if (!me.group.nil() && (me.group.wait_for == "process_flow"))
      return true;

   var listenerGr = new GlideRecord('sys_flow_listener');
   listenerGr.addQuery('listening_to', me.document_id);
   listenerGr.addQuery('source_table', me.source_table);
   listenerGr.addQuery('name', 'Ask For Approval');
   listenerGr.addQuery('state', 'WAITING');
   listenerGr.query();
   return listenerGr.hasNext();
}

function getComment(isFlowDesigner, username, comment) {
 if (isFlowDesigner) {
  var myComment = "{0} " + comment;
  return gs.getMessage(myComment, username);
 }
 return username + " " + comment;
}

function getEventPrefix(sourceTable) {
 if (sourceTable!=null && sourceTable.startsWith('kb_template')) {
  return "kb_knowledge";
 }
 return sourceTable;
}

function sendEventsNonTask() {
   if (!current.state.changes()) 
      return;

   var event = getEventPrefix(current.source_table);
   var approvalComment = "";
   switch (current.state + "") {    
      case 'cancelled':
         event += ".approval.cancelled";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         break;
      case 'requested':
         event += ".approval.inserted";
         gs.eventQueue(event, current, gs.getUserID(), gs.getUserName());
         approvalComment = getComment(isFD, getApproverUserName(current.approver), "requested to approve task");
         updateRecord(current, approvalComment);
  break;
      case 'rejected':
         event += ".approval.rejected";
         gs.eventQueue(event, current, current.state, previous.state);
         var isAuto = ((current.operation() == 'insert') && isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "rejected the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         notifyMyFriends(current);
         break;
      case 'approved':
         var isAuto = ((current.operation() == 'insert') && isFD)?"auto ":"";
         approvalComment = getComment(isFD, getApproverUserName(current.approver), isAuto + "approved the task.");
         updateRecord(current, approvalComment, current.comments.getJournalEntry(-1));
         break;
      default: 
   }
         
 }

function notifyMyFriends(me) {
   var friends = new GlideRecord('sysapproval_approver');
   friends.addQuery('document_id', me.document_id);
   friends.query();
   while(friends.next()) {
      if (friends.approver.toString() != me.approver.toString()) {
         gs.eventQueue(me.source_table + ".approval.rej.other", me, friends.approver);
      }
   }
}

function updateRecord(me, journal, comments) {
   var isWorkflow = false;
   var isProcessGuide = false;
   if (isFD) {
      if (gs.getProperty("com.glide.hub.flow.approval.history_comment", "true") != "true")
         return;
   }
   else {
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      var isWorkflow = !current.wf_activity.nil();
      // if this is for a group approval, don't log this user action since the Group Approval Activity will handle the logging
      if (!current.group.nil())
         return;
      // only log the user approval activity for workflows when specifically turned on
      // otherwise, we spam the approval history log when it is almost never desired to track via the approval history journal field
      isWorkflow = !current.wf_activity.nil();
      if (isWorkflow && (gs.getProperty("glide.workflow.user_approval_history") != "true"))
         return;
      isProcessGuide = !current.process_step.nil();

   }

 if (comments)
  journal += "\n\n" + gs.getMessage("Approval comments") + ":\n" + comments;
 
 var approvingRecord = new GlideRecord(me.source_table);
 if (approvingRecord.get(me.document_id)) {
  if (isWorkflow || isProcessGuide)
   approvingRecord.setUseEngines(false);
  
  if (!me.approval_journal_column.nil()) {
   if (typeof approvingRecord[me.approval_journal_column].setJournalEntry === 'function') {
    approvingRecord[me.approval_journal_column].setJournalEntry(journal);
    approvingRecord.update();
    return;
   }
  }
  
  if (typeof approvingRecord.approval_history.setJournalEntry === 'function') {
   approvingRecord.approval_history.setJournalEntry(journal);
   approvingRecord.update();
   return;
  }
 }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:48</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>069b28d183701210c6695855eeaad329</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Approval Events (Non-Task)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_069b28d183701210c6695855eeaad329</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:48</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=069b28d183701210c6695855eeaad329"/>
</record_update>
