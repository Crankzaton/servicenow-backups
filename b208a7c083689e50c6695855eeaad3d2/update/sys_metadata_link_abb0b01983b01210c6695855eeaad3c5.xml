<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1b9397365bc21010d9a5ce1a8581c75c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AisProfileLinkingService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Links a peripherals, such as Search Sources, Dictionaries, and Genius Results, to an AIS Search Profile by creating an entry in the corresponding M2M table&lt;/description&gt;
        &lt;name&gt;AisProfileLinkingService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AisProfileLinkingService = Class.create();
AisProfileLinkingService.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    linkSearchSourceToProfile: function() {
        var profileID = this.getParameter('sysparm_profile_id');
        var searchSourceID = this.getParameter('sysparm_search_source_id');
        var gr = new GlideRecord('ais_search_profile_ais_search_source_m2m');
        gr.profile = profileID;
        gr.search_source = searchSourceID;
        try {
            gr.insert();
            return 'ok';
        } catch (e) {
            gs.error("An error occurred linking the Search Source to the Profile: ", e);
            return "Sorry, an error occurred";
        }
    },

    unlinkSearchSources: function() {
        var profileParmName = 'sysparm_profile_id';
        var searchSourcesParmName = 'sysparm_search_source_ids';
        var searchSourceToProfileTableName = "ais_search_profile_ais_search_source_m2m";

        // Get the ID of the profile to unlink the dictionaries from
        var profileSysID = this.getParameter(profileParmName);
        if (profileSysID == null || profileSysID.length() &lt; 1) {
            gs.error("No profile sys_id provided");
            return 'Error: No Profile ID Provided';
        }

        // Get the ID(s) of the dictionaries to unlink
        var searchSourceIDsString = this.getParameter(searchSourcesParmName);
        if (searchSourceIDsString == null || searchSourceIDsString.length() &lt; 1) {
            gs.error("No Search Source IDs provided");
            return 'No Search Source IDs Provided';
        }

        var searchSourceIDs = searchSourceIDsString.split(',');
        for (var i = 0; i &lt; searchSourceIDs.length; i++) {
            try {
                var gr = new GlideRecord('ais_search_profile_ais_search_source_m2m');
                gr.addQuery('sys_id', searchSourceIDs[i]);
                gr.query();
                while (gr.next()) {
                    gr.deleteRecord();
                }
            } catch (e) {
                gs.error("An error occurred unlinking a Search Source: ", e);
                return "Sorry, an error occurred";
            }
        }
        return 'ok';
    },

    linkDictionaryToProfile: function() {
        var profileID = this.getParameter('sysparm_profile_id');
        var dictionaryID = this.getParameter('sysparm_dictionary_id');
        var dictionaryName = this.getParameter('sysparm_dictionary_name');

        var dict = new GlideRecord('ais_dictionary');
        dict.addQuery('sys_id', '!=', dictionaryID);
        dict.addQuery('name', dictionaryName);
        dict.query();
        if (!dict.next()) {
            try {
                var gr = new GlideRecord('ais_search_profile_ais_dictionary_m2m');
                gr.profile = profileID;
                gr.dictionary = dictionaryID;
                gs.info("Successfully created GlideRecord");
                gr.insert();
                gs.info("Successfully inserted record");
                return 'ok';
            } catch (e) {
                gs.info("Insert failed");
                gs.error("An error occurred linking the Dictionary to the Profile: ", e);
            }
        } else
            return 'duplicate';
    },

    unlinkDictionaries: function() {
        var profileParmName = 'sysparm_profile_id';
        var dictionariesParmName = 'sysparm_dictionary_ids';
        var dictionaryToProfileTableName = "ais_search_profile_ais_dictionary_m2m";

        // Get the ID of the profile to unlink the dictionaries from
        var profileSysID = this.getParameter(profileParmName);
        if (profileSysID == null || profileSysID.length() &lt; 1) {
            gs.error("No profile sys_id provided");
            return 'Error: No Profile ID Provided';
        }

        // Get the ID(s) of the dictionaries to unlink
        var dictionaryIDsString = this.getParameter(dictionariesParmName);
        if (dictionaryIDsString == null || dictionaryIDsString.length() &lt; 1) {
            gs.error("No Dictionary IDs provided");
            return 'No Dictionary IDs Provided';
        }

        var dictionaryIDs = dictionaryIDsString.split(',');
        for (var i = 0; i &lt; dictionaryIDs.length; i++) {
            try {
                var gr = new GlideRecord(dictionaryToProfileTableName);
                gr.addQuery('dictionary', dictionaryIDs[i]);
                gr.addQuery('profile', profileSysID);
                gr.query();
                while (gr.next()) {
                    gr.deleteRecord();
                }
            } catch (e) {
                gs.error("An error occurred unlinking a Dictionary: ", e);
                return "Sorry, an error occurred";
            }
        }
        return 'ok';
    },

    linkGeniusResultToProfile: function() {
        var profileID = this.getParameter('sysparm_profile_id');
        var geniusResultID = this.getParameter('sysparm_genius_result_id');

        // Set the order to the highest order number used on the profile, plus 100 (e.g. add it in last)
        var order = 100;
        var orderLookUpRecord = new GlideRecord('ais_search_profile_ais_genius_result_configuration_m2m');
        orderLookUpRecord.addQuery('profile', profileID);
        orderLookUpRecord.orderByDesc('order');
        orderLookUpRecord.query();
        if (orderLookUpRecord.next()) {
            order = orderLookUpRecord.order + 100;
        }

        var gr = new GlideRecord('ais_search_profile_ais_genius_result_configuration_m2m');
        gr.profile = profileID;
        gr.genius_result_configuration = geniusResultID;
        gr.order = order;
        try {
            gr.insert();
            return 'ok';
        } catch (e) {
            gs.error("An error occurred linking the Dictionary to the Profile: ", e);
        }
    },

    unlinkGeniusResults: function() {
        var profileParmName = 'sysparm_profile_id';

        var geniusResultsM2MParmName = 'sysparm_genius_result_link_ids';
        var geniusResultConfigToProfileTableName = "ais_search_profile_ais_genius_result_configuration_m2m";
        var profileSysID = this.getParameter(profileParmName);
        var geniusResultM2MIDsString = this.getParameter(geniusResultsM2MParmName);
        if (geniusResultM2MIDsString == null || geniusResultM2MIDsString.length() &lt; 1) {
            gs.error("No Genius Result IDs provided");
            return 'No Genius Result IDs Provided';
        } else {
            var geniusResultM2MIDs = geniusResultM2MIDsString.split(',');
            for (var i = 0; i &lt; geniusResultM2MIDs.length; i++) {
                try {
                    var gr = new GlideRecord(geniusResultConfigToProfileTableName);
                    gr.get(geniusResultM2MIDs[i]);
                    gr.deleteRecord();
                } catch (e) {
                    gs.error("An error occurred unlinking a Genius Result: ", e);
                    return "Sorry, an error occurred";
                }
            }
            return 'ok';
        }
    },

    unlinkNLUModels: function() {
        var configParmName = 'sysparm_config_id';
        var nluModelsParmName = 'sysparm_model_ids';
        var modelToConfigTableName = "ais_genius_result_configuration_sys_nlu_model_m2m";

        // Get the ID(s) of the relationships to unlink
        var modelIDsString = this.getParameter(nluModelsParmName);
        gs.log(modelIDsString);
        if (modelIDsString == null || modelIDsString.length() &lt; 1) {
            gs.error("No Relationship IDs provided");
            return 'No Relationship IDs Provided';
        }

        var modelIDs = modelIDsString.split(',');
        for (var i = 0; i &lt; modelIDs.length; i++) {
            try {
                var gr = new GlideRecord(modelToConfigTableName);
                gr.get(modelIDs[i]);
                gr.deleteRecord();
            } catch (e) {
                gs.error("An error occurred unlinking an NLU Model: ", e);
                return "Sorry, an error occurred";
            }
        }
        return 'ok';
    },

    getAvailableNLUModels: function() {
        var configParmName = 'sysparm_config_id';
        var nluModelsParmName = 'sysparm_model_ids';
        var modelToConfigTableName = "ais_genius_result_configuration_sys_nlu_model_m2m";

        // Get the ID(s) of the relationships to unlink
        var modelIDsString = this.getParameter(nluModelsParmName);
        gs.log(modelIDsString);
        if (modelIDsString == null || modelIDsString.length() &lt; 1) {
            gs.error("No Relationship IDs provided");
            return 'No Relationship IDs Provided';
        }

        var modelIDs = modelIDsString.split(',');
        for (var i = 0; i &lt; modelIDs.length; i++) {
            try {
                var gr = new GlideRecord(modelToConfigTableName);
                gr.get(modelIDs[i]);
                gr.deleteRecord();
            } catch (e) {
                gs.error("An error occurred unlinking an NLU Model: ", e);
                return "Sorry, an error occurred";
            }
        }
        return 'ok';
    },

    unlinkMirroredRules: function() {
        var targetProfileParmName = 'sysparm_profile_id';
        var mirroredProfilesParmName = 'sysparm_search_profile_ids';

        // Get the ID of the profile to unlink the dictionaries from
        var profileSysID = this.getParameter(targetProfileParmName);
        if (profileSysID == null || profileSysID.length() &lt; 1) {
            gs.error(gs.getMessage("No profile sys_id provided"));
            return gs.getMessage('Error: No Profile ID Provided');
        }

        // Get the ID(s) of the profiles to unlink
        var searchProfilesIDsString = this.getParameter(mirroredProfilesParmName);
        if (searchProfilesIDsString == null || searchProfilesIDsString.length() &lt; 1) {
            gs.error(gs.getMessage("No Search Profile IDs provided"));
            return gs.getMessage('No Search Profile IDs Provided');
        }

        var searchProfileIds = searchProfilesIDsString.split(',');
        for (var i = 0; i &lt; searchProfileIds.length; i++) {
            try {
                var gr = new GlideRecord("ais_rule_mirror_m2m");
                gr.addQuery('sys_id', searchProfileIds[i]);
                gr.query();
                while (gr.next()) {
                    gr.deleteRecord();
                }
            } catch (e) {
                gs.error(gs.getMessage("An error occurred unlinking a Search Profile: "), e);
                return gs.getMessage("Sorry, an error occurred");
            }
        }
        return 'ok';
    },

    type: 'AisProfileLinkingService'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-07-20 22:01:54&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1b9397365bc21010d9a5ce1a8581c75c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;15&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AisProfileLinkingService&lt;/sys_name&gt;
        &lt;sys_package display_value="AI Search" source="com.glide.ais"&gt;eb04fc283c31311068bcf327dfe37f93&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1b9397365bc21010d9a5ce1a8581c75c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-03-19 19:03:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:18</sys_created_on>
        <sys_id>abb0b01983b01210c6695855eeaad3c5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AisProfileLinkingService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_abb0b01983b01210c6695855eeaad3c5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:18</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
