<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b2d3df1f53012110d185ddeeff7b1228</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.dao_GroupAllocationDataDao&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;dao_GroupAllocationDataDao&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var dao_GroupAllocationDataDao = Class.create();
dao_GroupAllocationDataDao.prototype = {
    initialize: function(subscriptionDetailMap) {
        this._dbUtil = new sn_entitlement.DBUtil();
    },

    /**
     * Retrieves the group_allocation_data.sys_id values for all records that tie
     * back to the provided subscriptionDetailId
     *
     * @param {guid} subscriptionDetailId The subscription_detail.sys_id to filter by
     * @returns {array} An array of group_allocation_data.sys_id values
     */
    getGroupAllocationDataIdsBySubscriptionDetailId: function(subscriptionDetailId) {
        const gr = new GlideRecord('group_allocation_data_m2m_subscription_detail');
        gr.addQuery('subscription_detail', subscriptionDetailId);
        gr.query();

        let ids = [];
        while (gr.next())
            ids.push(String(gr.getValue('group_allocation_data')));
        return ids;
    },

    /**
     * Retrieves the group_allocation_data.sys_id values for records that are not fully allocated and tie
     * back to the provided subscriptionDetailId
     *
     * @param {guid} subscriptionDetailId The subscription_detail.sys_id to filter by
     * @returns {array} An array of group_allocation_data.sys_id values
     */
    getGroupAllocationDataIdsBySubscriptionDetailIdAndNotFullyAllocated: function(subscriptionDetailId) {
        const gr = new GlideRecord('group_allocation_data_m2m_subscription_detail');
        gr.addQuery('subscription_detail', subscriptionDetailId);
        gr.addQuery('is_allocated', false);
        gr.query();

        const ids = new Set();
        while (gr.next())
            ids.add(String(gr.getValue('group_allocation_data')));
        return Array.from(ids);
    },

    /**
     * Retrieves an EntityAllocationData object for the group_allocation_data.sys_id provided
     *
     * @param {guid} groupAllocationDataId The group_allocation_data.sys_id to retrieve data for
     * @returns {object} A EntityAllocationData object or null
     */
    getEntityAllocationDataObjectByGroupAllocationDataId: function(groupAllocationDataId) {
        const gr = new GlideRecord('group_allocation_data');
        return gr.get(groupAllocationDataId) ?
            this._mapGroupAllocationDataRecordToObject(gr) :
            null;
    },

    /**
     * Maps a group_allocation_data GlideRecord to a EntityAllocationData object
     *
     * @param {object} A GlideRecord group_allocation_data row
     * @returns {object} A EntityAllocationData record
     */
    _mapGroupAllocationDataRecordToObject(record) {
        const id = record.getUniqueValue();

        return new sn_entitlement.EntityAllocationData(
            'sys_user_group.sys_id',
            record.getValue('group'),
            record.getValue('qualifying_data'),
            this._dbUtil.convertGlideListToArray(record.getValue('assigned_roles')),
            this._dbUtil.convertGlideListToArray(record.getValue('subscribeable_roles')),
            this._dbUtil.convertGlideListToArray(record.getValue('subscribed_roles')),
            this._dbUtil.convertGlideListToArray(record.getValue('unsubscribed_roles')),
            this._getSubscriptionIdsByGroupAllocationDataIdAndIsAllocated(id, true),
            this._getSubscriptionIdsByGroupAllocationDataIdAndIsAllocated(id, false),
            record.getValue('is_fully_allocated').toLowerCase() == 'true',
        );
    },

    /**
     * Retrieves the subscriptionIds associated with an unallocated group data record filtered by the is_allocated flag
     *
     * @param {guid} groupAllocationDataId The group_allocation_data.sys_id to filter by
     * @param {bool} isAllocated The is_allocated value to filter by
     * @returns {array} An array of subscription_entitlement.sys_id values
     */
    _getSubscriptionIdsByGroupAllocationDataIdAndIsAllocated: function(groupAllocationDataId, isAllocated) {
        const gr = new GlideRecord('group_allocation_data_m2m_subscription_detail');
        gr.addQuery('group_allocation_data', groupAllocationDataId);
        gr.addQuery('is_allocated', isAllocated);
        gr.query();

        let ids = [];
        while (gr.next())
            ids.push(this._getSubIdFromGlideRecord(gr));

        return ids;
    },

    _getSubIdFromGlideRecord: function(gr) {
        const subscription = gr.subscription_detail.subscription ? String(gr.subscription_detail.subscription) : "";
        return subscription.length &gt; 0 ? subscription : String(gr.subscription_detail.license);
    },

    type: 'dao_GroupAllocationDataDao'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-22 03:10:52&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b2d3df1f53012110d185ddeeff7b1228&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;39&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;dao_GroupAllocationDataDao&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b2d3df1f53012110d185ddeeff7b1228&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-29 23:53:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:16</sys_created_on>
        <sys_id>6010c99d83341210c6695855eeaad363</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>dao_GroupAllocationDataDao</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6010c99d83341210c6695855eeaad363</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:16</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
