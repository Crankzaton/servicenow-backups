<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>26aa911eff312110468365d7d3b8fe98</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.CalculatedFieldSubscriptionDetailStatus&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CalculatedFieldSubscriptionDetailStatus&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CalculatedFieldSubscriptionDetailStatus = Class.create();
CalculatedFieldSubscriptionDetailStatus.prototype = {
    initialize: function() {
        this._subscriptionUsageUtils = new sn_entitlement.SubscriptionUsageUtils();
        this._displayTypeDisplayOnly = parseInt(sn_entitlement.LicensingEngineConstants.DISPLAY_TYPE_DISPLAY_ONLY);
        this._subscriptionTypeUnlimitedUser = parseInt(sn_entitlement.LicensingEngineConstants.UNLIMITED_USER_LICENSE);

    },

    calculateStatus: function(current) {
        try {
            if (!current)
                return 'na';

            return this._isRecordV1(current) ?
                this._calculateAllocatedStatusV1(current) :
                this._calculateAllocatedStatusv2(current);
        } catch (err) {
            return 'na';
        }
    },

    _isRecordV1: function(current) {
        return current.license &amp;&amp; !current.subscription;
    },

    _calculateAllocatedStatusV1: function(current) {
        return current.license.allocated_status ? current.license.allocated_status : 'na';
    },

    _calculateAllocatedStatusv2: function(current) {
        const displayType = parseInt(current.subscription.display_type);
        const subscriptionType = parseInt(current.subscription.subscription_type);
        if (!current.subscription || !current.subscription.purchased_count || displayType === this._displayTypeDisplayOnly || subscriptionType === this._subscriptionTypeUnlimitedUser)
            return 'na';

        const threshold = Number(gs.getProperty('sn_sub_man.u_subscription_threshold', 90));
        const purchased = Number(current.subscription.purchased_count);
        const allocated = this._getAllocatedCount(current);

        if (!Number.isInteger(purchased) || !Number.isInteger(allocated))
            return 'na';

        if (allocated &gt;= threshold / 100 * purchased &amp;&amp; allocated &lt; purchased)
            return 'near'; // Near Capacity

        if (purchased &gt; allocated)
            return 'under'; // Compliant

        if (purchased == allocated)
            return 'even'; // Even

        return 'over'; // Over-allocated
    },

    /**
     * Look for all the possible fields to get the allocated count, since we calculate counts for each record in subscription_entitlement
     * Only one field in 'current' is expected to have a value &gt; 0
     */
    _getAllocatedCount: function(current) {
        if (gs.nil(current.allocated_user_count) &amp;&amp; !current.allocated_custom_table_count)
            return null;

        return current.allocated_custom_table_count &gt; 0 ?
            Number(current.allocated_custom_table_count) :
            Number(this._subscriptionUsageUtils.calculateRealtimeAllocation(current));
    },
    type: 'CalculatedFieldSubscriptionDetailStatus'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-27 18:18:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;26aa911eff312110468365d7d3b8fe98&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CalculatedFieldSubscriptionDetailStatus&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_26aa911eff312110468365d7d3b8fe98&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-05 23:48:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:33</sys_created_on>
        <sys_id>8a01f45983b01210c6695855eeaad3c2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CalculatedFieldSubscriptionDetailStatus</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8a01f45983b01210c6695855eeaad3c2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
