<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>00173240534200101553ddeeff7b12a7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VAUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAUtils = Class.create();
VAUtils.prototype = {
    initialize: function() {
    },

	/* similar validation we do in attachments_util.js for platform and portal */
	validateAttachment: function(file, field) {
		if (field.allowedFileSize) {
			var attrMaxSize = parseInt(field.allowedFileSize);
			var allowedSizeInBytes = attrMaxSize * 1048576; // 1048576 -&gt; MB_TO_BYTES
			if (file.size &gt; allowedSizeInBytes)
				return { type : 'failure', message: gs.getMessage('The size of the uploaded file cannot exceed {0} MB', field.allowedFileSize) };
		}
		if (Array.isArray(field.allowedExtensions) &amp;&amp; field.allowedExtensions.length) {
			var dot = file.name.lastIndexOf('.') + 1;
			var suffix = file.name.substring(dot).toLowerCase();
			for (var i = 0; i &lt; field.allowedExtensions.length; i++) {
				if (suffix === field.allowedExtensions[i].toLowerCase())
					return { type : 'success' };
			}
			return { type : 'failure', message: gs.getMessage('The uploaded file type is not permitted; allowed types are {0}', field.allowedExtensions.toString()) };
		}
		return { type : 'success' };
	},
	
	isValidEmail: function(email) {
		var regex = new RegExp("([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\.([a-zA-Z]{2,5})");
		return regex.test(email);
	},
	
	
	isValidURL: function(url) {
		var regex = new RegExp("(((ftp|http|https):\/\/)|(www\.))([-\w\.\/#$\?=+@&amp;%_:;]+)");
		return regex.test(url);
	},
	
	
	isValidIPAddress: function(ip) {
		return (SncIPAddressV4.get(ip) || SncIPAddressV6.get(ip));
	},

    type: 'VAUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-26 10:25:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;00173240534200101553ddeeff7b12a7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Service Management Virtual Agent Core" source="com.glideapp.sm_va_core"&gt;a89d7c203c75311068bcf327dfe37f6e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_00173240534200101553ddeeff7b12a7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-06-10 01:39:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:51</sys_created_on>
        <sys_id>fb20b85583b01210c6695855eeaad352</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_fb20b85583b01210c6695855eeaad352</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
