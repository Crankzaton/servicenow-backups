<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>01d4473353e33300d1dcddeeff7b122d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;ml_capability_definition_base&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Check scope in solution name&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	var solutionLabel = current.getValue("solution_label");
	var solutionName = current.getValue("solution_name");
	var name = "ml_" + gs.getNewAppScopeCompanyPrefix() + '_'+ getScope(current) +'_' + getDomainName() +'_' + solutionLabel.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');

	while (name.indexOf("__") != -1) {
		name = name.replace(/__/g, "_");
	}

	// Replace any trailing underscores
	while (name != '' &amp;&amp; name.charAt(name.length - 1) == '_') {
		name = name.substring(0, name.length - 1);
	}
	
	var source = current.getValue("request_source");
	if (JSUtil.areEqual(source, 'api')) {
		name = generateUniqueName(name);
	}

	if (!isSolutionDefinitionPresent(name)) {
		if (name != solutionName)
			current.setValue('solution_name',name);
	} else {
		gs.addErrorMessage("Solution name should be unique");
		current.setAbortAction(true);
	}
	
	function isSolutionDefinitionPresent(solutionName) {
		if (!solutionName)
			return false;
		var gr = new GlideRecord('ml_capability_definition_base');
		gr.addQuery('solution_name',solutionName);
		gr.query();
		if(gr.hasNext()){
			return true;
		}
		return false;
	}
	
	function getScope(current) {
		var scope = gs.getCurrentApplicationScope();
		try {
			// use scope key in solution_properties json to create
			// solution name for api created solutions 
			var solutionProperties = current.getValue('solution_properties');
			if (JSUtil.notNil (solutionProperties)) {
				var solutionPropertiesJson = JSON.parse(solutionProperties);
				if ('scope' in solutionPropertiesJson) {
					scope = solutionPropertiesJson.scope;
				}
			}
		} catch (ex) {
			scope = gs.getCurrentApplicationScope();
		}
		return scope;
	}
	
	function getDomainName() {
		// The domain name prefix is by default global.
		var domain_name = "global";
		var domain_sys_id = current.getValue('sys_domain');

		if (domain_sys_id === null ) {
			return domain_name;
		}

		var name = current.sys_domain.name;
		if(JSUtil.notNil(name)) {
			domain_name = name.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');
		}

		return domain_name;
	}
	
	function generateUniqueName(name) {
		var existingNames = getExistingSolutionNamesStartingWith(name);
		// this while loop will execute for 100 iterations and
		// try to generate a unique name
		while (JSUtil.contains(existingNames, name)) {
			var lastIndexOfSeparator = name.lastIndexOf("_");
			var suffix = name.substring(lastIndexOfSeparator + 1);
			var newSuffix = 1;
			if (!isNaN(suffix)) {
				newSuffix = parseInt(suffix) + 1;
				name = name.substring(0, lastIndexOfSeparator);
			}
			name = name + '_' + newSuffix;
		}
		return name;
	}
	
	function getExistingSolutionNamesStartingWith(name) {
		var existingNames = [];
		var gr = new GlideRecord('ml_capability_definition_base');
		gr.addQuery('solution_name','STARTSWITH', name);
		// we will try to get upto 100 names with the same prefix
		// if we are still not able to generate unique name, we will 
		// throw exception
		gr.setLimit(100);
		gr.query();
		while (gr.next()) {
			existingNames.push(gr.getValue('solution_name'));
		}
		return existingNames;
	}

})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-09-04 20:45:52&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;01d4473353e33300d1dcddeeff7b122d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Check scope in solution name&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;c41430683c31311068bcf327dfe37f28&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_01d4473353e33300d1dcddeeff7b122d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-04-17 06:39:53&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=01d4473353e33300d1dcddeeff7b122d"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:55:44</sys_created_on>
        <sys_id>eb2d681d83701210c6695855eeaad37f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check scope in solution name</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_eb2d681d83701210c6695855eeaad37f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:55:44</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
