<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8268dcbe53b61110456dddeeff7b12bd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_cmdb_ws.MapOutputFormatService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The standard output formatter class serves as a utility to create the pattern.&lt;/description&gt;
        &lt;name&gt;MapOutputFormatService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var MapOutputFormatService = Class.create();
MapOutputFormatService.prototype = {

	PROPERTY_LABEL_MAP: {},

    initialize: function() {
    },

	_newEdge: function(sysId, parent, child, type, port, isVirtual, endpoints, isReference) {
		var edge = {};
		edge[this.ID] = sysId;
		edge[this.PARENT] = parent;
		edge[this.CHILD] = child;
		edge[this.REL_TYPE] = isReference ? gs.getMessage('Reference') : type;
		edge[this.PORT] = this._getValueOrDefault(port, null);
		edge[this.IS_VIR_CONN] = this._getValueOrDefault(isVirtual, false);
		edge[this.IS_REF] = this._getValueOrDefault(isReference, false);
		edge[this.ENDPOINTS] = this._getValueOrDefault(endpoints, []);

		return edge;
	},

	_newReferenceEdge: function(parent, child, type) {
		//generate a sys_id since Ci ref Ci don't have one
		var sysId = parent + "_" + type + "_" + child;
		return this._newEdge(this._generateMD5Hex(sysId), parent, child, type, null, false, [], true);

	},

	_getCINodeInfo: function(sysIds, level) {
		var result = {};
        if (sysIds == null || sysIds.length === 0) {
			return result;
		}
		if (this._isEmptyObj(this.PROPERTY_LABEL_MAP)) {
			this.PROPERTY_LABEL_MAP = this._getCiAttributeMetadata();
		}
		var gr = new GlideRecordSecure(this.NODE_MAP_TABLE.CMDB_CI);
		gr.addQuery(this.COL_SYS_ID, this.IN_OP, sysIds);
		gr.query();
		var sysId = null;
		var tableName = this.PROPERTY_LABEL_MAP[this.SYS_CLASS_NAME];
		while(gr.next()) {
			sysId = gr.getUniqueValue();
			result[sysId] = {};
			result[sysId][this.PROPERTY_LABEL_MAP[this.COL_NAME]] = gr.getValue(this.COL_NAME);
			result[sysId][tableName] = gr.getDisplayValue(this.SYS_CLASS_NAME);
			result[sysId][this.APP_SVC_COUNT] = 0;
			result[sysId][this.COL_LAYER] = '';
			if(typeof level !== 'undefined' &amp;&amp; level !== null)
				result[sysId][this.FIXED_LAYER] = level;
			result[sysId][this.PROPERTIES] = this._formNodeProperties(gr);
			result[sysId][this.IS_ENDPOINT] = this._isEndPoint(result[sysId][this.PROPERTIES][tableName]);
			result[sysId][this.CONNECTIONS] = [];
			var createdOnDateTime = new GlideDateTime(gr.getValue(this.COL_SYS_CREATED_ON));
			result[sysId][this.COL_SYS_CREATED_ON] = createdOnDateTime.getNumericValue();
		}
		return result;
	},

	_formNodeProperties: function(glideRecord) {
		var props = {};
		var location = glideRecord.getValue(this.COL_LOCATION);
		var ownedBy = glideRecord.getValue(this.COL_OWNED_BY);
		props[this.PROPERTY_LABEL_MAP[this.SYS_CLASS_NAME]] = glideRecord.getValue(this.SYS_CLASS_NAME);
		props[this.PROPERTY_LABEL_MAP[this.COL_LOCATION]] = global.JSUtil.nil(location) ? '' : location;
		props[this.PROPERTY_LABEL_MAP[this.COL_OWNED_BY]] = global.JSUtil.nil(ownedBy) ? '' : ownedBy;
		props[this.PROPERTY_LABEL_MAP[this.COL_SYS_UPDATED_ON]] = glideRecord.getValue(this.COL_SYS_UPDATED_ON);
		props[this.PROPERTY_LABEL_MAP[this.COL_DISCOVERY_SOURCE]] = glideRecord.getValue(this.COL_DISCOVERY_SOURCE) || '';
		props[this.PROPERTY_LABEL_MAP[this.COL_LAST_DISCOVERED]] = glideRecord.getValue(this.COL_LAST_DISCOVERED) || '';

		return props;
	},

	_getCiAttributeMetadata: function() {
		var cacheKey = 'CI_ATTR_META_DATA';
		var strResult = this._cacheGet(cacheKey);
		var metadata = {};
		if (global.JSUtil.nil(strResult)) {
			var gr = new GlideRecord(this.NODE_MAP_TABLE.CMDB_CI);
			metadata[this.COL_OWNED_BY] = gr.getElement(this.COL_OWNED_BY).getLabel();
			metadata[this.COL_NAME] = gr.getElement(this.COL_NAME).getLabel();
			metadata[this.COL_DISCOVERY_SOURCE] = gr.getElement(this.COL_DISCOVERY_SOURCE).getLabel();
			metadata[this.COL_LAST_DISCOVERED] = gr.getElement(this.COL_LAST_DISCOVERED).getLabel();
			metadata[this.COL_SYS_UPDATED_ON] = gr.getElement(this.COL_SYS_UPDATED_ON).getLabel();
			metadata[this.COL_LOCATION] = gr.getElement(this.COL_LOCATION).getLabel();
			metadata[this.SYS_CLASS_NAME] = gr.getElement(this.SYS_CLASS_NAME).getLabel();
			metadata[this.COL_LAYER] = this.LBL_LAYER;

			this._cachePut(cacheKey, JSON.stringify(metadata));
		} else {
			metadata = JSON.parse(strResult);
		}
		return metadata;
	},

	_getPropLabel: function(propKey) {
		return this.PROPERTY_LABEL_MAP[propKey];
	},

	_getValueOrDefault: function(value, defValue) {
		return global.JSUtil.nil(value) ? defValue : value;
	},

	_mergeCMDBSMMap: function(cmdbResult, smResult) {
		var arrayUtil = this.arrayUtil;
		for (var ci in smResult[this.CI_NODE_INFO]) {
			if (!this._hasProperty(ci, cmdbResult[this.CI_NODE_INFO])) {
				cmdbResult[this.CI_NODE_INFO][ci] = smResult[this.CI_NODE_INFO][ci];
			} else {
				var fixedLayer = cmdbResult[this.CI_NODE_INFO][ci][this.FIXED_LAYER];
				//for application ci just concat the connections array rest are already sent by SM API
				var tmpConnectionArr = [];
				this.arrayUtil.concat(tmpConnectionArr, smResult[this.CI_NODE_INFO][ci][this.CONNECTIONS]);
				this.arrayUtil.concat(tmpConnectionArr, cmdbResult[this.CI_NODE_INFO][ci][this.CONNECTIONS]);
				cmdbResult[this.CI_NODE_INFO][ci] = smResult[this.CI_NODE_INFO][ci]; //copy the ci details from SM
				cmdbResult[this.CI_NODE_INFO][ci][this.CONNECTIONS] = tmpConnectionArr;
				cmdbResult[this.CI_NODE_INFO][ci][this.FIXED_LAYER] = fixedLayer;
			}
			if (cmdbResult[this.CI_NODE_INFO][ci].properties[this.CREATED]) {
				var sysCreatedOn = cmdbResult[this.CI_NODE_INFO][ci].properties[this.CREATED] + "";
				cmdbResult[this.CI_NODE_INFO][ci][this.COL_SYS_CREATED_ON] = new GlideDateTime(sysCreatedOn).getNumericValue();
				delete cmdbResult[this.CI_NODE_INFO][ci].properties[this.CREATED];
			}
		}
	},

	_getDefaultLayerJson: function() {
		var cacheKey = 'CMDB_LAYER_CHOICES';
		var strResult = this._cacheGet(cacheKey);
		var cmdbLayers = {};
		if (global.JSUtil.nil(strResult)) {
			var gr = new GlideRecordSecure('sys_choice');
			gr.addQuery('name', 'cmdb_layer');
			gr.addQuery('element', 'layer');
			gr.addQuery('language', 'en');
			gr.query();
			while(gr.next()){
				cmdbLayers[gr.getValue('label')] = false;
			}
			this._cachePut(cacheKey, JSON.stringify(cmdbLayers));
		} else {
			cmdbLayers = JSON.parse(strResult);
		}
		return cmdbLayers;
	},

    type: 'MapOutputFormatService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-30 23:37:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8268dcbe53b61110456dddeeff7b12bd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;57&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;MapOutputFormatService&lt;/sys_name&gt;
        &lt;sys_package display_value="CMDB Workspace" source="sn_cmdb_ws"&gt;c8ab76825371201032b7ddeeff7b1280&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="CMDB Workspace"&gt;c8ab76825371201032b7ddeeff7b1280&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8268dcbe53b61110456dddeeff7b12bd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-05 19:04:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:44:35</sys_created_on>
        <sys_id>d758b81183341210c6695855eeaad379</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>MapOutputFormatService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d758b81183341210c6695855eeaad379</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:44:35</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
