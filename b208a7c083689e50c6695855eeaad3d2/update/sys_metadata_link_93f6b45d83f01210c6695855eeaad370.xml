<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>714ca1d84f652110d8de066fae72e0f0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ScopedIPRange&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;The input range can be comma separated in the following three formats
 1. IP addresses. (10.10.10.1, 10.10.10.2)
 2. IP networks. (10.10.10.0/23)
 3. IP ranges. (10.10.10.1-10.10.11.254)
The output is the list of ip addresses.&lt;/description&gt;
        &lt;name&gt;ScopedIPRange&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ScopedIPRange = Class.create();
ScopedIPRange.prototype = {
    initialize: function() {},

    parse: function(ip_range) {
        var nRanges = [];
        if (JSUtil.nil(ip_range))
            return nRanges;
        gs.debug('ScopedIPRange: iprange' + ip_range);
        var ranges = ip_range;

        var ipAddress;
        var ipNetwork;
        var ipRange;
        var useLegacyParsing = false;

        try {
            ipAddress = SncIPAddress;
            ipNetwork = SncIPNetwork;
            ipRange = SncIPRange;
        } catch (e) {
            ipAddress = SncIPAddressV4;
            ipNetwork = SncIPNetworkV4;
            ipRange = SncIPRangeV4;
            useLegacyParsing = true;
        }

        if (!useLegacyParsing) {
            var elements = ranges.split(',');
            gs.debug('ScopedIPRange: elements :' + elements);

            for (var i = 0; i &lt; elements.length; i++) {
                var elem = elements[i];
                if (elem.includes(':')) {
                    nRanges.push(elem);
                    gs.debug('ScopedIPRange:' + nRanges + ' ' + elem);
                    continue;
                }
                var coll = ipNetwork.getIPNetworkInstance(elem);
                if (coll) {
                    var itr = coll.iterator();
                    while (itr.hasNext()) {

                        nRanges.push(itr.next());
                    }
                    continue;
                }
                coll = ipRange.getIPRangeV4Instance(elem);
                if (coll) {
                    var itr = coll.iterator();
                    while (itr.hasNext()) {

                        nRanges.push(itr.next());
                    }
                    continue;
                }
                coll = ipAddress.getIPAddressV4Instance(elem);
                if (coll) {
                    nRanges.push(coll);
                    continue;
                }
            }

        } else {
            var elements = ranges.split(',');
            gs.debug('ScopedIPRange: elements :' + elements);

            for (var i = 0; i &lt; elements.length; i++) {
                var elem = elements[i];
                if (elem.includes(':')) {
                    nRanges.push(elem);
                    gs.debug('ScopedIPRange:' + nRanges + ' ' + elem);
                    continue;
                }
                if (elem.includes('/')) {
                    var coll = new ipNetwork(elem);
                    if (coll) {
                        var itr = coll.iterator();
                        while (itr.hasNext()) {

                            nRanges.push(itr.next());
                        }
                        continue;
                    }
                }

                if (elem.includes('-')) {
                    coll = ipRange.getIPRangeV4Instance(elem);
                    if (coll) {
                        var itr = coll.iterator();
                        while (itr.hasNext()) {

                            nRanges.push(itr.next());
                        }
                        continue;
                    }
                }

                coll = ipAddress.getIPAddressV4Instance(elem);
                if (coll) {
                    nRanges.push(coll);
                    continue;
                }

            }

        }
        return nRanges;
    },

     type: 'ScopedIPRange'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-09 04:14:29&lt;/sys_created_on&gt;
        &lt;sys_id&gt;714ca1d84f652110d8de066fae72e0f0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ScopedIPRange&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Automation" source="com.snc.core.automation"&gt;6ca7f42c3cb1311068bcf327dfe37f6a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_714ca1d84f652110d8de066fae72e0f0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:25:05&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:35</sys_created_on>
        <sys_id>93f6b45d83f01210c6695855eeaad370</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ScopedIPRange</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_93f6b45d83f01210c6695855eeaad370</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:35</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
