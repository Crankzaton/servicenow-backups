<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0c596bd877b421109c62f5f3cb5a9935</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.EntitlementService&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Resolves entitlement requests post validation&lt;/description&gt;
        &lt;name&gt;EntitlementService&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var EntitlementService = Class.create();
EntitlementService.prototype = {
    initialize: function() {
        this.requestProcessorFactory = new EntitlementProcessorFactory();
        this.logger = new LoggingUtil();
    },

    isEntitledForArtifact: function(artifactType, artifactId) {
        if (new InstanceInfoUtil().isOpenInstance())
            return true;
        const entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(artifactType);
        return entitlementRequestProcessor.isEntitled(artifactId);
    },

    isLicenseCheckRequiredForArtifact: function(artifactType, artifactId) {
        const entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(artifactType);
        return entitlementRequestProcessor.isLicenseCheckRequired(artifactId);
    },

    isTableLicensedForArtifact: function(artifactType, artifactId, tableName) {

        let customTableProcessor = new CustomTableEntitlementProcessor();
        let appEntitlementProcessor = new AppEntitlementProcessor();
        let arrayUtil = new global.ArrayUtil();
        let tablesSchemaHelper = new TablesSchemaHelper();

        try {
            if (new InstanceInfoUtil().isOpenInstance())
                return true;

            if (!tablesSchemaHelper.isvalidTable(tableName))
                return this.isEntitledForArtifact(artifactType, artifactId);

            const entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(artifactType);
            const artifactSubscriptionIds = entitlementRequestProcessor.getActiveSubscriptionSysIds(artifactId);
            const isLicenseCheckRequiredForArtifact = entitlementRequestProcessor.isLicenseCheckRequired(artifactId);

            // Handles the case if given table is a custom table - exempted / licensed.
            if (customTableProcessor.isCustomTable(tableName)) {
                let ctiSubscriptonIds;
                const isLicensableCustomTable = customTableProcessor.isLicensableCustomTable(tableName);
                if (isLicensableCustomTable)
                    ctiSubscriptonIds = customTableProcessor.getActiveSubscriptionSysId(tableName);

                if (!isLicensableCustomTable &amp;&amp; isLicenseCheckRequiredForArtifact)
                    return !gs.nil(artifactSubscriptionIds) &amp;&amp; artifactSubscriptionIds.length &gt; 0;
                else if (isLicensableCustomTable &amp;&amp; !isLicenseCheckRequiredForArtifact)
                    return !gs.nil(ctiSubscriptonIds) &amp;&amp; ctiSubscriptonIds.length &gt; 0;
                else if (isLicensableCustomTable &amp;&amp; isLicenseCheckRequiredForArtifact)
                    return arrayUtil.contains(artifactSubscriptionIds, ctiSubscriptonIds);
                // Exempted custom table and free artifacts
                return true;
            }

            // Handles the case if the given table is not a custom table.
            const tablePackage = new SysDBObjectDAO().getPackageByTable(tableName);
            const appId = new SysPackageDAO().getAppIdByPackage(tablePackage);
            if (gs.nil(appId))
                return this.isEntitledForArtifact(artifactType, artifactId);
            let appSubscriptionIds;
            const isLicenseCheckRequiredForApp = appEntitlementProcessor.isLicenseCheckRequired(appId);
            if (isLicenseCheckRequiredForApp)
                appSubscriptionIds = appEntitlementProcessor.getActiveSubscriptionSysIds(appId);

            if (!isLicenseCheckRequiredForApp &amp;&amp; isLicenseCheckRequiredForArtifact)
                return !gs.nil(artifactSubscriptionIds) &amp;&amp; artifactSubscriptionIds.length &gt; 0;
            else if (isLicenseCheckRequiredForApp &amp;&amp; !isLicenseCheckRequiredForArtifact)
                return !gs.nil(appSubscriptionIds) &amp;&amp; appSubscriptionIds.length &gt; 0;
            else if (isLicenseCheckRequiredForApp &amp;&amp; isLicenseCheckRequiredForArtifact)
                return arrayUtil.contains(artifactSubscriptionIds, appSubscriptionIds);
            // Free table  and free artifacts
            return true;

        } catch (error) {
            const errorMsg = "An error has occured for artifact: " + artifactType + " id : " + artifactId + " table : " + tableName + +" Error : " + error + " \n " + error.stack;
            this.logger.logErrorWithoutAudit(LicensingEngineConstants.ENTITLEMENT_SERVICE, LicensingEngineConstants.TABLE_LICENSED_FOR_ARTIFACT, errorMsg);
            return LicensingEngineConstants.UNABLE_TO_DETERMINE_ENTITLEMENT;
        }
    },

    /* returns object with key: value pairs as isUserEntitlementNeeded: boolean (determines if user entitlement is needed),
     *	artifactType: string (type of artifact which should be used to check entitlement),
     *	artifactId: string (id of the artifact which should be used to check entitlement)
     */
    getTableEntitlementInfo: function(tableName) {
        var result = {
            isUserEntitlementNeeded: true,
            artifactType: null,
            artifactId: null
        };
        try {
            if (new InstanceInfoUtil().isOpenInstance()) {
                result.isUserEntitlementNeeded = false;
                return result;
            }
            // using default access type as CHECK
            let userAccessCheckType = LicensingEngineConstants.CHECK;

            // if table is present in sys_custom_db_object, then checks are performed for custom_table artifact type,
            // else app associated with the table is fetched and checks are performed on the retrieved app_id
            var customTableProcessor = new CustomTableEntitlementProcessor();
            if (customTableProcessor.isCustomTable(tableName)) {
                result.artifactType = LicensingEngineConstants.CUSTOM_TABLE;
                result.artifactId = tableName;

                // if the given table is a non-licensable custom table (gf table or an exempted table)
                // then user entitlement is not needed, we return from here only
                // else for a licensable custom table, system will fetch the associated subscription and get the
                // userAccessCheckType to determine if user entitlement is needed
                if (!customTableProcessor.isLicensableCustomTable(tableName)) {
                    result.isUserEntitlementNeeded = false;
                    return result;
                }

            } else {
                result.artifactType = LicensingEngineConstants.APP_ID;
                var tablePackage = new SysDBObjectDAO().getPackageByTable(tableName);
                if (gs.nil(tablePackage)) {
                    this.logger.logCouldNotFind(LicensingEngineConstants.ENTITLEMENT_SERVICE, LicensingEngineConstants.GET_TABLE_ENTITLEMENT_INFO,
                        LicensingEngineConstants.ASSOCIATED_PACKAGE_FOR_TABLE);
                    return result;
                }

                result.artifactId = new SysPackageDAO().getAppIdByPackage(tablePackage);
                if (gs.nil(result.artifactId)) {
                    this.logger.logCouldNotFind(LicensingEngineConstants.ENTITLEMENT_SERVICE, LicensingEngineConstants.GET_TABLE_ENTITLEMENT_INFO,
                        LicensingEngineConstants.ASSOCIATED_APP_FOR_PACKAGE);
                    return result;
                }
            }
            //  call will go to the respective entitlement processor to get the userAccessCheckType for the given artifact using associated subscriptions
            const entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(result.artifactType);
            userAccessCheckType = entitlementRequestProcessor.getUserAccessCheckType(result.artifactId);
            this.logger.logInfo(LicensingEngineConstants.ENTITLEMENT_SERVICE, LicensingEngineConstants.GET_TABLE_ENTITLEMENT_INFO,
                LicensingEngineConstants.USER_ACCESS_CHECK_TYPE_FOR_THE_TABLE_.concat(tableName).concat(LicensingEngineConstants.COLON).concat(userAccessCheckType));

            // if userAccessCheckType is set to ALLOW, then user entitlement is not needed for the table
            if (LicensingEngineConstants.ALLOW.equals(userAccessCheckType))
                result.isUserEntitlementNeeded = false;

            return result;

        } catch (error) {
            this.logger.logErrorInDetermining(LicensingEngineConstants.ENTITLEMENT_SERVICE, LicensingEngineConstants.GET_TABLE_ENTITLEMENT_INFO,
                LicensingEngineConstants.USER_ACCESS_CHECK_TYPE, error);
            return result;
        }
    },

    // returns true if user is entitled to perform role on the given artifact
    isUserEntitledForRoleOnArtifact: function(userSysId, role, artifactType, artifactId) {
        if (new InstanceInfoUtil().isOpenInstance())
            return true;
        const entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(artifactType);
        return entitlementRequestProcessor.isUserEntitledForRole(userSysId, role, artifactId);
    },

    getLicenseDetailsForArtifact: function(artifactType, artifactId) {
        var entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(artifactType);
        return entitlementRequestProcessor.getLicenseDetailsForArtifact(artifactId);
    },

    getLicenseDetailsForArtifacts: function(artifactType, artifactIdList) {
        let entitlementRequestProcessor = this.requestProcessorFactory.getEntitlementRequestProcessor(artifactType);
        return entitlementRequestProcessor.getLicenseDetailsForArtifacts(artifactIdList);
    },

    type: 'EntitlementService'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-09 06:42:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0c596bd877b421109c62f5f3cb5a9935&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;EntitlementService&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0c596bd877b421109c62f5f3cb5a9935&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-16 11:38:21&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:54</sys_created_on>
        <sys_id>5360789583b01210c6695855eeaad37f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>EntitlementService</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5360789583b01210c6695855eeaad37f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:54</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
