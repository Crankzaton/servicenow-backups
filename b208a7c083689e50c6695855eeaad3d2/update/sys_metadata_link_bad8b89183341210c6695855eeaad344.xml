<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a73dba0ad9c5b910f8775f84af847ad2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_cwf_wrkspc.CSMAIDisplayAjax&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Display AI Icons, labels and banners on a form&lt;/description&gt;
        &lt;name&gt;CSMAIDisplayAjax&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[			var CSMAIDisplayAjax = Class.create();
CSMAIDisplayAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    //Function to display UI16 AI labels
    getPredictionResults: function(sysId, tableName, checkBannerInfo) {
	
        sysId = sysId || this.getParameter('sysparm_sys_id');
        tableName = tableName || this.getParameter('sysparm_table_name');
        checkBannerInfo = checkBannerInfo || true;

        var predictionsResults = [];

        if (gs.nil(sysId) || gs.nil(tableName))
            return predictionsResults;

        // Security check
        var currentRecord = this._getRecord(sysId, tableName);
        if (gs.nil(currentRecord))
            return predictionsResults;

        var predictionsByFeature = new GlideScriptedExtensionPoint().getExtensions(CSMAIDisplayConstants.UI_EXTENSION_POINT);

        for (var i = 0; i &lt; predictionsByFeature.length; i++) {
            if (predictionsByFeature[i].isEnabled())
                predictionsResults = predictionsResults.concat(predictionsByFeature[i].getPredictions(sysId, tableName));
        }

        if (checkBannerInfo) {
            //The banner shouldn't display in UI16 if the prediction has been modified 
            for (j = 0; j &lt; predictionsResults.length; j++) {
                if (!this._isAIBannerEnabled() || (predictionsResults[j].displayBanner == "true" &amp;&amp;
                        gs.nil(currentRecord.getValue(predictionsResults[j].predictedField)))) 
                    predictionsResults[j].displayBanner = "false";
            }
        }
        return JSON.stringify(predictionsResults);
    },


    //Function to display AI Icons in workspace
    execute: function(input) {
        var results = [];
        var fieldsToMonitor = [];
        var sysId = input["sysId"];
        var tableName = input["table"];
  
        if (!gs.nil(sysId) &amp;&amp; !gs.nil(tableName)) {
            var predictionsResults = JSON.parse(this.getPredictionResults(sysId, tableName, false));

            if (!gs.nil(predictionsResults)) {
                for (i = 0; i &lt; predictionsResults.length; i++) {
                    var predictionsResult = predictionsResults[i];
                    results.push(this._getUIDisplayInfo(predictionsResult));
                    if (predictionsResult.fieldsToMonitor.length &gt; 0)
                        fieldsToMonitor = fieldsToMonitor.concat(predictionsResult.fieldsToMonitor);
                }
            }
        }

        if (fieldsToMonitor.length &gt; 0)
            fieldsToMonitor = this._removeDuplicates(fieldsToMonitor);

        var output = {
            "predictionResults": results,
            "fieldsToMonitor": fieldsToMonitor
        };
        return output;
    },


 
    
	//Function to display banner 
    getBannerInfo: function(tableName, sysId) {
        var bannerInfo = {
            "bannerId": CSMAIDisplayConstants.UI_INFO.BANNER_ID,
            "display": "false",
        };

        if (!this._isAIBannerEnabled() || gs.nil(sysId) || gs.nil(tableName))
            return bannerInfo;

        // Security check
        var currentRecord = this._getRecord(sysId, tableName);
        if (gs.nil(currentRecord)|| currentRecord.active == "false")
            return bannerInfo;

        var displayBannerOnWorkspace = "false";
        var fieldsToMonitor = [];
		var fieldLabel = [];

        var predictionsByFeature = new GlideScriptedExtensionPoint().getExtensions(CSMAIDisplayConstants.UI_EXTENSION_POINT);
        for (var i = 0; i &lt; predictionsByFeature.length; i++) {
            if (predictionsByFeature[i].isEnabled()) {
                var predictionsResults = predictionsByFeature[i].getPredictions(sysId, tableName);
                if (!gs.nil(predictionsResults)) {
					
                    for (j = 0; j &lt; predictionsResults.length; j++) {
                        if ((predictionsResults[j].displayBanner == "true" &amp;&amp; !gs.nil(currentRecord.getValue(predictionsResults[j].predictedField)) &amp;&amp; currentRecord.getValue(predictionsResults[j].predictedField) == predictionsResults[j].predictedValue)) {
							displayBannerOnWorkspace = "true";
							fieldLabel.push(predictionsResults[j].predictedFieldlabel);
                        }
						fieldsToMonitor.push(predictionsResults[j].predictedField);
                                 
                    }
                }
            }
        }
		
        bannerInfo = {
            "bannerId": CSMAIDisplayConstants.UI_INFO.BANNER_ID,
            "display": displayBannerOnWorkspace,
            "icon": CSMAIDisplayConstants.UI_INFO.ICON_NAME,
            "message": gs.getMessage(CSMAIDisplayConstants.UI_MESSAGES.BANNER) + fieldLabel.join(', '),
            "priority": CSMAIDisplayConstants.UI_INFO.BANNER_PRIORITY,
            "fieldsToMonitor": fieldsToMonitor
        };
        return bannerInfo;
    },
	
   _getUIDisplayInfo: function(prediction) {
        var uiDisplayInfo = {};

        uiDisplayInfo[prediction.predictedField] = {
            'sectionLabel': CSMAIDisplayConstants.UI_INFO.SECTION_LABEL,
            'items': prediction.recommendations,
            'source': {
                'iconName': CSMAIDisplayConstants.UI_INFO.ICON_NAME,
                'value': CSMAIDisplayConstants.UI_INFO.ICON_VALUE,
                'variantName': CSMAIDisplayConstants.UI_INFO.ICON_VARIANT_NAME,
                'colorName': CSMAIDisplayConstants.UI_INFO.ICON_COLOR_NAME,
                'showIcon': CSMAIDisplayConstants.UI_INFO.ICON_SHOW,
                'description': prediction.iconDescription
            }
        };

        return uiDisplayInfo;
    },
    _removeDuplicates: function(fieldsToMonitor) {
        fieldsToMonitor = fieldsToMonitor.reduce(function(a, b) {
            if (a.indexOf(b) &lt; 0) a.push(b);
            return a;
        }, []);
        return fieldsToMonitor;
    },

    _isAIBannerEnabled: function() {
        return (gs.getProperty(CSMAIDisplayConstants.PROP_UI_BANNER_ENABLED, "false").toLowerCase() == "true");
    },

    _getRecord: function(sysId, tableName) {
        if (gs.nil(sysId) || gs.nil(tableName))
            return null;

        var _gr = new GlideRecord(tableName);
        if (_gr.canRead() &amp;&amp; _gr.get(sysId))
            return _gr;
        else
            return null;
    },


    type: 'CSMAIDisplayAjax'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-09-04 20:13:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a73dba0ad9c5b910f8775f84af847ad2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;66&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CSMAIDisplayAjax&lt;/sys_name&gt;
        &lt;sys_package display_value="CSM and FSM Configurable Workspace Foundation" source="sn_cwf_wrkspc"&gt;27b568be53b11010d4f9ddeeff7b12c5&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="CSM and FSM Configurable Workspace Foundation"&gt;27b568be53b11010d4f9ddeeff7b12c5&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a73dba0ad9c5b910f8775f84af847ad2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-07 12:49:47&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:45</sys_created_on>
        <sys_id>bad8b89183341210c6695855eeaad344</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CSMAIDisplayAjax</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bad8b89183341210c6695855eeaad344</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:45</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
