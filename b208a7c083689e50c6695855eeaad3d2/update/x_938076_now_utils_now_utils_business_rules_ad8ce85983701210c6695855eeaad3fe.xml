<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate date range</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var message = {
  time_off: gs.getMessage('time off'),
  time_off_in_approval: gs.getMessage('time off in approval'),
  time_off_rejected: gs.getMessage('time off rejected'),
  coverage: gs.getMessage('coverage'),
  extra_time: gs.getMessage('extra time')
 };

 var maxDateRangeDaysDuration;
 var type;
 if (current.type == 'time_off' || current.type == 'time_off_in_approval' || current.type == 'time_off_rejected') {
  maxDateRangeDaysDuration = parseInt(gs.getProperty('com.snc.on_call_rotation.calendar_span.max_time_off_days', '365'));
  type = current.type;
 }
 else {
  maxDateRangeDaysDuration = parseInt(gs.getProperty('com.snc.on_call_rotation.calendar_span.max_date_range_days', '30'));
  if (current.type == 'on_call' && JSUtil.nil(current.roster))
   type = 'extra_time';
  else
   type = 'coverage';
 }

 var startDateTime = getScheduleDateTime(current.start_date_time, current.schedule.time_zone);
 var endDateTime = getScheduleDateTime(current.end_date_time, current.schedule.time_zone);
 var coverageDateDiff = gs.dateDiff(startDateTime, endDateTime, true);
 if (JSUtil.nil(coverageDateDiff)) {
  gs.addErrorMessage(gs.getMessage("Invalid {0} spans", message[type]));
  current.setAbortAction(true);
 }
 var providedCoverageDuration = parseInt(coverageDateDiff / (24 * 60 * 60));
 if (providedCoverageDuration > maxDateRangeDaysDuration) {
  gs.addErrorMessage(gs.getMessage("Can not provide {0} for more than {1} consecutive days.", [message[type], maxDateRangeDaysDuration +""]));
  current.setAbortAction(true);
 }

 function getScheduleDateTime(dateTimeValue, timezone) {
  var scheduleDateTime = new GlideScheduleDateTime();
  scheduleDateTime.setValue(dateTimeValue);
  if (!scheduleDateTime.isFloating())
   scheduleDateTime.convertTimeZone(gs.getSession().getTimeZone(), timezone);
  return scheduleDateTime;
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:52</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ad8ce85983701210c6695855eeaad3fe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate date range</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_ad8ce85983701210c6695855eeaad3fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:52</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=ad8ce85983701210c6695855eeaad3fe"/>
</record_update>
