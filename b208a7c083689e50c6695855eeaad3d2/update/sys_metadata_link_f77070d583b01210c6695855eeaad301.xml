<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0fd83db585761110f877e10cffeb7b85</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_uibtk_api.DataBrokerDefinitions&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DataBrokerDefinitions&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[const DataBrokerDefinitions = Class.create();
DataBrokerDefinitions.prototype = Object.extendsObject(BuilderToolkitAPIBase, {
    TABLE: 'sys_ux_data_broker',
    FIELDS: ['acl_failure_result', 'api_name', 'api_url', 'data_drivers', 'description', 'http_method', 'macroponent', 'mutates_server_data', 'name', 'operations', 'output_properties', 'output_schema', 'parameters', 'private', 'props', 'query', 'request_body', 'required_translations', 'restricted_to_single_instance', 'schema_version', 'script', 'sys_id', 'sys_policy', 'type'],
    TYPE_MAP: {
        sys_ux_data_broker_graphql: 'GRAPHQL',
        sys_ux_data_broker_transform: 'TRANSFORM',
        sys_ux_data_broker_proxy: 'CLIENT_STATE',
        sys_ux_data_broker_composite: 'COMPOSITE',
        sys_ux_data_broker_rest: 'REST',
        sys_ux_data_broker_scriptlet: 'SCRIPTLET',
        sys_ux_controller: 'CONTROLLER'
    },
    TABLES: ['sys_ux_data_broker_graphql', 'sys_ux_data_broker_transform', 'sys_ux_data_broker_proxy', 'sys_ux_data_broker_composite', 'sys_ux_data_broker_rest', 'sys_ux_data_broker_scriptlet'],

    /**
     * @param table {string} because we have child tables, we need to support pulling directly from a child
     * @param fields {string[]}
     */
    initialize: function(table = null, fields = null) {
        BuilderToolkitAPIBase.prototype.initialize.call(this, table ?? this.TABLE, fields ?? this.FIELDS);
    },

    /**
     * Overrides parent class function to inject special fields
     * @param acc {object} the accumulator object
     * @param field {GlideElement} the field element we are currently working on
     */
    getFieldValues: function(acc, field) {
        acc = BuilderToolkitAPIBase.prototype.getFieldValues.call(this, acc, field);
        if (field.nil()) {
            return acc;
        }
        const fieldName = field.getName();
        if (fieldName === 'sys_class_name') {
            acc['type'] = this.TYPE_MAP[field] ?? 'UNKNOWN';
        } else if (fieldName === 'macroponent' &amp;&amp; field) {
            const macroponent = field.getRefRecord();
            acc['macroponent'] = new Macroponent().getRecordById(macroponent.getUniqueValue());
            acc['clientStateDataBrokerTagName'] = macroponent.root_component.getDisplayValue();
        } else if (fieldName === 'schema_version' &amp;&amp; this.fields.indexOf('schema_version') !== -1) {
            acc['schemaVersion'] = field ?? '1.0.0';
        }
        return acc;
    },

    /**
     * @param recordGR {GlideRecord} the record we want to get values for
     */
    getValuesFromGlideRecord: function(recordGR, noChildTableCheck = false) {
        if (!noChildTableCheck &amp;&amp; recordGR.sys_class_name.toString() === this.TABLE) {
            const childTableGR = this.getSecure(recordGR.sys_class_name.toString(), 'sys_id=' + recordGR.getUniqueValue());
            childTableGR.next();
            return {
                ...childTableGR.getElements().reduce(this.getFieldValues.bind(this), {}),
                private: childTableGR.private.getDisplayValue() === 'true'
            };
        } else {
            const fieldValues = recordGR.getElements().reduce(this.getFieldValues.bind(this), {});
            return noChildTableCheck ? fieldValues : {
                ...fieldValues,
                private: recordGR.private.getDisplayValue() === 'true'
            };
        }
    },

    // Gets basic DB defs without diving into child tables
    getBasicDataBrokerDefinitions: function() {
        const dataBrokerDefinitions = {};
        // First get simple brokers that have inputs and outputs
        this.table = 'sys_ux_data_broker_simple';
        const simpleDataBrokerDefinitionGR = this.getRecordsByQuery('', '', true);
        while (simpleDataBrokerDefinitionGR.next()) {
            const dbDefValues = this.getValuesFromGlideRecord(simpleDataBrokerDefinitionGR, true);
            dataBrokerDefinitions[dbDefValues.sysId] = dbDefValues;
        }

        // Then get our proxy ones to get exclusive ones
        let alreadyCapturedSysIds = Object.keys(dataBrokerDefinitions);
        this.table = 'sys_ux_data_broker_proxy';
        const proxyDataBrokerDefinitionGR = this.getRecordsByQuery(`sys_idNOT IN${alreadyCapturedSysIds}`, '', true);
        while (proxyDataBrokerDefinitionGR.next()) {
            const dbDefValues = this.getValuesFromGlideRecord(proxyDataBrokerDefinitionGR, true)
            dataBrokerDefinitions[dbDefValues.sysId] = dbDefValues;
        }

        alreadyCapturedSysIds = Object.keys(dataBrokerDefinitions);
        // Then get everything else
        this.table = 'sys_ux_data_broker';
        const complexDataBrokerDefinitionGR = this.getRecordsByQuery(`sys_idNOT IN${alreadyCapturedSysIds}`, '', true);
        while (complexDataBrokerDefinitionGR.next()) {
            const dbDefValues = this.getValuesFromGlideRecord(complexDataBrokerDefinitionGR, true)
            dataBrokerDefinitions[dbDefValues.sysId] = dbDefValues;
        }
        return dataBrokerDefinitions;
    },

    /**
     * Gets all data broker definitions and their event definitions by table to save extra queries
     */
    getDatabrokerDefinitions: function(sysIds) {
        const query = sysIds ? `sys_idIN${sysIds}` : '';
        const dataBrokerDefinitionArr = this.TABLES.reduce((acc, table) =&gt; {
            const allRecordsForTable = new DataBrokerDefinitions(table).getRecordsByQuery(query, 'name');
            if (allRecordsForTable) {
                return acc.concat(allRecordsForTable);
            }
            return acc;
        }, []);
        const dataBrokerDefinitions = dataBrokerDefinitionArr.reduce((acc, definition) =&gt; {
            acc[definition.sysId] = definition;
            return acc;
        }, {});
        const allEventIds = dataBrokerDefinitionArr.filter((definition) =&gt; definition?.macroponent)
            .reduce((acc, {
                macroponent
            }) =&gt; {
                return acc.concat(macroponent?.handledEvents?.split(',') ?? [], macroponent?.dispatchedEvents?.split(',') ?? []);
            }, []);
		const dataBrokerOperationEventQuery = this.getDataBrokerOperationsEventQuery(dataBrokerDefinitions);
		// Get all of the events and operation events (do a new query for operation events)
        const eventDefinitionRecords = new UXEvent().getRecordsByQuery(`sys_idIN${allEventIds}${dataBrokerOperationEventQuery.replace('^OR', '^NQ')}`, '');
        const dbEventDefinitions = eventDefinitionRecords ? eventDefinitionRecords : [];
        const eventDefinitions = [...dbEventDefinitions, ...this.getMutationDataBrokerDispatchedEvents(), ...this.getRegularDataBrokerDispatchedEvents()];
        return {
            dataBrokerDefinitions,
            eventDefinitions
        };
    },

    /**
     * @param macroponentGR {GlideRecord} the macroponent we are getting the Data field from
     */
    getDataBrokerDefinitionIds: function(macroponentGR) {
        if (!macroponentGR.data.nil()) {
            const data = this.parseJSON(macroponentGR.data, {
                sysId: macroponentGR.sysId || macroponentGR.getUniqueValue(),
                field: 'data'
            });
            if (Array.isArray(data)) {
                return data.map(function(broker) {
                    return broker.definition.id;
                });
            }
        }
        return [];
    },

    /**
     * @oaram dataBrokerDefinitions {object} the object containing all dataBrokerDefinitions
     */
    getDataBrokerOperationsEventQuery: function(dataBrokerDefinitions) {
        const dataBrokerDefinitionOperationEventNameQuery = Object.values(dataBrokerDefinitions)?.filter((definition) =&gt; definition?.operations)
            .reduce((acc, {
                operations
            }) =&gt; {
                return acc.concat(operations.filter((operation) =&gt; operation?.delegate).map(({
                    delegate
                }) =&gt; {
                    // Pattern should be scope_name.event_name and we should trim the trailing comma if one is present
                    const apiName = (delegate?.handledEventApiName ?? '').replace(',', '').split('.');
                    // return the query or an empty string if the pattern is wrong
                    return apiName.length &gt; 1 ?
                        `^ORsys_scope.scope=${apiName[0]}^event_name=${apiName[1]}` :
                        '';
                }));
            }, []);
        return dataBrokerDefinitionOperationEventNameQuery.join('');
    },

    /**
     * @param macroponentGR {GlideRecord} the macroponent we are getting the Data field from
     * @param contextState {object} the parent and ancestor contextState fields
     */
    getMacroponentDataBrokerDefinitions: function(macroponentGR, contextState) {
        const anscestorDataBrokerIds = (contextState?.ancestor?.data ?? []).map(({
            definition
        }) =&gt; definition?.id);
        const parentBrokerIds = (contextState?.parent?.data ?? []).map(({
            definition
        }) =&gt; definition?.id);
        const localBrokerIds = this.getDataBrokerDefinitionIds(macroponentGR);
        const allBrokerIds = [...localBrokerIds, ...parentBrokerIds, ...anscestorDataBrokerIds];
        const {
            dataBrokerDefinitions
        } = this.getDatabrokerDefinitions(allBrokerIds);
        return dataBrokerDefinitions;
    },

    getMutationDataBrokerDispatchedEvents: function() {
        const dataElementProp = this.getDataElementProp();
        return [{
                sysId: 'DATA_FETCH_INITIATED',
                eventName: 'DATA_FETCH_INITIATED',
                label: gs.getMessage('Data Fetch Initiated'),
                props: [dataElementProp]
            },
            {
                sysId: 'DATA_FETCH_SUCCEEDED',
                eventName: 'DATA_FETCH_SUCCEEDED',
                label: gs.getMessage('Data Fetch Succeeded'),
                props: [dataElementProp]
            },
            {
                sysId: 'DATA_FETCH_FAILED',
                eventName: 'DATA_FETCH_FAILED',
                label: gs.getMessage('Data Fetch Failed'),
                props: [dataElementProp, this.getErrorProp()]
            }
        ];
    },

    getRegularDataBrokerDispatchedEvents: function() {
        const dataElementProp = this.getDataElementProp();
        const operationProp = this.getOperationProp();
        return [{
                sysId: 'DATA_OP_INITIATED',
                eventName: 'DATA_OP_INITIATED',
                label: gs.getMessage('Operation Initiated'),
                props: [dataElementProp, operationProp]
            },
            {
                sysId: 'DATA_OP_SUCCEEDED',
                eventName: 'DATA_OP_SUCCEEDED',
                label: gs.getMessage('Operation Succeeded'),
                props: [dataElementProp, operationProp]
            },
            {
                sysId: 'DATA_OP_FAILED',
                eventName: 'DATA_OP_FAILED',
                label: gs.getMessage('Operation Failed'),
                props: [dataElementProp, operationProp, this.getErrorProp()]
            }
        ];
    },

    getDataElementProp: function() {
        return {
            name: 'dataElemId',
            label: gs.getMessage('Data Element ID'),
            valueType: 'string'
        };
    },

    getOperationProp: function() {
        return {
            name: 'operation',
            label: gs.getMessage('Operation'),
            valueType: 'string'
        };
    },

    getErrorProp: function() {
        return {
            name: 'errors',
            label: gs.getMessage('Errors'),
            valueType: 'json'
        };
    },

    type: 'DataBrokerDefinitions'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-28 04:20:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0fd83db585761110f877e10cffeb7b85&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;89&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DataBrokerDefinitions&lt;/sys_name&gt;
        &lt;sys_package display_value="@devsnc/uibtk-api" source="sn_uibtk_api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="@devsnc/uibtk-api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0fd83db585761110f877e10cffeb7b85&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-23 21:37:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:13</sys_created_on>
        <sys_id>f77070d583b01210c6695855eeaad301</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DataBrokerDefinitions</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f77070d583b01210c6695855eeaad301</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
