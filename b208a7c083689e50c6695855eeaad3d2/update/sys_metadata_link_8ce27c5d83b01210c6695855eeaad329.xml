<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4175b1175320220002c6435723dc34ad</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;Converts existing Test Steps from the the extended table model to the variables model.&lt;/description&gt;
        &lt;name&gt;sn_atf: config columns to vars&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var extensions = new GlideRecord('sys_db_object');
extensions.addEncodedQuery("GOTOsuper_class.name=sys_atf_step^ORsuper_class.name=sys_atf_record");
extensions.query();
while (extensions.next()) {
	populateInputsFromColumns(extensions.name);
}

function isConvertedConfig(elem) {
    var convertedConfigs = [
        '02be4a935332120028bc29cac2dc3456', '05317cd10b10220050192f15d6673af8', '071ee5b253331200040729cac2dc348d',
        '14872288df60220062fe6c7a4df26319', '17a72288df60220062fe6c7a4df26397', '1b97cd31872022008182c9ded0e3ece5',
        '1dfece935332120028bc29cac2dc3478', '1f39a288df60220062fe6c7a4df2639d', '5f2e0e535332120028bc29cac2dc34d3',
        '8df72288df60220062fe6c7a4df2636d', 'be8e0a935332120028bc29cac2dc34e4', 'd8fdf5e10b1022009cfdc71437673adc',
        'fcae4a935332120028bc29cac2dc340e', '7f49ec32532022008aaec57906dc3473', '0f4a128297202200abe4bb7503ac4af0',
        '41de4a935332120028bc29cac2dc349a'
    ];
    for (var i in convertedConfigs) {
        if (convertedConfigs[i] == elem)
            return true;
    }
    return false;
}

function populateInputsFromColumns(tableName) {
	var step = new GlideRecord(tableName);
	step.query();
	while(step.next()) {
		var migrate = new GlideRecord(tableName);
        migrate.get(step.sys_id);
		gs.print('Considering migrating record ' + migrate.sys_id + ' from table ' + tableName +
		         ' with step config ' + migrate.step_config.name + ' [' + migrate.step_config + ']');
		if (!isConvertedConfig(migrate.step_config)) {
    		gs.print('Record ' + migrate.sys_id + ' is not associated with a converted step config. Skipping.');
		    continue;
		}
   		gs.print('Converting record ' + migrate.sys_id);
		var inputs = {};
		var names = migrate.inputs.getVariableNames();

		//read the column values into memory
		for(var i=0; i&lt;names.length; i++) {
			gs.print("R : "+tableName + ":" + names[i] + "=" + migrate[names[i]]);
			inputs[names[i]] = migrate[names[i]];
		}

		//change the record type
		migrate.sys_class_name = 'sys_atf_step';
		migrate.setWorkflow(false);
		migrate.update();


		//write the var values from memory
		migrate = new GlideRecord('sys_atf_step');
		migrate.get(step.sys_id);
		for(i=0; i&lt;names.length; i++) {
			migrate.inputs[names[i]] = inputs[names[i]];
		}
		migrate.setWorkflow(false);
		migrate.order = migrate.order + 1; // force dirtiness. forceUpdate() isn't enough.
        migrate.update();
		migrate.order = migrate.order - 1;
		migrate.setWorkflow(true);
        migrate.update();
	}
}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;russ.sarbora&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-07-16 17:19:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4175b1175320220002c6435723dc34ad&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;sn_atf: config columns to vars&lt;/sys_name&gt;
        &lt;sys_package display_value="Automated Test Framework" source="com.glide.automated_testing_framework"&gt;ee18bcec3cb1311068bcf327dfe37fc8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_4175b1175320220002c6435723dc34ad&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-07-17 23:13:28&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;true&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:20:37</sys_created_on>
        <sys_id>8ce27c5d83b01210c6695855eeaad329</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sn_atf: config columns to vars</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8ce27c5d83b01210c6695855eeaad329</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:20:37</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
