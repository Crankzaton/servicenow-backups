<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>6b9c53ae53ba3010f069ddeeff7b1297</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ResourceFinderRequestedDataSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ResourceFinderRequestedDataSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ResourceFinderRequestedDataSNC = Class.create();
ResourceFinderRequestedDataSNC.prototype = {
	HASH_CODE: '#',
    initialize: function() {
		this.userFteMap = {};
		this.userWorkingDaysMap = {};
		this.workingDaysInDateRange = {};
		this.propertiesUtil = new ResourceManagementProperties();
		this.addTrendFirstDayOfWeek = gs.getProperty('glide.ui.date_format.first_day_of_week', 2) == 1 ? 7 : 1;
		this.rmFirstDayOfWeek = this.propertiesUtil.getFirstDayOfWeek();
    },
	
	setDateRange: function(queryDateRange, pivotType) {
		var dateRangeHelper = new RMDateRangeHelper();
		this.dateRanges = [];
		var gridStartDate = new GlideDate();
		gridStartDate.setValue(queryDateRange.startDate);
		var gridEndDate = new GlideDate();
		gridEndDate.setValue(queryDateRange.endDate);
		if(pivotType == 'month')
			this.dateRanges = dateRangeHelper.getExtendedMonthlyDateRanges(gridStartDate, gridEndDate);
		else
			this.dateRanges = dateRangeHelper.getExtendedWeeklyDateRanges(gridStartDate, gridEndDate);
	},
	
	_userAverageDailyFte: function(user) {
        if (JSUtil.nil(this.userFteMap[user]))
            this.userFteMap[user] = RMUtil.averageDailyFteForUser(user);
        return this.userFteMap[user];
    },
	
	_hoursToFteOrManDays: function(user, userHash, hours, pivotType, requestType) {
        var averageDailyFte = this._userAverageDailyFte(user);
        var value = 0;
        var workingDays = 0;
		if(JSUtil.notNil(requestType) &amp;&amp; requestType == 'man_days')
			workingDays = 1;
		else {
			if (pivotType == 'week')
				workingDays = this._userWorkingDaysInWeek(userHash);
			else if (pivotType == 'month')
				workingDays = this._userWorkingDaysInMonth(userHash);
		}
        if (workingDays &gt; 0 &amp;&amp; averageDailyFte &gt; 0)
            value = Math.round((hours / (workingDays * averageDailyFte)) * 100) / 100; //consider 2 decimals for FTE
        return value;
    },
	
	_userWorkingDaysInWeek: function(userHash) {
        var userHashArr = userHash.split(this.HASH_CODE);
        var userId = userHashArr[0];
        var weekStartDate = new GlideDateTime(userHashArr[1]);
        var weekEndDate = new GlideDateTime(userHashArr[1]);
        weekEndDate.addDaysUTC(7);
        if (JSUtil.nil(this.userWorkingDaysMap[userHash]))
            this.userWorkingDaysMap[userHash] = this._getWorkingDays(userId, weekStartDate.getDate(), weekEndDate.getDate());
        return this.userWorkingDaysMap[userHash];
    },
	
	_userWorkingDaysInMonth: function(userHash) {
        var userHashArr = userHash.split(this.HASH_CODE);
        var userId = userHashArr[0];
        var monthStartDate = new GlideDateTime(userHashArr[1]);
        var monthEndDate = new GlideDateTime(userHashArr[1]);
        monthEndDate.addMonthsUTC(1);
        if (JSUtil.nil(this.userWorkingDaysMap[userHash]))
            this.userWorkingDaysMap[userHash] = this._getWorkingDays(userId, monthStartDate.getDate(), monthEndDate.getDate());
        return this.userWorkingDaysMap[userHash];
    },
	
	_getWorkingDays: function(userId, startDate, endDate) {
        var endDateMinusOne;
        var rmCapacityApi;

        /* startDate will be the start date of starting week/month (depending on the pivot type).
         * endDate will be the start date of ending week/month (depending on the pivot type).
         * we need the number of working days from starting week/month upto ending week/month (ending week/month excluded)
         */
        endDateMinusOne = new GlideDate();
        endDateMinusOne.setValue(endDate);
        endDateMinusOne.addDaysUTC(-1);

        rmCapacityApi = new RMCapacityAPI(startDate, endDateMinusOne.getDate(), true);

        return rmCapacityApi.getWorkingDaysCount(userId);
    },
	
	_getDateFromTrendFormat: function(trendDate) {
        var date = new GlideDate();
        var dateDetails = trendDate.split("/");
        if (this.distributionType == "monthly") {
            date.setDayOfMonthUTC(1);
            date.setMonthUTC(dateDetails[0]);
            date.setYearUTC(dateDetails[1]);
        } else {
            date.setMonthUTC(dateDetails[0]);
            date.setDayOfMonthUTC(dateDetails[1]);
            date.setYearUTC(dateDetails[2]);
        }
        return date;
    },
	
	_groupOrRoleAverageDailyFTE : function(searchBy, entityId) {
		var averageDailyFTE;
		if(searchBy == 'group') {
			var gr = new GlideRecord('sys_user_group');
			gr.get(entityId);
			averageDailyFTE = gr.getValue('average_daily_fte');
		}
		if(gs.nil(averageDailyFTE)){
			averageDailyFTE = this.propertiesUtil.getAverageDailyFTE();
		}
		return averageDailyFTE;
	},

	_getWorkingDaysInDateRangeForGroupOrRole: function(timeSpanStart, requestType) {
		if (requestType == 'man_days')
			return 1;
		var scheduleId = ResourceManagementUtils._getDefaultSchedule();
		if (!(scheduleId in this.workingDaysInDateRange))
			this.workingDaysInDateRange[scheduleId] = ResourceManagementUtils.getWorkindDaysForDateRange(this.dateRanges, scheduleId);
		return this.workingDaysInDateRange[scheduleId][timeSpanStart];
	},
	
	_getUserRequestedDataBasedOnTableUsingTrend: function(userIds, pivotType, searchCriteria, table, requestedObject, requestType) {
		var queryDetails = ResourceFinderRequestedDataSNC.queryDetails[table];
		var userHash;
		var userId;
		var reqAlloc = new GlideAggregate(table);
		reqAlloc.addQuery(queryDetails['user'], 'IN', userIds);
		if(this.distributionType == 'monthly')
			reqAlloc.addTrend(queryDetails['start_date'], 'Month');
		else
			reqAlloc.addTrend(queryDetails['start_date'], 'week');
		reqAlloc.addQuery(queryDetails['resPlanDistributionDetails']['field'], queryDetails['resPlanDistributionDetails']['operator'], this.distributionType);
		reqAlloc.addQuery(queryDetails['end_date'],'&gt;=', this.dateRanges[0].start);
		reqAlloc.addQuery(queryDetails['start_date'],'&lt;=', this.dateRanges[this.dateRanges.length - 1].end);
		reqAlloc.addQuery(queryDetails['state'], ResourcePlanState.REQUESTED);
		reqAlloc.groupBy(queryDetails['user']);
		reqAlloc.addAggregate('SUM', queryDetails['hours']);
		reqAlloc.query();
		while(reqAlloc.next()) {
			userId = reqAlloc.getValue(queryDetails['user']);
			var timeRef = reqAlloc.getValue('timeref');
			var hours = parseFloat(reqAlloc.getAggregate('SUM', queryDetails['hours']));
			
			if (JSUtil.notNil(hours)) {
				var startDate = this._getDateFromTrendFormat(timeRef);
				userHash = userId + this.HASH_CODE + startDate.getValue();
				if (requestType != 'hours')
                    hours = this._hoursToFteOrManDays(userId, userHash, hours, pivotType, requestType);
			} else
				hours = 0;
			if (hours != 0) {
				if(!(userHash in requestedObject)) {
					var resObj = {};
					resObj.userId = userId;
					resObj.date = startDate.getValue();
					resObj.requested = 0;
				} else
					resObj = requestedObject[userHash];
				resObj['requested'] = Math.round((resObj['requested'] + Number(hours)) * 100) / 100; //consider 2 decimals
				requestedObject[userHash] = resObj;
			}
		}
		return requestedObject;
	},
	
	_getUserRequestedDataBasedOnTable: function(userIds, pivotType, searchCriteria, table, requestType) {
		var requestedObject = {};
		var queryDetails = ResourceFinderRequestedDataSNC.queryDetails[table];
		var userHash;
		var userId;
		var prevUserHash = '';
		var reqAlloc = new GlideAggregate(table);
		reqAlloc.addQuery(queryDetails['user'], 'IN', userIds);
		reqAlloc.addQuery(queryDetails['end_date'],'&gt;=', this.dateRanges[0].start);
		reqAlloc.addQuery(queryDetails['start_date'],'&lt;=', this.dateRanges[this.dateRanges.length - 1].end);
		reqAlloc.addQuery(queryDetails['resPlanDistributionDetails']['field'], queryDetails['resPlanDistributionDetails']['operator'], this.distributionType);
		reqAlloc.addQuery(queryDetails['state'], ResourcePlanState.REQUESTED);
		reqAlloc.groupBy(queryDetails['user']);
		reqAlloc.groupBy(queryDetails['start_date']);
		reqAlloc.orderBy(queryDetails['start_date']);
		reqAlloc.addAggregate('SUM', queryDetails['hours']);
		reqAlloc.query();
		while(reqAlloc.next()) {
			userId = reqAlloc.getValue(queryDetails['user']);
			var gd = new GlideDate();
			gd.setValue(reqAlloc.getValue(queryDetails['start_date']));
			var matchingRange = this.dateRanges.filter(RMDateRangeHelper.filterRange(gd));
			var startDate = matchingRange[0].start.getValue();
			userHash = userId + this.HASH_CODE + startDate;
			var hours = reqAlloc.getAggregate('SUM', queryDetails['hours']);
			
			if(!(userHash in requestedObject)) {
				var resObj = {};
				resObj.userId = userId;
				resObj.date = startDate;
				resObj.requested = 0;
			} else
				resObj = requestedObject[userHash];
			resObj['requested'] =  Math.round((resObj['requested'] + Number(hours)) * 100) / 100; //consider 2 decimals
			requestedObject[userHash] = resObj;
			if (requestType != 'hours' &amp;&amp; JSUtil.notNil(prevUserHash) &amp;&amp; prevUserHash != userHash) {
				resObj = requestedObject[prevUserHash];
				hours = this._hoursToFteOrManDays(userId, prevUserHash, resObj.requested, pivotType, requestType);
				resObj['requested'] = Number(hours);
			}
			prevUserHash = userHash;
		}
		if(requestType != 'hours' &amp;&amp; JSUtil.notNil(prevUserHash)) {
			resObj = requestedObject[userHash];
			hours = this._hoursToFteOrManDays(userId, userHash, resObj.requested, pivotType, requestType);
			resObj['requested'] = Number(hours);
		}
		return requestedObject;
	},
	
	_getUserRequestedDataUsingAllocsAndTrend: function(userIds, pivotType, searchCriteria, requestedObject, requestType) {
		this._getUserRequestedDataBasedOnTableUsingTrend(userIds, pivotType, searchCriteria, 'requested_allocation', requestedObject, requestType);
    },
	
    _getUserRequestedDataUsingDailiesAndTrend: function(userIds, pivotType, searchCriteria, requestedObject, requestType) {
		this._getUserRequestedDataBasedOnTableUsingTrend(userIds, pivotType, searchCriteria, 'requested_allocation_daily', requestedObject, requestType);
    },
	
	_getUserRequestedDataUsingAllocs: function(userIds, pivotType, searchCriteria, requestType) {
		return this._getUserRequestedDataBasedOnTable(userIds, pivotType, searchCriteria, 'requested_allocation', requestType);
    },
	
    _getUserRequestedDataUsingDailies: function(userIds, pivotType, searchCriteria, requestType) {
		return this._getUserRequestedDataBasedOnTable(userIds, pivotType, searchCriteria, 'requested_allocation_daily', requestType);
    },
	
	getRequestedDataForUser: function(userIds, pivotType, searchCriteria, requestType) {
		var requestedObject = {};
		var diffFirstDayInProp = (pivotType == 'week' &amp;&amp; (this.addTrendFirstDayOfWeek != this.rmFirstDayOfWeek));
		
		if(!diffFirstDayInProp) {
			//pivot from requested allocations (of monthly resource plans) if resource grid view is month (vice versa for week)
			this._getUserRequestedDataUsingAllocsAndTrend(userIds, pivotType, searchCriteria, requestedObject, requestType);
			//pivot from requested allocation dailies (of weekly/plan_duration resource plans)if resource grid view is month (vice versa for week)
			this._getUserRequestedDataUsingDailiesAndTrend(userIds, pivotType, searchCriteria, requestedObject, requestType);
		} else {
			//pivot from requested allocations (of monthly resource plans) if resource grid view is month (vice versa for week)
			var objFromReqAlloc = this._getUserRequestedDataUsingAllocs(userIds, pivotType, searchCriteria, requestType);
			//pivot from requested allocation dailies (of weekly/plan_duration resource plans)if resource grid view is month (vice versa for week)
			var objFromReqAllocDaily = this._getUserRequestedDataUsingDailies(userIds, pivotType, searchCriteria, requestType);
			for (var k in objFromReqAlloc)
				requestedObject[k] = objFromReqAlloc[k];
			for (var j in objFromReqAllocDaily) {
				if(Object.keys(requestedObject).indexOf(j) != -1) {
					requestedObject[j]['requested'] = Math.round((requestedObject[j]['requested'] + objFromReqAllocDaily[j]['requested']) * 100) / 100; //consider 2 decimals
				} else
					requestedObject[j] = objFromReqAllocDaily[j];
			}
		}
		return requestedObject;
	},
	
	_getGroupOrRoleRequestedDataBasedOnTableUsingTrend: function(pivotType, searchCriteria, table, groupRequestedObject, requestType) {
		var queryDetails = ResourceFinderRequestedDataSNC.queryDetails[table];
		var entityId = (searchCriteria.searchBy == 'group') ? searchCriteria.group.sysId : searchCriteria.role.sysId;
		
		var reqAlloc = new GlideAggregate(table);
		if(searchCriteria.searchBy == 'group') {
			reqAlloc.addQuery(queryDetails['group'], searchCriteria.group.sysId);
			reqAlloc.addQuery(queryDetails['resource_type'], 'group').addOrCondition(queryDetails['resource_type'], 'role');
		} else {
			reqAlloc.addQuery(queryDetails['role'], searchCriteria.role.sysId);
			reqAlloc.addQuery(queryDetails['resource_type'], 'role');
		}
		if(this.distributionType == 'monthly')
			reqAlloc.addTrend(queryDetails['start_date'], 'Month');
		else
			reqAlloc.addTrend(queryDetails['start_date'], 'week');
		reqAlloc.addQuery(queryDetails['end_date'],'&gt;=', this.dateRanges[0].start);
		reqAlloc.addQuery(queryDetails['start_date'],'&lt;=', this.dateRanges[this.dateRanges.length - 1].end);
		reqAlloc.addQuery(queryDetails['resPlanDistributionDetails']['field'], queryDetails['resPlanDistributionDetails']['operator'], this.distributionType);
		reqAlloc.addQuery(queryDetails['state'], ResourcePlanState.REQUESTED);
		reqAlloc.addNullQuery(queryDetails['user']);
		reqAlloc.addAggregate('SUM', queryDetails['hours']);
		reqAlloc.query();
		
		while(reqAlloc.next()) {
			var timeRef = reqAlloc.getValue('timeref');
			var hours = parseFloat(reqAlloc.getAggregate('SUM', queryDetails['hours']));
			if (JSUtil.notNil(hours)) {
				var startDate = this._getDateFromTrendFormat(timeRef);
				if(requestType != 'hours') {
					var averageDailyFTE = this._groupOrRoleAverageDailyFTE(searchCriteria.searchBy, entityId);
					var workingDays = this._getWorkingDaysInDateRangeForGroupOrRole(startDate.getValue(), requestType);
					 hours = Math.round((hours / (workingDays * averageDailyFTE)) * 100) / 100; //consider 2 decimals for FTE
				}
			} else
				hours = 0;
			
			if (hours != 0) {
				if (!groupRequestedObject[entityId])
					groupRequestedObject[entityId] = {};
				if (!groupRequestedObject[entityId][startDate]) {
					groupRequestedObject[entityId][startDate] = {};
					groupRequestedObject[entityId][startDate]['requested'] = Number(hours);
				} else {
					groupRequestedObject[entityId][startDate]['requested'] = Math.round((groupRequestedObject[entityId][startDate]['requested'] + Number(hours)) * 100) / 100;
				}
			}
		}
		return groupRequestedObject;
	},
	
	_getGroupOrRoleRequestedDataBasedOnTable: function(pivotType, searchCriteria, table, requestType) {
		var groupRequestedObject = {};
		var prevStartDate = '';
		var queryDetails = ResourceFinderRequestedDataSNC.queryDetails[table];
		var entityId = (searchCriteria.searchBy == 'group') ? searchCriteria.group.sysId : searchCriteria.role.sysId;
		var reqAlloc = new GlideAggregate(table);
		if(searchCriteria.searchBy == 'group') {
			reqAlloc.addQuery(queryDetails['group'], searchCriteria.group.sysId);
			reqAlloc.addQuery(queryDetails['resource_type'], 'group').addOrCondition(queryDetails['resource_type'], 'role');
		} else {
			reqAlloc.addQuery(queryDetails['role'], searchCriteria.role.sysId);
			reqAlloc.addQuery(queryDetails['resource_type'], 'role');
		}
		reqAlloc.addQuery(queryDetails['end_date'],'&gt;=', this.dateRanges[0].start);
		reqAlloc.addQuery(queryDetails['start_date'],'&lt;=', this.dateRanges[this.dateRanges.length - 1].end);
		reqAlloc.addQuery(queryDetails['resPlanDistributionDetails']['field'], queryDetails['resPlanDistributionDetails']['operator'], this.distributionType);
		reqAlloc.addQuery(queryDetails['state'], ResourcePlanState.REQUESTED);
		reqAlloc.addNullQuery(queryDetails['user']);
		reqAlloc.groupBy(queryDetails['start_date']);
		reqAlloc.orderBy(queryDetails['start_date']);
		reqAlloc.addAggregate('SUM', queryDetails['hours']);
		reqAlloc.query();
		
		while(reqAlloc.next()) {
			var gd = new GlideDate();
			gd.setValue(reqAlloc.getValue(queryDetails['start_date']));
			var matchingRange = this.dateRanges.filter(RMDateRangeHelper.filterRange(gd));
			var startDate = matchingRange[0].start.getValue();
			var hours = parseFloat(reqAlloc.getAggregate('SUM', queryDetails['hours']));
			if (!groupRequestedObject[entityId])
				groupRequestedObject[entityId] = {};
			if (!groupRequestedObject[entityId][startDate]) {
				groupRequestedObject[entityId][startDate] = {};
				groupRequestedObject[entityId][startDate]['requested'] = Number(hours);
			} else {
				groupRequestedObject[entityId][startDate]['requested'] =  Math.round((groupRequestedObject[entityId][startDate]['requested'] + Number(hours))*100)/100;
			}
			if (requestType != 'hours' &amp;&amp; JSUtil.notNil(prevStartDate) &amp;&amp; prevStartDate != startDate) {
				var averageDailyFTE = this._groupOrRoleAverageDailyFTE(searchCriteria.searchBy, entityId);
				var workingDays = this._getWorkingDaysInDateRangeForGroupOrRole(prevStartDate, requestType);
				var resObj = groupRequestedObject[entityId][prevStartDate];
				hours = Math.round((resObj.requested / (workingDays * averageDailyFTE)) * 100) / 100; //consider 2 decimals for FTE
				resObj['requested'] = Number(hours);
			}
			prevStartDate = startDate;
		}
		if (requestType != 'hours' &amp;&amp; JSUtil.notNil(prevStartDate)) {
			var averageDailyFTE = this._groupOrRoleAverageDailyFTE(searchCriteria.searchBy, entityId);
			var workingDays = this._getWorkingDaysInDateRangeForGroupOrRole(startDate, requestType);
			var resObj = groupRequestedObject[entityId][startDate];
			hours = Math.round((resObj.requested / (workingDays * averageDailyFTE)) * 100) / 100; //consider 2 decimals for FTE
			resObj['requested'] = Number(hours);
		}
		return groupRequestedObject;
	},
	
	_getGroupOrRoleRequestedDataUsingAllocsAndTrend: function(pivotType, searchCriteria, groupRequestedObject, requestType) {
		this._getGroupOrRoleRequestedDataBasedOnTableUsingTrend(pivotType, searchCriteria, 'requested_allocation', groupRequestedObject, requestType);
    },
	
    _getGroupOrRoleUserRequestedDataUsingDailiesAndTrend: function(pivotType, searchCriteria, groupRequestedObject, requestType) {
		this._getGroupOrRoleRequestedDataBasedOnTableUsingTrend(pivotType, searchCriteria, 'requested_allocation_daily', groupRequestedObject, requestType);
    },
	
	_getGroupOrRoleRequestedDataUsingAllocs: function(pivotType, searchCriteria, requestType) {
		return this._getGroupOrRoleRequestedDataBasedOnTable(pivotType, searchCriteria, 'requested_allocation', requestType);
    },
	
    _getGroupOrRoleUserRequestedDataUsingDailies: function(pivotType, searchCriteria, requestType) {
		return this._getGroupOrRoleRequestedDataBasedOnTable(pivotType, searchCriteria, 'requested_allocation_daily', requestType);
    },
	
	getRequestedDataForGroupOrRole: function(pivotType, searchCriteria, requestType) {
		var groupRequestedObject = {};
		var diffFirstDayInProp = (pivotType == 'week' &amp;&amp; (this.addTrendFirstDayOfWeek != this.rmFirstDayOfWeek));
		if(!diffFirstDayInProp) {
			//pivot from requested allocations (of monthly resource plans) if resource grid view is month (vice versa for week)
			this._getGroupOrRoleRequestedDataUsingAllocsAndTrend(pivotType, searchCriteria, groupRequestedObject, requestType);
			//pivot from requested allocation dailies (of weekly/plan_duration resource plans)if resource grid view is month (vice versa for week)
			this._getGroupOrRoleUserRequestedDataUsingDailiesAndTrend(pivotType, searchCriteria, groupRequestedObject, requestType);
		} else {
			var entityId = (searchCriteria.searchBy == 'group') ? searchCriteria.group.sysId : searchCriteria.role.sysId;
			//pivot from requested allocations (of monthly resource plans) if resource grid view is month (vice versa for week)
			var objFromReqAlloc = this._getGroupOrRoleRequestedDataUsingAllocs(pivotType, searchCriteria, requestType);
			//pivot from requested allocation dailies (of weekly/plan_duration resource plans)if resource grid view is month (vice versa for week)
			var objFromReqAllocDaily = this._getGroupOrRoleUserRequestedDataUsingDailies(pivotType, searchCriteria, requestType);
			if(objFromReqAlloc &amp;&amp; objFromReqAlloc[entityId] &amp;&amp; Object.keys(objFromReqAlloc[entityId]).length != -1) {
				for (var k in objFromReqAlloc[entityId]) {
					if (!groupRequestedObject[entityId])
						groupRequestedObject[entityId] = {};
					groupRequestedObject[entityId][k] = objFromReqAlloc[entityId][k];
				}
			}
			if(objFromReqAllocDaily &amp;&amp; objFromReqAllocDaily[entityId] &amp;&amp; Object.keys(objFromReqAllocDaily[entityId]).length != -1) {
				for (var j in objFromReqAllocDaily[entityId]) {
					if(Object.keys(groupRequestedObject[entityId]).indexOf(j) != -1) {
						groupRequestedObject[entityId][j]['requested'] = Math.round((groupRequestedObject[entityId][j]['requested'] + objFromReqAllocDaily[entityId][j]['requested']) * 100) / 100;
					} else
						groupRequestedObject[entityId][j] = objFromReqAllocDaily[entityId][j];
				}
			}
		}
		return groupRequestedObject;
	},
	
	_initializeGroupedObject: function(entityId) {
		var groupRequestedObject = {};
		for(var j in this.dateRanges) {
			var resObj = {};
			var startDate = this.dateRanges[j].start.getValue();
			if (!groupRequestedObject[entityId])
				groupRequestedObject[entityId] = {};
			if (!groupRequestedObject[entityId][startDate]) {
				groupRequestedObject[entityId][startDate] = {};
				groupRequestedObject[entityId][startDate]['requested'] = 0;
			}
		}
		return groupRequestedObject;
	},
	
	getRequestedRowData: function(searchCriteria, pivotType, requestType, startOffset, endOffset, usersData) {
		var finalGridData = {};
		this.distributionType = 'monthly';
        if (pivotType === 'week')
            this.distributionType = 'weekly';
		var userIdsArr = [];
		var resFinderDataService = new ResourceFinderDataService();
		
		if (Object.keys(usersData).length == 0) {
			usersData = resFinderDataService.getUsersData(searchCriteria);
			if(Object.keys(usersData).length == 0) {
				finalGridData.userIdsLength = userIdsArr.length;
				return finalGridData;
			}
		}
		
		userIdsArr = Object.keys(usersData);
		var searchConfig = resFinderDataService.getSearchConfigFromCriteria(searchCriteria, pivotType, requestType);
		this.setDateRange(searchConfig.queryDateRange, pivotType);
		
		var userRequestedData = this.getRequestedDataForUser(userIdsArr, pivotType, searchCriteria, requestType);
		
		var groupRequestedData = this.getRequestedDataForGroupOrRole(pivotType, searchCriteria, requestType);
		var entityId = (searchCriteria.searchBy == 'group') ? searchCriteria.group.sysId : searchCriteria.role.sysId;
		
		var finalGroupRequestedData = this._initializeGroupedObject(entityId);
		if(userRequestedData &amp;&amp; Object.keys(userRequestedData).length != -1) {
				for (var k in userRequestedData) {
					var params = k.split('#');
					var date = params[1];
					finalGroupRequestedData[entityId][date]['requested'] = Math.round((finalGroupRequestedData[entityId][date]['requested'] + userRequestedData[k]['requested']) * 100) / 100;
				}
			}
			if(groupRequestedData &amp;&amp; groupRequestedData[entityId] &amp;&amp; Object.keys(groupRequestedData[entityId]).length != -1) {
				for (var j in groupRequestedData[entityId]) {
					if(Object.keys(finalGroupRequestedData[entityId]).indexOf(j) != -1) {
						finalGroupRequestedData[entityId][j]['requested'] = Math.round((finalGroupRequestedData[entityId][j]['requested'] + groupRequestedData[entityId][j]['requested']) * 100) / 100;
					} else
						finalGroupRequestedData[entityId][j] = groupRequestedData[entityId][j];
				}
			}
		return finalGroupRequestedData;
	},


    type: 'ResourceFinderRequestedDataSNC'
};

ResourceFinderRequestedDataSNC.queryDetails = {
	'requested_allocation': {
        'resPlan': 'resource_plan',
		'user': 'resource_plan.user_resource',
		'group': 'resource_plan.group_resource',
		'role': 'resource_plan.role',
		'resource_type' : 'resource_plan.resource_type',
		'state': 'resource_plan.state',
        'resPlanDistributionDetails': {
			'field': 'resource_plan.distribution',
			'operator' : '='
		},
		'hours': 'requested_hours',
        'start_date': 'start_date',
		'end_date': 'end_date'
    },
    'requested_allocation_daily': {
        'resPlan': 'requested_allocation.resource_plan',
		'user': 'requested_allocation.resource_plan.user_resource',
		'group': 'requested_allocation.resource_plan.group_resource',
		'role': 'requested_allocation.resource_plan.role',
		'state': 'requested_allocation.resource_plan.state',
		'resource_type': 'requested_allocation.resource_plan.resource_type',
        'resPlanDistributionDetails': {
			'field': 'requested_allocation.resource_plan.distribution',
			'operator' : '!='
		},
		'hours': 'hours',
        'start_date': 'requested_date',
		'end_date': 'requested_date'
    },
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-09-28 03:13:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6b9c53ae53ba3010f069ddeeff7b1297&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ResourceFinderRequestedDataSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Resource Grid Interface" source="com.snc.resource_grid"&gt;7e00da2b47e64210cd4e1ce4316d438f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_6b9c53ae53ba3010f069ddeeff7b1297&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-10-18 18:38:26&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:19</sys_created_on>
        <sys_id>63e6705d83f01210c6695855eeaad38a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ResourceFinderRequestedDataSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_63e6705d83f01210c6695855eeaad38a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
