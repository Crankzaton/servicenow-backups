<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>55bdc042c3a10110d938e4788940dd7d</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VizDesignerUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;VizDesignerUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VizDesignerUtil = Class.create();
VizDesignerUtil.prototype = {
    initialize: function() {
    },
	
	_removeVizFromUserPreference: function(gr, vizId) {
		var preference = gr.getValue('value');
		if (!preference)
			return;
	
		var favorites = JSON.parse(preference);
		if (!Array.isArray(favorites))
			return;

		var idx = favorites.indexOf(vizId);
		if (idx &lt; 0)
			return;
	
		favorites.splice(idx, 1);
		gr.setValue('value', JSON.stringify(favorites));
		gr.update();
	},
	
	_getTitlePropertyName: function(macroponentId) {
		// List
		if (macroponentId == '2b1c080881e05dc63b917044290b233f')
			return 'listTitle';
			
		// Scorecard	
		if (macroponentId == '9d31ba4d773ce32ef350d4555b673f6e')
			return 'heading';
			
		// Calendar
		if (macroponentId == '259e0221ff18a75c5f5f0fb28fa5d32f')
			return 'componentTitle';
	},
	
	_canViewViz: function(vizId) {
		var grs = new GlideRecordSecure('par_visualization');
		return grs.get(vizId);
	},
	
	_getUserRoleSysIds: function(roles) {
		var roleSysIds = [];
		var gr = new GlideRecord('sys_user_role');
		gr.addQuery('name', 'IN', roles);
		gr.query();
		
		while (gr.next())
			roleSysIds.push(gr.getUniqueValue());
		
		return roleSysIds;
	},
	
	_getSharingQCOnUserRoleGroup: function() {
		var gr = new GlideRecord('par_visualization_permission');
		
		var qc = gr.addQuery('user', gs.getUserID());
		qc.addOrCondition('group', 'IN', gs.getUser().getMyGroups());
		qc.addOrCondition('role', 'IN', this._getUserRoleSysIds(gs.getUser().getRoles()));
		
		return qc;
	},
	
	removeVizFromUserPreferences: function(vizId) {
		var gr = new GlideRecord('sys_user_preference');
		gr.addQuery('name', 'viz-designer-favorites');
		gr.query();
		
		while (gr.next())
			this._removeVizFromUserPreference(gr, vizId);
	},
	
	getTitleFromProperties: function(macroponentId, stringifiedProperties) {
		var properties = JSON.parse(stringifiedProperties);
		var titlePropertyName = this._getTitlePropertyName(macroponentId);
		
		if (titlePropertyName)
			return properties[titlePropertyName];
	},
	
	getNameFromProperties: function(macroponentId, stringifiedProperties) {
		var title = this.getTitleFromProperties(macroponentId, stringifiedProperties);
		if (title)
			return title;
		
		return 'Untitled';
	},
	
	ownViz: function(vizId) {
		var gr = new GlideRecord('par_visualization_permission');
		
		gr.addQuery('component', vizId);
		gr.addQuery('owner', true);
		var qc = gr.addQuery('user', gs.getUserID());
		qc.addOrCondition('group', 'IN', gs.getUser().getMyGroups());
		
		gr.query();
		return gr.hasNext();
	},
	
	canShareViz: function(vizId) {
		if (!this._canViewViz(vizId))
			return false;
		
		if (this.ownViz(vizId))
			return true;
		
		var gr = new GlideRecord('par_visualization_permission');
		gr.addQuery('component', vizId);
		var qc = gr.addQuery('can_share', true);
		qc.addCondition(this._getSharingQCOnUserRoleGroup());
		
		gr.setLimit(1);
		gr.query();
		return gr.hasNext();
	},
	
	isVizSharedWithMeOrIamOwner: function(vizId) {		
		var gr = new GlideRecord('par_visualization_permission');
		
		var qc = gr.addQuery('component', vizId);
		qc.addCondition(this._getSharingQCOnUserRoleGroup());

		gr.setLimit(1);
		gr.query();
		return gr.hasNext();
	},
	
	isVizSharedWithMeWithEditModeOrIamOwner: function(vizId) {		
		var gr = new GlideRecord('par_visualization_permission');
		
		gr.addQuery('component', vizId);
		var qc = gr.addQuery('write', true);
		qc.addCondition(this._getSharingQCOnUserRoleGroup());

		gr.setLimit(1);
		gr.query();
		return gr.hasNext();
	},

    type: 'VizDesignerUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-02-09 15:30:57&lt;/sys_created_on&gt;
        &lt;sys_id&gt;55bdc042c3a10110d938e4788940dd7d&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VizDesignerUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="PAR Visualizations" source="com.snc.par.visualizations"&gt;299b38643c35311068bcf327dfe37ff3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_55bdc042c3a10110d938e4788940dd7d&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-04 15:55:10&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:15</sys_created_on>
        <sys_id>77a6701d83f01210c6695855eeaad3e4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VizDesignerUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_77a6701d83f01210c6695855eeaad3e4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
