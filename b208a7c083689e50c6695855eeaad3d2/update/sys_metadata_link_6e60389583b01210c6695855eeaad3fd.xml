<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0bea6d45382a9110f8778af503189ee4</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.KBPortalSitemapGeneratorUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Util script for generating sitemaps for kb and csp portals&lt;/description&gt;
        &lt;name&gt;KBPortalSitemapGeneratorUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KBPortalSitemapGeneratorUtil = Class.create();
KBPortalSitemapGeneratorUtil.prototype = {
    initialize: function () {
        this.spUtil = new GlideSPUtil();
        this.kbViewModel = new KBViewModel();
    },

    getTranslatedArticlesList: function (kbGr) {
        if (GlidePluginManager().isActive('com.glideapp.knowledge.i18n2'))
            return this.kbViewModel.getLanguagesToDisplay(kbGr);
    },

    isSPPagePubliclyAccessible: function (spPageGr) {
        if (spPageGr) {
            return spPageGr.getValue('public') == '1' ? true : false;
        }
        return false;
    },

    isHumanReadableUrlEnabled: function (spPageGr) {
        var humanReadableURLStructure = '';
        if (spPageGr)
            humanReadableURLStructure = spPageGr.getValue('human_readable_url_structure') || '';
        if (humanReadableURLStructure.trim())
            return true;
        return false;
    },


    getPubliclyAccessibleArticles: function (servicePortalUrlSuffix, servicePortalSysId, kbPageId, baseportalURL) {
        var currUserId = gs.getUserID();
        gs.getSession().impersonate('guest');

        var spPageGr = new GlideRecord('sp_page');
        spPageGr.addQuery('id', kbPageId);
        spPageGr.query();
        
        if (spPageGr.next() &amp;&amp; !this.isSPPagePubliclyAccessible(spPageGr)){
            gs.getSession().impersonate(currUserId);
            return '';
        }

        // get knowledge bases associated with the service portal
        var knowledgeBaseIds = [];
        var gr = new GlideRecord('m2m_sp_portal_knowledge_base');
        gr.addQuery('sp_portal', servicePortalSysId);
        gr.query();
        while (gr.next()) {
            var knowBaseId = gr.getValue('kb_knowledge_base');
            knowledgeBaseIds.push(knowBaseId);
        }

        // get knowledge articles in the knowledge bases that can be accessed publicly
        var encodedQuery = 'kb_knowledge_baseIN' + knowledgeBaseIds.join();
        encodedQuery += '^sys_class_name!=kb_knowledge_block';
        var kbGr = new GlideRecord('kb_knowledge');
        kbGr.addEncodedQuery(encodedQuery);
        kbGr.addQuery('active', true);
        kbGr.addQuery('workflow_state', 'published');
        kbGr.query();

        var urlEntities = '';
        var spSEOHeaderTagsSNC = new global.SPSEOHeaderTagsSNC();

        while (kbGr.next()) {
            if (kbGr.canRead()){
                var translatedArticles = this.getTranslatedArticlesList(kbGr);
                var kbLang = kbGr.getValue('language') || 'en';
                var kbNumber = kbGr.getValue('number');
                var lastMod = kbGr.getValue('sys_updated_on').split(' ')[0];
                var queryParams = 'id=' + kbPageId + '&amp;sysparm_article=' + kbNumber;
                
                var humanReadablePart = '';
                if (this.isHumanReadableUrlEnabled(spPageGr))
                    humanReadablePart = this.getHumanReadableUrls(spPageGr, queryParams);
                
                var kbUrl = baseportalURL + '/' + servicePortalUrlSuffix + '/' + kbLang + humanReadablePart + '?' + queryParams;
                urlEntities += '&lt;url&gt;\n' +
                    '&lt;loc&gt;' + kbUrl + '&lt;/loc&gt;\n' +
                    '&lt;lastmod&gt;' + lastMod + '&lt;/lastmod&gt;\n';
                
                if (translatedArticles &amp;&amp; translatedArticles.length &gt; 1) {
                    // add href lang if more than 1 language is found in translatedArticles
                    for (var i in translatedArticles) {
                        var locale = translatedArticles[i].language;
                        var translatedArticleQParams = 'id=' + kbPageId + '&amp;sysparm_article=' +  translatedArticles[i].number;
                        var tempKbUrl = baseportalURL + '/' +servicePortalUrlSuffix + '/' + locale +  this.getHumanReadableUrls(spPageGr, translatedArticleQParams) + '?' + translatedArticleQParams;
                        urlEntities += '&lt;xhtml:link rel="alternate" hreflang="' + locale + '" href="' + tempKbUrl + '"/&gt;\n';
                            
                    }
                }
                urlEntities += '&lt;/url&gt;\n';
            }
        }
		var todayDate  = new GlideDate();
        if (urlEntities){
			urlEntities = '&lt;url&gt;\n&lt;loc&gt;'  + baseportalURL + '/' + servicePortalUrlSuffix + '?id=kb_home' + '&lt;/loc&gt;\n&lt;lastmod&gt;'+todayDate+'&lt;/lastmod&gt;\n&lt;/url&gt;\n'
                            +'&lt;url&gt;\n&lt;loc&gt;' + baseportalURL + '/' + servicePortalUrlSuffix + '?id=kb_search' + '&lt;/loc&gt;\n&lt;lastmod&gt;'+todayDate+'&lt;/lastmod&gt;\n&lt;/url&gt;\n'
                            + urlEntities;
		}
        urlEntities = urlEntities.replaceAll('&amp;', '&amp;amp;');
        gs.getSession().impersonate(currUserId);
        return urlEntities;
    },

    getPubliclyAccessibleCatalogItems: function (servicePortalUrlSuffix, servicePortalSysId, catalogPageId, baseportalURL) {
        var currUserId = gs.getUserID();
        gs.getSession().impersonate('guest');
        
        var spPageGr = new GlideRecord('sp_page');
        spPageGr.addQuery('id', catalogPageId);
        spPageGr.query();
        
        if (spPageGr.next() &amp;&amp; !this.isSPPagePubliclyAccessible(spPageGr)){
            gs.getSession().impersonate(currUserId);
            return '';
        }
            
        // get catalogs associated with the service portal
        var catalogIds = [];
        var gr = new GlideRecord('m2m_sp_portal_catalog');
        gr.addQuery('sp_portal', servicePortalSysId);
        gr.query();
        while (gr.next()) {
            var catId = gr.getValue('sc_catalog');
            catalogIds.push(catId);
        }
        
        // get catalog items in catalogs that can be accessed publicly
        var encodedQuery = 'sc_catalogsIN' + catalogIds.join();
        var scCatGr = new GlideRecord('sc_cat_item');
        scCatGr.addEncodedQuery(encodedQuery);
        scCatGr.addQuery('active', true);
        scCatGr.query();
        
        var urlEntities = '';
        
        while (scCatGr.next()) {
            if (scCatGr.canRead()){
                var scCatSysId = scCatGr.getValue('sys_id');
                var lastMod = scCatGr.getValue('sys_updated_on').split(' ')[0];
                var queryParams = 'id=' + catalogPageId + '&amp;sys_id=' + scCatSysId;
                var humanReadablePart = '';
                if (this.isHumanReadableUrlEnabled(spPageGr))
                    humanReadablePart = this.getHumanReadableUrls(spPageGr, queryParams);
                    
                var scCatUrl = baseportalURL + '/' + servicePortalUrlSuffix + humanReadablePart + '?' + queryParams;
                urlEntities = urlEntities + '&lt;url&gt;\n' +
                    '&lt;loc&gt;' + scCatUrl + '&lt;/loc&gt;\n' +
                    '&lt;lastmod&gt;' + lastMod + '&lt;/lastmod&gt;\n';
                urlEntities += '&lt;/url&gt;\n';
            }
        }
        urlEntities = urlEntities.replaceAll('&amp;', '&amp;amp;');
        gs.getSession().impersonate(currUserId);
        return urlEntities;
    },

    getHumanReadableUrls: function (spPageGr, queryParams) {
        var humanReadablePart = '';
        if (spPageGr)
            humanReadablePart = this.spUtil.getHumanReadableUrl(spPageGr, queryParams);
        if (humanReadablePart)
            humanReadablePart = '/' + humanReadablePart;
        return humanReadablePart;
    },

    type: 'KBPortalSitemapGeneratorUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-10-13 08:52:33&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0bea6d45382a9110f8778af503189ee4&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KBPortalSitemapGeneratorUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Knowledge Management Core" source="com.glideapp.knowledge"&gt;a8c6f4a43cb1311068bcf327dfe37f3e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0bea6d45382a9110f8778af503189ee4&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-14 09:03:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:51</sys_created_on>
        <sys_id>6e60389583b01210c6695855eeaad3fd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>KBPortalSitemapGeneratorUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6e60389583b01210c6695855eeaad3fd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
