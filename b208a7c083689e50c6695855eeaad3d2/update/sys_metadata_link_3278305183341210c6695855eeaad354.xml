<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>8b914851c3b13010fe394f877840dd30</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_oe_sfs.CollabChatUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CollabChatUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CollabChatUtils = Class.create();
CollabChatUtils.prototype = {
    initialize: function() {
    },
	isCollabChatMember: function (collabChatSysId, userSysId) {
		var gr = new GlideRecord("sys_cs_collab_member");
		gr.addQuery("collab_chat", collabChatSysId);
		gr.addQuery("member.user_document", userSysId);
		gr.query();
		return gr.next();
	},
	canReadBaseRecord: function (collabChatSysId) {
		var gr = new GlideRecord("sys_cs_collab_record");
		gr.addQuery("collab_chat", collabChatSysId);
		gr.query();
		return gr.next() &amp;&amp; gr.canRead();
	},
	getSubscription: function(resource, subscriptions) {
		if (!subscriptions || subscriptions.length == 0)
			return null;

		for(var i = 0; i &lt; subscriptions.length; i++) {
			var subscription = subscriptions[i];
			if (subscription.resource.includes(resource))
				return subscription;
		}

		return null;
	},
	getTeamsAppInfo: function(teamsChannelId) {
		var providerGR = new GlideRecord('sys_cs_collab_provider');
		providerGR.addQuery('channel', teamsChannelId);
		providerGR.addActiveQuery();
		providerGR.query();

		if (providerGR.next()) {
			var providerId = providerGR.getUniqueValue();
			var providerApplicationGR = new GlideRecord('sys_cs_collab_provider_application');
			providerApplicationGR.addQuery('provider', providerId);
			providerApplicationGR.addActiveQuery();
			providerApplicationGR.query();

			if (providerApplicationGR.next()) {
				return {
					'teamsAppId': providerApplicationGR.getValue('app_id'),
					'applicationId': providerApplicationGR.admin_connection.credential.oauth_entity_profile.oauth_entity.client_id
				};
			}
		}

		return null;
	},
	unSubscribeTeams: function(teamsChannelId) {
		var appInfo = this.getTeamsAppInfo(teamsChannelId);
		var teamsAppId = appInfo.teamsAppId;
		var applicationId = appInfo.applicationId;
		var allMembersResource = 'getAllMembers';
		var allMessagesResource = 'getAllMessages';

		var getChatSubScrResult = sn_fd.FlowAPI.executeActionQuick('sn_oe_sfs.get_chat_subscription', {
			application_id: applicationId
		});
		var subscriptions = JSON.parse(getChatSubScrResult.subscriptions);
		var subscriptionAllMembers = this.getSubscription(allMembersResource, subscriptions);
		var subscriptionAllMessages = this.getSubscription(allMessagesResource, subscriptions);
		if (subscriptionAllMembers !== null) {
			var unSubscriptionResultAllMembers = sn_fd.FlowAPI.executeActionQuick('sn_oe_sfs.unsubscribe_chat', {
				subscription_id: subscriptionAllMembers.id
			});
		}
		if (subscriptionAllMessages !== null) {
			var unSubscriptionResultAllMessages = sn_fd.FlowAPI.executeActionQuick('sn_oe_sfs.unsubscribe_chat', {
				subscription_id: subscriptionAllMessages.id
			});
		}
	},
	trimStringInputs: function(inputs) {
        for (var key in inputs) {
            if (inputs[key] &amp;&amp; typeof inputs[key] == 'string') {
                inputs[key] = inputs[key].trim();
            }
        }
        return inputs;
    },
	checkMandatoryInputs: function(inputs, mandatoryInputs) {
        for (var inputName in mandatoryInputs) {
            if (!inputs[inputName]) {
                var errMsg =
                    mandatoryInputs[inputName] +
                    " is empty or null. Provide valid value for " + mandatoryInputs[inputName] + ".";
                gs.error(errMsg);
                throw new Error(errMsg);
            }
        }
    },
	processSubscriptionResponse: function(response, subscription) {
        subscription["id"] = response["id"];
        subscription["resource"] = response["resource"];
        subscription["creator_id"] = response["creatorId"];
        subscription["change_type"] = response["changeType"];
        subscription["notification_url"] = response["notificationUrl"];
        var expiry = response["expirationDateTime"] ?
            response["expirationDateTime"].split("T") :
            "";
        subscription["expiration_date_time"] =
            expiry[0] + " " + (expiry[1] ? expiry[1].slice(0, -1) : "");
    },
	convertDateToUTC: function(date) {
        var finalDate = "";
        try {
            var gtd = new GlideDateTime(date);
            gtd.addSeconds("0");
            var utcDateTime = gtd.getValue();
            var dateArray = utcDateTime.split(" ");
            finalDate = dateArray[0] + "T" + dateArray[1] + "Z";
            return finalDate;
        } catch (e) {
            finalDate = date;
            return finalDate;
        }
    },
	validateDate: function(date) {
        return date.match(
            /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/
        );
    },
	exportPublicKeyToCertificate: function(publicKeyId, exportType) {
		return sn_collab.CollabChatScriptObject.exportPublicKeyToCertificate(publicKeyId, exportType);
	},
	// DEF0393202
	truncateAttachmentUrlParams: function(url) {
		var params = '&amp;action=default&amp;mobileredirect=true';
		var index = url.indexOf(params);
		if(index != -1) {
			url = url.substring(0, url.indexOf(params));
		}
		return url;
	},
	type: 'CollabChatUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-08-04 20:47:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;8b914851c3b13010fe394f877840dd30&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;15&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CollabChatUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Omni-Experience Standard Feature Set" source="sn_oe_sfs"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Omni-Experience Standard Feature Set"&gt;53b1b0e79761011018b2fa98c253afcc&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_8b914851c3b13010fe394f877840dd30&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-20 10:28:29&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:06</sys_created_on>
        <sys_id>3278305183341210c6695855eeaad354</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CollabChatUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3278305183341210c6695855eeaad354</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
