<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Record</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (!current.consumer.nil() && gs.tableExists('csm_household_member') && !current.household.nil()) {
        var util = new sn_csm_household.HouseHoldUtils();
        var validConsumer = util.isConsumerCurrentInHousehold(current.consumer.sys_id, current.household.sys_id);
        if (!validConsumer) {
            gs.addErrorMessage(gs.getMessage('The Consumer is not an active member of selected household'));
            current.setAbortAction(true);
        }
    }

    if (!current.parent_sold_product.nil()) {
        if (current.account != current.parent_sold_product.account) {
            gs.addErrorMessage(gs.getMessage('The account does not match with account of parent sold product'));
            current.setAbortAction(true);
        } else if(!gs.nil(current.service_organization) && current.service_organization != current.parent_sold_product.service_organization) {
   gs.addErrorMessage(gs.getMessage('The service organization does not match with service organization of parent sold product'));
            current.setAbortAction(true);
  } else {
            if (current.consumer != current.parent_sold_product.consumer && current.account.nil()) {
                gs.addErrorMessage(gs.getMessage('The consumer does not match with consumer of parent sold product'));
                current.setAbortAction(true);
            }
            if (gs.tableExists('csm_household_member') && current.household != current.parent_sold_product.household) {
                gs.addErrorMessage(gs.getMessage('The Household does not match with Household of parent sold product'));
                current.setAbortAction(true);
            }
        }
    }


})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:53</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>82dba05583701210c6695855eeaad3b9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Record</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_82dba05583701210c6695855eeaad3b9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:53</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=82dba05583701210c6695855eeaad3b9"/>
</record_update>
