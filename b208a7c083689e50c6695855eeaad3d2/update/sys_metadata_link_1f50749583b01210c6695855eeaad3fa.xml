<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0990a7c4ebc2011054009861eb52281c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AutoResolutionPredictionOutput&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;An object wrapper around Auto-Resolution Prediction Output record&lt;/description&gt;
        &lt;name&gt;AutoResolutionPredictionOutput&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AutoResolutionPredictionOutput = Class.create();
AutoResolutionPredictionOutput.prototype = {
	
	record: null,
	
    initialize: function(param) {
		if (typeof param === 'string') {
			// if the param is string, it's the sysId of the record
			this.record = new GlideRecord(AutoResolutionConstants.PREDICTION_OUTPUT_TABLE_NAME);
			
			if (!this.record.get(param))
				throw 'Record not found';
		
		} else if (param instanceof GlideRecord) {
			this.record = param;
		}
	},
	
	/**
	* After the record was updated from outside, the method will fetch the same record from DB
	* After this call, the record will be up to date.
	*/
	refresh: function() {
		this.initialize(this.record.getUniqueValue());
	},
	
	getSysId : function() {
		return this.record.getUniqueValue();
	},
	
	getPrediction : function() {
		return this.record.prediction;
	},
	
	getService : function() {
		return this.record.getValue('service');
	},
	
	getOutput : function() {
		return this.record.getValue('output');
	},
	
	getScore : function() {
		return this.record.getValue('score');
	},
	
	getDetails : function() {
		return this.record.getValue('details');
	},
	
	/**
	* Returns the feedback value
	*/
	getFeedback: function() {
		return this.record.getValue('feedback_value');
	},
	
	/**
	* Checks if feedback can be submitted
	* @return true if yes.
	*/
	canSubmitFeedback : function() {
		return !this.isFeedbackSubmitted() &amp;&amp; !this.isFeedbackProcessed();
	},
	
	/**
	* Returns the feedback status
	*/
	getFeedbackStatus : function() {
		return this.record.getValue('feedback_status');
	},
	
	/**
	* Tests if feedback is already submitted or not
	*/
	isFeedbackSubmitted : function() {
		return this.record.getValue('feedback_status') == global.AutoResolutionConstants.FEEDBACK_STATUS_SUBMITTED;
	},
	
	/**
	* Tests if feedback is already processed or not
	*/
	isFeedbackProcessed : function() {
		return this.record.getValue('feedback_status') == global.AutoResolutionConstants.FEEDBACK_STATUS_PROCESSED;
	},
	
	/**
	* Submits the feedback if allowed. 
	* If feedback is already submitted or processed, the feedback will be disregarded and thus, it won't be submitted
	*
	* @param the feedback to submit.
	*
	* @return true if succeeded or false if feedback is already submitted or processed
	*/
	submitFeedback : function(feedback) {

		// check if feedback can be submitted. If not return.
		if (!this.canSubmitFeedback())
			return false;
		
		// set the feedback value.
		this.record.setValue('feedback_value', feedback);
		
		// update the status.
		this.record.setValue('feedback_status', global.AutoResolutionConstants.FEEDBACK_STATUS_SUBMITTED);
		
		return true;
	},
	
	/**
	* Update the record
	*/
	update : function() {
		this.record.update();
	},
	
	type: 'AutoResolutionPredictionOutput'
};

/**
* Create a new Auto-Resolution prediction record
* 
* @param predictionSysId
* @param outputPayload the output line-item in the result from LanguageX
 * @return String sysId of the record inserted
*/
AutoResolutionPredictionOutput.create = function(predictionSysId, outputPayload) {
	
	var gr = new GlideRecord(AutoResolutionConstants.PREDICTION_OUTPUT_TABLE_NAME);
	gr.setValue('prediction', predictionSysId);
	
	gr.setValue('service', enforceEmptyStringIfNil(outputPayload.service));
	gr.setValue('output', enforceEmptyStringIfNil(outputPayload.serviceOutput));
	gr.setValue('score', enforceEmptyStringIfNil(outputPayload.serviceOutputScore));
	gr.setValue('service_model_used', enforceEmptyStringIfNil(outputPayload.serviceModelUsed));
	gr.setValue('service_model_solution_name', enforceEmptyStringIfNil(outputPayload.serviceModelSolutionName));
	gr.setValue('service_model_solution_version', enforceEmptyStringIfNil(outputPayload.serviceModelSolutionVersion));
	
	if (!gs.nil(outputPayload.serviceOutputDetails) &amp;&amp; outputPayload.serviceOutputDetails.length &gt; 0)
		gr.setValue('details', outputPayload.serviceOutputDetails);
	
	return gr.insert();
};

/**
 * Returns the value of the output field of the prediction output record, which contains nluIntent
 * returned from a LanguageX prediction
 * @param taskId - String id of a task GlideRecord
 * @return String name of the nluIntent
 */
AutoResolutionPredictionOutput.getNLUIntent = function(taskId) {
	// Get prediction record using task id first
	var predictionGr = new GlideRecord(AutoResolutionConstants.PREDICTION_TABLE_NAME);
	predictionGr.addQuery("task_id", taskId);
	predictionGr.query();
	predictionGr.next();
	var predictionId = predictionGr.getUniqueValue();
	
	// Get prediction output record using prediction id
	var outputGr = new GlideRecord(AutoResolutionConstants.PREDICTION_OUTPUT_TABLE_NAME);
	outputGr.addQuery("service", AutoResolutionConstants.AGENT_ZERO_SERVICE_NAME);
	outputGr.addQuery("prediction", predictionId);
	outputGr.query();
	outputGr.next();
	
	// Return the output field which is the nluIntent
	return outputGr.getValue("output");
};

AutoResolutionPredictionOutput.doesAgentZeroServiceOutputExist = function(predictionSysId) {
	var gr = new GlideRecord(AutoResolutionConstants.PREDICTION_OUTPUT_TABLE_NAME);
	gr.addQuery('prediction', predictionSysId);
	gr.addQuery('service', AutoResolutionConstants.AGENT_ZERO_SERVICE_NAME);
	gr.query();

	return gr.next();
};

function enforceEmptyStringIfNil(val) {
	return gs.nil(val) ? '' : val;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-02-28 22:09:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0990a7c4ebc2011054009861eb52281c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;37&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AutoResolutionPredictionOutput&lt;/sys_name&gt;
        &lt;sys_package display_value="Issue Auto-Resolution" source="com.glide.cs.auto_resolution"&gt;81ddf4a03c75311068bcf327dfe37fa6&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0990a7c4ebc2011054009861eb52281c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-12-30 00:37:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:38</sys_created_on>
        <sys_id>1f50749583b01210c6695855eeaad3fa</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AutoResolutionPredictionOutput</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1f50749583b01210c6695855eeaad3fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:38</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
