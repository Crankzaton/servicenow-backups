<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>22793aa55b20130036c32c1cf0f91af0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AgileBoardVTBHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;AgileBoardVTBHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AgileBoardVTBHelper = Class.create();
AgileBoardVTBHelper.prototype = {
	initialize: function() {
	},
	
	getBoardConfiguration: function(config, owner) {
		var vtbBoard = GlideVTBBoardBuilder.guided(config.tableName, config.laneField)
		.withOwner(owner)
		.withFilter(config.filter)
		.withName(config.name)
		.withExcludeChildTableLanes(true);
		
		
		if (JSUtil.notNil(config.swimLaneField))
			vtbBoard.withSwimLaneField(config.swimLaneField)
					.withSwimLaneFilter(config.swimLaneFilter);
		
		if (!gs.nil(config.showEmptyLane))
			vtbBoard.showEmptyValueLane();
		if (!gs.nil(config.laneFilter))
			vtbBoard.withLaneFilter(config.laneFilter);
		
		return vtbBoard;
	},
	
	createBoard: function(config, owner) {
		var vtbBoard = this.getBoardConfiguration(config, owner);
		
		if(config.hidePicker)
			vtbBoard.hideBoardPicker();
		
		for(var i = 0; i&lt; config.members.length;i++) {
			vtbBoard.addMember(config.members[i]);
		}
		var boardId = vtbBoard.create();
		return boardId;
	},
	
	getSysChoices : function(tableName, column) {
		var choices = new GlideSysChoice(tableName, column);
		var recChoices = choices.getChoices();
		return recChoices;
	},
	
	trimBoardNameForGroup: function(groupName) {
		var name = gs.getMessage("{0}: {1}", [groupName, 'Current Sprint']);
		return this.trimBoardName(name);
	},
	
	trimBoardName: function(name) {
		var tableDescriptor = new GlideTableDescriptor('vtb_board');
		var elementDecriptor = tableDescriptor.getElementDescriptor('name');
		var maxLength = elementDecriptor.getLength();
		if(maxLength &lt; name.length) {
			name = name.substring(0, maxLength - 3) + '...';
		}
		return name;
	},
	
	findBoardOwner: function(groupId, members, roleNames) {
		if(members.length === 0)
			return gs.getUserID();
		
		for (var j = 0; j &lt; roleNames.length; j++) {
			if(gs.hasRole(roleNames[j]))
				return gs.getUserID();
		}
		
		var roleMap = {};
		
		var roleGr = new GlideRecord('sys_user_role');
		roleGr.addQuery('name', 'IN', roleNames.join(','));
		roleGr.query();
		while(roleGr.next()){
			roleMap[roleGr.getValue('name')] = roleGr.getValue('sys_id');
		}
		
		for(var i = 0; i &lt; roleNames.length; i++) {
			var member = this._findRoleMember(roleNames[i], members, roleMap);
			if(JSUtil.notNil(member))
				return member;
		}
		return members[0];
	},
	
	_findRoleMember: function(role, members, roleMap) {
		var member = new GlideRecord("sys_user_has_role");
		member.orderBy('user');
		member.addQuery('user', 'IN', members.join(','));
		member.addQuery('role', roleMap[role]);
		member.setLimit(1);
		member.query();
		if(member.next()) {
			return member.user;
		}
		return null;
	},
	
    type: 'AgileBoardVTBHelper'
};

AgileBoardVTBHelper.isGroupMember = function(groupId, userId) {
	var gr = new GlideRecord('sys_user_grmember');
	gr.addQuery('group', groupId);
	gr.addQuery('user', userId);
	gr.query();
	return (gr.hasNext());
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-02-28 00:18:11&lt;/sys_created_on&gt;
        &lt;sys_id&gt;22793aa55b20130036c32c1cf0f91af0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;69&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AgileBoardVTBHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Agile Development 2.0" source="com.snc.sdlc.agile.2.0"&gt;7205e388477e0610cd4e1ce4316d43ce&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_22793aa55b20130036c32c1cf0f91af0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-05-07 08:46:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:06</sys_created_on>
        <sys_id>97e0305983b01210c6695855eeaad32b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AgileBoardVTBHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_97e0305983b01210c6695855eeaad32b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
