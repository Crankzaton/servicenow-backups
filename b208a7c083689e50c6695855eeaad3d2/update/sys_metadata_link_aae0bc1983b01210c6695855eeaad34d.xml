<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>21f914340b231300ea4446c863673ad2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.NumberFormatUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NumberFormatUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NumberFormatUtil = Class.create();
NumberFormatUtil.prototype = {
    initialize: function() {
        this.locale = this.getLocale();
        this.g_user_decimal_separator = this.locale.decimal_separator;
        this.g_user_grouping_separator = this.locale.group_separator;
    },
    getLocale: function() {
        return JSON.parse(new SNC.WorkbenchScriptable().getCurrencySymbol());
    },
    formatClean: function(num) {
        var sVal = '';
        var nVal = num.length;
        var sChar = '';
        var nChar = '';
        try {
            for (var i = 0; i &lt; nVal; i++) {
                sChar = num.charAt(i);
                nChar = sChar.charCodeAt(0);
                if (sChar == '-' || sChar == this.getDecimalSeparator() || ((nChar &gt;= 48) &amp;&amp; (nChar &lt;= 57)))
                    sVal += num.charAt(i);
            }
        } catch (exception) {
            gs.log("formatClean", exception);
        }
        return sVal;
    },

    formatDollar: function(amount) {
        try {
            amount = parseInt(amount, 10) + "";
            if (amount.length &lt; 3)
                return amount;

            for (var i = 0; i &lt; Math.floor((amount.length - (1 + i)) / 3); i++)
                amount = amount.substring(0, amount.length - (4 * i + 3)) + this.getGroupingSeparator() + amount.substring(amount.length - (4 * i + 3));
        } catch (exception) {
            gs.log("Format Dollar", exception);
        }
        return amount;
    },
    formatCents: function(amount) {
        var cents = '';
        try {
            if (amount.length == 0)
                return '00';

            if (amount.length == 1)
                return amount + '0';

            if (amount.length == 2)
                return amount;

            cents = amount;
        } catch (exception) {
            gs.log("Format Cents", exception);
        }
        return cents;
    },
    /*
     * format a decimal formatted string into user currency format
     */
    formatCurrency: function(num) {
        var sVal = '';
        var minus = '';
        if (num.lastIndexOf("-") == 0)
            minus = '-';
        if (num.lastIndexOf(".") &lt; 0)
            num = num + '00';
        num = formatClean(num);
        sVal = minus + this.formatDollar(num, this.getGroupingSeparator()) + this.getDecimalSeparator() + this.formatCents(num);
        return sVal;
    },

    formatNumber: function(num) {
        if (num.length == 0)
            return num;

        num = num + "";
        var sVal = '';
        var minus = '';
        var amount = '';

        try {
            if (num.lastIndexOf("-") == 0)
                minus = '-';
            num = this.formatClean(num);
            if (num.indexOf("-") == 0)
                num = num.substring(1); // formatClean preserves the minus sign, so strip it for now
            num = "0" + num;
            var fraction = parseFraction(num + "");
            num = parseInt(num, 10);
            amount = num + "";

            for (var i = 0; i &lt; Math.floor((amount.length - (1 + i)) / 3); i++)
                amount = amount.substring(0, amount.length - (4 * i + 3)) + this.getGroupingSeparator() + amount.substring(amount.length - (4 * i + 3));

            if (fraction.length &gt; 0) {
                fraction = this.getDecimalSeparator() + fraction;
                amount += fraction;
            }
        } catch (exception) {
            gs.log("Format Number", exception);
        }
        return minus + amount; // restore the minus sign if needed
    },
    getDecimalSeparator: function() {
        if (this.g_user_decimal_separator)
            return this.g_user_decimal_separator;

        return ".";
    },

    getGroupingSeparator: function() {
        if (this.g_user_grouping_separator)
            return this.g_user_grouping_separator;

        return ",";
    },
    getFormattedCurrency: function(num) {
        var sVal = '';
        var minus = '';
        var decimalValue = '';
        if (num.lastIndexOf("-") == 0) {
            minus = '-';
            num = num.substring(1, num.length);
        }
        if (num.lastIndexOf(".") &lt; 0) {
            decimalValue = '00';
        } else {
            var dotIndex = num.lastIndexOf(".");
            decimalValue = num.substr(dotIndex + 1, dotIndex + 3);
            num = String(parseInt(num, 10));
        }
        num = this.formatClean(num);
        sVal = minus + this.formatDollar(num, this.getGroupingSeparator()) + this.getDecimalSeparator() + this.formatCents(decimalValue);
        return sVal;
    },
    getFormattedAmount: function(amount) {
        var millionAmount = 0;
        if (!this.locale.symbol)
            this.locale.symbol = '$';
        var currencySymbol = this.locale.symbol;
        if (!isNaN(amount)) {
            var amt = parseFloat(Math.abs(amount));
            if (amt &lt; 1000) {
                millionAmount = amt;
            } else if (amt &lt; 1000000) {
                millionAmount = (amt / 1000).toFixed(2);
                millionAmount = gs.getMessage('{0} K', millionAmount);
            } else if (amt &lt; 1000000000) {
                millionAmount = (amt / 1000000).toFixed(2);
                millionAmount = gs.getMessage('{0} M', millionAmount);
            } else if (amt &lt; 1000000000000) {
                millionAmount = (amt / 1000000000).toFixed(2);
                millionAmount = gs.getMessage('{0} B', millionAmount);
            } else {
                millionAmount = (amt / 1000000000000).toFixed(2);
                millionAmount = gs.getMessage('{0} T', millionAmount);
            }
            if (parseFloat(amount) &lt; 0)
                millionAmount = "-" + millionAmount;
            return (currencySymbol + millionAmount);
        }
        return 0;
    },

    type: 'NumberFormatUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-07-24 07:53:52&lt;/sys_created_on&gt;
        &lt;sys_id&gt;21f914340b231300ea4446c863673ad2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NumberFormatUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Plugin For ITFM and Financial Planning" source="com.snc.itfm_core"&gt;8210166b47e64210cd4e1ce4316d4327&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_21f914340b231300ea4446c863673ad2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-04-24 11:39:57&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:03</sys_created_on>
        <sys_id>aae0bc1983b01210c6695855eeaad34d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NumberFormatUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_aae0bc1983b01210c6695855eeaad34d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:03</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
