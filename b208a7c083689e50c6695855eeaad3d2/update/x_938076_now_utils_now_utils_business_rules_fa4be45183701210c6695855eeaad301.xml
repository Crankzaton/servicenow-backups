<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.type != "key_store" &amp;&amp; current.type != "pkcs12_key_store" &amp;&amp; current.type != "ec2_private_key" &amp;&amp; current.type != "client_cert"  &amp;&amp; current.type != "trust_store_ca" &amp;&amp; current.type != "internal_ca" &amp;&amp; current.type != "bcfks_key_store"</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Get Attributes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function() {
    var StringUtil = GlideStringUtil;

    var bytes;
    if (current.format == "pem") {
        var str = current.pem_certificate.toString();
        str = str.substring(str.indexOf('-----BEGIN CERTIFICATE-----') + 28, str.indexOf('-----END CERTIFICATE-----') - 1).trim();
        bytes = StringUtil.base64DecodeAsBytes(str);
    } else {
        // der format in attachment
        var attachment = new GlideSysAttachment();
        bytes = attachment.getBytes("sys_certificate", current.sys_id);
    }

    if (bytes) {
        try {
            var cert = SNC.CertificateUtil.getDERCert(bytes);
            if (!cert) {
                gs.addErrorMessage(gs.getMessage("Unable to parse certificate"));
                return;
            }

            if (current.name.startsWith("ejbca_"))
                setCertAttributesForEJBCA(cert);
            else
                setCertAttributes(cert);

        } catch (e) {
            gs.addErrorMessage(gs.getMessage("Unable to parse certificate, check to be sure it is in <a class='breadcrumb'  href='http://en.wikipedia.org/wiki/X.509'>X.509</a> PEM or DER format"));

            if (current.format == "der") {
                //DEF0288043 set cert to false instead of delete it
                current.setValue('active', 'false');
            }
        }
    }

    function setCertAttributesForEJBCA(cert) {
        var notAfter = cert.getNotAfter();
        if (!current.expires)
            current.expires.setValue(new GlideDateTime(notAfter));

        var notBefore = cert.getNotBefore();
        if (!current.valid_from)
            current.valid_from.setValue(new GlideDateTime(notBefore));

        if (!current.issuer)
            current.issuer = cert.getIssuerX500Principal().toString();
        if (!current.subject)
            current.subject = cert.getSubjectX500Principal().toString();

        var terms = current.subject.toString().split(",");
        setShortDescription(terms);
    }

    function setCertAttributes(cert) {
        var notAfter = cert.getNotAfter();
        current.expires.setValue(new GlideDateTime(notAfter));

        var notBefore = cert.getNotBefore();
        current.valid_from.setValue(new GlideDateTime(notBefore));

        current.issuer = cert.getIssuerX500Principal().toString();
        current.subject = cert.getSubjectX500Principal().toString();

        var terms = current.subject.toString().split(",");
        setShortDescription(terms);
    }

    function setShortDescription(terms) {
        for (i = 0; i < terms.length; i++) {
            var term = terms[i].trim().split("=");
            if (term[0] == "CN") {
                current.short_description = term[1];
                break;
            }
        }
    }

})();]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>fa4be45183701210c6695855eeaad301</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Get Attributes</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_fa4be45183701210c6695855eeaad301</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:29</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=fa4be45183701210c6695855eeaad301"/>
</record_update>
