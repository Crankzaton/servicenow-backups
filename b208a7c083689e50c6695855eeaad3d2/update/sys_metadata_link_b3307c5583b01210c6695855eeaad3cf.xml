<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>03efb4d053f8011097a3ddeeff7b12ab</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_decision_table.ChoicesRepository&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ChoicesRepository&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ChoicesRepository = Class.create();

ChoicesRepository.SYS_CHOICE = "sys_choice";
ChoicesRepository.SUCCESS = "Success";
ChoicesRepository.FAIL = "Failure";
ChoicesRepository.requiredDecisionChoiceFields = [
    "value", "label"
];
ChoicesRepository.ERROR_CODES = {
    CHOICE_CREATE_FAILED: 'CHOICE_CREATE_FAILED',
    CHOICE_UPDATE_FAILED: 'CHOICE_UPDATE_FAILED',
    CHOICE_DELETE_FAILED: 'CHOICE_DELETE_FAILED',
};

ChoicesRepository.prototype = {
    initialize: function() {},
    getChoices: function(name, element, languages) {
        var choiceGr = new GlideRecord(ChoicesRepository.SYS_CHOICE);
        choiceGr.addQuery('name', 'IN', new GlideTableHierarchy(name).getTables());
        choiceGr.addQuery("element", element);
        choiceGr.addQuery("inactive", false);
        if (languages) {
            choiceGr.addQuery('language', 'IN', languages);
        }
        choiceGr.orderBy("sequence");
        choiceGr.query();

        return choiceGr;
    },

    /**
     * Creates decision choice with given details
     * @param decisionChoice
     * @returns {Object}
     */
    createDecisionChoice: function(decisionChoice) {
        var validation = DecisionTableUtil.validateRequiredFieldsForDecisionArtifact(decisionChoice, ChoicesRepository.requiredDecisionChoiceFields);
        if (validation.status === ChoicesRepository.FAIL) {
            return {
                status: ChoicesRepository.FAIL,
                errorCode: ChoicesRepository.ERROR_CODES.CHOICE_CREATE_FAILED,
                errorMessage: validation.message
            };
        }
        var dt = new sn_dt.DecisionTableBuilderAPI();
        var response = dt.createChoice(decisionChoice);
        if (response.status === ChoicesRepository.FAIL) {
            return {
                status: ChoicesRepository.FAIL,
                errorCode: ChoicesRepository.ERROR_CODES.CHOICE_CREATE_FAILED,
                errorMessage: 'Creation of decision choice was not successful'
            };
        }

        var choiceGR = response.record;
        return this._getDecisionChoiceDetails(choiceGR);
    },

    /**
     * Updates decision choice with given sys_id and details
     * @param sysId
     * @param decisionChoice
     * @returns {Object}
     */
    updateDecisionChoice: function(sysId, decisionChoice) {
        if (!sysId &amp;&amp; !sysId.trim()) {
            return {
                status: ChoicesRepository.FAIL,
                errorCode: ChoicesRepository.ERROR_CODES.CHOICE_UPDATE_FAILED,
                errorMessage: 'Invalid sysId'
            };
        }
        var validation = DecisionTableUtil.validateRequiredFieldsForDecisionArtifact(decisionChoice, ChoicesRepository.requiredDecisionChoiceFields);
        if (validation.status === ChoicesRepository.FAIL) {
            return {
                status: ChoicesRepository.FAIL,
                errorCode: ChoicesRepository.ERROR_CODES.CHOICE_UPDATE_FAILED,
                errorMessage: validation.message
            };
        }


        var dt = new sn_dt.DecisionTableBuilderAPI();
        var response = dt.updateChoice(sysId, decisionChoice);
        if (response.status === ChoicesRepository.FAIL) {
            return {
                status: ChoicesRepository.FAIL,
                errorCode: ChoicesRepository.ERROR_CODES.CHOICE_UPDATE_FAILED,
                errorMessage: 'Update of decision choice was not successful'
            };
        }

        var choiceGR = response.record;
        return this._getDecisionChoiceDetails(choiceGR);
    },

    /**
     * Deletes decision choice with given sys_id
     * @param decisionChoiceSysId
     * @returns {Object}
     */
    deleteDecisionChoice: function(decisionChoiceSysId) {
        var decisionChoiceGR = new GlideRecord(ChoicesRepository.SYS_CHOICE);
        const deleteResponse = {
            sys_id: decisionChoiceSysId,
        };
        decisionChoiceGR.get(decisionChoiceSysId);
        if (decisionChoiceGR.isValidRecord() === false) {
            deleteResponse.modified_count = 0;
        }
        var dt = new sn_dt.DecisionTableBuilderAPI();
        var response = dt.deleteChoice(decisionChoiceSysId);

        if (response.status === ChoicesRepository.FAIL) {
            return {
                status: ChoicesRepository.FAIL,
                errorCode: ChoicesRepository.ERROR_CODES.CHOICE_DELETE_FAILED,
                errorMessage: 'Delete of decision choice was not successful'
            };
        } else {
            deleteResponse.modified_count = 1;
        }

        return deleteResponse;
    },

    _getDecisionChoiceDetails: function(decisionChoiceRecord) {
        var choiceDetails = {};


        choiceDetails.sys_id = {
            value: decisionChoiceRecord.getValue('sys_id')
        };
        choiceDetails.name = {
            value: decisionChoiceRecord.getValue('name')
        };
        choiceDetails.label = {
            value: decisionChoiceRecord.getValue('label')
        };
        choiceDetails.value = {
            value: decisionChoiceRecord.getValue('value')
        };
        choiceDetails.sequence = {
            value: decisionChoiceRecord.getValue('sequence')
        };
        choiceDetails.element = {
            value: decisionChoiceRecord.getValue('element')
        };
        return choiceDetails;
    },

    type: 'ChoicesRepository'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-12-29 01:48:59&lt;/sys_created_on&gt;
        &lt;sys_id&gt;03efb4d053f8011097a3ddeeff7b12ab&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ChoicesRepository&lt;/sys_name&gt;
        &lt;sys_package display_value="Decision Table Builder" source="sn_decision_table"&gt;13aa96a16bcefa78b16cc99ed9e4f1f4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Decision Table Builder"&gt;13aa96a16bcefa78b16cc99ed9e4f1f4&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_03efb4d053f8011097a3ddeeff7b12ab&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-01 12:36:39&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:07</sys_created_on>
        <sys_id>b3307c5583b01210c6695855eeaad3cf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ChoicesRepository</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b3307c5583b01210c6695855eeaad3cf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:07</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
