<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2cb39e4f0a0a0b0c0095bcfb0942bbdf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.I18nUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;i18n Utilities to aid in User Localization.&lt;/description&gt;
        &lt;name&gt;I18nUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[			gs.include("PrototypeServer");

			var I18nUtils = Class.create();

			I18nUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {
				isPublic: function () {
					// getAvailableLanguages is called before authentication
					return true;
				},

				// gets called when doing ajax
				process: function () {
					if (this.getName() == "getLanguage") {
						return this.getLanguage();
					} else if (this.getName() == "getUserDefaultLanguage") {
						return this.getUserDefaultLanguage();
					} else if (this.getName() == "setLanguage") {
						this.setLanguage(this.getValue());
					} else if (this.getName() == "getAvailableLanguages") {
						this.getAvailableLanguages();
					}
				},

				getLanguage: function () {
					return gs.getSession().getLanguage();
				},

				// Gets the Global language in the users language
				// for the NULL_OVERRIDE choice for the sys_user table preferred_language field
				// If there is no Global language specified will default to english
				getUserLanguage: function () {
					var userLang = this.getLanguage();
					var sysLang = gs.getProperty('glide.sys.language');
					//If there is no Global language specified, default to english
					if (sysLang.nil()) {
						sysLang = 'en';
					}
					var lang = new GlideRecord('sys_choice');
					lang.addQuery('name', 'sys_user');
					lang.addQuery('element', 'preferred_language');
					lang.addQuery('language', userLang);
					lang.addQuery('value', sysLang);
					lang.addQuery('inactive', false);
					lang.query();
					if (lang.next()) {
						return lang.label;
					}

					// Did not find a label for users language in their language
					// Try and find their language in English
					lang.initialize();
					lang.addQuery('element', 'preferred_language');
					lang.addQuery('language', 'en');
					lang.addQuery('value', userLang);
					lang.addQuery('inactive', false);
					lang.query();
					if (lang.next()) {
						return lang.label;
					}

					// Did not find a label for the users language in English
					// return language abreviation
					return userLang;
				},

				// Gets the Global Timezone in the users language
				// for the NULL_OVERRIDE choice for the sys_user table time_zone field
				getTranslatedSysTimezone: function () {
					var userLang = gs.getSession().getLanguage();
					var systz = gs.getSysTimeZone();
					var tz = new GlideRecord('sys_choice');
					tz.addQuery('name', 'sys_user');
					tz.addQuery('element', 'time_zone');
					tz.addQuery('language', userLang);
					tz.addQuery('value', systz);
					tz.addQuery('inactive', false);
					tz.query();
					if (tz.next()) {
						return tz.label;
					}

					// Did not find a label for Global time zone in users language
					// Try and find the time zone in English
					tz.initialize();
					tz.addQuery('element', 'preferred_language');
					tz.addQuery('language', 'en');
					tz.addQuery('value', systz);
					tz.addQuery('inactive', false);
					tz.query();
					if (tz.next()) {
						return tz.label;
					}

					// Did not find a label for the users language in English
					// return Global Time Zone abreviation
					return systz;

				},

				getUserDefaultLanguage: function () {
					// first check if the user has a specified language
					var user = new GlideRecord('sys_user');
					user.addQuery('sys_id', gs.getSession().getUser().getID());
					user.query();
					if (user.next()) {
						if (!user.preferred_language.nil()) {
							return user.preferred_language;
						}
					}

					// else use the global system language
					return gs.getProperty('glide.sys.language');
				},

				setLanguage: function (lang) {
					var user = gs.getUser();
					user.setPreference("user.language", lang);
					user.savePreferences();
				},

				getAvailableLanguages: function () {
					var cl = new GlideChoiceList();
					var clg = new GlideChoiceListGenerator("sys_user", "preferred_language");
					clg.setCache(false);
					clg.setNone(false);
					clg.get(cl);
					var s = cl.getNullOverride(this.gc);
					if (!gs.nil(s)) {
						cl.removeChoice("NULL_OVERRIDE");
					}

					this._addLanguageChoices(cl);
				},

				_addLanguageChoices: function (cl) {
					// iterate through the cli and populate the ajax response
					var addedChoices = new Object();
					for (var i = 0; i &lt; cl.size(); i++) {
						var c = cl.getChoice(i);
						var value = c.getValue();
						if (addedChoices[value]) {
							continue;
						}

						addedChoices[value] = true;
						var item = this.newItem();
						item.setAttribute("name", c.getLabel());
						item.setAttribute("label", c.getLabel());
						item.setAttribute("value", value);
					}
				},

				// Called in afterload plugin script
				activatePreferredLanguageChoices: function (lang) {
					var plugins = new GlideRecord('sys_plugins');
					plugins.addQuery('source', 'CONTAINS', 'i18n');
					plugins.query();
					while (plugins.next()) {
						gs.print('Plugin: ' + plugins.source.toString());
						// Check the list of active i18n plugins
						var pluginID = plugins.source.toString();
						var pluginSplit = pluginID.split('.');
						if (pluginSplit.length != 4) {
							continue;
						}

						var lName = pluginSplit[3];
						lName = lName.replaceAll('_', ' ');
						lName = lName.replace(/-/g, ' - ');
						var scpl = new GlideRecord('sys_language');
						scpl.addQuery('name', lName);
						scpl.query();
						if (scpl.next()) {
							var id = scpl.id;
							this._checkForActivePlugin(id, lang);
						}
					}

					var lr = new GlideRecord('sys_language');
					if (lr.get('id', lang)) {
						lr.active = true;
						lr.update();
					}
				},

				activateTimezoneChoices: function (lang) {
					// If Choice has been customized then can't assume anything
					if (this.hasChoiceCustomization('sys_user', 'time_zone', null)) {
						return;
					}

					// All choices (unless customized) come in inactive=false so first set to inactive=true
					gs.print("activateTimezoneChoices:  deactivate all sys_user.time_zone choices");
					var tc = new GlideRecord('sys_choice');
					tc.addQuery('name', 'sys_user');
					tc.addQuery('element', 'time_zone');
					tc.addQuery('language', lang);
					tc.setValue('inactive', true);
					tc.setWorkflow(false);
					tc.updateMultiple();

					// If English is inactive=false then activated language should be inactive=false
					var tce = new GlideRecord('sys_choice');
					tce.addQuery('name', 'sys_user');
					tce.addQuery('element', 'time_zone');
					tce.addQuery('language', 'en');
					tce.addQuery('inactive', false);
					tce.query();
					gs.print("activateTimezoneChoices:  activate " + tce.getRowCount() + " sys_user.time_zone choices based on inactive=false English choices");
					while (tce.next()) {
						var tcl = new GlideRecord('sys_choice');
						tcl.addQuery('name', 'sys_user');
						tcl.addQuery('element', 'time_zone');
						tcl.addQuery('language', lang);
						tcl.addQuery('value', tce.value);
						tcl.query();
						while (tcl.next()) {
							gs.print("activateTimezoneChoices:  activate " + tcl.name + "." + tcl.element + "." + tcl.value + " = " + tce.inactive);
							tcl.setValue('inactive', tce.inactive);
							tcl.setWorkflow(false);
							tcl.update();
						}
					}
				},

				_checkForActivePlugin: function (value, lang) {
					gs.print('Turning on ' + value + ' in ' + lang);

					// Turn on other languages in current language
					var choice = new GlideRecord('sys_choice');
					choice.addQuery('element', 'preferred_language');
					choice.addQuery('language', lang);
					choice.addQuery('value', value);
					choice.query();
					if (choice.next()) {
						gs.print('Found a preferred_language for ' + value + ' in ' + lang);
						choice.inactive = false;
						choice.update();
					} else {
						gs.print('No preferred_language for ' + value + ' in ' + lang + '. Creating one.');
						choice.initialize();
						choice.name = 'sys_user';
						choice.element = 'preferred_language';
						choice.language = lang;
						choice.value = value;
						choice.inactive = false;
						choice.label = this.getDefaultLanguageLabel(value);
						choice.insert();
					}

					// Turn on current language in other languages
					choice.initialize();
					choice.addQuery('element', 'preferred_language');
					choice.addQuery('language', value);
					choice.addQuery('value', lang);
					choice.query();
					if (choice.next()) {
						gs.print('Found ' + lang + ' preferred_language in ' + value);
						choice.inactive = false;
						choice.update();
					} else {
						gs.print('No ' + lang + ' preferred_language in ' + value + ' . Creating one.');
						choice.initialize();
						choice.name = 'sys_user';
						choice.element = 'preferred_language';
						choice.language = value;
						choice.value = lang;
						choice.inactive = false;
						choice.label = this.getDefaultLanguageLabel(lang);
						choice.insert();
					}
				},

				createDefaultLanguageChoice: function (value) {
					// First verify that the choice doesn't already exist
					var choice = new GlideRecord('sys_choice');
					choice.addQuery('element', 'preferred_language');
					choice.addQuery('language', 'en');
					choice.addQuery('value', value);
					choice.query();
					if (choice.next()) {
						gs.print('Found a preferred_language for ' + value);
						choice.inactive = false;
						choice.update();
					} else {
						gs.print('No preferred_language for ' + value + ' in English. Creating one.');
						choice.initialize();
						choice.name = 'sys_user';
						choice.element = 'preferred_language';
						choice.language = 'en';
						choice.value = value;
						choice.inactive = false;
						choice.label = this.getDefaultLanguageLabel(value);
						choice.insert();
					}
				},

				// Called from the i18n language plugins
				// When the language choice is not found we will create
				// create a default one in English
				getDefaultLanguageLabel: function (value) {
					var sl = new GlideRecord('sys_language');
					sl.addQuery('id', value);
					sl.query();
					if (sl.next()) {
						return sl.name;
					}

					return "English";
				},

				getLanguageLabel: function (value) {
					var l = new GlideRecord('sys_choice');
					l.addQuery('name', 'sys_user');
					l.addQuery('element', 'preferred_language');
					l.addQuery('language', gs.getSession().getLanguage());
					l.addQuery('value', value);
					l.query();
					if (l.next()) {
						return l.label;
					}
					return value;
				},

				// Called from the Non-Translated Name/Fields,
				// Messages, Choice, and Field Label Modules
				getCustomizations: function (table, fields) {
					// get list of records in other languages
					var records = new Array();
					var record = new GlideRecord(table);
					record.addQuery('language', '!=', 'en');
					record.query();
					var list = new Object();
					var recordList = '';
					while (record.next()) {
						recordList = this._getFieldValues(record, fields);
						list[recordList] = true;
					}

					// next check if each English record is found
					// in our translated list, if not add it to our return array
					var check = new GlideRecord(table);
					check.addQuery('language', 'en');
					check.query();
					var checkList = '';
					while (check.next()) {
						checkList = this._getFieldValues(check, fields);
						if (list[checkList]) {
							continue;
						}
						records.push(check.sys_id.toString());
					}
					return records;
				},


				// Called from getCustomizations used for the Non-Translated Name/Fields,
				// Messages, Choice, and Field Label Modules
				_getFieldValues: function (record, fields) {
					var list = record[fields[0]];
					for (var field = 1; field &lt; fields.length; field++) {
						list += ':' + record[fields[field]];
					}
					return list;
				},


				// Called from the Translation Plugin Import Map onStart script
				getLanguageCustomizations: function (lang, table, fields, list, isTRT) {
					
					var records = new Array();
					var record = new GlideRecord('sys_update_xml');
					record.addQuery('name', 'STARTSWITH', table);
					record.addNullQuery('remote_update_set');
					record.orderBy('name');
					record.orderByDesc('sys_updated_on');
					record.query();

					var lastVisited='';

					while (record.next()) {
						var name = record.name.toString();

						if(lastVisited == name) 
							continue;

						lastVisited=name;

						if(record.replace_on_upgrade)
							continue;

						var value = '';
						var found = false;
						var xml = record.payload + '';
						var doc = GlideXMLUtil.parse(xml);
			
						// Ensure we have a valid document
						if (!gs.nil(doc)) {
							// Check if the payload contains the language for the current import
							var nodes = doc.getElementsByTagName('language');
							for (var i = 0; i &lt; nodes.length; i++) {
								if (nodes.item(i).hasChildNodes() &amp;&amp; nodes.item(i).getChildNodes().item(0).getNodeValue() == lang) {
									// Grab the value for this choice
									var recordList = '';
									recordList = this._getElementValue(nodes.item(i), fields[0]);
									for (var field = 1; field &lt; fields.length; field++) {
										recordList += ' : ' + this._getElementValue(nodes.item(i), fields[field]);
									}
									if(isTRT &amp;&amp; list.hasOwnProperty(recordList))
										list[recordList] = true;
									else if(!isTRT)
										list[recordList] = true;
							}
						}
					}
				}
				return list;
			},

				hasChoiceCustomization: function (table, field, value) {
					var suxName = 'sys_choice_' + table + "_" + field;
					var sux = new GlideRecord('sys_update_xml');
					if (sux.get('name', suxName)) {
						return true;
					}

					return false;
				},

				getEnglishChoice: function (table, field, value) {
					var sc = new GlideRecord('sys_choice');
					sc.addQuery('name', table);
					sc.addQuery('element', field);
					sc.addQuery('value', value);
					sc.addQuery('language', 'en');
					sc.query();
					if (sc.next()) {
						return sc;
					}

					return null;
				},

				// Called from getLanguageCustomizations used for the Translation Plugin Import Map onStart script
				_getElementValue: function (el, fieldName) {
					
					if (el.previousSibling != null) {
						node = el.getPreviousSibling();
					}

					// Look for the fieldName in the previousSibling nodes
					while (node.getNodeName() != fieldName &amp;&amp; node.previousSibling != null) {
						node = node.getPreviousSibling();
					}

					// Verify that we found the fieldName in the previousSibling nodes
					// else start looking in the nextSibling nodes
					if (node.getNodeName() != fieldName &amp;&amp; el.nextSibling != null) {
						node = el.getNextSibling();
					}

					// Continue looking at the next sibling until we find the fieldName
					while (node.getNodeName() != fieldName &amp;&amp; node.nextSibling != null) {
						node = node.getNextSibling();
					}

					if (node.getNodeName() != fieldName || !node.hasChildNodes()) {
						return '';
					}

					return node.getChildNodes().item(0).getNodeValue();
				}
				
				
			});
			]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2008-12-12 19:36:55&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2cb39e4f0a0a0b0c0095bcfb0942bbdf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;122&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;I18nUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="I18N: Internationalization" source="com.glide.i18n"&gt;2cdd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2cb39e4f0a0a0b0c0095bcfb0942bbdf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-24 11:59:41&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:12</sys_created_on>
        <sys_id>2f21349983b01210c6695855eeaad3c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>I18nUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2f21349983b01210c6695855eeaad3c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:12</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
