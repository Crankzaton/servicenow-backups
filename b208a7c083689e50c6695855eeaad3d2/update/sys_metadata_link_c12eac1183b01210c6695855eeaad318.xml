<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>3579346493001200ea933007f67ffb56</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;cost_plan&lt;/collection&gt;
        &lt;condition&gt;current.operation() != "update" || ( current.start_fiscal_period.changes() || current.end_fiscal_period.changes())&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Create Breakdowns&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[if ((typeof origCostPlanId === 'undefined') || JSUtil.nil(origCostPlanId))
    var origCostPlanId = current.sys_id;
if ((typeof pmCostPlanExtended === 'undefined') || JSUtil.nil(pmCostPlanExtended))
    var pmCostPlanExtended = false;

(function executeRule(current, previous) {
    try {
        var isDataSeparationSkippedFromNowOnwards = typeof DataSeparatorGlobalUtil !== "undefined" ? DataSeparatorGlobalUtil.skipDataSeparation() : false;
        if (pmCostPlanExtended) {
            origCostPlanId = null;
            pmCostPlanExtended = false;
            return;
        }
        var isCostPlanBatch = (typeof costPlanBatch !== 'undefined') &amp;&amp; JSUtil.notNil(costPlanBatch);
        if (isCostPlanBatch &amp;&amp; costPlanBatch)
            return;

        var costPlan = new CostPlan(current);
        costPlan.createBreakDowns();

        var isOriginatingFromCostPlan = (typeof origCostPlanId !== 'undefined') &amp;&amp; JSUtil.notNil(origCostPlanId);
        if (isOriginatingFromCostPlan &amp;&amp; origCostPlanId == current.sys_id) {
            origCostPlanId = null;

            var costPlanGr = new GlideRecord(current.getTableName());
            costPlanGr.get(current.sys_id);

            var rollupCostPlan = new CostPlan(costPlanGr);
            var updatedTotalPlannedCost = rollupCostPlan.updateTotalPlannedCost();
            var updatedTotalActualCost = rollupCostPlan.updateTotalActualCost();

            if (JSUtil.notNil(costPlanGr.program)) {
                var ppmTaskEntityUpdater = new PPMTaskEntityUpdater();
                ppmTaskEntityUpdater.updateProgramEstimatedCost(costPlanGr);
            }
            var updated = updatedTotalPlannedCost || updatedTotalActualCost;
            if (updated)
                rollupCostPlan.update();

            // Find or create Task breakdowns
            var taskRef = current.top_task.getRefRecord();
            var gr = new GlideRecord("cost_plan_breakdown");
            gr.addQuery("breakdown_type", 'requirement');
            gr.addQuery("cost_plan", current.getValue("sys_id"));
            gr.query();
            while (gr.next()) {
                var util = new PPMCostRollupManager(gr.getValue('fiscal_period'), gr.getValue('expense_type'));
                if (taskRef.instanceOf('pm_project') || taskRef.instanceOf('pm_project_task')) {
                    util.updateProjectEstimatedCostByFiscalPeriod(taskRef.getValue('top_task'));
                } else if (taskRef.instanceOf('dmn_demand')) {
                    util.updateDemandEstimatedCostByFiscalPeriod(gr.getValue('task'));
                }
            }

            (new PPMTaskEntityUpdater()).updateBudgetCost(taskRef);
        }
    } finally {
        if (isDataSeparationSkippedFromNowOnwards)
            DataSeparatorGlobalUtil.honourDataSeparation();
    }
})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2015-11-27 07:10:33&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;3579346493001200ea933007f67ffb56&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;68&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Create Breakdowns&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_3579346493001200ea933007f67ffb56&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-15 10:34:18&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;after&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=3579346493001200ea933007f67ffb56"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:59:55</sys_created_on>
        <sys_id>c12eac1183b01210c6695855eeaad318</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Breakdowns</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_c12eac1183b01210c6695855eeaad318</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:59:55</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
