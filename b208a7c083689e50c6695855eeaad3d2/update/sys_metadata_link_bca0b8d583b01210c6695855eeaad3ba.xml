<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>16abdfbc0ab30154009cf31f222407e8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.AgentMetrics&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Processes inbound MID server metrics.&lt;/description&gt;
        &lt;name&gt;AgentMetrics&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[gs.include("PrototypeServer");

/**
 * Processes inbound MID server metrics.
 * 
 * Tom Dilatush tom.dilatush@service-now.com
 */
var AgentMetrics = Class.create();
AgentMetrics.MAX_INT = 2147483647;
AgentMetrics.MIN_INT = -2147483648;

AgentMetrics.prototype = {

	/*
     * Initializes a new instance of this class. 
     */
	initialize: function() {
	},

	process: function(midID, doc) {
		if (!midID)
			return;

		var root = doc.getDocumentElement();
		var XMLUtil = GlideXMLUtil;
		var metrics = XMLUtil.selectNodes(root, '//metric');

		for (var i = 0; i &lt; metrics.getLength(); i++) {
			var metric = metrics.item(i);
			var name = metric.getAttribute('name');
			this.handleMemory(  metric, name, midID );
			this.handleCounter( metric, name, midID );
			this.handleRGR(     metric, name, midID );
			this.handleScalar(  metric, name, midID );
		}
	},

	handleCounter: function(metric, name, midID) {
		if (metric.getAttribute('type') != 'counter')
			return;

		var values = {};
		values['count'] = metric.getAttribute('count');
		this.updateMetric('ecc_agent_counter_metric', values, metric, midID);
	},

	handleScalar: function(metric, name, midID) {
		if (metric.getAttribute('type') != 'scalar')
			return;

		var values = {};
		values ['count']       = metric.getAttribute( 'count'       );
		values ['min']         = metric.getAttribute( 'min'         );
		values ['max']         = metric.getAttribute( 'max'         );
		values ['mean']        = metric.getAttribute( 'mean'        );
		values ['median']      = metric.getAttribute( 'median'      );
		values ['chi2_mean']   = metric.getAttribute( 'chi2_mean'   );
		values ['chi2_median'] = metric.getAttribute( 'chi2_median' );
		this.updateMetric('ecc_agent_scalar_metric', values, metric, midID);
	},

	handleRGR: function(metric, name, midID) {
		if (name.indexOf('remote_glide_record.bytes_to_time') != 0)
			return;

		var values = {};
		values['count']             = metric.getAttribute( 'count'             );
		values['bytes_per_second']  = metric.getAttribute( 'bytes_per_second'  );
		values['overhead_ms']       = metric.getAttribute( 'overhead_ms'       );
		values['chi2']              = metric.getAttribute( 'chi2'              );
		values['min_bytes']         = metric.getAttribute( 'min_bytes'         );
		values['max_bytes']         = metric.getAttribute( 'max_bytes'         );
		values['mean_bytes']        = metric.getAttribute( 'mean_bytes'        );
		values['median_bytes']      = metric.getAttribute( 'median_bytes'      );
		values['chi2_mean_bytes']   = metric.getAttribute( 'chi2_mean_bytes'   );
		values['chi2_median_bytes'] = metric.getAttribute( 'chi2_median_bytes' );
		values['min_ms']            = metric.getAttribute( 'min_ms'            );
		values['max_ms']            = metric.getAttribute( 'max_ms'            );
		values['mean_ms']           = metric.getAttribute( 'mean_ms'           );
		values['median_ms']         = metric.getAttribute( 'median_ms'         );
		values['chi2_mean_ms']      = metric.getAttribute( 'chi2_mean_ms'      );
		values['chi2_median_ms']    = metric.getAttribute( 'chi2_median_ms'    );

		this.updateMetric('ecc_agent_rgr_metric', values, metric, midID);
	},

	handleMemory: function(metric, name, midID) {
		if (name.indexOf('memory.') != 0)
			return;

		var values = {};
		values['count']                  = metric.getAttribute( 'count'                  );
		values['min_used_bytes']         = metric.getAttribute( 'min_used_bytes'         );
		values['max_used_bytes']         = metric.getAttribute( 'max_used_bytes'         );
		values['median_used_bytes']      = metric.getAttribute( 'median_used_bytes'      );
		values['chi2_used_median']       = metric.getAttribute( 'chi2_used_median'       );
		values['min_allocated_bytes']    = metric.getAttribute( 'min_allocated_bytes'    );
		values['max_allocated_bytes']    = metric.getAttribute( 'max_allocated_bytes'    );
		values['median_allocated_bytes'] = metric.getAttribute( 'median_allocated_bytes' );
		values['max_available_bytes']    = metric.getAttribute( 'max_available_bytes'    );
		values['max_used_pct']           = 100.0 * values['max_used_bytes']      / values['max_available_bytes'];
		values['max_allocated_pct']      = 100.0 * values['max_allocated_bytes'] / values['max_available_bytes'];

		this.updateMetric('ecc_agent_memory_metric', values, metric, midID);
	},

	updateMetric: function(tableName, values, metric, midID) {
		values['type']  = metric.getAttribute( 'type' );
		values['name']  = metric.getAttribute( 'name' );
		values['agent'] = midID;

		var gr = new GlideRecord(tableName);
		gr.initialize();
		for (var fieldName in values) {
			var value = values[fieldName];

			// if the value is numeric, make sure it is not less than the minimum value of integer field type
			if (value.match(/^\d+(?:\.\d+)?$/)) {
				value = Math.round(value);
				value = Math.max(value, AgentMetrics.MIN_INT);
			// if the value is infinity (∞), fit it into integer field type
			} else if (value.indexOf("∞") &gt; -1) {
				if (value.indexOf("-") &gt; -1)
					value = AgentMetrics.MIN_INT;
				else
					value = AgentMetrics.MAX_INT;
			}

			gr[fieldName] = value;
		}
		gr.insert();
	},

	type: 'AgentMetrics'
}
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;glide.maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2009-03-17 23:02:53&lt;/sys_created_on&gt;
        &lt;sys_id&gt;16abdfbc0ab30154009cf31f222407e8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;42&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AgentMetrics&lt;/sys_name&gt;
        &lt;sys_package display_value="MID Server" source="com.glideapp.agent"&gt;a6877ce83cb1311068bcf327dfe37f69&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_16abdfbc0ab30154009cf31f222407e8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;benjamin.phan&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-07-21 23:59:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:50</sys_created_on>
        <sys_id>bca0b8d583b01210c6695855eeaad3ba</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AgentMetrics</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_bca0b8d583b01210c6695855eeaad3ba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:50</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
