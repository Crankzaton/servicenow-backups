<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>11059e48c7960010f02b23b881c26077</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_kmf.KMFKeyExchangeUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Util / Helper methods for Key Management Framework Key Exchange&lt;/description&gt;
        &lt;name&gt;KMFKeyExchangeUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var KMFKeyExchangeUtil = Class.create();
KMFKeyExchangeUtil.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {	
	requestModuleKey: function() {
		var keySpecSysId = this.getParameter('sysparm_key_spec_sysid');
		var sourceInstanceHost = this.getParameter('sysparm_instance_host');
		var sourceInstanceId = this.getParameter('sysparm_instance_id');
		var requesterInstanceHost = this.getParameter('sysparm_instance_a_host');
		var exchangeFrequency = this.getParameter('sysparm_exchange_frequency');
		var enableRekeying = this.getParameter('sysparm_enable_rekeying');

		var keyImporter = new sn_kmf_ns.KMFModuleKeyImporter();
		var result = keyImporter.createRequest(keySpecSysId, sourceInstanceHost, sourceInstanceId, requesterInstanceHost, exchangeFrequency, enableRekeying);

		var parsedResult = JSON.parse(result);
		var output = this.newItem("output");
		var success = parsedResult.success; // string or boolean return either 'true' or 'false'
		var error_code = parsedResult.error_code; // int, return specific status code
		output.setAttribute("success", success);
		// attach session global variables for the result message being used across several tables
		var session = gs.getSession();
		var message = "";

		if (success === true) {
			output.setAttribute("success", "approval");
			output.setAttribute("message", "The Request is successfully handled by Source Instance.");
			session.putClientData('keyexchange_success', "approval");
			message = gs.getMessage("The Request is successfully handled by Source Instance.");
		} else {
			if (error_code === 801)
				output.setAttribute("message", gs.getMessage("Source Instance rejected the Request."));
			else if (error_code === 802)
				output.setAttribute("message", gs.getMessage("Source Instance encountered failures in handling the Request."));
			else if (error_code === 804)
				output.setAttribute("message", gs.getMessage("Failed to send over the key exchange request."));
			else
				output.setAttribute("message", gs.getMessage("Failed to handle the key exchange request."));
		}
		// else message is empty string ""
		// the success status and message are attached as session global for the next request
		// to the server be able to check the success status and message data.
		session.putClientData('keyexchange_message', message);
	},
	generateResourceExchangeRequests:function() {
		var exchangeFrequency = this.getParameter('sysparm_exchange_frequency');
		var keySpecSysId = this.getParameter('sysparm_key_spec_sysid');
		var targetInstanceHost = this.getParameter('sysparm_target_instance_host');
		var targetInstanceId = this.getParameter('sysparm_target_instance_id');
		var enableRekeying = this.getParameter('sysparm_enable_rekeying');
		
		var resourceExchangeRestUtil = new sn_kmf_ns.KMFModuleKeyImporter();
		var result = resourceExchangeRestUtil.insertNewKeyExchangeRequestWithoutNonce(exchangeFrequency, keySpecSysId, targetInstanceHost, targetInstanceId, enableRekeying);
		return result;
	},
    type: 'KMFKeyExchangeUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-01-07 18:13:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;11059e48c7960010f02b23b881c26077&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;156&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;KMFKeyExchangeUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="ServiceNow Key Management Framework" source="sn_kmf"&gt;c515f25b53332300cd1eddeeff7b126e&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="ServiceNow Key Management Framework"&gt;c515f25b53332300cd1eddeeff7b126e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_11059e48c7960010f02b23b881c26077&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-08-05 19:47:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:19</sys_created_on>
        <sys_id>dd8070d583b01210c6695855eeaad3d7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>KMFKeyExchangeUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_dd8070d583b01210c6695855eeaad3d7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
