<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>c726c7e1770323005a4820089a106148</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description&gt;This Fix script searches for any existing sys_dictionary entry for 'sys_email_canned_message' having internal_type  for element 'body' as 'html'. 

If  the entry exists then it updates internal_type  for element 'body' to 'html_script' from 'html' and returns. 

Then Fix script searches for any existing sys_dictionary entry for 'sys_email_canned_message' having internal_type  for element 'body' as 'string'. 

If  the entry exists then it formats the body of any existing 'sys_email_canned_message' with 'internal_type' as 'string' using a scriptable API that uses OutLookDivformatter . 

Once the body is formatted ,  then the 'internal_type' of 'body' element  for  'sys_email_canned_message' is updated from 'string' to 'html_script'.&lt;/description&gt;
        &lt;name&gt;Update Body field for Canned Messages&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[(function() {
		//query for sys_dictionary entry to check for table name 'sys_email_canned_message' with 'internal_type' as 'html'
		var stringDictionaryEntries = new GlideRecord('sys_dictionary');
		stringDictionaryEntries.addActiveQuery();
		stringDictionaryEntries.addQuery('name', 'sys_email_canned_message');
		stringDictionaryEntries.addQuery('element', 'body');
		stringDictionaryEntries.query();
	
		if(stringDictionaryEntries.next()) {
			var internalType = stringDictionaryEntries.getValue('internal_type');
	    		if(internalType == 'html_script')
				gs.info('Update Body field for Canned Messages: skipping fix column already html_script');
			else if(internalType == 'html') {
				gs.info('Update Body field for Canned Messages: updating type from html to html_script');
				stringDictionaryEntries.setValue('internal_type','html_script');
			}
			else if(internalType == 'string'){ 
				if (gs.getProperty("glide.ui.email_client.html") == "false") {
					gs.info('Update Body field for Canned Messages: skipping email client is in Text mode');
					return;
				}
				updateCannedMessagesFromStringToHtmlScript();
				gs.info('Update Body field for Canned Messages: updating type from string to html_script');
				stringDictionaryEntries.setValue('internal_type','html_script');
			}
			
			gs.info('Update Body field for Canned Messages: updating dependent field of body');
			stringDictionaryEntries.setValue('use_dependent_field',true);
			stringDictionaryEntries.setValue('dependent','table');
			stringDictionaryEntries.setValue('dependent_on_field','table');
			stringDictionaryEntries.update();
		}
	
    		function updateCannedMessagesFromStringToHtmlScript() {
			var cannedMessage = new GlideRecord('sys_email_canned_message');
			cannedMessage.query();
			while (cannedMessage.next()) {
				//format the body by using the scriptable API and set the format body back to the cannedMessage
				if (!gs.nil(cannedMessage.body)) {
					var formattedText = SNC.EmailClientFormatter.formatEmailText(cannedMessage.body + '');
					cannedMessage.setValue('body', formattedText);
					cannedMessage.update();
				}
			}
		}
	})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-01-17 04:06:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;c726c7e1770323005a4820089a106148&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Update Body field for Canned Messages&lt;/sys_name&gt;
        &lt;sys_package display_value="Email Accounts" source="com.glide.email_accounts"&gt;c0e674e43cb1311068bcf327dfe37f64&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_c726c7e1770323005a4820089a106148&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-01-17 04:06:51&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:40:20</sys_created_on>
        <sys_id>f7154d9583741210c6695855eeaad390</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Body field for Canned Messages</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f7154d9583741210c6695855eeaad390</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:40:20</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
