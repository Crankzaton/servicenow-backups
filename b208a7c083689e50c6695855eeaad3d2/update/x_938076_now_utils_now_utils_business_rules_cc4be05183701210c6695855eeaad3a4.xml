<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!current.sold_product.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>validate account, consumer and product</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (!current.account.nil()) {
        if (current.account.changes() && current.sold_product.account != current.account) {
            gs.addErrorMessage(gs.getMessage("Account selected does not match account in the sold product"));
            current.setAbortAction(true);
            return;
        }

  /* if account is restricted and contact have only customer role then check for create/update access for contact */
  var accountUtil = new global.Account();
  var isRestrictedAccessAccount = accountUtil.isRestrictedAccessAccount(current.account);
  if (isRestrictedAccessAccount && gs.hasRole('sn_customerservice.customer') && !gs.hasRole('sn_customerservice.customer_admin, sn_customerservice.customer_case_manager, customer_account_admin') && !new global.CSMRelationshipUtils().canContactCreateOrUpdateCase(current)) 
   return;

  /* if account is restricted and sold_product is filled, then check if the contact has sold_product access */
  if (!gs.nil(current.contact) && isRestrictedAccessAccount && !current.sold_product.nil()) {
   var contactHasCustomerAdminRole = new global.CSHelper().userHasRole(current.contact, "sn_customerservice.customer_admin");
   if(!contactHasCustomerAdminRole){
    /* contact has sold_product access if :-
    * 1. (s)he is sold_product.contact, OR
    * 2. (s)he is contained in sold_product.additional_users (additional contacts with Authorized Representative responsibility).
    */
    var soldProductAdditionalUsers = current.sold_product.additional_users || '';
    if (current.sold_product.contact != current.contact && 
     soldProductAdditionalUsers.split(',').indexOf(current.contact + '') < 0 && !new sn_install_base.SoldProductAndInstallBaseFilter().isAdditionalAccountContact(current.sold_product, current.contact)) {
     gs.addErrorMessage(gs.getMessage("Contact selected does not match contact for the sold product"));
     current.setAbortAction(true);
     return;
    }
   }
  }
 }

 if (!current.consumer.nil() && current.consumer.changes() && current.sold_product.consumer != current.consumer) {
  var accessLevel,
   params = {
    "consumerId": current.consumer + '',
    "isSPViewer": true
   };
  if (!gs.hasRole("admin") && (gs.hasRole("sn_customerservice.consumer") || gs.hasRole("sn_customerservice.unified_consumer")))
   accessLevel = global.CSMRelationshipConstants.ACCESS.FULL;
  else
   params[global.CSMRelationshipConstants.SKIP_ROLE_CHECK] = true;
  var util = new sn_install_base.InstallBaseUtil();
  var validSP = util.getConsumerSoldProducts(accessLevel, params);
  if (validSP.indexOf(current.sold_product + '') < 0) {
   gs.addErrorMessage(gs.getMessage("Consumer selected does not match consumer for the sold product"));
   current.setAbortAction(true);
   return;
  }
 } 

 if (gs.nil(current.account)) {
  /* set account/consumer  based on sold_product.account and consumer */
  if (!current.sold_product.account.nil())
   current.account = current.sold_product.account;
  if (gs.nil(current.consumer))
   current.consumer = current.sold_product.consumer;
 }
 
    if (!current.product.nil() && ( current.product.changes() && current.sold_product.product != current.product)) {
        gs.info(gs.getMessage("Product selected does not match product in the sold product"));
        current.setAbortAction(true);
        return;
    } else if(current.product.nil()) /* set product = sold_product.product */
        current.product = current.sold_product.product;
 
 if (!gs.nil(current.requesting_service_organization) && (current.requesting_service_organization.changes() || current.sold_product.changes()) && !gs.nil(current.sold_product.service_organization) && current.sold_product.service_organization != current.requesting_service_organization) {
  gs.addErrorMessage(gs.getMessage("Requesting service organization selected does not match service organization in the sold product"));
  current.setAbortAction(true);
  return;
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:47:18</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cc4be05183701210c6695855eeaad3a4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>validate account, consumer and product</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_cc4be05183701210c6695855eeaad3a4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:47:18</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=cc4be05183701210c6695855eeaad3a4"/>
</record_update>
