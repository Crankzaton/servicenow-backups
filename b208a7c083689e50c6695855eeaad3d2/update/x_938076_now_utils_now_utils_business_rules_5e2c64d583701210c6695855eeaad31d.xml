<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ValidatePwdPolicyForAdvancedOption</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 // Add your code here
 validateRuleScript();
 validateStrengthScript();
 
 function validateRuleScript() {
  var ruleScript;
  if (current.isValidField('password_rule_script')) {
   ruleScript = current.password_rule_script;
  }
  var rules = eval(ruleScript);
  for(var i=0; i<rules.length; i++) {
   if(!JSUtil.notNil(rules[i].hint) || JSUtil.type_of(rules[i].hint) != "string") {
    gs.addErrorMessage(gs.getMessage("Password policy rule hint {0} should be a string and cannot be empty.", rules[i].hint));
   }
   if(!JSUtil.notNil(rules[i].regex) || JSUtil.type_of(rules[i].regex) != "string") {
    gs.addErrorMessage(gs.getMessage("Password policy rule regex {0} should be a string and cannot be empty.", rules[i].regex));
   }
  }
 }
 
 function validateStrengthScript() {
  var strengthScript;
  if (current.isValidField('password_strength_script')) {
    strengthScript = current.password_strength_script;
  }
  var strengthOptions = eval(strengthScript);
  var keys = Object.keys(strengthOptions);

  // Number of strength script options should be 4.
  if(keys.length != 4) {
   gs.addErrorMessage(gs.getMessage("Do not modify the number of strength script options."));
   return;
  }


  //Keys of the strength script options should not be modified.
  for(var i=0; i<keys.length; i++) {
   if((keys[i] != "minimum_number_of_characters" && keys[i] != "unique_character_count_starts_after" && keys[i] != "number_of_similar_ascending_descending_count" && keys[i] != "minimum_special_characters")) {
    gs.addErrorMessage(gs.getMessage("Do not modify the keys in strength script options {0}.", keys[i]));
    return;
   }
  }
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:17</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5e2c64d583701210c6695855eeaad31d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ValidatePwdPolicyForAdvancedOption</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_5e2c64d583701210c6695855eeaad31d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:17</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=5e2c64d583701210c6695855eeaad31d"/>
</record_update>
