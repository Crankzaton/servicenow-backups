<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>90793f8d777011100ed05d9c4f5a9986</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_uibtk_site_map.ExperienceResolverPageProperties&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ExperienceResolverPageProperties&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ExperienceResolverPageProperties = Class.create();
ExperienceResolverPageProperties.prototype = {
    DEFAULTS: {
        chrome_header: {
            privatePage: {
                userPrefsEnabled: false,
                searchEnabled: false,
                currentScreenLinkConfiguration: {},
                globalTools: {
                    collapsingMenuId: 0,
                    primaryItems: [],
                    secondaryItems: [],
                },
            },
            publicPage: {
                menuEnabled: false,
                searchEnabled: false,
                logoRoute: {},
                actionButtons: [],
            }
        },
        chrome_footer: {
            public_page: {
                enable_footer_topbar: false,
                footer_topbar_options: {},
                enable_footer_bar: false,
                footer_bar_options: {},
            }
        },
    },
    CONSTANTS: {
        HEADER: {
            name: 'chrome_header',
            key_map: [{
                param: 'globalSearch,globalSearchPrivate',
                parent: 'privatePage',
                key: 'searchEnabled'
            }, {
                param: 'globalSearchPublic',
                parent: 'publicPage',
                key: 'searchEnabled'
            }, {
                param: 'notifications',
                parent: 'privatePage',
                key: 'notificationsEnabled'
            }, {
                param: 'navigationMenu',
                parent: 'publicPage',
                key: 'menuEnabled'
            }]
        },
        FOOTER: {
            name: 'chrome_footer',
            key_map: [{
                param: 'primaryFooter',
                parent: 'public_page',
                key: 'enable_footer_topbar'
            }, {
                param: 'secondaryFooter',
                parent: 'public_page',
                key: 'enable_footer_bar'
            }]
        },
        SEARCH: {
            name: 'globalSearchDataConfigId',
            param: 'selectedSearchSource'
        },
        TOOLBAR: {
            name: 'chrome_toolbar',
            param: 'buttons'
        }
    },
    TABLES: {
        PAGE_PROP: 'sys_ux_page_property',
    },
    initialize: function(env, key) {
        this.env = env;
        this.constant = this.CONSTANTS[key];
        this.args = this.env.getArguments();
        this.UIBGQL = new global.BuilderToolkitAPIGlobal();
    },
    upsertSearchProperty: function() {
        var selectedSource = this.args[this.constant.param];
        if (selectedSource !== '') {
            var searchGR = this.upsertPageProperty(selectedSource, 'string');
            return this.getSearchPropertyResponse(searchGR);
        }
    },
    getSearchPropertyResponse: function(searchGR) {
        searchGR = searchGR || this.getPageProperty();
        if (searchGR) {
            return {
                selectedSearchSource: searchGR.getValue('value'),
                meta: this._getMetaObject(searchGR)
            };
        }
        return null;
    },
    upsertToolbarProperty: function() {
        var that = this;
        var buttonsArray = this.args[this.constant.param] || [];
        var groupedByToolbar = buttonsArray.reduce(function(groupedButtons, button) {
            var toolbarId = button.toolbarId;
            if (groupedButtons[toolbarId]) {
                groupedButtons[toolbarId].push(button);
                groupedButtons[toolbarId] = that._sortArray(groupedButtons[toolbarId], 'order');
            } else {
                groupedButtons[toolbarId] = [button];
            }
            return groupedButtons;
        }, {});
        var toolbarButtons = Object.keys(groupedByToolbar);
        if (toolbarButtons.length === 0) {
            var toolbarGR = that.upsertPageProperty(JSON.stringify([]));
            return [that.getToolbarPropertyResponse(toolbarGR)];
        } else {
            return toolbarButtons.map(function(toolbarId) {
                var buttons = that._prepButtons(groupedByToolbar[toolbarId]);
                var toolbarGR = that.upsertPageProperty(JSON.stringify(buttons));
                return that.getToolbarPropertyResponse(toolbarGR);
            });
        }
    },
    getToolbarPropertyResponse: function(toolbarGR) {
        toolbarGR = toolbarGR || this.getPageProperty();
        if (toolbarGR) {
            var toolbarButtons = JSON.parse(toolbarGR.getValue('value'));
            return {
                buttons: toolbarButtons.map(function(button) {
                    return {
                        toolbarId: toolbarGR.getUniqueValue(),
                        order: button.order,
                        label: button.label.message ? button.label.message : button.label,
                        icon: button.icon,
                        route: button.routeInfo ? button.routeInfo.route : null,
                        viewportRoute: button.viewportInfo ? button.viewportInfo.route : null,
                        group: button.group
                    };
                }),
                meta: this._getMetaObject(toolbarGR)
            };
        }
        return null;
    },
    upsertPagePropertyJSON: function() {
        var that = this;
        var propGR = that.getPageProperty(false);
        var newValue = JSON.stringify(that.constant.key_map.reduce(function(propJSON, km) {
            var params = km.param.split(',');
            params.forEach(function(param) {
                propJSON[km.parent][km.key] = (that.args[param] === undefined || that.args[param] === null) ? propJSON[km.parent][km.key] : that.args[param];
            });
            return propJSON;
        }, propGR ? JSON.parse(propGR.getValue('value')) : that.DEFAULTS[that.constant.name]));
        return that.getPagePropertyResponse(that.upsertPageProperty(newValue));
    },
    getPagePropertyResponse: function(propGR) {
        propGR = propGR || this.upsertPageProperty(undefined, false, true);
        if (propGR) {
            var propJSON = JSON.parse(propGR.getValue('value'));
            return this.constant.key_map.reduce(function(retObj, km) {
                var params = km.param.split(',');
                params.forEach(function(param) {
                    retObj[param] = propJSON[km.parent][km.key];
                });
                return retObj;
            }, {
                meta: this._getMetaObject(propGR)
            });
        }
        return null;
    },
    getPageProperty: function(returnBeforeNext) {
        var encodedQuery = 'page=' + this.args.experienceId + '^name=' + this.constant.name + '^route=NULL';
        var propGR = this.UIBGQL.getSecure(this.TABLES.PAGE_PROP, encodedQuery);
        propGR.query();
        if (returnBeforeNext) {
            return propGR;
        } else {
            if (propGR.hasNext()) {
                propGR.next();
                return propGR;
            }
        }
        return false;
    },
    upsertPageProperty: function(value, type, skipUpdate) {
        value = value === undefined ? JSON.stringify(this.DEFAULTS[this.constant.name]) : value;
        var propGR = this.getPageProperty(true);
        var encodedQuery = propGR.getEncodedQuery();
        if (propGR.hasNext()) {
            propGR.next();
            if (!skipUpdate) {
                propGR.setValue('value', value);
                propGR.update();
            }
        } else {
            propGR.initialize();
            propGR.applyEncodedQuery(encodedQuery);
            propGR.setValue('type', type || 'json');
            propGR.setValue('value', value);
            propGR.insert();
        }
        return propGR;
    },
    _prepButtons: function(buttons) {
        var that = this;
        return buttons.map(that._prepButton);
    },
    _prepButton: function(button) {
        var preppedButton = {
            id: button.route,
            label: {
                translatable: true,
                message: button.label
            },
            icon: button.icon,
            routeInfo: {
                route: button.route
            },
            group: button.group,
            badge: {},
            presence: {},
            availability: {}
        };
		
		if(!(button.order === null || button.order === undefined)){
			preppedButton.order = button.order;
		}

		return preppedButton;
    },
    _sortArray: function(toBeSortedArray, sortedKey) {
        toBeSortedArray.sort(function(a, b) {
            return a[sortedKey] - b[sortedKey];
        });
        return toBeSortedArray;
    },
    _getValueObject: function(genericGR, fieldName) {
        return {
            display_value: genericGR.getDisplayValue(fieldName),
            value: genericGR.getValue(fieldName)
        };
    },
    _getMetaObject: function(genericGR) {
        return {
            sys_id: genericGR.getUniqueValue(),
            table: genericGR.getTableName(),
            link: genericGR.getLink(true),
            scope: genericGR.isValidField('sys_scope') ? this._getValueObject(genericGR, 'sys_scope') : null,
            domain: genericGR.isValidField('sys_domain') ? this._getValueObject(genericGR, 'sys_domain') : null,
            sys_policy: genericGR.isValidField('sys_policy') ? genericGR.getValue('sys_policy') : null,
            sys_updated_on: genericGR.getDisplayValue('sys_updated_on'),
            sys_updated_by: genericGR.getDisplayValue('sys_updated_by')
        };
    },
    type: 'ExperienceResolverPageProperties'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-07-18 19:33:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;90793f8d777011100ed05d9c4f5a9986&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;221&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ExperienceResolverPageProperties&lt;/sys_name&gt;
        &lt;sys_package display_value="@devsnc/sn-uibtk-site-map" source="sn_uibtk_site_map"&gt;e66ddf5fbdfe27b1ff649fc8eafdcb62&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="@devsnc/sn-uibtk-site-map"&gt;e66ddf5fbdfe27b1ff649fc8eafdcb62&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_90793f8d777011100ed05d9c4f5a9986&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-19 15:39:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:30</sys_created_on>
        <sys_id>6898345183341210c6695855eeaad3f0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ExperienceResolverPageProperties</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6898345183341210c6695855eeaad3f0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:30</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
