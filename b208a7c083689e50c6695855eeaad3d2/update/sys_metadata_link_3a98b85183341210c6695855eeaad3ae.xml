<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>93131c1cc38e6010456b91f58640ddd1</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.LFValidationUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;It contains all validations specific to LF.&lt;/description&gt;
        &lt;name&gt;LFValidationUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var LFValidationUtils = Class.create();
LFValidationUtils.prototype = {
    initialize: function() {
        this.lfSettingUtils = new LFSettingUtils();
        this.arrayUtils = new ArrayUtil();
        this.lfConstants = new LFConstants();
        this.settingsKeys = this.lfConstants.SETTING_KEYS;
    },

    isArtifactTypeInvalid: function(artifactType) {
        if (this.isFieldTypeNonString(artifactType)) {
            this._throwException("INVALID_ARTIFACT");
        }
    },

    isSysIdInvalid: function(sysId) {
        if (this.isFieldTypeNonString(sysId)) {
            this._throwException("SYS_ID_FIELD_MISS");
        }
    },

    isAdditionalInfoInvalid: function(additionalInfo) {
        if (typeof additionalInfo !== "undefined" &amp;&amp; this._isFieldTypeNonJSONObject(additionalInfo)) {
            this._throwException("INVALID_ADDITIONAL_INFO");
        }
    },

    isArtifactDetailsInvalid: function(artifactDetails) {
        if (!Array.isArray(artifactDetails) || artifactDetails.length == 0) {
            this._throwException("INVALID_ARTIFACT_DETAILS");
        }
        for (var element in artifactDetails) {
            if ((!artifactDetails[element]) || this._isFieldTypeNonJSONObject(artifactDetails[element])) {
                this._throwException("INVALID_ARTIFACT_DETAILS");
            }
            this.isArtifactTypeInvalid(artifactDetails[element].artifactInternalName);
            this.validateIfSysIdsIsListOfStrings(artifactDetails[element].sysIds);
            this.isSourceLanguageInvalid(artifactDetails[element].sourceLanguage);
            this.isTargetLanguagesInvalid(artifactDetails[element].targetLanguages);
            this.isSourceLanguageInTargetLanguages(artifactDetails[element].sourceLanguage, artifactDetails[element].targetLanguages);
        }
    },

    validateAdditionalInfoExistence: function(additionalInfo) {
        if (typeof additionalInfo === "undefined" || this._isFieldTypeNonJSONObject(additionalInfo)) {
            this._throwException("INVALID_ADDITIONAL_INFO");
        }
    },

    isSourceLanguageInvalid: function(sourceLanguage) {
        if (this.isFieldTypeNonString(sourceLanguage)) {
            this._throwException("SOURCE_LANGUAGE_FIELD_MISS");
        }
    },

    isSourceLanguageInTargetLanguages: function(sourceLanguage, targetLanguages) {
        if (this.arrayUtils.contains(targetLanguages, sourceLanguage)) {
            this._throwException("SAME_SOURCE_AND_TARGET_LANGUAGE");
        }
    },

    isTargetLanguagesInvalid: function(targetLanguages) {
        if (this._isFieldTypeNotListOfStrings(targetLanguages)) {
            this._throwException("TARGET_LANGUAGE_FIELD_MISS");
        }
    },

    isScopeInvalid: function(scope) {
        if (!this._validateScope(scope)) {
            this._throwException("INVALID_SCOPE_SYS_ID");
        }
    },

    isShoudHonourScopeInvalid: function(shouldHonourScope) {
        if (typeof shouldHonourScope != "boolean") {
            this._throwException("INVALID_SHOULD_HONOUR_SCOPE");
        }
    },

    validateIfSysIdsIsListOfStrings: function(sysIds) {
        if (this._isFieldTypeNotListOfStrings(sysIds)) {
            this._throwException("SYS_ID_FIELD_MISS");
        }
    },

    validateTargetLanguages: function(targetLanguages) {
        if (this._isAnyLanguageRecordInvalid(targetLanguages)) {
            this._throwException("INVALID_TARGET_LANGUAGE");
        }
    },


    validateSourceLanguage: function(sourceLanguage) {
        if (this._isAnyLanguageRecordInvalid([sourceLanguage])) {
            this._throwException("INVALID_SOURCE_LANGUAGE");
        }
    },

    validateTargetLanguageCodeSetting: function(artifactInternalName, targetLanguages) {
        for (var targetLangIdx = 0; targetLangIdx &lt; targetLanguages.length; targetLangIdx++) {
            if (!this.lfSettingUtils.checkIfLanguageCodeIsConfigured(artifactInternalName, targetLanguages[targetLangIdx])) {
                this._throwException("SETTING_DOESNOT_EXIST");
            }
        }
    },

    validateArtifact: function(artifactInternalName, sysIds) {
        var artifactUtils = new LFArtifactUtils(artifactInternalName);
        artifactUtils.validateArtifactConfiguration();
        artifactUtils.validateArtifactConfigurationIsActive();
        artifactUtils.validateRecordsOfArtifact(sysIds);
    },

    validateUserHasRole: function(roleName) {
        if (!gs.hasRole(roleName)) {
            this._throwException("INSUFFICIENT_ROLE", [roleName]);
        }
    },

    validateCreateLFTaskParameters: function(requestedItemIds, settings, isProjectEnabled) {
        this._validateRequestedItemIds(requestedItemIds, isProjectEnabled);
        this._validateSettings(settings);
    },

    hasFulfillerRole: function(groupId) {
        var gr = new GlideRecord('sys_group_has_role');
        gr.addQuery('group', groupId);
        gr.addQuery('role', this.lfConstants.FULFILLER_ROLE_SYS_ID);
        gr.query();
        return gr.hasNext();
    },

    hasManagerRole: function(groupId) {
        var gr = new GlideRecord('sys_group_has_role');
        gr.addQuery('group', groupId);
        gr.addQuery('role', this.lfConstants.MANAGER_ROLE_SYS_ID);
        gr.query();
        return gr.hasNext();
    },

    _validateRequestedItemIds: function(requestedItemIds, isProjectEnabled) {
        if (this._isFieldTypeNotListOfStrings(requestedItemIds)) {
            this._throwException("REQUESTED_ITEM_IDS_FIELD_INVALID");
        }
        if (isProjectEnabled) {
            var prevLocalizationProject = "";
            for (var idx = 0; idx &lt; requestedItemIds.length; idx++) {
                var requestedItemUtils = new LFRequestedItemUtils(requestedItemIds[idx]);
                if (!requestedItemUtils.hasValidRecord()) {
                    this._throwException("INVALID_REQUESTED_ITEM_IDS");
                }
                var currentLocalizationProject = requestedItemUtils.getLocalizationProjectSysId();
                if (prevLocalizationProject !== "" &amp;&amp; prevLocalizationProject !== currentLocalizationProject) {
                    this._throwException("REQUESTED_ITEM_IDS_NOT_IN_SAME_PROJECT");
                }
                prevLocalizationProject = currentLocalizationProject;
            }

            if (prevLocalizationProject == "") {
                this._throwException("REQUESTED_ITEM_IDS_DO_NOT_BELONG_TO_PROJECT");
            }
        }
    },

    _validateSettings: function(settings) {
        this._validateTranslationFulfillerGroup(settings[this.settingsKeys.LocalizationFulfillerGroup]);
        this._validateMachineTranslateDetails(settings);
        this._validateTMSDetails(settings);
        this._validateEmailDetails(settings);
        this._validateExportImportDetails(settings);
        this._validateWorkflowDetails(settings);
    },

    _validateMachineTranslateDetails: function(settings) {
        if (settings[this.settingsKeys.EnableMachineTranslate] == true) {
            var isDtEnabled = GlidePluginManager.isActive('com.glide.dynamic_translation');
            if (!isDtEnabled) {
                this._throwException("DT_PLUGIN_NOT_INSTALLED");
            }
            var translator = settings[this.settingsKeys.TranslatorName];
            if (!this._validateTranslator(translator)) {
                this._throwException("MACHINE_TRANSLATION_DISABLED", [translator]);
            }
        }
    },

    _validateTranslator: function(translatorName) {
        var isValid = false;
        if (this.isFieldTypeNonString(translatorName)) {
            return isValid;
        }
        var response = sn_dt_api.DynamicTranslation.isEnabled(translatorName);
        if (response['batchTranslation']) {
            isValid = true;
        }
        return isValid;
    },

    _validateTMSDetails: function(settings) {
        if (settings[this.settingsKeys.EnableTMS] == true) {
            var tmsName = settings[this.settingsKeys.TMSName];
            var gr = new GlideRecord('sn_lf_tms_config');
            gr.addQuery('name', tmsName);
            gr.query();
            if (!gr.next()) {
                this._throwException("INVALID_TMS_NAME", [tmsName]);
            }
        }
    },

    _validateEmailDetails: function(settings) {
        if (settings[this.settingsKeys.EnableEmail] == true) {
            this._validateEmailSubflow(settings[this.settingsKeys.EmailSubflowName]);
            this._validateEmailFileFormat(settings[this.settingsKeys.EnableEmailFormat]);
            this._validateDefaultRecipientsList(settings[this.settingsKeys.DefaultRecipientsList]);
        }
    },

    _validateEmailSubflow: function(subflowName) {
        var gr = new GlideRecord('sys_hub_flow');
        gr.addQuery('name', subflowName);
        gr.query();
        if (!gr.next()) {
            this._throwException("INVALID_EMAIL_SUBFLOW_NAME", [subflowName]);
        }
    },

    _validateEmailFileFormat: function(emailFileFormat) {
        if (emailFileFormat !== this.lfConstants.CSV_FILE_TYPE &amp;&amp; emailFileFormat !== this.lfConstants.XLIFF_FILE_TYPE) {
            this._throwException("UNSUPPORTED_EMAIL_FILE_FORMAT", [emailFileFormat]);
        }
    },

    _validateDefaultRecipientsList: function(defaultRecipientsList) {
        var emailIds = defaultRecipientsList.split(',');
        var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]+$/;
        var invalidEmailIds = [];
        for (var i = 0; i &lt; emailIds.length; i++) {
            var email = emailIds[i].trim();
            if (email === '' || !emailPattern.test(email)) {
                invalidEmailIds.push(email);
            }
        }
        if (invalidEmailIds.length &gt; 0) {
            this._throwException("INVALID_EMAIL_ID_IN_RECIPIENTS_LIST");
        }
    },

    _validateExportImportDetails: function(settings) {
        if (settings[this.settingsKeys.EnableImportExport] == true) {
            var exportImportFileFormat = settings[this.settingsKeys.ExportFormat];

            if (exportImportFileFormat !== this.lfConstants.CSV_FILE_TYPE &amp;&amp; exportImportFileFormat !== this.lfConstants.XLIFF_FILE_TYPE) {
                this._throwException("UNSUPPORTED_EXPORT_IMPORT_FILE_FORMAT", [exportImportFileFormat]);
            }
        }
    },

    _validateWorkflowDetails: function(settings) {
        var configuredWorkflow = settings[this.settingsKeys.Workflow];
        var workflows = this.lfConstants.WORKFLOWS;
        if (this.isFieldTypeNonString(configuredWorkflow)) {
            this._throwException("INVALID_WORKFLOW", [configuredWorkflow]);
        }
        switch (configuredWorkflow) {
            case workflows.Translation_Publish:
                break;
            case workflows.Translation_ApprovalOfTranslations_AutoPublish:
                this._validateTranslationApproverGroup(settings[this.settingsKeys.TranslationApproverGroup]);
                break;
            case workflows.AutoTranslation_ApprovalOfTranslations_AutoPublish:
                this._validateTranslationApproverGroup(settings[this.settingsKeys.TranslationApproverGroup]);
                this._validateAutoTranslateMode(settings);
                break;
            case workflows.AutoTranslation_Publish:
            case workflows.AutoTranslation_AutoPublish:
                this._validateAutoTranslateMode(settings);
                break;

            case workflows.BusinessApproval_Translation_Publish:
                this._validateBusinessApproverGroup(settings[this.settingsKeys.BusinessApproverGroup]);
                break;
            case workflows.BusinessApproval_Translation_ApprovalOfTranslations_AutoPublish:
                this._validateBusinessApproverGroup(settings[this.settingsKeys.BusinessApproverGroup]);
                this._validateTranslationApproverGroup(settings[this.settingsKeys.TranslationApproverGroup]);
                break;
            case workflows.BusinessApproval_AutoTranslation_ApprovalOfTranslations_AutoPublish:
                this._validateBusinessApproverGroup(settings[this.settingsKeys.BusinessApproverGroup]);
                this._validateAutoTranslateMode(settings);
                this._validateTranslationApproverGroup(settings[this.settingsKeys.TranslationApproverGroup]);
                break;
            case workflows.BusinessApproval_AutoTranslation_Publish:
            case workflows.BusinessApproval_AutoTranslation_AutoPublish:
                this._validateBusinessApproverGroup(settings[this.settingsKeys.BusinessApproverGroup]);
                this._validateAutoTranslateMode(settings);
                break;
            default:
                this._throwException("INVALID_WORKFLOW", [configuredWorkflow]);
                break;
        }
    },

    _validateTranslationFulfillerGroup: function(translationFulfillerGroup) {
        if (this._isUserGroupInvalid(translationFulfillerGroup)) {
            this._throwException("INVALID_TRANSLATION_FULFILLER_GROUP");
        }
    },

    _validateTranslationApproverGroup: function(translationApproverGroup) {
        if (this._isUserGroupInvalid(translationApproverGroup)) {
            this._throwException("INVALID_TRANSLATION_APPROVER_GROUP");
        }
    },

    _validateBusinessApproverGroup: function(businessApproverGroup) {
        if (this._isUserGroupInvalid(businessApproverGroup)) {
            this._throwException("INVALID_BUSINESS_APPROVER_GROUP");
        }
    },

    _isUserGroupInvalid: function(groupId) {
        var gr = new GlideRecord('sys_user_group');
        gr.addQuery('sys_id', groupId);
        gr.query();
        return (!(gr.hasNext() &amp;&amp; this.hasFulfillerRole(groupId)));
    },

    _validateAutoTranslateMode: function(settings) {
        var autoTranslationMode = settings['auto_translation_mode'];
        var autoTranslationModes = this.lfConstants.AUTO_TRANSLATION_MODES;
        switch (autoTranslationMode) {
            case autoTranslationModes.MachineTranslate:
                if (settings[this.settingsKeys.EnableMachineTranslate] == false) {
                    this._throwException("AUTO_TRANSLATION_MODE_NOT_CONFIGURED", [autoTranslationMode]);
                }
                break;
            case autoTranslationModes.SendToTMS:
                if (settings[this.settingsKeys.EnableTMS] == false) {
                    this._throwException("AUTO_TRANSLATION_MODE_NOT_CONFIGURED", [autoTranslationMode]);
                }
                break;
            case autoTranslationModes.SendViaEmail:
                if (settings[this.settingsKeys.EnableEmail] == false) {
                    this._throwException("AUTO_TRANSLATION_MODE_NOT_CONFIGURED", [autoTranslationMode]);
                }
                break;
            default:
                this._throwException("UNSUPPORTED_AUTO_TRANSLATION_MODE", [autoTranslationMode]);
                break;
        }
    },

    isFieldTypeNonBoolean: function(field) {
        return typeof(field) !== 'boolean';
    },

    isFieldTypeNumber: function(field) {
        return typeof(field) === 'number' &amp;&amp; isFinite(field);
    },

    isFieldTypeNonString: function(field) {
        return !field || field.constructor !== String;
    },

    _isFieldTypeNotListOfStrings: function(array) {
        if (!Array.isArray(array) || array.length == 0) {
            return true;
        }
        for (var element in array) {
            if (this.isFieldTypeNonString(array[element])) {
                return true;
            }
        }
        return false;
    },

    _isAnyLanguageRecordInvalid: function(languages) {
        var agr = new GlideAggregate('sys_language');
        agr.addQuery('id', 'IN', languages);
        agr.addAggregate('COUNT');
        agr.query();
        var recordCount = agr.next() ? agr.getAggregate('COUNT') : 0;
        return recordCount != languages.length;
    },

    _isFieldTypeNonJSONObject: function(field) {
        try {
            return JSON.parse(JSON.stringify(field)).constructor !== Object;
        } catch (e) {
            return true;
        }
    },

    _throwException: function(exceptionType, placeholders) {
        var exceptionMapper = new LFExceptionMapper(exceptionType, placeholders);
        exceptionMapper.throwException();
    },

    _validateScope: function(scope) {
        var scopeGr = new GlideRecord("sys_scope");
        scopeGr.addQuery("sys_id", scope);
        scopeGr.query();
        return scopeGr.next();
    },

    type: 'LFValidationUtils'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-27 09:37:11&lt;/sys_created_on&gt;
        &lt;sys_id&gt;93131c1cc38e6010456b91f58640ddd1&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;20&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;LFValidationUtils&lt;/sys_name&gt;
        &lt;sys_package display_value="Localization Framework" source="com.glide.localization_framework"&gt;a4dd193447720210cd4e1ce4316d4312&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_93131c1cc38e6010456b91f58640ddd1&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-05 19:21:42&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:38</sys_created_on>
        <sys_id>3a98b85183341210c6695855eeaad3ae</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LFValidationUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3a98b85183341210c6695855eeaad3ae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:38</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
