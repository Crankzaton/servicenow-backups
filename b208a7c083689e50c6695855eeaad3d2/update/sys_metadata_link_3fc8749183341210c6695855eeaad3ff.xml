<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a3f970871b760110382c43b8b04bcb66</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SlackBotConfig&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SlackBotConfig&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SlackBotConfig = Class.create();
SlackBotConfig.prototype = {
    initialize: function() {
		this.logger = new GlideChatbotLoggerSetupUtil("com.glide.cs").setup();
	},
    getSlackBots: function() {
        var configObj = {};
        var customBots = [];
        var oobBots = [];
        var providerGr = new GlideRecord('sys_cs_provider_application');
        providerGr.addEncodedQuery('provider=41a04c42731210104049dec2c4f6a706');
        providerGr.query();
        while (providerGr.next()) {
            var inboundToken = this.getInboundId(providerGr.message_auth);


            if (JSUtil.notNil(inboundToken)) {
                if (this.isProductionBot(inboundToken)) {
                    oobBots.push(providerGr.getUniqueValue());
                } else {
                    customBots.push(providerGr.getUniqueValue());
                }

            }

        }
        configObj['oobBots'] = oobBots;
        configObj['customBots'] = customBots;
        return configObj;
    },

    getInboundId: function(auth) {
        var inboundToken = '';
        var encr = new GlideEncryptionUtil();
        var inboundIdClass = auth.inbound_message_verification.sys_class_name;
        if (inboundIdClass == 'token_verification')
            inboundToken = encr.getClearPassword2('token_verification', 'token', auth.inbound_message_verification);
        else if (inboundIdClass == 'hash_message_verification')
            inboundToken = encr.getClearPassword2('hash_message_verification', 'secret', auth.inbound_message_verification);
        return inboundToken;

    },

    isProductionBot: function(inboundId) {
        if (!inboundId || inboundId == undefined) return false;
        return inboundId.startsWith('slack_va');
    },
    recordAlreadyExist: function(id) {
        var imageExist, propertyExist;
        var propsGr = new GlideRecord('sys_cs_custom_adapter_property');
        propsGr.addQuery('document_record', id);
        propsGr.addQuery('name', 'bot_icon');
        propsGr.query();
        propertyExist = propsGr.getRowCount() &gt; 0;

        var imageGr = new GlideRecord('db_image');
        var imageName = 'slack_' + id + '.png';
        imageGr.addQuery('name', imageName);
        imageGr.query();
        imageExist = imageGr.getRowCount() &gt; 0;
        return imageExist &amp;&amp; propertyExist;
    },
    createPropertyRecords: function(id, field) {
        var customPropsGr = new GlideRecord('sys_cs_custom_adapter_property');
        customPropsGr.initialize();
        customPropsGr.setValue('name', field);
        customPropsGr.setValue('document_record', id);
        customPropsGr.setValue('document_table', 'sys_cs_provider_application');
        customPropsGr.insert();
    },
    createDbImage: function(id) {
        var name = 'slack_' + id + '.png';
        var dbImageGr = new GlideRecord('db_image');
        dbImageGr.initialize();
        dbImageGr.setValue('name', name);
        dbImageGr.insert();
    },
    createRecords: function() {
        var oobBotsIds = this.getSlackBots().oobBots;
        if (oobBotsIds &amp;&amp; oobBotsIds.length &gt; 0) {
            oobBotsIds.forEach(function(id) {
                if (!this.recordAlreadyExist(id)) {
                    this.createPropertyRecords(id, 'bot_name');
                    this.createPropertyRecords(id, 'bot_icon');
                    this.createDbImage(id);
                }
            }, this);

        } else {
            this.logger.info('No Slack Production bot installed');
            return;
        }
    },
    type: 'SlackBotConfig'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;akhil.parashara@snc&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-16 00:31:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a3f970871b760110382c43b8b04bcb66&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SlackBotConfig&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a3f970871b760110382c43b8b04bcb66&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-15 19:10:16&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:32</sys_created_on>
        <sys_id>3fc8749183341210c6695855eeaad3ff</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SlackBotConfig</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3fc8749183341210c6695855eeaad3ff</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:32</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
