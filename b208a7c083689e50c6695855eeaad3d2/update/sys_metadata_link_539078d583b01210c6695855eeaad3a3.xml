<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>157b7133fca5a410f877948d34f6c13c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_bm_client.BenchmarkPDFGenerator&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;BenchmarkPDFGenerator&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var BenchmarkPDFGenerator = Class.create();
BenchmarkPDFGenerator.prototype = {
    initialize: function() {
		this.GRAY = new sn_pdfgeneratorutils.Color([0.44, 0.44, 0.44]);
		this.LIGHT_GRAY = new sn_pdfgeneratorutils.Color([0.71, 0.71, 0.71]);
		this.GREEN = new sn_pdfgeneratorutils.Color([0.33, 0.79, 0.33]);
		this.RED = new sn_pdfgeneratorutils.Color([0.85, 0.32, 0.31]);
		
		this.HEADING_TEXT_SIZE = 16;
		this.TEXTBODY_TEXT_SIZE = 11;
		this.TABLE_TEXT_SIZE = 11;
		this.ATTRIBUTION_TEXT_SIZE = 11;

		this.PAGE_SIZE = 'A4';
		
		this.TABLE_CELL_VERTICAL_ALIGNMENT = 'mid';
		
		this.HEADING_STYLE = new sn_pdfgeneratorutils.Style();
		this.HEADING_STYLE.setFontSize(this.HEADING_TEXT_SIZE);
		this.HEADING_STYLE.setFontColor(this.GRAY);
		
		this.TEXTBODY_STYLE = new sn_pdfgeneratorutils.Style();
		this.TEXTBODY_STYLE.setFontSize(this.TEXTBODY_TEXT_SIZE);
		this.TEXTBODY_STYLE.setFontColor(this.GRAY);
		
		this.HEAD_CELL_STYLE = new sn_pdfgeneratorutils.Style();
		this.HEAD_CELL_STYLE.setFontSize(this.TABLE_TEXT_SIZE);
		this.HEAD_CELL_STYLE.setVerticalAlignment(this.TABLE_CELL_VERTICAL_ALIGNMENT);
		this.HEAD_CELL_STYLE.setBold();
		
		this.NORMAL_CELL_STYLE = new sn_pdfgeneratorutils.Style();
		this.NORMAL_CELL_STYLE.setFontSize(this.TABLE_TEXT_SIZE);
		this.NORMAL_CELL_STYLE.setVerticalAlignment(this.TABLE_CELL_VERTICAL_ALIGNMENT);

		this.POSITIVE_COLOR_MARKER = 'text-success';
		
		this.POSITIVE_CELL_STYLE = new sn_pdfgeneratorutils.Style();
		this.POSITIVE_CELL_STYLE.setFontSize(this.TABLE_TEXT_SIZE);
		this.POSITIVE_CELL_STYLE.setVerticalAlignment(this.TABLE_CELL_VERTICAL_ALIGNMENT);
		this.POSITIVE_CELL_STYLE.setFontColor(this.GREEN);
		
		this.NEGATIVE_CELL_STYLE = new sn_pdfgeneratorutils.Style();
		this.NEGATIVE_CELL_STYLE.setFontSize(this.TABLE_TEXT_SIZE);
		this.NEGATIVE_CELL_STYLE.setVerticalAlignment(this.TABLE_CELL_VERTICAL_ALIGNMENT);
		this.NEGATIVE_CELL_STYLE.setFontColor(this.RED);
		
		this.ATTRIBUTION_STYLE = new sn_pdfgeneratorutils.Style();
		this.ATTRIBUTION_STYLE.setFontColor(this.GRAY);
		this.ATTRIBUTION_STYLE.setFontSize(this.ATTRIBUTION_TEXT_SIZE);
		this.ATTRIBUTION_STYLE.setBold();
		
		this.DOCUMENT_TABLE = 'sn_bm_client_document';
		
		this.temporaryRecordToAttach = '';
    },
	
	//Given specifically formated page data object array with header, text body, table and SVg object information
	//create a PDF to display that data and attach it to the record with the provided sys id.
	generatePDF: function (fileName, pageData, recordToAttach /*sn_bm_client_document sys_id*/, attribution) {
		var firstFile = this._generateSVGlessPDF(fileName, pageData, attribution);
		this._addSVGObjectsToPDF(firstFile, fileName, pageData, recordToAttach);
	},
	
	_generateSVGlessPDF: function (fileName, pageData, attribution) {
		this._createTemporaryRecord();
		
		var pageSize = new sn_pdfgeneratorutils.PdfPage(this.PAGE_SIZE);
		var document = new sn_pdfgeneratorutils.Document.createDocument(pageSize);
		
		for(var i in pageData) {
			if(i &gt; 0)
				document.addAndStartNewPage();
			
			var page = pageData[i];
			
			var heading = new sn_pdfgeneratorutils.Paragraph('' + page.heading + '\n');
			heading.addStyle(this.HEADING_STYLE);
			document.addParagraph(heading);
			
			var textbody = new sn_pdfgeneratorutils.Paragraph('' + page.textbody + '\n');
			textbody.addStyle(this.TEXTBODY_STYLE);
			document.addParagraph(textbody);
			
			document = this._addTableToDocument(document, page.table);
			
			var attrib = new sn_pdfgeneratorutils.Paragraph('' + attribution + '\n');
			attrib.addStyle(this.ATTRIBUTION_STYLE);
			document.addParagraph(attrib);
		}
		
		document.saveAsAttachment(this.DOCUMENT_TABLE, this.temporaryRecordToAttach, fileName);
		return this._getAttachmentOnDocRecord(this.temporaryRecordToAttach);
	},
	
	_addTableToDocument: function (document, tableData) {
		var columnWidths = tableData.column_widths;
		var rowLength = columnWidths.length;
		var isLeftToRight = true;
		var sessionLanguageID = gs.getSession().getLanguage();
		var languageGr = new GlideRecord("sys_language");
		languageGr.addActiveQuery();
		languageGr.addQuery("id",sessionLanguageID);
		languageGr.query();
		if(languageGr.next()){
			isLeftToRight = (languageGr.getValue("text_direction")=="ltr");
		}
		var table = new sn_pdfgeneratorutils.Table(isLeftToRight,columnWidths, false);
		var cells = tableData.cells;
		
		for(var i in cells) {
			var cellData = cells[i];
			
			var cell = new sn_pdfgeneratorutils.Cell;
			cell.addParagraph(new sn_pdfgeneratorutils.Paragraph('' + cellData.text));
			
			//Add appropriate style, depending on whether this is header cell, or on basis of color
			var cellStyle;
			if(i &lt; rowLength)
				cellStyle = this.HEAD_CELL_STYLE;
			else {
				if(gs.nil(cellData.color))
					cellStyle = this.NORMAL_CELL_STYLE;
				else if(cellData.color === this.POSITIVE_COLOR_MARKER)
					cellStyle = this.POSITIVE_CELL_STYLE;
				else
					cellStyle = this.NEGATIVE_CELL_STYLE;
			}
			cell.addStyle(cellStyle);
			
			//Each alternating row in the table should have a gray background.
			if(Math.floor(i / rowLength) % 2 === 0)
				cell.setBackGroundColor(this.LIGHT_GRAY);
			
			if(i &lt; rowLength)
				table.addHeaderCell(cell);
			else
				table.addCell(cell);
		}
		
		document.addTable(table);
		
		return document;
	},
	
	_addSVGObjectsToPDF: function(originalFile, fileName, pageData, recordToAttach) {
		var currentFile = originalFile;
		
		for(var i in pageData) {
			var svg = pageData[i].svg;
			if(gs.nil(svg))
				continue;
			
			//We will use placeholder document records to attach incomplete PDFs that don't have
			//all of the SVG objects added to it, and only use the record the completed PDF
			//should be attached to upon adding the SVG on the last page.
			//This is because we have to remove interim PDFs by deleting the record they are
			//attached to, and can't delete sys_attachments directly.
			var previousRecordToAttach = this.temporaryRecordToAttach;
			var currentRecordToAttach;
			
			if(parseInt(i) + 1 &gt;= pageData.length)
				currentRecordToAttach = recordToAttach;
			else {
				this._createTemporaryRecord();
				currentRecordToAttach = this.temporaryRecordToAttach;
			}
			
			//Remove unneceesary backslashes
			svg.content = svg.content.replace(/\\"/g, '"');
			
			var result = new sn_pdfgeneratorutils.SVGToPDFConversionAPI().addSVGToPDF(
				svg.content,
				currentFile,
				this.DOCUMENT_TABLE,
				currentRecordToAttach,
				fileName,
				(parseInt(i) + 1), //page number 
				35, //x coordinate from bottom left corner
				140, //y coordinate from bottom left corner
				525, //width
				525 //height
			);
			
			if(result.status === 'success') {
				this._clearDocRecord(previousRecordToAttach);
				currentFile = result.attachment_id;
			}
		}
		
		return currentFile;
	},
	
	_createTemporaryRecord: function() {
		var gr = new GlideRecord(this.DOCUMENT_TABLE);
		gr.initialize();
		gr.insert();
		
		this.temporaryRecordToAttach = gr.getValue('sys_id');
	},
	
	_clearDocRecord: function(documentSysId) {
		if(!gs.nil(documentSysId)) {
			var gr = new GlideRecord(this.DOCUMENT_TABLE);
			gr.get(documentSysId);
			gr.deleteRecord();
		}
	},
	
	_getAttachmentOnDocRecord: function(documentSysId) {
		var gr = new GlideRecord('sys_attachment');
		gr.addQuery('table_name', this.DOCUMENT_TABLE);
		gr.addQuery('table_sys_id', documentSysId);
		gr.query();
		if(gr.next())
			return gr.getValue('sys_id');
		
		return null;
	},

    type: 'BenchmarkPDFGenerator'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-01-11 17:53:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;157b7133fca5a410f877948d34f6c13c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;BenchmarkPDFGenerator&lt;/sys_name&gt;
        &lt;sys_package display_value="Benchmark Client" source="sn_bm_client"&gt;3ad18693db92220004997878f0b8f516&lt;/sys_package&gt;
        &lt;sys_policy&gt;protected&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Benchmark Client"&gt;3ad18693db92220004997878f0b8f516&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_157b7133fca5a410f877948d34f6c13c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-27 11:59:15&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:44</sys_created_on>
        <sys_id>539078d583b01210c6695855eeaad3a3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>BenchmarkPDFGenerator</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_539078d583b01210c6695855eeaad3a3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:44</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
