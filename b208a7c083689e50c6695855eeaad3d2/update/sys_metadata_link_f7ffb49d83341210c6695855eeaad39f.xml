<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>af06aedbc363311096674f877840dd56</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VirtualAgentChoicePagingUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Script utility to be used for paging Virtual Agent choice picker control where options and paging are handled in the script.&lt;/description&gt;
        &lt;name&gt;VirtualAgentChoicePagingUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VirtualAgentChoicePagingUtil = Class.create();
VirtualAgentChoicePagingUtil.prototype = {
    initialize: function(fieldName, table, pageSize, searchColumns, encodedQuery, searchText, vaVars) {
		this.PAGES = "pages";
        this.separator = " - ";
        this.optionsCount = "global_choice_options_count";
        this.fieldName = fieldName;
        this.pageInfoVarName = "global_choice_paging";
        this.vaVars = vaVars;
        this.pageInfo = this.getPageInfo(vaVars);
        this.defaultPageSize = gs.getProperty("com.glide.cs.picker_page_limit", 10);
        if (this.pageInfo.searchText != this.pageInfo.lastSearchText)
            this.pageInfo.pages = {};
        this.table = table;
        this.pageSize = pageSize &amp;&amp; pageSize &gt; 0 ? pageSize :
            this.pageInfo.limit ? this.pageInfo.limit : this.defaultPageSize;
        this.searchColumns = searchColumns.split(",");
        this.encodedQuery = encodedQuery;
        this.searchText = searchText ? searchText : this.pageInfo.searchText;
		this.secondaryLabelFunction = [];
    },

    /**
     * Get a GlideRecordSecure for paging.  Does not set the paging window.  Use getSecureOptions method 
     * to page forward
     */
    getPagingGlideRecordSecure: function(orderByColumn, orderDescending) {
        var gr = new GlideRecordSecure(this.table);
        var filter = this.encodedQuery;

        if (this.searchText &amp;&amp; this.searchColumns.length &gt; 0) { //handle search text, if present
            var query;
            for (var i = 0; i &lt; this.searchColumns.length; ++i) {
                filter = filter.length &gt; 0 ? filter + "^" : filter;
                filter = i &gt; 0 ? filter + "OR" : filter;
                filter += this.searchColumns[i] + "LIKE" + this.searchText;
            }
        }
        gr.addEncodedQuery(filter);
        if (orderByColumn) {
            if (orderDescending)
                gr.orderByDesc(orderByColumn);
            else
                gr.orderBy(orderByColumn);
        }
        gr.query();
        //**** IMPORTANT **** Setting this variable so we know how many rows are available for the search in total.
        this.vaVars[this.optionsCount] = gr.getRowCount();
        this.pageInfo.lastSearchText = this.searchText;
        return gr;
    },

    /**
     * gets a list of options for a GlideRecordSecure.  Keeps track of paging with vaVars context variables.
     */
    getSecureOptions: function(gr, startRow, valueCol, labelCols) {
        if (!startRow)
            startRow = this.pageInfo.startRow;
        var location = 0,
            count = 0,
            traversed = 0;
        var options = [];
        var lastPage = this.pageInfo.lastPage ? this.pageInfo.lastPage : 0;
        //Look for the page desired by start row to see if we already have the paging info
        var currPageInfo = this.getPage(startRow);
        if (currPageInfo == null) {
            //we didn't find the page info for the current start row.  See if we have a previous
            //page to fill in the gaps
            currPageInfo = {
                'start': 0,
                'last': 0
            };

            if (startRow == (lastPage + this.pageSize)) {
                //paging forward
                var lastPageInfo = this.getPage(lastPage);
                if (lastPageInfo)
                    currPageInfo.start = lastPageInfo.last + 1;
            }
        }

        var startLocation = 0;
        gr.setLocation(currPageInfo.start);
        var moreRecs = true;
        while (moreRecs &amp;&amp; count &lt; this.pageSize) {
            location = gr.getLocation();

            if ((currPageInfo.start == 0) &amp;&amp; (traversed &lt; startRow)) {
                moreRecs = gr.next();
                ++traversed;
                continue;
            }

            if (count == 0) //save the start location
                startLocation = location;

            ++count;
            options.push(this.createOption(gr, valueCol, labelCols));
            moreRecs = gr.next();
            ++traversed;
        }
        currPageInfo.start = startLocation;
        currPageInfo.last = location;
        this.pageInfo.lastPage = startRow;
        this.pageInfo[this.PAGES][startRow] = currPageInfo;
        this.savePageInfo();
        return options;
    },

    /**
     * Creates an option for dynamic choice list given the GlideRecord, value column, and list of lable columns
     */
    createOption: function(gr, valueCol, labelCols) {
        var option = {
            'label': '',
            'render_style': 'data',
			'secondary_label': []
        };
        option.value = gr.getValue(valueCol);
        for (var i = 0; i &lt; labelCols.length; ++i) {
            if (i &gt; 0)
                option.label += this.separator;
            option.label += gr.getDisplayValue(labelCols[i]);
        }
		for (var i = 0; i &lt; this.secondaryLabelFunction.length; i++) {
		    var secondaryLabelValue = this.secondaryLabelFunction[i](gr);
		    option['secondary_label'].push(secondaryLabelValue);
		}
        return option;
    },

	addSecondaryLabelFunction: function(secondaryLabelFunction) {
		this.secondaryLabelFunction.push(secondaryLabelFunction);
	},

    /**
     * Save the paging information json to the conversation context as a string
     */
    savePageInfo: function() {
        this.vaVars[this.pageInfoVarName] = JSON.stringify(this.pageInfo);
    },

    /**
     * Gets saved paging info for the page (startRow)
     */
    getPage: function(page) {
        var pages = this.pageInfo[this.PAGES];
        return pages[page];
    },

    /**
     * gets the paging info json object from the conversation context or creates it if it does not exist
     */
    getPageInfo: function() {
        var pageInfo = !gs.nil(this.vaVars[this.pageInfoVarName]) ? JSON.parse(this.vaVars[this.pageInfoVarName]) : null;
        if (!pageInfo)
            pageInfo = this.getEmptyPageInfo();
        return pageInfo;
    },

    /**
     * creates an empty paging info json object
     */
    getEmptyPageInfo: function() {
        return {
            'pages': {},
            'lastPage': null,
            'searchText': "",
            'lastSearchText': "",
            'startRow': 0,
            'limit': this.defaultPageSize
        };
    },

    /**
	 * convenience method for retrieving the selected options from conversation context and 
	 * parsing the json.
	 */
    getSavedSelectedOptions: function(savedName, vaSystem) {
        var savedOptions = vaSystem.getSavedSelectedOptions(savedName);
		gs.breaker(savedOptions);
        if (savedOptions) {
            savedOptions = JSON.parse(savedOptions);
            return savedOptions.selectedOptions ? savedOptions.selectedOptions : [];
        }
        return [];
    },

    type: 'VirtualAgentChoicePagingUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-01-10 22:39:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;af06aedbc363311096674f877840dd56&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;184&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VirtualAgentChoicePagingUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_af06aedbc363311096674f877840dd56&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-04-10 21:30:22&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:57</sys_created_on>
        <sys_id>f7ffb49d83341210c6695855eeaad39f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VirtualAgentChoicePagingUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f7ffb49d83341210c6695855eeaad39f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
