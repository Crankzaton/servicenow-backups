<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>24ea98ed43c502101ed803295bb8f200</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.GenAISemanticFilterUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GenAISemanticFilterUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GenAISemanticFilterUtil = Class.create();
GenAISemanticFilterUtil.prototype = {
    initialize: function() {},

    getSearchResults: function(userUtterance, filters) {
        var filterMap = {};
        filters.filterIds.forEach(function(filter) {
            filterMap[filter] = true;
        });

        // Get search results
        var searchResponse = this._invokeSearch(userUtterance);

        // Filter with Gen AI filter ID
        var processedSearchResults = [];
        var processedSearchMap = {};
        var searchResponseResult = searchResponse.getSearchResults();
        for (var ct = 0; ct &lt; searchResponse.getCount(); ct++) {
            var currentFilter = searchResponseResult[ct].getColumns()[1].getValue();
            var semanticSimilarity = searchResponseResult[ct].getSemanticSimilarity();
            if (filterMap[currentFilter]) {
                if (!processedSearchMap[currentFilter] || processedSearchMap[currentFilter] &lt; semanticSimilarity) {
                    if (semanticSimilarity &gt; filters.filterMetadata[currentFilter].threshold)
                        processedSearchMap[currentFilter] = semanticSimilarity;
                }
            }
        }

        // Construct valid output structure
        Object.keys(processedSearchMap).forEach(function(filterId) {
            processedResult = {};
            processedResult.filterId = filterId;
            processedResult.score = processedSearchMap[filterId];
            processedSearchResults.push(processedResult);
        });

        return JSON.stringify(processedSearchResults);
    },

    _invokeSearch: function(query) {
        // This is the search application ID on sys_search_context_config
        var searchContextConfigId = '125e670c430102101ed803295bb8f28f';
        var searchTerm = query;
        var disableSpellCheck = false;
        var facetFilters = [];
        var searchFilters = [];
        var paginationToken = null;
        var sortOptions = null;
        var locale = 'en';
        var additionalContext = null;
        var semanticSearch = true;
        var forceSkipSignalsLogging = true;
        var isDebug = true;
        var doAdditionalSearches = true;
        var geniusResultMode = null;
        var searchEvamConfigId = null;
        var searchEvamConfigIdVa = null;
        var requestedFields = {
            sys_gen_ai_filter_sample: ['sample_text', 'filter']
        };
        var api = new sn_search.ScriptableSearchAPI();
        return api.search(searchContextConfigId, searchTerm, paginationToken, disableSpellCheck, facetFilters, searchFilters, requestedFields, locale, additionalContext, semanticSearch, isDebug, forceSkipSignalsLogging, geniusResultMode);
    },

    type: 'GenAISemanticFilterUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-03-19 15:19:06&lt;/sys_created_on&gt;
        &lt;sys_id&gt;24ea98ed43c502101ed803295bb8f200&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GenAISemanticFilterUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide OneExtend" source="com.glide.one_extend"&gt;dc98175b47220210cd4e1ce4316d4324&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_24ea98ed43c502101ed803295bb8f200&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-04-15 04:24:53&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:23</sys_created_on>
        <sys_id>6ff0345983b01210c6695855eeaad3ad</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GenAISemanticFilterUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6ff0345983b01210c6695855eeaad3ad</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:23</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
