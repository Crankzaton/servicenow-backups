<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>global events</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
 * create general events, tables need fields:
 * comments, assigned_to, active
 */
function global_events(current) {
 var name = current.sys_meta.name;
 global_simple_events(current);
 
 if (current.operation() != "insert" && current.comments.changes())
  gs.eventQueue(name + ".commented", current, gs.getUserID(), gs.getUserName());
 
 if (current.isValidField("assigned_to")) {
  if (!current.assigned_to.nil() && current.assigned_to.changes()) {
   gs.eventQueue(name + ".assigned", current, current.assigned_to.getDisplayValue(),
   previous.assigned_to.getDisplayValue());
  }
 }
 
 if (current.operation() != 'insert' && current.active.changesTo(false)) {
  // if incident_state is valid then use that, to avoid sending back a different value from previous release
  if (current.isValidField("incident_state"))
   gs.eventQueue(name + ".inactive", current, current.incident_state, previous.incident_state);
  else if (current.isValidField("state"))
   gs.eventQueue(name + ".inactive", current, current.state, previous.state);
 }
}

/**
 * do the inserted, updated events
 */
function global_simple_events(current) {
 var name = current.sys_meta.name;
 if (current.operation() == "insert")
  gs.eventQueue(name + ".inserted", current, gs.getUserID(), gs.getUserName());
 if (current.operation() == "update")
  gs.eventQueue(name + ".updated", current, gs.getUserID(), gs.getUserName());
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:54:00</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>06cce4d983701210c6695855eeaad361</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>global events</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_06cce4d983701210c6695855eeaad361</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:54:00</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=06cce4d983701210c6695855eeaad361"/>
</record_update>
