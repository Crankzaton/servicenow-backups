<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2cf577f89d231110f8772de6b52d4d8b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_uibtk_api.Experience&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;Experience&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var Experience = Class.create();
Experience.prototype = Object.extendsObject(BuilderToolkitAPIBase, {
    TABLE: 'sys_ux_page_registry',
    FIELDS: ['root_macroponent', 'admin_panel'],

    /**
     * @param fields {string[]}
     */
    initialize: function(fields) {
        BuilderToolkitAPIBase.prototype.initialize.call(this, this.TABLE, fields || this.FIELDS);
    }, 

    /**
     * @param path {string} the path we are checking 
     */
    checkIfPathInUse: function(path) {
        const pathArray = String(path).split("/");
        const shortenedPathArray = pathArray.length &gt; 1 ? pathArray.slice(0, pathArray.length - 1) : pathArray;
        const existingExperience = this.getRecordsByQuery('', 'path', true);
        while (existingExperience.next()) {
            var existingPath = existingExperience.getValue("path").split("/");
            var shortenedExistingPath = existingPath.length &gt; 1 ? existingPath.slice(0, existingPath.length - 1) : existingPath;
            if (pathArray.join('/') === existingPath.join('/') ||
                (existingPath.length != pathArray.length &amp;&amp; (pathArray.join('/') === shortenedExistingPath.join('/') ||
                    shortenedPathArray.join('/') === existingPath.join('/')))) {
                return true;
            }
        }
        return false;
    },

    /**
     * @param name {string} the name of the new experience
     * @param appShellUI {string} the sys_id of the app shell to use
     * @param path {string} the iniital path of the experience (e.g. my/experience)
     * @param homepage {string} the name of the screen that will be the homepage (defaults to home)
     * @param roles {string[]} an array of role sys_ids to be used for the ACL
     */
    create: function(name, appShellUI, path, homepage, roles = null) {
        const appConfigHandler = new AppConfig();
        const appConfigId = appConfigHandler.createRecord({
            name: name,
            landingPath: homepage
        });
        if (!appConfigId) {
            appConfigHandler.deleteRecord({
                sysId: appConfigId
            });
            return false;
        }

        const needsParentApp = appShellUI === BuilderToolkitConstants.WORKSPACE_APP_SHELL_ID || appShellUI === BuilderToolkitConstants.BREADCRUMB_APP_SHELL_ID || appShellUI === BuilderToolkitConstants.UXR_BASE_APP_SHELL_ID;
        const experience = this.createRecord({
            title: name,
            rootMacroponent: appShellUI,
            adminPanel: appConfigId,
            adminPanelTable: appConfigHandler.table,
            path: path,
            parentApp: needsParentApp ? BuilderToolkitConstants.POLARIS_PARENT_APP_ID : null
        });
        if (!experience) {
            appConfigHandler.deleteRecord({
                sysId: appConfigId
            });
            this.deleteRecord({
                sysId: experience
            });
            return false;
        }

        const appACLPath = path.replaceAll("/", ".");
        const companyCode = gs.getProperty("glide.appcreator.company.code");
        let companyCodePrefix = "now";
        if (!gs.getSession().getCurrentApplicationId().equals("global") &amp;&amp; companyCode != "snc" &amp;&amp; companyCode) {
            companyCodePrefix = "x." + companyCode;
        }
        const aclName = companyCodePrefix + "." + appACLPath + ".*";
        gs.eventQueue('sn_uibtk_api.create.experience.acl', this.getRecordById(experience, true), this.getUserUpdateSetId(), JSON.stringify({
            aclName: aclName,
            roles: roles ? String(roles)?.split(',') : []
        }));

        return experience;
    },

    /**
     * @param aclName {string} the name of the ACL to use based on experience URL
     * @param roles {string[]} list of role sys_ids to create ACL role records for
     * @param scope {string} the sys_id of the scope to create the records in
     */
    createACL: function(aclName, roles = [], scope) {
        const globalHandler = new global.BuilderToolkitAPIGlobal();
        const newACLId = globalHandler.createGlobalRecord('sys_security_acl', {
            operation: 'read',
            type: BuilderToolkitConstants.UX_ROUTE_ACL_TYPE_ID,
            name: aclName,
            sys_scope: scope
        });
        if (roles.length &gt; 0) {
            roles.forEach(role =&gt; {
                globalHandler.createGlobalRecord('sys_security_acl_role', {
                    sys_security_acl: newACLId,
                    sys_user_role: role,
                    sys_scope: scope
                });
            });

            // If we have user provided roles we need to check for and delete the auto-generated role for snc_internal
            // This ensures that only the roles the user gave us are allowed
            const internalACL = new GlideRecordSecure('sys_security_acl_role');
            internalACL.addQuery('sys_security_acl', newACLId);
            internalACL.addQuery('sys_user_role', BuilderToolkitConstants.ACL_INTERNAL_ROLE_ID);
            internalACL.query();
            if (internalACL.next()) {
                globalHandler.deleteGlobalRecord('sys_security_acl_role', internalACL.getUniqueValue());
            }
        }
    },

    type: 'Experience'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-12-01 17:23:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2cf577f89d231110f8772de6b52d4d8b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Experience&lt;/sys_name&gt;
        &lt;sys_package display_value="@devsnc/uibtk-api" source="sn_uibtk_api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="@devsnc/uibtk-api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2cf577f89d231110f8772de6b52d4d8b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-10 17:04:11&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:13</sys_created_on>
        <sys_id>b721349983b01210c6695855eeaad3f5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Experience</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_b721349983b01210c6695855eeaad3f5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
