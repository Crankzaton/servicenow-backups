<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>162d980e43322110b4a1c083a9b8f2c7</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.SkuMetadataDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Contains query to sku_metadata table.&lt;/description&gt;
        &lt;name&gt;SkuMetadataDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SkuMetadataDAO = Class.create();
SkuMetadataDAO.prototype = {
    initialize: function() {
        this._cacheManager = new LicensingCacheManager();
        this._cacheDataHandler = new CacheDataHandler();

        // Contains the list of columns that are part of SKUMetadata cache object.
        this._cacheColumnList = [LicensingEngineDBConstants.COLUMN_VALUES];
        this._cacheRefColumnList = ["subscription.name", "subscription.sys_id", "schema.column_names"];
    },

    isSKUMetadataHasSubscription: function(metadataType, metadataValues) {
        const gr = new GlideRecord(LicensingEngineDBConstants.SKU_METADATA);
        gr.addQuery(LicensingEngineDBConstants.SCHEMA_TYPE, metadataType);
        gr.addQuery(LicensingEngineDBConstants.COLUMN_VALUES, metadataValues);
        gr.addQuery(LicensingEngineDBConstants.SUBSCRIPTION_STATUS, LicensingEngineConstants.ACTIVE_STATUS);
        gr.query();
        return gr.next();

    },

    /**
     * Queries sku_metadata table based on the metadata type and partial/full column values.
     * makes sure to return only for active subscription entitlements
     * @param {string} metadataType
     * @param {string} metadataColumnValue
     * @return {GlideRecord} GR of sku_metadata
     */
    getSKUMetadataGRBasedOnMetadataValue: function(metadataType, metadataColumnValue) {
        const gr = new GlideRecord(LicensingEngineDBConstants.SKU_METADATA);
        gr.addQuery(LicensingEngineDBConstants.SCHEMA, metadataType);
        gr.addQuery(LicensingEngineDBConstants.COLUMN_VALUES, LicensingEngineDBConstants.CONTAINS, metadataColumnValue);
        gr.addQuery(LicensingEngineDBConstants.SUBSCRIPTION_STATUS, LicensingEngineConstants.ACTIVE_STATUS);
        gr.query();
        return gr;
    },

    /**
     * Queries sku_metadata table for active subscription entitlements and prepares the cache with schema (column type) as 
     * key and SKUMetadata object as value.
     */
    loadSKUMetadataIntoCache: function() {
        let metadataTypeToObj = new Map();
        const gr = new GlideRecord(LicensingEngineDBConstants.SKU_METADATA);
        gr.addQuery(LicensingEngineDBConstants.SUBSCRIPTION_STATUS, LicensingEngineConstants.ACTIVE_STATUS);
        gr.query();
        metadataTypeToObj = this._cacheDataHandler.prepareCacheData(gr, metadataTypeToObj, LicensingEngineDBConstants.SCHEMA, this._cacheColumnList, this._cacheRefColumnList);
        this._cacheManager.putDataIntoCache(LicensingEngineConstants.LICENSING_CACHE_CATALOG, LicensingEngineConstants.SKU_METADATA_CACHE, metadataTypeToObj);
    },

    loadAllDataIntoCache: function() {
        this.loadSKUMetadataIntoCache();
    },

    type: 'SkuMetadataDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-05-15 12:13:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;162d980e43322110b4a1c083a9b8f2c7&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;58&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SkuMetadataDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_162d980e43322110b4a1c083a9b8f2c7&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-15 09:50:05&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:47</sys_created_on>
        <sys_id>d0a078d583b01210c6695855eeaad3e9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SkuMetadataDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d0a078d583b01210c6695855eeaad3e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
