<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>03e974afffd9a110468365d7d3b8fe9e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.SubscriptionDetailDao&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO to retrieve data from subscription_detail&lt;/description&gt;
        &lt;name&gt;SubscriptionDetailDao&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SubscriptionDetailDao = Class.create();
SubscriptionDetailDao.prototype = {
    initialize: function() {
        this._subscriptionDetailTable = "subscription_detail";
    },

    /**
     * Retrieves the subscription_entitlement.sys_id for the subscription_detail record
     *
     * @param {guid} subscriptionDetailId The subscription_detail.sys_id to filter by
     * @returns {guid} The subscription_entitlement.sys_id or null
     */
    getSubscriptionIdBySubscriptionDetailId: function(subscriptionDetailId) {
        const gr = new GlideRecord('subscription_detail');
        return gr.get(subscriptionDetailId) ?
            String(gr.subscription) :
            null;
    },

    /**
     * Retrieves the subscription_entitlement.sys_id that are of type Per-User
     *
     * @returns {array} The subscription_details.sys_id array
     */
    getSubscriptionDetailsIdsByActiveAndIsPerUser: function() {
        const gr = new GlideRecord('subscription_detail');
        gr.addQuery('is_latest', true);
        gr.addQuery('processing_complete', true);
        gr.addQuery('subscription.subscription_type', 0);
        gr.query();
        const ids = new Set();
        while (gr.next()) {
            ids.add(gr.sys_id.toString());
        }
        return Array.from(ids);
    },

    /**
     * Migrate entitlement allotment history in subscription detail table
     *
     * @param {array} entitlementAllotmentHistory list of allotment history from SMV1
     */
    migrateAllotmentHistory: function(entitlementAllotmentHistory) {
        const subscriptionDetailGR = new GlideAggregate(this._subscriptionDetailTable);
        subscriptionDetailGR.addAggregate('COUNT');
        subscriptionDetailGR.query();

        if (subscriptionDetailGR.next() &amp;&amp; subscriptionDetailGR.getAggregate('COUNT') &gt; 0)
            this._insertIfEntitlementAllotmentHistoryMissing(entitlementAllotmentHistory);
        else
            this._insert(entitlementAllotmentHistory);
    },

    _insertIfEntitlementAllotmentHistoryMissing: function(entitlementAllotmentHistory) {
        const missingEntitlementAllotmentHistory = this._findMissingEntitlementAllotmentHistory(entitlementAllotmentHistory);
        if (!global.JSUtil.nil(missingEntitlementAllotmentHistory))
            this._insert(missingEntitlementAllotmentHistory);
    },

    _findMissingEntitlementAllotmentHistory: function(entitlementAllotmentHistory) {
        let missingEntitlementAllotmentHistory = [];
        const gr = new GlideRecord(this._subscriptionDetailTable);
        entitlementAllotmentHistory.forEach(function(record) {
            gr.initialize();
            /*
              Avoid Duplication of record - Do not create duplicate records for allotment history based on date when the allotment was calculated.
              Instead, update the calculated on date in subscription detail table if the record is already present
            */
            for (key in record)
                if (key !== "calculated_on")
                    gr.addQuery(key, record[key]);
            gr.query();
            if (gr.next()) {
                gr.setValue('calculated_on', record['calculated_on']);
                gr.update();
            } else
                missingEntitlementAllotmentHistory.push(record);
        });
        return missingEntitlementAllotmentHistory;
    },

    _insert: function(entitlementAllotmentHistory) {
        const gr = new GlideRecord(this._subscriptionDetailTable);
        entitlementAllotmentHistory.forEach(function(record) {
            gr.initialize();
            for (key in record)
                if (!global.JSUtil.nil(record[key]))
                    gr.setValue(key, record[key]);
            gr.insert();
        });
    },

    type: 'SubscriptionDetailDao'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-06 16:42:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;03e974afffd9a110468365d7d3b8fe9e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SubscriptionDetailDao&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_03e974afffd9a110468365d7d3b8fe9e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-06-12 20:24:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:06</sys_created_on>
        <sys_id>23307c5583b01210c6695855eeaad3ba</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SubscriptionDetailDao</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_23307c5583b01210c6695855eeaad3ba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
