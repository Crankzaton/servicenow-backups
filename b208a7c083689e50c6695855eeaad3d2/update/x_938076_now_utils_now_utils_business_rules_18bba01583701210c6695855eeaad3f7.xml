<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>true</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Column Encryption</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function onBefore(current, previous) {
 // This is a biz rule, validating insert or update to Edge Column Configuration 
 if (current.isActionAborted())
  return;
 
 // column can't be empty (in other words, the column needs to exist)
 if (current.column.nil()) {
  gs.addErrorMessage(gs.getMessage('Choose a field to encrypt or select type Attachments'));
  current.setAbortAction(true);
  return;
 }
 
 var tableName = current.table;
 var fieldName = current.column;
 var isActive = !!current.active;
 var gr = new GlideRecord(tableName);
    
 // If the table has been deleted after edge encryption configuration is created, allow deactivation
 if (!gr.isValid() && !isActive)
  return;
 else {
  // If the column has been deleted after edge encryption configuration is created, allow deactivation
  var isValidColumn = gr.isValidField(fieldName);
  if (!isValidColumn && !isActive)
   return;
 }
 
 // abort if field is invalid
 if (!gr.isValidField(fieldName)) {
  gs.addErrorMessage(gs.getMessage('Invalid column {0} for table {1}', [fieldName, tableName]));
  current.setAbortAction(true);
  return;
 }
 
 var ge = gr.getElement(fieldName);
 if (ge === undefined) {
  var fieldErmsg = gs.getMessage('GlideElement undefined for column {0} for table {1}', [fieldName, tableName]);
  gs.addErrorMessage(fieldErmsg);
  gs.error(fieldErmsg);
  current.setAbortAction(true);
  return;
 }
 
 var ed = ge.getED();
 // abort if selected field does not support encryption
 // abort if it is a sys field, choice field, virtual field or number field
 if (isFieldInvalid(gr, fieldName)) {
  var invalErmsg = gs.getMessage('Field {0} in table {1} does not support encryption', [fieldName, tableName]);
  gs.addErrorMessage(invalErmsg);
  gs.error(invalErmsg);
  current.setAbortAction(true);
  return;
 }

 if (!new sn_edge_encryption_ns.EdgeVersionCompatibilityValidator().isGlideObjectSupported(ed.getInternalType())) {
  var proxyErmsg = gs.getMessage("Encryption for fields of type {0} is not supported by one or more of your registered proxies. Please update your proxies to the most recent version.", ed.getInternalType());
  gs.addErrorMessage(proxyErmsg);
  gs.error(proxyErmsg);
  current.setAbortAction(true);
  return;
 }

 // Allow columns to be marked as false independent of encryptions in hierarchy
 if(current.active == true) {
  // abort if column is already encrypted for current table or any ancestor
  var configuration = new GlideRecord('sys_encryption_configuration');
  configuration.addQuery('table', 'IN', (new GlideTableHierarchy(tableName)).getHierarchy());
  configuration.addQuery('type', 'Column');
  configuration.addQuery('column', fieldName);
  configuration.addQuery('active', true);
  configuration.addQuery('sys_id', '!=', current.sys_id);
  configuration.query();
  if (configuration.next()) {
   var raceErmsg = gs.getMessage('The selected field already has an encryption configuration for table {0} or its extensions', tableName);
   gs.addErrorMessage(raceErmsg);
   gs.error(raceErmsg);
   current.setAbortAction(true);
   return;
  }
 }
}

function isFieldInvalid(gr, fieldName) {
 var ge = gr.getElement(fieldName);
 if (ge === undefined || (ge + '' == 'null'))
  return false;
 
 // basic checks first
 if (!ge.getBooleanAttribute('edge_encryption_enabled') || ge.getBooleanAttribute('edge_encryption_excluded'))
  return true;
 
 // getting to the good stuff
 var encryptableFields = new EdgeEncryptableChoiceFields().process(gr.getTableName());
 var arrayUtil = new global.ArrayUtil();
 return !arrayUtil.contains(encryptableFields, fieldName);
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:13</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>18bba01583701210c6695855eeaad3f7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Column Encryption</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_18bba01583701210c6695855eeaad3f7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:13</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=18bba01583701210c6695855eeaad3f7"/>
</record_update>
