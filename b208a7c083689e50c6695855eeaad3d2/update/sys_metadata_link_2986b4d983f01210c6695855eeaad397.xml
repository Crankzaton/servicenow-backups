<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4741c793435d21108561af1eb9b8f283</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_decision_table.DecisionTableUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DecisionTableUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DecisionTableUtil = (function() {

    var SYS_DB_OBJECT = 'sys_db_object';
    var SYS_DICTIONARY = 'sys_dictionary';

    var SUCCESS = "Success";
    var FAIL = "Failure";

    return {

        /**
         * Returns comma separated list of all tables in hierarchy
         * @param tableName
         * @returns {String}
         */
        getAllTablesInHierarchy: function(tableName) {
            return new GlideTableHierarchy(tableName).getTables();
        },

        /**
         * Returns table glide record for a given name
         * @param tableName
         * @returns {GlideRecord}
         */
        getTableRecordByName: function(tableName) {
            var tableGR = new GlideRecord(SYS_DB_OBJECT);
            tableGR.addQuery("name", tableName);
            tableGR.query();

            while (tableGR.next()) {
                return tableGR;
            }
        },

        /**
         * Returns glide record for a table field
         * @param tableName
         * @param columnName
         * @returns {GlideRecord}
         */
        getFieldRecordByName: function(tableName, columnName) {
            var gr = new GlideRecord(SYS_DICTIONARY);
            gr.addQuery('name', 'IN', this.getAllTablesInHierarchy(tableName));
            gr.addQuery("element", columnName);
            gr.query();

            while (gr.next()) {
                return gr;
            }
        },

        /**
         * Returns list of all choice type fields for a given table
         * @param tableName
         * @param searchTerm
         * @returns {GlideRecord}
         */
        getChoiceTypeFieldsForTable: function(tableName, searchTerm) {

            // Using GlideRecord instead of GlideRecordSecure to allow fetching choiceFields for users with decision table admin role
            var choiceFieldGR = new GlideRecord(SYS_DICTIONARY);
            choiceFieldGR.addQuery('name', 'IN', this.getAllTablesInHierarchy(tableName));

            var choiceCondition = choiceFieldGR.addQuery('internal_type', 'choice');
            choiceCondition.addOrCondition('choice', 'IN', '3,1');

            if (searchTerm) {
                choiceFieldGR.addQuery('column_label', 'STARTSWITH', searchTerm);
            }

            choiceFieldGR.setLimit(50);
            choiceFieldGR.query();

            return choiceFieldGR;
        },

        /**
         * Returns table details for a given name
         * @param tableName
         * @returns {Object}
         */
        getTableDetailsByName: function(tableName) {
            if (!tableName || !tableName.trim()) {
                return {
                    value: '',
                    displayValue: ''
                };
            }
            var tableGR = this.getTableRecordByName(tableName);
            return {
                value: tableGR.getValue('name'),
                displayValue: tableGR.getValue('label')
            };
        },

        /**
         * Returns field details for a given table column combination 
         * @param tableName
         * @param fieldName
         * @returns {Object}
         */
        getFieldDetailsByName: function(tableName, fieldName) {
            var isTableNameValid = tableName &amp;&amp; tableName.trim();
            var isFieldNameValid = fieldName &amp;&amp; fieldName.trim();

            if (!isTableNameValid || !isFieldNameValid) {
                return {
                    value: '',
                    displayValue: ''
                };
            }
            var fieldGR = this.getFieldRecordByName(tableName, fieldName);
            return {
                value: fieldGR.getValue('element'),
                displayValue: fieldGR.getValue('column_label'),
            };
        },

        /**
         * Validates if all the required fields are present for a given decision artifact
         * This is used in CUD operations for decision artifacts
         * @param decisionArtifact
         * @param requiredFields
         * @returns {Object}
         */
        validateRequiredFieldsForDecisionArtifact: function(decisionArtifact, requiredFields) {
            var errorFields = [];
            var validationStatus = {
                status: SUCCESS,
                message: ""
            };
            for (var curIndx in requiredFields) {
                var currentField = requiredFields[curIndx];
                var currentFieldValue = decisionArtifact[currentField];
                if (!currentFieldValue || !currentFieldValue.trim()) {
                    errorFields.push(currentField);
                }
            }

            if (errorFields.length &gt; 0) {
                validationStatus.status = FAIL;
                if (errorFields.length === 1) {
                    validationStatus.message = errorFields[0] + " is a required field";
                } else {
                    validationStatus.message = errorFields.join(", ") + " are required fields";
                }
            }
            return validationStatus;
        },

        /**
         * Returns the string value of the property for the given property name
         * @param propName
         * @returns {String}
         */
        getSysPropertyValue: function(propName, defaultValue) {
            if (typeof defaultValue === 'undefined') {
                return gs.getProperty(propName);
            }
            return gs.getProperty(propName, defaultValue);
        }
    };
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-06 07:48:50&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4741c793435d21108561af1eb9b8f283&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DecisionTableUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Decision Table Builder" source="sn_decision_table"&gt;13aa96a16bcefa78b16cc99ed9e4f1f4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Decision Table Builder"&gt;13aa96a16bcefa78b16cc99ed9e4f1f4&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4741c793435d21108561af1eb9b8f283&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-21 12:53:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:33</sys_created_on>
        <sys_id>2986b4d983f01210c6695855eeaad397</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DecisionTableUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2986b4d983f01210c6695855eeaad397</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:33</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
