<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>23b4dbbc9f032200598a5bb0657fcf44</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ShadowTaskSync&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Syncs the task with its shadow in other projects&lt;/description&gt;
        &lt;name&gt;ShadowTaskSync&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[ShadowTaskSync = Class.create();

ShadowTaskSync.prototype = {
    initialize: function() {
        this.syncColumns = gs.getProperty('com.snc.project_management.sync_shadow_task_columns',
        'short_description,percent_complete,state,start_date,end_date,duration,work_start,work_end,work_duration,schedule_start_date,schedule_end_date,state,time_constraint,active,status');
        this.syncColumnsList = this.syncColumns.split(',');
        this.syncSuccColumnsList = this.syncColumns.split(',');
    },
    
    process: function(topTaskId, jsonData) {
        PPMDebug.log("Into ShadowTaskSync: process -&gt; " + topTaskId + " | jsonData -&gt; " + jsonData);
        if(JSUtil.notNil(jsonData)) {
            var jsonDataObj = (new JSON()).decode(jsonData);
            var tasks = jsonDataObj.tasks;
            if ( JSUtil.nil(tasks) )
                return; 
            // validate if ORIG_SYS_ID Exists
            if(gs.fieldExists('planned_task', 'orig_sys_id'))
                this.syncTasksToShadows(tasks);
        }
    },
        
    syncTasksToShadows: function (tasks) {
        PPMDebug.log("Into ShadowTaskSync: syncTasksToShadows -&gt; " + JSON.stringify(tasks));
        var filterNonShadowTask = ShadowTaskQueryHelper.filterForNonShadowTask();
        var filterTaskHavingShadows = ShadowTaskQueryHelper.filterForTaskHavingShadows();       
        var tasksToSync = tasks.filter(filterNonShadowTask).filter(filterTaskHavingShadows);        
        var self = this;
        tasksToSync.forEach(function(task) {
            PPMDebug.log("Into ShadowTaskSync: syncingTask -&gt; " + JSON.stringify(task));
            var taskId = task.id || task.sys_id;
            self.syncTaskToShadows(taskId);
        });     
    },
    
    syncTaskToShadows: function(taskId) {
        PPMDebug.log("Into ShadowTaskSync: syncTaskToShadows -&gt; " + taskId);
        var taskRecord = this.plannedTaskRecord(taskId);
        PPMDebug.log("Into ShadowTaskSync: syncTaskToShadows: taskRecord -&gt; " + taskRecord.getValue("short_description")
            + taskRecord.getValue("start_date") + " | " + taskRecord.getValue("end_date"));
        var shadows = ShadowTaskQueryHelper.findShadowTasks(taskId);
        var syncList = [];
        var syncSuccColumns = false;
        while ( shadows.next() ) {
            if ( ShadowTaskQueryHelper.isShadowTaskSuccessor(shadows.getValue('sys_id')) ) {
                syncList = this.syncSuccColumnsList;
                syncSuccColumns = true;
            } else {
                syncList = this.syncColumnsList;
            }
            
            syncList.forEach(function(col) {
                if( JSUtil.notNil(taskRecord.getValue(col)) ) {
                    if(col === 'short_description') {
                        var topTask = taskRecord.top_task.getRefRecord();
                        var shortDescription = topTask.getValue(col) + ": " + taskRecord.getValue(col);
                        shadows.setValue(col, shortDescription);
                    } else {
                        shadows.setValue(col, taskRecord.getValue(col));
                    }
                } else {
                    shadows.setValue(col, 'NULL');
                }
            });
            PPMDebug.log("Sync to Shadow: " + shadows.getValue("short_description") +  " -&gt; " + shadows.getValue("start_date") + 
                "| " + shadows.getValue("end_date"));
            shadows.setWorkflow(false);
            shadows.update();
        }
    },
    
    plannedTaskRecord: function(taskId) {
        var gr = new GlideRecord("planned_task");
        gr.get(taskId);
        return gr;
    },
        
    type: 'ShadowTaskSync'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-11-10 12:26:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;23b4dbbc9f032200598a5bb0657fcf44&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ShadowTaskSync&lt;/sys_name&gt;
        &lt;sys_package display_value="Planned Task_v2" source="com.snc.planned_task_v2"&gt;92ef82e747e64210cd4e1ce4316d43f1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_23b4dbbc9f032200598a5bb0657fcf44&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-11-25 04:18:30&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:13</sys_created_on>
        <sys_id>99f0f05983b01210c6695855eeaad365</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ShadowTaskSync</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_99f0f05983b01210c6695855eeaad365</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:13</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
