<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>b179a6eb53a931105400ddeeff7b12e2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.VAAISearchFeedbackHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;A helper for AI search.&lt;/description&gt;
        &lt;name&gt;VAAISearchFeedbackHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var VAAISearchFeedbackHelper = Class.create();

/**
 * Creates a feedback payload for user feedback. 
 */
VAAISearchFeedbackHelper.createUserFeedbackPayload = function(resultType, searchMetaData, searchResult, vaSystem, vaInputs, vaVars, index) {

	var payload = {};
	
	// This conversation query id should be set in AI Search topic
	payload.conversation_query_id = (!gs.nil(vaVars) &amp;&amp; !gs.nil(vaVars.conversation_query_id) ? vaVars.conversation_query_id : '');
	
	// This should be either AISearchConstants.RESULT_TYPE_GENIUS || AISearchConstants.RESULT_TYPE_SEARCH
	payload.search_result_type = resultType;

	// This is the number of turns for multi-turn QnA
	payload.num_of_turns = !gs.nil(vaVars) &amp;&amp; !gs.nil(vaVars.num_of_turns) ? parseInt(vaVars.num_of_turns) : 0;
	
	// payload for glide signals. Payload should look like this - 
	/** 
   		{
			"conversation_query_id": "",
			"search_result_type": "GENIUS",
			"num_of_turns": 2,
			"glide_signals": {
				"positive_feedback": {
					"userId": "6816f79cc0a8016401c5a33be04be441",
					"sessionId": "1C01BB50537131105400DDEEFF7B120C",
					"applicationId": "global",
					"applicationType": "AISearchApplication",
					"searchProfile": "3a33973653211010a813ddeeff7b125a",
					"searchContextConfigId": "2963a5fa530020103296ddeeff7b129f",
					"queryTerm": "iphone",
					"resultSysId": "1be1b873eb370110506f7558b55228ef",
					"labelDescription": "iPhone 6s",
					"sourceTable": "sc_cat_item",
					"cardType": "card_type",
					"actionType": "VA_Feedback",
					"actionId": "b709e729537020103296ddeeff7b123b",
					"aisDocId": "sc_cat_item_1be1b873eb370110506f7558b55228ef",
					"actionValue": "Helpful",
					"matchedIntentsPerSource": ""
				},
				"negative_feedback": {
					"userId": "6816f79cc0a8016401c5a33be04be441",
					"sessionId": "1C01BB50537131105400DDEEFF7B120C",
					"applicationId": "global",
					"applicationType": "AISearchApplication",
					"searchProfile": "3a33973653211010a813ddeeff7b125a",
					"searchContextConfigId": "2963a5fa530020103296ddeeff7b129f",
					"queryTerm": "iphone",
					"resultSysId": "1be1b873eb370110506f7558b55228ef",
					"labelDescription": "iPhone 6s",
					"sourceTable": "sc_cat_item",
					"cardType": "card_type",
					"actionType": "VA_Feedback",
					"actionId": "b709e729537020103296ddeeff7b123b",
					"aisDocId": "sc_cat_item_1be1b873eb370110506f7558b55228ef",
					"actionValue": " Not Helpful",
				"matchedIntentsPerSource": ""
    			},
				"neutral_feedback": {
					"userId": "6816f79cc0a8016401c5a33be04be441",
					"sessionId": "1C01BB50537131105400DDEEFF7B120C",
					"applicationId": "global",
					"applicationType": "AISearchApplication",
					"searchProfile": "3a33973653211010a813ddeeff7b125a",
					"searchContextConfigId": "2963a5fa530020103296ddeeff7b129f",
					"queryTerm": "iphone",
					"resultSysId": "1be1b873eb370110506f7558b55228ef",
					"labelDescription": "iPhone 6s",
					"sourceTable": "sc_cat_item",
					"cardType": "card_type",
					"actionType": "VA_Feedback",
					"actionId": "b709e729537020103296ddeeff7b123b",
					"aisDocId": "sc_cat_item_1be1b873eb370110506f7558b55228ef",
					"actionValue": "IGNORED",
				"matchedIntentsPerSource": ""
    			}
  			}
		}
	**/

	// User feedback payload for GlideSignals need to contain both positive and negative payloads.
    // The user will see the feedback button after the card gets generated.
    // We don't know what the user will click, thus, both feedback payloads need to exist
    // when the user's input is known, the right feedback type will be picked and sent to GlideSignals.

	var glideSgnalPayload = payload.glide_signals = {};
	var collector = null;

	if (resultType == global.AISearchConstants.RESULT_TYPE_GENIUS) {

		// Note: feedback is supported only for Genius search
		collector = new VAAIGeniusResultFeedbackMetricCollector(searchMetaData, vaSystem, vaInputs, vaVars, global.AISearchConstants.FEEDBACK_VALUE_HELPFUL);

		// create a payload for the positive feedback
		collector.collect(searchResult, index);

		glideSgnalPayload.positive_feedback = collector.getGlideSignalsPayload();

		// create a payload for the negative feedback
		collector = new VAAIGeniusResultFeedbackMetricCollector(searchMetaData, vaSystem, vaInputs, vaVars, global.AISearchConstants.FEEDBACK_VALUE_NOT_HELPFUL);
		collector.collect(searchResult, index);

		glideSgnalPayload.negative_feedback = collector.getGlideSignalsPayload();
		
		// create a payload for the neutral feedback
		collector = new VAAIGeniusResultFeedbackMetricCollector(searchMetaData, vaSystem, vaInputs, vaVars, global.AISearchConstants.FEEDBACK_VALUE_IGNORED);
		collector.collect(searchResult, index);

		glideSgnalPayload.neutral_feedback = collector.getGlideSignalsPayload();

	} else if (resultType == global.AISearchConstants.RESULT_TYPE_SEARCH) {

		
		// Note: feedback is supported only for Genius search
		collector = new VAAISearchResultFeedbackEventMetricCollector(searchMetaData, vaSystem, vaInputs, vaVars, global.AISearchConstants.FEEDBACK_VALUE_HELPFUL);
		
		// create a payload for the positive feedback
		collector.collect(searchResult, index);

		glideSgnalPayload.positive_feedback = collector.getGlideSignalsPayload();

		// create a payload for the negative feedback
		collector = new VAAISearchResultFeedbackEventMetricCollector(searchMetaData, vaSystem, vaInputs, vaVars, global.AISearchConstants.FEEDBACK_VALUE_NOT_HELPFUL);
		collector.collect(searchResult, index);

		glideSgnalPayload.negative_feedback = collector.getGlideSignalsPayload();
		
		// create a payload for the neutral feedback
		collector = new VAAISearchResultFeedbackEventMetricCollector(searchMetaData, vaSystem, vaInputs, vaVars, global.AISearchConstants.FEEDBACK_VALUE_IGNORED);
		collector.collect(searchResult, index);

		glideSgnalPayload.neutral_feedback = collector.getGlideSignalsPayload();
	}
	return payload;
};

/**
 * Returns the feedback payload found by message Id
 * @return null if not found.
 */
VAAISearchFeedbackHelper.getAISFeedbackPayloadByMessageId = function(messageId) {

	var gr = new GlideRecord(global.AISearchConstants.MESSAGE_TABLE_NAME);
	return gr.get(messageId) ? global.VAAISearchFeedbackHelper.getAISFeedbackPayloadByRecord(gr) : null;
};

/**
 * Returns the feedback payload from the passed GlideRecord
 * @return null if not found.
 */
VAAISearchFeedbackHelper.getAISFeedbackPayloadByRecord = function(recordGr) {

	if (gs.nil(recordGr))
		throw "Record must exist";

	var feedbackPayload = recordGr.getValue('ais_feedback_payload');

	return !gs.nil(feedbackPayload) ? JSON.parse(feedbackPayload) : null;
};


/**
 * Send the payload to glide signals based on user's feedback
 */
VAAISearchFeedbackHelper.sendFeedbackToGlideSignalsAPI = function(feedbackValue, feedbackPayload) {

	if(gs.nil(feedbackValue) || gs.nil(feedbackPayload)) {
		gs.warn("feedback value or feedbackPayload is null");
		return;
	}

	var payload = null;

	// currently, we're supporting only two feedback types.
	if(feedbackValue.toLowerCase() == global.AISearchConstants.USER_FEEDBACK_VALUE_HELPFUL)
		payload = getPositiveFeedbackPayload(feedbackPayload);
	else if(feedbackValue.toLowerCase() == global.AISearchConstants.USER_FEEDBACK_VALUE_NOT_HELPFUL)
		payload = getNegativeFeedbackPayload(feedbackPayload);
	else if(feedbackValue.toLowerCase() == global.AISearchConstants.USER_FEEDBACK_VALUE_IGNORED)
		// if the user feedback value is ignored , don't send it.
		return;

	if (gs.nil(payload))
		throw "Feedback for GlideSignals must exist";

	// if can't send the payload to GlideSignals, don't send it.
	if (!VAAISearchFeedbackHelper.canSendPayloadToGlideSignals(feedbackPayload))
		return;

	try {
		new global.GlideSignalsService().trackEventAsync(global.AISearchConstants.RESULT_EVENT_TYPE_GENIUS,  "INFO" , payload);
	} catch (err) {
		gs.error("Sending the payload to GlideSignals API failed: payload: {0} detail:{1}", JSON.stringify(payload), err);
	}
};

/**
 * Tests if the given payload can be sent to GlideSignals API for feedback
 */
VAAISearchFeedbackHelper.canSendPayloadToGlideSignals = function(feedbackPayload) {

	if (gs.nil(feedbackPayload))
		return false;

	var resultType = feedbackPayload.search_result_type;
	return !gs.nil(resultType) &amp;&amp; (resultType == global.AISearchConstants.RESULT_TYPE_GENIUS);
}

/**
 * Tests if user feedback needs to be enabled or not.
 */
VAAISearchFeedbackHelper.needUserFeedback = function(vaSystem, vaInputs, vaVars) {
	
	if (gs.nil(vaVars)) {
		gs.error("The parameter - vaVars can not be null but it is null now");
		return false;
	}
	
	return !gs.nil(vaVars) &amp;&amp; (vaVars.need_user_feedback === 'true' || vaVars.need_user_feedback === true);
};

VAAISearchFeedbackHelper.processDeflectionLog = function(feedbackValue, feedbackPayload) {
	var feedbackState = {
		'accepted': global.AISearchConstants.DEFLECTION_STATUS_RESOLVED,
		'rejected': global.AISearchConstants.DEFLECTION_STATUS_NOT_RESOLVED,
		'ignored': global.AISearchConstants.DEFLECTION_STATUS_RESOLVED
	};
	var payload = null;

	// currently, we're supporting three feedback types.
	if(feedbackValue.toLowerCase() == global.AISearchConstants.USER_FEEDBACK_VALUE_HELPFUL)
		payload = getPositiveFeedbackPayload(feedbackPayload);
	else if(feedbackValue.toLowerCase() == global.AISearchConstants.USER_FEEDBACK_VALUE_NOT_HELPFUL)
		payload = getNegativeFeedbackPayload(feedbackPayload);
	else if(feedbackValue.toLowerCase() == global.AISearchConstants.USER_FEEDBACK_VALUE_IGNORED)
		payload = getNeutralFeedbackPayload(feedbackPayload);


	if (gs.nil(payload))
		throw "Feedback for Deflection logs must exist";

	var conversationQueryId = feedbackPayload["conversation_query_id"];

	var state = feedbackState[feedbackValue.toLowerCase()];

	var resourceId = gs.nil(payload.resultSysId)? "" : payload.resultSysId;
	var resourceTable = gs.nil(payload.sourceTable)? "" : payload.sourceTable;

	var turns = feedbackPayload["num_of_turns"];
	global.NowAssistDeflectionLogHelper.updateDeflectionLog(conversationQueryId, state, resourceId, resourceTable, turns);
};

function getPositiveFeedbackPayload(entirePayload) {
	return entirePayload.glide_signals.positive_feedback;
}

function getNegativeFeedbackPayload(entirePayload) {
	return entirePayload.glide_signals.negative_feedback;
}

function getNeutralFeedbackPayload(entirePayload) {
	return entirePayload.glide_signals.neutral_feedback;
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-10-04 07:12:20&lt;/sys_created_on&gt;
        &lt;sys_id&gt;b179a6eb53a931105400ddeeff7b12e2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;94&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;VAAISearchFeedbackHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_b179a6eb53a931105400ddeeff7b12e2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-01-26 01:10:43&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:18:08</sys_created_on>
        <sys_id>3600899d83341210c6695855eeaad366</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>VAAISearchFeedbackHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3600899d83341210c6695855eeaad366</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:18:08</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
