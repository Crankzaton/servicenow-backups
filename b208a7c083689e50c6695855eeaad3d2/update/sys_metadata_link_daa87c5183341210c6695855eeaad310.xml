<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>96daee038726f910224632650cbb35f0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WFSPMAccessRestriction&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;WFSPMAccessRestriction&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WFSPMAccessRestriction = Class.create();

TYPEMAPPING = {
    'policy': 'spm_cm_policy',
    'regulatory': 'spm_cm_regulatory',
    'organizational': 'spm_cm_organizational',
    'technology': 'spm_cm_technology',
    'strategic_plan': 'spm_cm_strategic_plan',
    '3rd_party_or_contractural': 'spm_cm_3rd_party_or_contractural',
    'financial_product': 'spm_cm_financial_product',
    'business_process': 'spm_cm_business_process',
    'procedure': 'spm_cm_procedure'
};

    WFSPMAccessRestriction.prototype = {

        initialize: function() {},


        hasDemandAccess: function(dmGr) {
            if (gs.hasRole('it_pps_admin')) { //Added this if with reference to the defect BGNN-3183
                return true;
            }
            // validate user has appropriate demand roles
            if (gs.hasRole('sn_ppm_read') || gs.hasRole('sn_dpm.dpm_manager') || gs.hasRole('demand_user') || gs.hasRole('resource_user')) {
                // validate group membership or if u_group is null
                if (this.hasGroupMembership(dmGr) || gs.nil(dmGr.getValue('u_group'))) {
                    //validate type map to role and or if u_imp_type is null
                    var chgType = (TYPEMAPPING[dmGr.getValue('u_imp_type')]).toString();
                    if (gs.hasRole(chgType) || gs.nil(dmGr.getValue('u_imp_type'))) {
                        // validate if record is confidentail or not
                        if (this._isConfidential(dmGr)) {
                            //validate if user has appropriate confidential role
                            if (this._hasConfidentialRole()) {
                                // has role, return true
                                return true;
                            }
                            // does not have confidential role, return false

                            return false;
                        }
                        // not flagged for confidentiality, return true
                        return true;
                    }
                    // does not have appropriate role for type, return false
                    return false;
                }
                //is NOT member of the group and u_group is NOT null
                return false;
            }
            //does not have PPM roles, return false
            return false;

        },

        hasProjectAccess: function(prjGr) {
            if (gs.hasRole('it_pps_admin')) { //Added this if with reference to the defect BGNN-3183
                return true;
            }
            // validate user is member of group and has appropriate project roles
            if (gs.hasRole('sn_ppm_read') || gs.hasRole('sn_dpm.dpm_manager') || gs.hasRole('project_user') || gs.hasRole('resource_user') || gs.hasRole('timecard_user')) {
                // validate group membership or if u_group is null
                if (this.hasGroupMembership(prjGr) || gs.nil(prjGr.getValue('u_group'))) { // validate type map to role and or if imp_type is null
                    var chgType = (TYPEMAPPING[prjGr.getValue('u_change_type')]).toString();
                    if (gs.hasRole(chgType) || gs.nil(prjGr.getValue('u_change_type'))) {
                        // validate if record is confidentail or not
                        if (this._isConfidential(prjGr)) {
                            //validate if user has appropriate confidential role
                            if (this._hasConfidentialRole()) {
                                // has role, return true
                                return true;
                            }
                            // does not have confidential role, return false
                            return false;
                        }
                        // not flagged for confidentiality, return true
                        return true;
                    }
                    // does not have appropriate role for type, return false
                    return false;
                }
                //is NOT member of the group and u_group is NOT null
                return false;
            }
            //does not have PPM roles, return false
            return false;

        },


        /*
        logged in user have confidential role
        */
        _hasConfidentialRole: function() {
            return gs.hasRole('spm_cm_confidential');
        },

        /*
        is the record deemed as confidential
        */
        _isConfidential: function(dmGr) {

            if (dmGr.u_confidential) {
                return true;
            }
            return false;

        },



        /*
        Evaluate if member of u_group on demand/prj record
        */
        hasGroupMembership: function(rec) {
            var group = rec.u_group.toString();
            if (!gs.nil(group)) {
                var groupStr = group.split(",");

            }
            var grpStrLen = groupStr.length;
            for (var i = 0; i &lt; grpStrLen; i++) {
                if (gs.getUser().isMemberOf(groupStr[i])) {
                    return true;
                }
            }
            return false;
        },

        type: 'WFSPMAccessRestriction'
    };]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;K095239&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-11-21 11:15:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;96daee038726f910224632650cbb35f0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WFSPMAccessRestriction&lt;/sys_name&gt;
        &lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_96daee038726f910224632650cbb35f0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-04 17:26:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:45:53</sys_created_on>
        <sys_id>daa87c5183341210c6695855eeaad310</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WFSPMAccessRestriction</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_daa87c5183341210c6695855eeaad310</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:45:53</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
