<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Autogenerate outcomes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 var topic = current.topic_goal.getRefRecord().getValue("topic");
 if (!topic)
  return;
 
 //we might be inserting _between_ nodes so lets be careful
 var type = current.getValue("type");
 if (type == "manual")
  createOutcomeManual(current);
 
 if (type == "variable_value") {
  var choiceVar = current.getValue("variable");
  var variableGR = new GlideRecord("topic_variable");
  variableGR.addQuery("model", topic);
  variableGR.addQuery("model_id", topic);
  variableGR.addQuery("element", choiceVar);
  
  variableGR.query();
  
  if (!variableGR.next())
   return;
  
  var table = variableGR.getValue("name");
  var choiceGR = new GlideRecord("sys_choice");
  choiceGR.addQuery("name", table);
  choiceGR.addQuery("element", choiceVar);
  choiceGR.addQuery("inactive", false);
  choiceGR.orderBy("sequence");
  
  choiceGR.query();
  while(choiceGR.next())
   createOutcomeVarEqualsValue(current, variableGR, choiceGR);
  
 }
 /*
 if (type == "compare_values") {
  var varA = current.getValue("variable_a");
  var varB = current.getValue("variable_b");
  
  var variableOneGR = new GlideRecord("topic_variable");
  variableOneGR.addQuery("model", topic);
  variableOneGR.addQuery("model_id", topic);
  variableOneGR.addQuery("element", varA);
  
  variableOneGR.query();
  
  if (!variableOneGR.next())
   return;

  var variableTwoGR = new GlideRecord("topic_variable");
  variableTwoGR.addQuery("model", topic);
  variableTwoGR.addQuery("model_id", topic);
  variableTwoGR.addQuery("element", varB);
  
  variableTwoGR.query();
  
  if (!variableTwoGR.next())
   return;
  
  createOutcomeVarEqualsVar(current, variableOneGR, variableTwoGR);
 }
 */
 if (type == "variable_boolean") {
  var boolVar = current.getValue("var_bool");
  var variableGR = new GlideRecord("topic_variable");
  variableGR.addQuery("model", topic);
  variableGR.addQuery("model_id", topic);
  variableGR.addQuery("element", boolVar);
  
  variableGR.query();
  
  if (!variableGR.next())
   return;
  
  createOutcomesVarIsTrueFalse(current, variableGR);
  
 }
 
 createMergeIfNeeded(current);
 
 function createMergeIfNeeded(decisionGR) {
  var parent = decisionGR.getValue("parent");
  var children = new GlideRecord("sys_cb_node");
  children.addQuery("sys_id", "!=", decisionGR.getValue("sys_id"));
  children.addQuery("parent", parent);
  children.query();
    
  if (children.hasNext())
   createMergeAndConnectOutcomes(decisionGR);
  else {
   var collectorGR = new GlideRecord("sys_cb_collector");
   collectorGR.addQuery("parent_nodes", "CONTAINS", parent);
   collectorGR.query();
   
   while (collectorGR.next())
    updateCollectorWithNewParents(collectorGR, decisionGR);
  }
   
 }
 
 function createMergeAndConnectOutcomes(decisionGR) {
  var outcome_ids = [];
  var outcomes = new GlideRecord("sys_cb_outcome");
  outcomes.addQuery("parent", decisionGR.getValue("sys_id"));
  outcomes.query();
  
  while(outcomes.next())
   outcome_ids.push(outcomes.getValue("sys_id"));

  gs.debug("Adding parent_nodes {0} to new collector", outcome_ids.join(","));
  
  var collector = new GlideRecord("sys_cb_collector");
  collector.newRecord();
  collector.setValue("name", decisionGR.getValue("name") + " automerge");
  collector.setValue("parent_nodes", outcome_ids.join(","));
  collector.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  collector.setValue("variable_table", "var__m_topic_variable_" + topic);
  collector.setWorkflow(false);
  collector.insert();
  
  gs.debug("New collector inserted with parent_nodes {0}", collector.getValue("parent_nodes"));
  
  updateOriginalChildToCollector(collector, decisionGR);
  
 }
 
 function updateCollectorWithNewParents(collectorGR, decisionGR) {
  var outcome_ids = [];
  var parents;
  var outcomes = new GlideRecord("sys_cb_outcome");
  outcomes.addQuery("parent", decisionGR.getValue("sys_id"));
  outcomes.query();
  
  while(outcomes.next())
   outcome_ids.push(outcomes.getValue("sys_id"));
  
  parents = collectorGR.getValue("parent_nodes");
  
  if (parents)
   parents = parents.split(",");
  if (parents) {
   collectorGR.setValue("parent_nodes", parents.concat(outcome_ids).join(","));
   collectorGR.update();
  } else {
   collectorGR.setValue("parent_nodes", outcome_ids.join(","));
   collectorGR.update();
  }
 }
 
 function createOutcomeManual(decisionGR) {
  var outcomeGR = new GlideRecord("sys_cb_outcome");
  outcomeGR.newRecord();
  outcomeGR.setValue("name", decisionGR.getValue("name"));
  outcomeGR.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  outcomeGR.setValue("parent", decisionGR.getValue("sys_id"));
  outcomeGR.setValue("variable_table", "var__m_topic_variable_" + topic);
  outcomeGR.setWorkflow(false);
  outcomeGR.insert();
  (new GlideUpdateManager2()).saveRecord(outcomeGR);
 }
 
 function updateOriginalChildToCollector(collector, decisionGR) {
  var parent = decisionGR.getValue("parent");
  var child = new GlideRecord("sys_cb_node");
  child.addQuery("parent", parent);
  child.addQuery("sys_id", "!=", decisionGR.getValue("sys_id"));
  child.addQuery("sys_class_name", "!=", "sys_cb_collector");
  child.query();
    
  while (child.next()) {
   var realChild = new GlideRecord(child.getRecordClassName());
   realChild.get(child.getUniqueValue());
   
   gs.debug("Updating original node {0} ({1}) to use new collector parent {2}", child.getValue("name"), child.getValue("sys_id"), collector.getValue("name"));
   
   realChild.setValue("parent", collector.getValue("sys_id"));
   realChild.setWorkflow(false);
   realChild.update();
   (new GlideUpdateManager2()).saveRecord(realChild);
  }
 }
 
 function createOutcomeVarEqualsValue(decisionGR, variableGR, choiceGR) {
  var outcomeGR = new GlideRecord("sys_cb_outcome");
  outcomeGR.newRecord();
  outcomeGR.setValue("name", choiceGR.getValue("label"));
  outcomeGR.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  outcomeGR.setValue("parent", decisionGR.getValue("sys_id"));
  outcomeGR.setValue("condition", variableGR.getValue("element") + "=" + choiceGR.getValue("value") + "^EQ");
  outcomeGR.setValue("variable_table", "var__m_topic_variable_" + topic);
  outcomeGR.setWorkflow(false);
  outcomeGR.insert();
  (new GlideUpdateManager2()).saveRecord(outcomeGR);
 }
 /*
 function createOutcomeVarEqualsVar(decisionGR, variableOneGR, variableTwoGR) {
  var outcomeGR = new GlideRecord("sys_cb_outcome");
  outcomeGR.newRecord();
  outcomeGR.setValue("name", "Same");
  outcomeGR.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  outcomeGR.setValue("parent", decisionGR.getValue("sys_id"));
  outcomeGR.setValue("condition", variableOneGR.getValue("element") + "SAMEAS{{" + variableTwoGR.getValue("element") + "}}^EQ");
  outcomeGR.setValue("variable_table", "var__m_topic_variable_" + topic);
  outcomeGR.setWorkflow(false);
  outcomeGR.insert();
  (new GlideUpdateManager2()).saveRecord(outcomeGR);
  
  outcomeGR.initialize();
  outcomeGR.setValue("name", "Different");
  outcomeGR.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  outcomeGR.setValue("parent", decisionGR.getValue("sys_id"));
  outcomeGR.setValue("condition", variableOneGR.getValue("element") + "NSAMEAS{{" + variableTwoGR.getValue("element") + "}}^EQ");
  outcomeGR.setValue("variable_table", "var__m_topic_variable_" + topic);
  outcomeGR.setWorkflow(false);
  outcomeGR.insert();
  (new GlideUpdateManager2()).saveRecord(outcomeGR);

 }
 */
 
 function createOutcomesVarIsTrueFalse(decisionGR, variableGR) {
  var outcomeGR = new GlideRecord("sys_cb_outcome");
  outcomeGR.newRecord();
  outcomeGR.setValue("name", "True");
  outcomeGR.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  outcomeGR.setValue("parent", decisionGR.getValue("sys_id"));
  outcomeGR.setValue("condition", variableGR.getValue("element") + "=true^EQ");
  outcomeGR.setValue("variable_table", "var__m_topic_variable_" + topic);
  outcomeGR.setWorkflow(false);
  outcomeGR.insert();
  (new GlideUpdateManager2()).saveRecord(outcomeGR);
  
  outcomeGR.initialize();
  outcomeGR.setValue("name", "False");
  outcomeGR.setValue("topic_goal", decisionGR.getValue("topic_goal"));
  outcomeGR.setValue("parent", decisionGR.getValue("sys_id"));
  outcomeGR.setValue("condition", variableGR.getValue("element") + "=false^EQ");
  outcomeGR.setValue("variable_table", "var__m_topic_variable_" + topic);
  outcomeGR.setWorkflow(false);
  outcomeGR.insert();
  (new GlideUpdateManager2()).saveRecord(outcomeGR);
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>beaca89983701210c6695855eeaad3aa</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Autogenerate outcomes</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_beaca89983701210c6695855eeaad3aa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:30</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=beaca89983701210c6695855eeaad3aa"/>
</record_update>
