<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>12ac689983701210c6695855eeaad3be</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules"&gt;
    &lt;x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;false&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection/&gt;
        &lt;condition&gt;VariableAcceleratorUtil.shouldPrefillPrompt(GlideTransaction.get())&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Prefill for editing&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) { 
 var prompt_id = GlideTransaction.get().getRequestParameter("sysparm_prompt_id") + "";
 gs.debug("Prompt id {0}", prompt_id);
 
 if (prompt_id &amp;&amp; typeof prompt_id == "string" &amp;&amp; prompt_id.length == 32)
  setPromptInfo(current, prompt_id);
 
 if (current.getValue("variable"))
  setVariableInfo(current, current.getValue("variable"));
 else
  current.setValue("type", "output");
 
 // Add your code here

 function setPromptInfo(current, prompt_id) {
  gs.debug("Looking up existing prompt {0}", prompt_id);
  
  var node = new GlideRecord("sys_cb_node");
  if (node.get(prompt_id)) {
   gs.debug("Prompt class is {0} and id is {1}", node.getRecordClassName(), prompt_id);
   current.setValue("existing_prompt", node.getUniqueValue());
   current.setValue("topic", node.topic_goal.topic);
   current.setValue("topic_goal", node.getValue("topic_goal"));
   current.setValue("parent", node.getValue("parent"));
   current.setValue("prompt_label", node.getValue("name"));

   var realPrompt = new GlideRecord(node.getRecordClassName());
   realPrompt.get(node.getUniqueValue());
   
   if (realPrompt.prompt_msg.hasMapping())
    current.prompt_msg.setValueMapping(realPrompt.prompt_msg.getValueMapping());
   else
    current.setValue("prompt_msg", realPrompt.getValue("prompt_msg"));
   
   if (realPrompt.acknowledge_msg.hasMapping())
    current.acknowledge_msg.setValueMapping(realPrompt.acknowledge_msg.getValueMapping());
   else
    current.setValue("acknowledge_msg", realPrompt.getValue("acknowledge_msg"));

   if (realPrompt.reference_nil.hasMapping())
    current.reference_nil.setValueMapping(realPrompt.reference_nil.getValueMapping());
   else
    current.setValue("reference_nil", realPrompt.getValue("reference_nil"));

   current.setValue("variable_table", realPrompt.getValue("variable_table"));
   current.setValue("variable", realPrompt.getValue("variable"));
   current.setValue("optional", realPrompt.getValue("optional"));

   
   gs.debug("Setting prompt {0}, acknowledge {1}, and variable {2}",
      current.getValue("prompt_msg"),
      current.getValue("acknowledge_msg"),
      current.getValue("variable")
     );
   
  } else {
   gs.debug("Existing prompt {0} not found", prompt_id);
  }
  
 }
 
 function setVariableInfo(current, variable_name) {
  gs.debug("Setting up variable {0}", variable_name);
  if (!variable_name)
   return;
  
  var variable = new GlideRecord("topic_variable");
  variable.addQuery("element", variable_name);
  variable.addQuery("model", current.topic_goal.topic);
  variable.query();
  
  gs.debug("Looking up variable with query {0}, found one? {1}", variable.getEncodedQuery(), variable.hasNext());
  
  if (!variable.next())
   return;
  
  current.setValue("type", variable.getValue("internal_type"));
  current.setValue("default_value", variable.getValue("default_value"));
  current.setValue("name", variable.getValue("label"));
  current.setValue("column", variable.getValue("element"));
  
  switch (variable.getValue("internal_type")) {
   case "choice" : setChoiceValues(current, variable);
    break;
   case "reference" : setReferenceValues(current, variable);
    break;
   case "url" : setUrlValues(current, variable);
    break;
   
   case "string" : 
   case "boolean" :
   case "ph_number" :
   case "glide_date_time" :
   case "email" :
   case "user_image" :
   case "guid" :
   case "integer" :
    setStringValues(current, variable);
    break;
   default: setStringValues(current, variable);
  }

 }
 
 function setChoiceValues(current, variable) {
  //first, get the choices and their values
  gs.debug("Searching for choices for variable {0} in table {1}",
    variable.getValue("element"),
    variable.getValue("name")
    );
  
  current.setValue("choice_type", variable.getValue("choice"));
  
  var choices = new GlideRecord("sys_choice");
  choices.addQuery("name", variable.getValue("name"));
  choices.addQuery("element", variable.getValue("element"));
  
  choices.query();
  gs.debug("Choice query: {0}", choices.getEncodedQuery());
  gs.debug("Choices found? {0}", choices.hasNext());
  
  var found = choices.hasNext();
  if (!found)
   return;
  
  var simple_choice_object = {};
  while (choices.next())
   simple_choice_object[choices.getValue("label")] = choices.getValue("value");
  
  current.setValue("choices", JSON.stringify(simple_choice_object));
 }
 
 function setReferenceValues(current, variable) {
  gs.debug("Setting reference values");
  current.setValue("table", variable.getValue("reference"));
  
  gs.debug("Setting variable condition.");
  
  if (variable.reference_qual_condition.hasMapping()) {
   gs.debug("Variable condition has mapping. Setting value to {0}",
     variable.reference_qual_condition.getValueMapping());
   current.reference_condition.setValueMapping(        variable.reference_qual_condition.getValueMapping());
  } else {
   gs.debug("Reference qualifier does not have mapping, setting value to {0}",
     variable.getValue("reference_qual_condition"));
   current.setValue("reference_condition", variable.getValue("reference_qual_condition"));
  }
  current.setValue("limit", variable.getValue("limit"));
   
 }
 
 function setStringValues() {
  //do we have anything to set here?
 }
 
 function setUrlValues(current, variable) {
  gs.debug("Adding URL parameters");
  gs.debug("Params have mapping? {0}", variable.query_parameters.hasMapping());
  
  if (variable.query_parameters.hasMapping())
   current.query_parameters.setValueMapping(variable.query_parameters.getValueMapping());
  else
   current.setValue("query_parameters", variable.getValue("query_parameters"));
 }
})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;x_938076_now_utils_now_utils_business_rules&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-09-21 07:53:27&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;12ac689983701210c6695855eeaad3be&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Prefill for editing&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Now Utils" source="x_938076_now_utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Now Utils"&gt;b208a7c083689e50c6695855eeaad3d2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;x_938076_now_utils_now_utils_business_rules_12ac689983701210c6695855eeaad3be&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-09-21 07:53:27&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/x_938076_now_utils_now_utils_business_rules&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=12ac689983701210c6695855eeaad3be"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:56:45</sys_created_on>
        <sys_id>666dac5d83701210c6695855eeaad391</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prefill for editing</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_666dac5d83701210c6695855eeaad391</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:56:45</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
