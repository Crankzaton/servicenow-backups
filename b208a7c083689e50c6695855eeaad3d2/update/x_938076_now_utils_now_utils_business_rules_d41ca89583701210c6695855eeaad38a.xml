<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check if valid vocabulary word</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var vocabTypes = NLUConstants.VOCAB_TYPES;

function getValuesCount(record) {
    try {
        if (record.type == vocabTypes.lookup) {
            if (record.table) {
                var valsGa = new GlideAggregate(record.table);
                valsGa.addAggregate('COUNT');
                if (record.filter_condition) {
                    valsGa.addEncodedQuery(record.filter_condition);
                }
                valsGa.query();
                if (valsGa.next()) {
                    return valsGa.getAggregate('COUNT');
                }
            }
        } else if (record.type == vocabTypes.static_lookup) {
            var vocabJsonStr = record.vocabulary_json;
            if (vocabJsonStr) {
                var vocabJson = JSON.parse(vocabJsonStr);
                if (vocabJson && vocabJson.values && Array.isArray(vocabJson.values)) {
                    return vocabJson.values.length;
                }
            }
        }
    } catch (e) {
        gs.error('Error while checking the value count for lookup: ' + e.message);
    }
    return 0;
}

(function executeRule(current, previous /*null when async*/ ) {

    if ((current.type == vocabTypes.lookup || current.type == vocabTypes.static_lookup) && !current.name.match(/^[^.@\s]*$/)) {
        gs.addErrorMessage(gs.getMessage('Handle cannot contain @, space or dot'));
        current.setAbortAction(true);
        return;
    }

    var limitProp = null;
    if (current.type == vocabTypes.lookup) {
        limitProp = 'glide.platform_ml.api.max_nlu_lookupsource_records';
    } else if (current.type == vocabTypes.static_lookup) {
        limitProp = 'glide.nlu.static_lookup.value_limit';
    }
    if (limitProp) {
        var limit = parseInt(gs.getProperty(limitProp));
        var valueCount = parseInt(getValuesCount(current));
        if (valueCount > limit) {
            gs.addErrorMessage(gs.getMessage('Cannot refer to more than {0} values', limit));
            current.setAbortAction(true);
            return;
        }
    }

    var ga = new GlideAggregate('sys_nlu_vocabulary');
    ga.addAggregate('COUNT');
    ga.addQuery('name', current.name);
    ga.addQuery('model', current.model);
    ga.addQuery('sys_id', '!=', current.sys_id);
    ga.query();
    if (ga.next()) {
        if (ga.getAggregate('COUNT') > 0) {
            gs.addErrorMessage(gs.getMessage('Word already exists.'));
            current.setAbortAction(true);
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:52</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d41ca89583701210c6695855eeaad38a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check if valid vocabulary word</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_d41ca89583701210c6695855eeaad38a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:52</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=d41ca89583701210c6695855eeaad38a"/>
</record_update>
