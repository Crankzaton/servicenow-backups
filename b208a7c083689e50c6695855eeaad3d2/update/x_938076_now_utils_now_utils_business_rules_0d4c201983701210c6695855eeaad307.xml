<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check scope in solution name</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 var solutionLabel = current.getValue("solution_label");
 var solutionName = current.getValue("solution_name");
 var name = "ml_" + gs.getNewAppScopeCompanyPrefix() + '_'+ getScope(current) +'_' + getDomainName() +'_' + solutionLabel.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');

 while (name.indexOf("__") != -1) {
  name = name.replace(/__/g, "_");
 }

 // Replace any trailing underscores
 while (name != '' && name.charAt(name.length - 1) == '_') {
  name = name.substring(0, name.length - 1);
 }
 
 var source = current.getValue("request_source");
 if (JSUtil.areEqual(source, 'api')) {
  name = generateUniqueName(name);
 }

 if (!isSolutionDefinitionPresent(name)) {
  if (name != solutionName)
   current.setValue('solution_name',name);
 } else {
  gs.addErrorMessage("Solution name should be unique");
  current.setAbortAction(true);
 }
 
 function isSolutionDefinitionPresent(solutionName) {
  if (!solutionName)
   return false;
  var gr = new GlideRecord('ml_capability_definition_base');
  gr.addQuery('solution_name',solutionName);
  gr.query();
  if(gr.hasNext()){
   return true;
  }
  return false;
 }
 
 function getScope(current) {
  var scope = gs.getCurrentApplicationScope();
  try {
   // use scope key in solution_properties json to create
   // solution name for api created solutions 
   var solutionProperties = current.getValue('solution_properties');
   if (JSUtil.notNil (solutionProperties)) {
    var solutionPropertiesJson = JSON.parse(solutionProperties);
    if ('scope' in solutionPropertiesJson) {
     scope = solutionPropertiesJson.scope;
    }
   }
  } catch (ex) {
   scope = gs.getCurrentApplicationScope();
  }
  return scope;
 }
 
 function getDomainName() {
  // The domain name prefix is by default global.
  var domain_name = "global";
  var domain_sys_id = current.getValue('sys_domain');

  if (domain_sys_id === null ) {
   return domain_name;
  }

  var name = current.sys_domain.name;
  if(JSUtil.notNil(name)) {
   domain_name = name.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');
  }

  return domain_name;
 }
 
 function generateUniqueName(name) {
  var existingNames = getExistingSolutionNamesStartingWith(name);
  // this while loop will execute for 100 iterations and
  // try to generate a unique name
  while (JSUtil.contains(existingNames, name)) {
   var lastIndexOfSeparator = name.lastIndexOf("_");
   var suffix = name.substring(lastIndexOfSeparator + 1);
   var newSuffix = 1;
   if (!isNaN(suffix)) {
    newSuffix = parseInt(suffix) + 1;
    name = name.substring(0, lastIndexOfSeparator);
   }
   name = name + '_' + newSuffix;
  }
  return name;
 }
 
 function getExistingSolutionNamesStartingWith(name) {
  var existingNames = [];
  var gr = new GlideRecord('ml_capability_definition_base');
  gr.addQuery('solution_name','STARTSWITH', name);
  // we will try to get upto 100 names with the same prefix
  // if we are still not able to generate unique name, we will 
  // throw exception
  gr.setLimit(100);
  gr.query();
  while (gr.next()) {
   existingNames.push(gr.getValue('solution_name'));
  }
  return existingNames;
 }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:51:44</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0d4c201983701210c6695855eeaad307</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check scope in solution name</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_0d4c201983701210c6695855eeaad307</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:51:44</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=0d4c201983701210c6695855eeaad307"/>
</record_update>
