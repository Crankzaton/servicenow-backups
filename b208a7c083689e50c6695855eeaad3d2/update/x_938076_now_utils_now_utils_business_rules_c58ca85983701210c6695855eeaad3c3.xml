<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.operation() == "insert" || current.groups != previous.groups</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Check agent read access</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

 // Add your code here
 var groups = current.getValue('groups');
 
 var grMemberGR = new GlideRecord("sys_user_grmember");
 grMemberGR.addQuery("group", "IN", groups);
 grMemberGR.query();
 
 var warnUsers = [];
 var queueGR = new GlideRecord("awa_queue");
 if (queueGR.get(current.getValue("queue"))) {
  var scGR = new GlideRecord("awa_service_channel");
  if (scGR.get(queueGR.getValue("service_channel"))) {

   var docGR = new GlideRecord(scGR.getValue("workitem_table"));
   var session = GlideSession.get();
   var sessionUser = session.getUser().getID();
   while (grMemberGR.next()) {

    var userName = grMemberGR.getElement("user").getDisplayValue();
    var groupName = grMemberGR.getElement("group").getDisplayValue();
    var userSysID = grMemberGR.getValue("user");
    session.impersonate(userSysID);
    if (!docGR.canRead() && warnUsers.indexOf(userName)<0)
     warnUsers.push(userName);
   }
   session.impersonate(sessionUser);
   if (warnUsers.length > 0) {
    var msg = gs.getMessage("The following users do not have read access to the {0} table: {1}. These users will not be able to view the items assigned to them.",
        [scGR.getValue("workitem_table"), warnUsers.join()]);
    gs.addErrorMessage(msg);
   }
  }
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:49</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c58ca85983701210c6695855eeaad3c3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Check agent read access</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_c58ca85983701210c6695855eeaad3c3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:49</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=c58ca85983701210c6695855eeaad3c3"/>
</record_update>
