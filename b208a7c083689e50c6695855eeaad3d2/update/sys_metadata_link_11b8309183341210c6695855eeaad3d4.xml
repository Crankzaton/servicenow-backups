<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9a7c2fc424952510f8775fc2cb18d642</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.GroupHasSubscriptionDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO to retrieve or insert data from group_has_subscription table&lt;/description&gt;
        &lt;name&gt;GroupHasSubscriptionDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GroupHasSubscriptionDAO = Class.create();
GroupHasSubscriptionDAO.prototype = {
    initialize: function() {},

    // returns true if any of the input groups is assoicated with given subscription
    doesGroupsHaveSubscription: function(groupIds, subSysId) {
        var ghsGr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
        ghsGr.addQuery(LicensingEngineDBConstants.GROUP, LicensingEngineDBConstants.IN, groupIds);
        ghsGr.addQuery(LicensingEngineDBConstants.SUBSCRIPTION, subSysId);
        ghsGr.query();
        return ghsGr.hasNext();
    },

    doesGroupsHaveSubscriptionByEntId: function(groupIds, subsEntId) {
        var ghsGr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
        ghsGr.addQuery(LicensingEngineDBConstants.GROUP, LicensingEngineDBConstants.IN, groupIds);
        var entField = LicensingEngineDBConstants.SUBSCRIPTION.concat(LicensingEngineConstants.DOT).concat(LicensingEngineDBConstants.ENTITLEMENT_ID);
        ghsGr.addQuery(entField, subsEntId);
        ghsGr.query();
        return ghsGr.hasNext();
    },

    /**
     * @return {array} the list of the groups sysIds that are mapped to subscription
     */
    getGroupsMappedToSubscription: function() {
        const ghsGr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
        ghsGr.query();
        const groups = [];
        while (ghsGr.next())
            groups.push(String(ghsGr.getElement('group.sys_id')));
        return groups;
    },

    /**
     * Returns the list of groups that are mapped to the given subscription
     * @param {subscriptionId}
     * @return {array} the list of the groups sysIds that are mapped to the given subscription
     */
    getGroupIdsBySubscriptionId: function(subscriptionId) {
        const ghsGr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
        ghsGr.addQuery(LicensingEngineDBConstants.SUBSCRIPTION, subscriptionId);
        ghsGr.query();
        const groups = [];
        while (ghsGr.next())
            groups.push(String(ghsGr.getElement('group.sys_id')));
        return groups;
    },



    /**
     * Retrieves the number of groups that are subscribed to a subscription
     * 
     * @param {uuid} The subscription_entitlement.sys_id to filter by
     * @returns {int} The number of groups subscribed to the provided subscription
     */
    getCountBySubscriptionId: function(subscriptionId) {
        const gr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
        gr.addQuery('subscription.sys_id', subscriptionId);
        gr.query();
        return gr.getRowCount();
    },

    /**
     * Add group to subscription mapping records in the database
     *
     * @param {array} the list of the group sysId to subscription sysId 
     */
    insertSubscriptionGroups: function(newRowsToInsert) {
        for (let i = 0; i &lt; newRowsToInsert.length; i++) {
            const groupSysId = newRowsToInsert[i].group;
            const subscriptionSysId = newRowsToInsert[i].subscription;

            const ghsGr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
            ghsGr.initialize();
            ghsGr.setValue('group', groupSysId);
            ghsGr.setValue('subscription', subscriptionSysId);
            ghsGr.insert(); //insertMultiple() is not supported in the scoped app, using insert()
        }
    },

    /**
     * Get Map of sub id as key and values Set of groups with existing mapping
     * 
     * @returns {Map} Sub Id as key and list of associated groups as values
     */
    getMapofSubscriptionIdToMappedGroups: function() {
        const gr = new GlideRecord(LicensingEngineDBConstants.GROUP_HAS_SUBSCRIPTION);
        gr.query();
        const subIdGroupsMap = new Map();
        while (gr.next()) {
            const subscription = gr.getValue('subscription');
            if (global.JSUtil.notNil(subscription)) {
                const subId = String(subscription);
                const groupIds = subIdGroupsMap.get(subId) || new Set();
                groupIds.add(String(gr.getValue('group')));
                subIdGroupsMap.set(subId, groupIds);
            }
        }
        return subIdGroupsMap;
    },

    type: 'GroupHasSubscriptionDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-24 08:37:01&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9a7c2fc424952510f8775fc2cb18d642&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;53&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GroupHasSubscriptionDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9a7c2fc424952510f8775fc2cb18d642&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-06 02:03:46&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:05</sys_created_on>
        <sys_id>11b8309183341210c6695855eeaad3d4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GroupHasSubscriptionDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_11b8309183341210c6695855eeaad3d4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:05</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
