<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>80538193535130103913ddeeff7b12b8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_gf.GFGoal&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;GFGoal&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GFGoal = Class.create();
GFGoal.prototype = Object.extendsObject(GFCoreGoal,{
	getGoalGR: function(goalId){
		if(!this.goalGR){
			this.goalId = goalId;
			this.goalGR = new GlideRecord(GoalFrameworkConstants.GOAL_TABLE);
			this.goalGR.get(this.goalId);
		}
		return this.goalGR;
	},
	
	isValidStrategy: function(){
		var strategy = new GlideRecord(GoalFrameworkConstants.STRATEGY_TABLE);
		//adding valid strategies ref qual as encoded query
		strategy.addEncodedQuery(sn_gf.GFRefQualHelper.getStrategiesForGoal(this.getGoalGR()));
		strategy.addQuery("sys_id",this.getGoalGR().getValue("strategy"));
		strategy.query();
		return strategy.hasNext();
	},

	getAssignedEntityTypes: function(){
		var goalAssignedEntityConfigRec = new GlideRecord(GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
		goalAssignedEntityConfigRec.query();

        var list = new GlideChoiceList();
		while(goalAssignedEntityConfigRec.next()){
		   var entityTableName = goalAssignedEntityConfigRec.getValue('assigned_entity_table');
           var gr = new GlideRecord(entityTableName);
		   if(!gr.isValid()) continue;
           var label = gr.getClassDisplayValue();
		   list.add(new GlideChoice(entityTableName, label));
		}
        return list;
	},

	getAssignedEntityReferenceColumn: function(assignedEntityType){
        var goalAssignedEntityConfigRec = new GlideRecord(GoalFrameworkConstants.GOAL_ASSIGNED_ENTITY_CONFIG_TABLE);
		goalAssignedEntityConfigRec.addQuery('assigned_entity_table', assignedEntityType);
		goalAssignedEntityConfigRec.query();

        if(goalAssignedEntityConfigRec.next()){
           return goalAssignedEntityConfigRec.getValue('assigned_entity_field');
		}
        return '';
	},

	syncReferenceFieldToAssignedEntityCondition: function() {
        var isPortfolioMgmtInstalled = GlidePluginManager.isActive('com.snc.portfolio_management');
        var isAPWAdvancedInstalled = GlidePluginManager.isActive('sn_apw_advanced');
        return !this.goalGR.assigned_entity.changes() &amp;&amp; (this.goalGR.company.changes() ||
            this.goalGR.business_unit.changes() ||
            this.goalGR.department.changes() ||
            (isPortfolioMgmtInstalled &amp;&amp; this.goalGR.portfolio.changes()) ||
            (isAPWAdvancedInstalled &amp;&amp; this.goalGR.product_model.changes()) ||
            (isAPWAdvancedInstalled &amp;&amp; this.goalGR.initiative.changes()) ||
            (isAPWAdvancedInstalled &amp;&amp; this.goalGR.strategic_program.changes()));
    },
	
    type: 'GFGoal'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-07-17 10:05:08&lt;/sys_created_on&gt;
        &lt;sys_id&gt;80538193535130103913ddeeff7b12b8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GFGoal&lt;/sys_name&gt;
        &lt;sys_package display_value="Goal Framework" source="sn_gf"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Goal Framework"&gt;11879041532030103913ddeeff7b12d8&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_80538193535130103913ddeeff7b12b8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-05 09:00:07&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:25</sys_created_on>
        <sys_id>ef27309d83f01210c6695855eeaad3eb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GFGoal</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_ef27309d83f01210c6695855eeaad3eb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:25</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
