<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!current.isActionAborted() &amp;&amp; current.run_calc_brs != false</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>DeleteRelationship</name>
        <order>10000</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

   recalculateProject();
    
    function recalculateProject() {
        var plannedTask = new GlideRecord("planned_task");
        plannedTask.get(current.child);
        if (plannedTask !=null) {
           var api = new SNC.PlannedTaskAPI();
           var recalculationConstraintsStrategy = new RecalculationConstraintsStrategy();
     api.setConstraints(recalculationConstraintsStrategy.recalculationConstraint(plannedTask.top_task.getRefRecord()));
           var jsonRet = api.recalculateRelation(current, plannedTask.top_task, current.operation()); 
     var response = new JSON().decode(jsonRet); 
     if(response.status == 'error'){
      gs.addErrorMessage(response.message);
      gs.info("Aborting BusinessRule DeleteRelationship "+ response.message);
      current.setAbortAction(true);
      return;
     } 

     PostEngineHandlers.fire(plannedTask.top_task, jsonRet, previous, current);
   
     if ( JSUtil.notNil(current.getValue('orig_sys_id')) ) {
      //downstream shadow got deleted - we will delete the external relation
      var gr = new GlideRecord('planned_task_rel_planned_task');
      if ( gr.get(current.getValue('orig_sys_id')) ) 
       gr.deleteRecord(); //this will fire InterProjectRelationDeleteHandler and do cleanup
     }
        } else {
            gs.addInfoMessage(gs.getMessage("RecalculateParentPlannedTask: planned_task not found {0} parent={1}", [current.type.name, current.parent]));
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:47</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d30c289583701210c6695855eeaad3ca</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DeleteRelationship</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_d30c289583701210c6695855eeaad3ca</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:47</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=d30c289583701210c6695855eeaad3ca"/>
</record_update>
