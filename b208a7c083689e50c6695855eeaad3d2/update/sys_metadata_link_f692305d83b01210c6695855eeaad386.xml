<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>18d1e91f1bf32010ac52ba63cc4bcb97</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_fix"&gt;
    &lt;sys_script_fix action="INSERT_OR_UPDATE"&gt;
        &lt;before&gt;false&lt;/before&gt;
        &lt;description/&gt;
        &lt;name&gt;Update FSM Mobile To Rome&lt;/name&gt;
        &lt;record_for_rollback&gt;false&lt;/record_for_rollback&gt;
        &lt;script&gt;&lt;![CDATA[var collisionCheckInRome = function () {
    var output = {};
    output.msg = "";
    output.customizedRecordStrList = [];
    output.deactivateFuncInstStrList = [];
    output.deleteRecordList = [];
    output.oldFunctionInstanceList = [];

    var SCREEN_TABLE = "sys_sg_screen";
    var RELATED_LIST_SCREEN_TABLE = "sys_sg_related_lists_screen";
    var FORM_SEGMENT_TABLE = "sys_sg_form_segment";
    var FUNCTION_TABLE = "sys_sg_button";
    var FUNCTION_INSTANCE_TABLE = "sys_sg_button_instance";
    var ITEM_VIEW_TABLE = "sys_sg_item_view";
    var FORM_SCREEN_TABLE = "sys_sg_form_screen";
    var ITEM_CONFIGURATION_TABLE = "sys_sg_master_item";

    addMsg("Start process FSM Mobile upgrade fix to avoid overriding customized records at " + getCurrentTimestamp());
    var gcd = GlideCollisionDetector.get();
    processCollisionCheck();
    function processCollisionCheck() {
        if (gs.nil(gcd)) {
            addMsg("Error in initiating GlideCollisionDetector.");
            addMsg("Ended.");
            printMsg();
            return;
        }
        /**For existing customers, show the original "Related Lists" (bdb0a299e781230003cd6188d2f6a958)
            * by leaving alone the form screen segment 6b2c2f7253b0330097a2ddeeff7b1287
            * and hide the new "Related Lists" (3b5c37a0b72220107be0e34e9e11a917)
            * by deleting sys_sg_form_segment_ 312100f4b72220107be0e34e9e11a9f7
            * (if possible, replace with new ones if no customizations were made to the original ones)
            * */
        addMsg("Process list screens...");
        processRelatedListScreen("6b2c2f7253b0330097a2ddeeff7b1287", "312100f4b72220107be0e34e9e11a9f7");

        /** 
            List of functions
            Log Incidentals
                func: ded92f80b7c22010f49afc54ce11a912
                - existing customers should continue to see the original 3 Incidental buttons
                    Log Car Rental 
                        63bbeedbb7160010d518fc54ce11a96d
                    Log Mileage
                        80bbeedbb7160010d518fc54ce11a90a
                    Log Vendor Cost
                        05db6edbb7160010d518fc54ce11a9d0
            Edit Incidentals
                func: ded92f80b7c22010f49afc54ce11a912
                - existing customers should continue to see the original 3 Incidental buttons
                    Edit Mileage
                        44c55e43b7760010d518fc54ce11a9e1
                        833a5e07b7760010d518fc54ce11a9c7
                    Edit Vendor Cost
                        43d55e43b7760010d518fc54ce11a9e6
                        9a4a5e07b7760010d518fc54ce11a9e2
                    Edit Car Rental
                        bb2a1e07b7760010d518fc54ce11a9ba
                        6bedb3f2b7c70010d518fc54ce11a938
            Create event
                new func: cb7b2c96b72120107be0e34e9e11a93a
                old func instance:
                    9b91169be7322300352d6188d2f6a986

            Edit event
                new func: 887985f62fb520100d1b2e5df699b64e
                old func instance:
                    6c22efd4738133003ccc12562ef6a73d
            Reject Task
                new func: 371e5d16c7ad20104c1bf9f91dc26097
                old func instances:
                    b24490ef7374330051fa56f77bf6a73a
                    025076aa73812300a26e12562ef6a710
                    295e932ae7c1230003cd6188d2f6a98f
                    3dc4b940e781230003cd6188d2f6a904
            Close Complete
                new func: 5b282d230fa12010bc89378dc4767e62
                old function instance:
                    9d361c2373b4330051fa56f77bf6a788
                    efb17eaa73812300a26e12562ef6a764
            Close Incomplete
                new func: 1f8821630fa12010bc89378dc4767e84
                old func instances:
                    f4e1beaa73812300a26e12562ef6a786
                    0742dfd0e741230003cd6188d2f6a973
            Record Time
                new func e5b32c59777220107be09c297910616f
                old sys_sg_button_instance_ 3ddbbb6573412300a26e12562ef6a7a7.xml
            */
        addMsg("Process function instances...");
        processFunctionInstance(
            ["63bbeedbb7160010d518fc54ce11a96d",
                "80bbeedbb7160010d518fc54ce11a90a",
                "05db6edbb7160010d518fc54ce11a9d0"],
            "ded92f80b7c22010f49afc54ce11a912"
        );
        processFunctionInstance(
            ["44c55e43b7760010d518fc54ce11a9e1",
                "833a5e07b7760010d518fc54ce11a9c7",
                "43d55e43b7760010d518fc54ce11a9e6",
                "9a4a5e07b7760010d518fc54ce11a9e2",
                "bb2a1e07b7760010d518fc54ce11a9ba",
                "6bedb3f2b7c70010d518fc54ce11a938"],
            "ded92f80b7c22010f49afc54ce11a912"
        );
        processFunctionInstance(
            ["9b91169be7322300352d6188d2f6a986"],
            "cb7b2c96b72120107be0e34e9e11a93a"
        );
        processFunctionInstance(
            ["6c22efd4738133003ccc12562ef6a73d"],
            "887985f62fb520100d1b2e5df699b64e"
        );
        processFunctionInstance(
            ["b24490ef7374330051fa56f77bf6a73a",
                "025076aa73812300a26e12562ef6a710",
                "295e932ae7c1230003cd6188d2f6a98f",
                "3dc4b940e781230003cd6188d2f6a904"],
            "371e5d16c7ad20104c1bf9f91dc26097"
        );
        processFunctionInstance(
            ["9d361c2373b4330051fa56f77bf6a788",
                "efb17eaa73812300a26e12562ef6a764"],
            "5b282d230fa12010bc89378dc4767e62"
        );
        processFunctionInstance(
            ["f4e1beaa73812300a26e12562ef6a786",
                "0742dfd0e741230003cd6188d2f6a973"],
            "1f8821630fa12010bc89378dc4767e84"
        );
        processFunctionInstance(
            ["3ddbbb6573412300a26e12562ef6a7a7"],
            "e5b32c59777220107be09c297910616f"
        );
        printStringsFromList(output.deactivateFuncInstStrList, "deactivated function instances");

        /** 
            sys_sg_form_screen Incidental 79f386c7b7360010d518fc54ce11a9af
                item view 7a5b5786e7c1230003cd6188d2f6a93d        
                    handle the fields in the Incidental form
                        cost sys_sg_screen_field_ 1a0816c3b7760010d518fc54ce11a953.xml
                        type sys_sg_screen_field_ 560816c3b7760010d518fc54ce11a94e.xml 
                        contract sys_sg_screen_field_ 5e0816c3b7760010d518fc54ce11a95d.xml
                        expense_line sys_sg_screen_field_ da0816c3b7760010d518fc54ce11a959.xml 
                        description sys_sg_screen_field_ 1e0816c3b7760010d518fc54ce11a95b.xml
                    handle addition of field
                        parent_task.number sys_sg_screen_field_ 9ba2218cc78220104c1bf9f91dc260e0.xml
                    handle the UI Policy
                        Hide Field When Incidentals Type Is Mileage
                            sys_sg_ui_policy_rule_ bde8dec3b7760010d518fc54ce11a951.xml
            sys_sg_master_item - Service Management Incidental f22b1786e7c1230003cd6188d2f6a917
                item view 7a5b5786e7c1230003cd6188d2f6a93d
            sys_sg_form_screen Work Order Task screen 832c2f7253b0330097a2ddeeff7b1200
                item view fb7cf544e781230003cd6188d2f6a9fc
                ensure we handle delete of state field in wm_task Details form section correctly
            sys_sg_master_item 1c2e92a273812300a26e12562ef6a76e
                item view e1ff1ea273812300a26e12562ef6a782
            sys_sg_master_item 33feb15453112300ff25ddeeff7b1276
                item view 058025e853512300ff25ddeeff7b1287
            sys_sg_master_item 4b76cef5c35b1010514741e67d40dd47
                item view 4376cef5c35b1010514741e67d40dd3f
            sys_sg_master_item 57fce4f473212300a26e12562ef6a7b6
                item view d05de8f473212300a26e12562ef6a75f
            sys_sg_master_item 9a6ddbe6e7c1230003cd6188d2f6a917
                item view d6a30173e7b0230003cd6188d2f6a9ba
            sys_sg_master_item ad14c173e7b0230003cd6188d2f6a958
                item view d6a30173e7b0230003cd6188d2f6a9ba
            sys_sg_master_item da1f7958e711230003cd6188d2f6a979
                item view d6a30173e7b0230003cd6188d2f6a9ba
            11
            */
        addMsg("Process view cards...");
        if (processItemViewInFormScreen("7a5b5786e7c1230003cd6188d2f6a93d", "79f386c7b7360010d518fc54ce11a9af")) {
            // set fields back to visible when the old item view has been customized
            toggleScreenField("1a0816c3b7760010d518fc54ce11a953", false); // cost
            toggleScreenField("560816c3b7760010d518fc54ce11a94e", false); // type
            toggleScreenField("5e0816c3b7760010d518fc54ce11a95d", false); // contract
            toggleScreenField("da0816c3b7760010d518fc54ce11a959", false); // expense_line
            toggleScreenField("1e0816c3b7760010d518fc54ce11a95b", false); // description
            // hide the new field parent_task.number
            toggleScreenField("9ba2218cc78220104c1bf9f91dc260e0", true);
            // reset the ui policy rule that hides the cost
            toggleUIPolicyRuleVisibility("bde8dec3b7760010d518fc54ce11a951", true);

        }
        processItemViewInItemConfiguration("7a5b5786e7c1230003cd6188d2f6a93d", "f22b1786e7c1230003cd6188d2f6a917");
        if (processItemViewInFormScreen("fb7cf544e781230003cd6188d2f6a9fc", "832c2f7253b0330097a2ddeeff7b1200")) {
            // set state field back to visible when the old item view has been customized
            toggleScreenField("10ac3944e781230003cd6188d2f6a9fe", false);
        }
        processItemViewInItemConfiguration("e1ff1ea273812300a26e12562ef6a782", "1c2e92a273812300a26e12562ef6a76e");
        processItemViewInItemConfiguration("4376cef5c35b1010514741e67d40dd3f", "4b76cef5c35b1010514741e67d40dd47");
        processItemViewInItemConfiguration("d05de8f473212300a26e12562ef6a75f", "57fce4f473212300a26e12562ef6a7b6");
        processItemViewInItemConfiguration("d6a30173e7b0230003cd6188d2f6a9ba", "9a6ddbe6e7c1230003cd6188d2f6a917");
        processItemViewInItemConfiguration("d6a30173e7b0230003cd6188d2f6a9ba", "ad14c173e7b0230003cd6188d2f6a958");
        processItemViewInItemConfiguration("d6a30173e7b0230003cd6188d2f6a9ba", "da1f7958e711230003cd6188d2f6a979");

        printStringsFromList(output.customizedRecordStrList, "customized records");
        addMsg("End process FSM Mobile upgrade fix to avoid overriding customized records at " + getCurrentTimestamp());
        printMsg();
    }



    // utils
    function addMsg(msg) { output.msg += msg + "\n"; }
    function printMsg(msg) {
        gs.info("FSM Mobile upgrade fix output at " + getCurrentTimestamp() + "\n" + (msg ? msg : output.msg));
        output.msg = "";
    }
    function getRecInfoStr(gr) {
        var res = [
            gr.sys_class_name,
            gr.sys_id,
            gr.sys_created_by,
            gr.sys_updated_by,
            gr.name
        ];
        return res.join("|");
    }
    function getCurrentTimestamp() {
        var d = new GlideDateTime();
        var ms = d.getNumericValue();
        return (d + '(' + ms + ')');
    }
    function isCustomized(gr) {
        var updateName = gr.sys_update_name + "";
        if (gcd.containsKey(updateName)) {
            addMsg("!Detected customization in " + updateName);
            if (output.customizedRecordStrList.indexOf(updateName) &lt; 0) {
                output.customizedRecordStrList.push(updateName);
            }
            return true;
        }
        return false;
    }
    function printStringsFromList(arry, recordName) {
        printList(arry, recordName, true);
    }
    function printList(arry, recordName, isStringType) {
        addMsg("Total number of " + recordName + ": " + arry.length);
        for (var i = 0; i &lt; arry.length; i++) {
            var msg = isStringType ? arry[i] : getRecInfoStr(arry[i]);
            addMsg(msg);
        }
    }
    // screen helpers

    // check related list screen
    // by checking if the old form screen segment () exists
    function processRelatedListScreen(oldFormSegmentSysId, newFormSegmentSysId) {
        var formSegmentGr = getRecord(oldFormSegmentSysId, FORM_SEGMENT_TABLE);
        if (formSegmentGr) {
            addMsg("Form segment exists: " + oldFormSegmentSysId);
            return deleteFormSegment(newFormSegmentSysId);
        }
        addMsg("Old form segment doesn't exist. Leaving new form segment alone: " + newFormSegmentSysId);
        return false;
    }

    function deleteFormSegment(formSegmentSysId) {
        var formSegmentGr = getRecord(formSegmentSysId, FORM_SEGMENT_TABLE);
        if (formSegmentGr) {
            addMsg("Deleting form segment: " + formSegmentGr.sys_update_name);
            formSegmentGr.deleteRecord();
            return true;
        }
        return false;
    }
    function getRecord(sysId, tableName) {
        var gr = new GlideRecord(tableName);
        if (gr.get(sysId)) {
            addMsg("Get " + gr.sys_update_name);
            return gr;
        }
        addMsg("Record not found: " + sysId + '|' + tableName);
        return false;
    }

    // button helpers

    /** check all the existing function instances
        * deactivate all the new function instances once one of the existing function
        * instance is found as customized.
        */
    function processFunctionInstance(oldFunctionInstanceSysIds, newFunctionSysId) {
        addMsg("New function - " + newFunctionSysId);
        var hasCustomization = false;
        output.oldFunctionInstanceList = output.oldFunctionInstanceList.concat(oldFunctionInstanceSysIds);
        for (var i = 0; i &lt; oldFunctionInstanceSysIds.length; i++) {
            var oldFunctionInstanceSysId = oldFunctionInstanceSysIds[i];
            addMsg("&gt;|Old function instance - " + oldFunctionInstanceSysId);
            var oldFunctionInstanceGr = new GlideRecord(FUNCTION_INSTANCE_TABLE);
            oldFunctionInstanceGr.addQuery("active", true); // only consider the active ones
            oldFunctionInstanceGr.addQuery("sys_id", oldFunctionInstanceSysId);
            oldFunctionInstanceGr.query();
            if (!oldFunctionInstanceGr.next()) {
                addMsg("Old function instance is not found: " + oldFunctionInstanceSysId);
                continue;
            }
            if (isFuncInstCustomized(oldFunctionInstanceGr)) {
                hasCustomization = true;
                break;
            }
        }
        if (hasCustomization) {
            // get all function instances linked to the new function
            var functionInstanceGr = new GlideRecord(FUNCTION_INSTANCE_TABLE);
            functionInstanceGr.addQuery("button", newFunctionSysId);
            functionInstanceGr.addQuery("active", true);
            functionInstanceGr.query();
            // get all the function instances linked to the new function and check
            // if it is existing and customized.
            while (functionInstanceGr.next() &amp;&amp; !isCustomized(functionInstanceGr)) {
                deactivateFunctionInstance(functionInstanceGr);
            }
        } else {
            addMsg("No customizations are found.");
            // deactivating all the old function instances
            for (var i = 0; i &lt; oldFunctionInstanceSysIds.length; i++) {
                var oldFunctionInstanceGr = new GlideRecord(FUNCTION_INSTANCE_TABLE);
                oldFunctionInstanceGr.addQuery("active", true);
                oldFunctionInstanceGr.addQuery("sys_id", oldFunctionInstanceSysIds[i]);
                oldFunctionInstanceGr.query();
                if (oldFunctionInstanceGr.next()) {
                    deactivateFunctionInstance(oldFunctionInstanceGr);
                }
            }
        }
        return hasCustomization;
    }
    function isFuncInstCustomized(funcInstGr) {
        addMsg("&gt; " + getRecInfoStr(funcInstGr));
        if (isCustomized(funcInstGr)) {
            return true;
        }
        // check function
        var functionGr = funcInstGr.button.getRefRecord();
        addMsg("&gt;&gt; " + getRecInfoStr(functionGr));
        if (!gs.nil(functionGr) &amp;&amp; isFunctionCustomized(functionGr)) {
            return true;
        }
        return false;
    }
    function isFunctionCustomized(functionGr) {
        if (isCustomized(functionGr)) {
            return true;
        }
        // check action item
        var actionItemGr = functionGr.write_back_action_item.getRefRecord();
        if (!gs.nil(actionItemGr)) {
            addMsg("&gt;&gt;&gt; " + getRecInfoStr(actionItemGr));
            if (isCustomized(actionItemGr)) {
                return true;
            }
        }
        return false;
    }
    function deactivateFunctionInstance(gr) {
        output.deactivateFuncInstStrList.push(getRecInfoStr(gr));
        addMsg("Deactivating " + getRecInfoStr(gr));
        gr.active = false;
        gr.update();
    }

    // form and view helper

    // if the old item view has been customized revert the view config change or new item
    // view change on the form screen
    function processItemViewInFormScreen(oldItemViewSysId, formScreenSysId) {
        return processItemView(oldItemViewSysId, formScreenSysId, FORM_SCREEN_TABLE);
    }
    function processItemViewInItemConfiguration(oldItemViewSysId, itemConfigSysId) {
        return processItemView(oldItemViewSysId, itemConfigSysId, ITEM_CONFIGURATION_TABLE);
    }

    function processItemView(oldItemViewSysId, sourceSysId, sourceTable) {
        if (sourceTable != ITEM_CONFIGURATION_TABLE &amp;&amp; sourceTable != FORM_SCREEN_TABLE) {
            addMsg("The source table is invalid: " + sourceTable + '|' + sourceSysId);
            return false;
        }
        var oldItemViewGr = new GlideRecord(ITEM_VIEW_TABLE);
        if (!oldItemViewGr.get(oldItemViewSysId)) {
            addMsg("The item view record is invalid: " + ITEM_VIEW_TABLE + '|' + oldItemViewSysId);
            return false;
        }
        addMsg("&gt;" + getRecInfoStr(oldItemViewGr));
        addMsg("&gt;| " + sourceTable + '|' + sourceSysId);
        if (isCustomized(oldItemViewGr)) {
            var sourceGr = new GlideRecord(sourceTable);
            if (!sourceGr.get(sourceSysId)) {
                addMsg("The source record is invalid: " + sourceTable + '|' + sourceSysId);
                return false;
            }
            addMsg("&gt;&gt; " + getRecInfoStr(sourceGr));
            if (!isCustomized(sourceGr)) {
                // undo the change from the new item view
                addMsg("Reverting the view config change on " + sourceGr.sys_update_name);
                // check item view
                var hasChanges = false;
                if (sourceGr.getValue("item_view") != oldItemViewSysId) {
                    sourceGr.setValue("item_view", oldItemViewSysId);
                    hasChanges = true;
                }
                // check view config
                if (sourceGr.getValue("use_view_config")) {
                    sourceGr.setValue("use_view_config", false);
                    sourceGr.setValue("item_view", oldItemViewSysId);
                    hasChanges = true;
                }
                if (hasChanges) {
                    sourceGr.update();
                }
            }
            return true;
        }
        return false;
    }
    function toggleScreenField(screenFieldSysId, isHidden) {
        var screenFieldGr = new GlideRecord("sys_sg_screen_field");
        if (screenFieldGr.get(screenFieldSysId)) {
            addMsg(screenFieldGr.sys_update_name + '|' + screenFieldGr.data_item_field_name + '|' + screenFieldGr.screen_data_item_table);
            addMsg("|setting the hidden value of field to " + isHidden);
            if (screenFieldGr.getValue("hidden") != isHidden) {
                screenFieldGr.setValue("hidden", isHidden);
                screenFieldGr.update();
            }
        }
    }
    function toggleUIPolicyRuleVisibility(uiPolicyRuleSysId, isVisible) {
        var uiPolicyRuleGr = new GlideRecord("sys_sg_ui_policy_rule");
        if (uiPolicyRuleGr.get(uiPolicyRuleSysId)) {
            addMsg(uiPolicyRuleGr.sys_update_name + '|' + uiPolicyRuleGr.field + '|' + '|' + uiPolicyRuleGr.ui_policy.name);
            addMsg("|toggling UI Policy rule visibility to " + isVisible);
            if (uiPolicyRuleGr.getValue("visible") != isVisible) {
                uiPolicyRuleGr.setValue("visible", isVisible);
                uiPolicyRuleGr.update();
            }
        }
    }
};
collisionCheckInRome();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_fix&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-05-03 22:44:07&lt;/sys_created_on&gt;
        &lt;sys_id&gt;18d1e91f1bf32010ac52ba63cc4bcb97&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Update FSM Mobile To Rome&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;25371ef01b8a21109c18a9f9bc4bcb1e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_fix_18d1e91f1bf32010ac52ba63cc4bcb97&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-05-04 17:21:42&lt;/sys_updated_on&gt;
        &lt;unloadable&gt;false&lt;/unloadable&gt;
    &lt;/sys_script_fix&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:19:26</sys_created_on>
        <sys_id>f692305d83b01210c6695855eeaad386</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update FSM Mobile To Rome</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f692305d83b01210c6695855eeaad386</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:19:26</sys_updated_on>
        <tablename>sys_script_fix</tablename>
    </sys_metadata_link>
</record_update>
