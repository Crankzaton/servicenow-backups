<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>VariableAcceleratorUtil.shouldPrefillPrompt(GlideTransaction.get())</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Prefill for editing</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) { 
 var prompt_id = GlideTransaction.get().getRequestParameter("sysparm_prompt_id") + "";
 gs.debug("Prompt id {0}", prompt_id);
 
 if (prompt_id && typeof prompt_id == "string" && prompt_id.length == 32)
  setPromptInfo(current, prompt_id);
 
 if (current.getValue("variable"))
  setVariableInfo(current, current.getValue("variable"));
 else
  current.setValue("type", "output");
 
 // Add your code here

 function setPromptInfo(current, prompt_id) {
  gs.debug("Looking up existing prompt {0}", prompt_id);
  
  var node = new GlideRecord("sys_cb_node");
  if (node.get(prompt_id)) {
   gs.debug("Prompt class is {0} and id is {1}", node.getRecordClassName(), prompt_id);
   current.setValue("existing_prompt", node.getUniqueValue());
   current.setValue("topic", node.topic_goal.topic);
   current.setValue("topic_goal", node.getValue("topic_goal"));
   current.setValue("parent", node.getValue("parent"));
   current.setValue("prompt_label", node.getValue("name"));

   var realPrompt = new GlideRecord(node.getRecordClassName());
   realPrompt.get(node.getUniqueValue());
   
   if (realPrompt.prompt_msg.hasMapping())
    current.prompt_msg.setValueMapping(realPrompt.prompt_msg.getValueMapping());
   else
    current.setValue("prompt_msg", realPrompt.getValue("prompt_msg"));
   
   if (realPrompt.acknowledge_msg.hasMapping())
    current.acknowledge_msg.setValueMapping(realPrompt.acknowledge_msg.getValueMapping());
   else
    current.setValue("acknowledge_msg", realPrompt.getValue("acknowledge_msg"));

   if (realPrompt.reference_nil.hasMapping())
    current.reference_nil.setValueMapping(realPrompt.reference_nil.getValueMapping());
   else
    current.setValue("reference_nil", realPrompt.getValue("reference_nil"));

   current.setValue("variable_table", realPrompt.getValue("variable_table"));
   current.setValue("variable", realPrompt.getValue("variable"));
   current.setValue("optional", realPrompt.getValue("optional"));

   
   gs.debug("Setting prompt {0}, acknowledge {1}, and variable {2}",
      current.getValue("prompt_msg"),
      current.getValue("acknowledge_msg"),
      current.getValue("variable")
     );
   
  } else {
   gs.debug("Existing prompt {0} not found", prompt_id);
  }
  
 }
 
 function setVariableInfo(current, variable_name) {
  gs.debug("Setting up variable {0}", variable_name);
  if (!variable_name)
   return;
  
  var variable = new GlideRecord("topic_variable");
  variable.addQuery("element", variable_name);
  variable.addQuery("model", current.topic_goal.topic);
  variable.query();
  
  gs.debug("Looking up variable with query {0}, found one? {1}", variable.getEncodedQuery(), variable.hasNext());
  
  if (!variable.next())
   return;
  
  current.setValue("type", variable.getValue("internal_type"));
  current.setValue("default_value", variable.getValue("default_value"));
  current.setValue("name", variable.getValue("label"));
  current.setValue("column", variable.getValue("element"));
  
  switch (variable.getValue("internal_type")) {
   case "choice" : setChoiceValues(current, variable);
    break;
   case "reference" : setReferenceValues(current, variable);
    break;
   case "url" : setUrlValues(current, variable);
    break;
   
   case "string" : 
   case "boolean" :
   case "ph_number" :
   case "glide_date_time" :
   case "email" :
   case "user_image" :
   case "guid" :
   case "integer" :
    setStringValues(current, variable);
    break;
   default: setStringValues(current, variable);
  }

 }
 
 function setChoiceValues(current, variable) {
  //first, get the choices and their values
  gs.debug("Searching for choices for variable {0} in table {1}",
    variable.getValue("element"),
    variable.getValue("name")
    );
  
  current.setValue("choice_type", variable.getValue("choice"));
  
  var choices = new GlideRecord("sys_choice");
  choices.addQuery("name", variable.getValue("name"));
  choices.addQuery("element", variable.getValue("element"));
  
  choices.query();
  gs.debug("Choice query: {0}", choices.getEncodedQuery());
  gs.debug("Choices found? {0}", choices.hasNext());
  
  var found = choices.hasNext();
  if (!found)
   return;
  
  var simple_choice_object = {};
  while (choices.next())
   simple_choice_object[choices.getValue("label")] = choices.getValue("value");
  
  current.setValue("choices", JSON.stringify(simple_choice_object));
 }
 
 function setReferenceValues(current, variable) {
  gs.debug("Setting reference values");
  current.setValue("table", variable.getValue("reference"));
  
  gs.debug("Setting variable condition.");
  
  if (variable.reference_qual_condition.hasMapping()) {
   gs.debug("Variable condition has mapping. Setting value to {0}",
     variable.reference_qual_condition.getValueMapping());
   current.reference_condition.setValueMapping(        variable.reference_qual_condition.getValueMapping());
  } else {
   gs.debug("Reference qualifier does not have mapping, setting value to {0}",
     variable.getValue("reference_qual_condition"));
   current.setValue("reference_condition", variable.getValue("reference_qual_condition"));
  }
  current.setValue("limit", variable.getValue("limit"));
   
 }
 
 function setStringValues() {
  //do we have anything to set here?
 }
 
 function setUrlValues(current, variable) {
  gs.debug("Adding URL parameters");
  gs.debug("Params have mapping? {0}", variable.query_parameters.hasMapping());
  
  if (variable.query_parameters.hasMapping())
   current.query_parameters.setValueMapping(variable.query_parameters.getValueMapping());
  else
   current.setValue("query_parameters", variable.getValue("query_parameters"));
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:53:27</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>12ac689983701210c6695855eeaad3be</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Prefill for editing</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_12ac689983701210c6695855eeaad3be</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:53:27</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=12ac689983701210c6695855eeaad3be"/>
</record_update>
