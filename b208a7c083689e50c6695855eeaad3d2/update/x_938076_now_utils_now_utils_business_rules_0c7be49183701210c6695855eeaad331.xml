<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Interaction - On Abandoned</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var chatInteractionUtil = new ChatInteractionUtil();
    var canSendMessages = new InteractionTypeUtil().canSendMessages(current);
    var chatLogger = new global.ChatLogger("", current.sys_id);
    var requesterLanguage = chatInteractionUtil.getRequesterLanguage(current);
    //Use agent's language if requester abandon the session and dynamic translation is ON
    var language = chatInteractionUtil.getDynamicTranslateLanguage(current);

    var conversation = sn_connect.Conversation.get(current.channel_metadata_document, current.channel_metadata_table);

    var requesterAbandoned = hasRequesterAbandoned(current);
    var loggingInfo = "";
    if (requesterAbandoned) {
        var currentOpenedFor = current.opened_for.getDisplayValue();
        if (canSendMessages) {
            chatInteractionUtil.sendSystemMessage(conversation, '{0} has left the conversation.', requesterLanguage, language, currentOpenedFor, null, null);
        }
        loggingInfo = "requester " + currentOpenedFor + " left the conversation";
    } else if (gs.nil(current.getValue('assigned_to'))) {
        var deviceType = conversation.getDeviceType();
        var isMweb = (deviceType.equalsIgnoreCase('mweb') || deviceType.equalsIgnoreCase('android') || deviceType.equalsIgnoreCase('ios'));
        if (isMweb) {
          conversation.sendMessage({
             body: "none",
             type: "endSpinner"
          });
        }

        loggingInfo = "there are no agents available";
        if (canSendMessages) {
            var workItemGr = new GlideRecord('awa_work_item');
            workItemGr.addQuery('document_table', 'interaction');
            workItemGr.addQuery('document_id', current.sys_id);
            workItemGr.query();

            if (workItemGr.next()) {
                var noAgentMessage = sn_interaction_awa.MessageLocalization.getLocalizedAgentMessage('awa_queue', 'max_wait_time_message', workItemGr.queue.max_wait_time_message, requesterLanguage);
                if (!gs.nil(noAgentMessage)) {
                    conversation.sendMessage({
                        body: noAgentMessage,
                        system: true
                    });

                } else {
                    sendNoAgentAvailableMessage(conversation, requesterLanguage);
                }
            } else {
                sendNoAgentAvailableMessage(conversation, requesterLanguage);
            }
        }
    }
    chatLogger.log("Interaction - On Abandoned, " + loggingInfo);
    new SNC.ConnectListeners().supportSessionClosed(current.channel_metadata_document);
})(current, previous);

function hasRequesterAbandoned(interaction) {
    var status = false;
    var conversationGR = new GlideRecord('sys_cs_conversation');
    if (!conversationGR.get(interaction.channel_metadata_document))
        return false;

    return conversationGR.getValue('state') == 'faulted';
}

function sendNoAgentAvailableMessage(conversation, requesterLanguage) {
    var gr = new GlideRecord('sys_cs_live_agent_setup');
    gr.addQuery('name', 'Chat Setup');
    gr.query();
    if (gr.next()) {
        var noAgentMessage = gr.getValue('no_agent_available_message');
        // DEF0433360: If neither queue or chat setup has a message setup when no agents are available, send a default message
        if (gs.nil(noAgentMessage)) {
            noAgentMessage = "There are no agents available at the moment. Please try again later.";
        }
        conversation.sendMessage({
            body: gs.getMessageLang(noAgentMessage, requesterLanguage),
            system: true
        });
    }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:06</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0c7be49183701210c6695855eeaad331</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Interaction - On Abandoned</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_0c7be49183701210c6695855eeaad331</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:06</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=0c7be49183701210c6695855eeaad331"/>
</record_update>
