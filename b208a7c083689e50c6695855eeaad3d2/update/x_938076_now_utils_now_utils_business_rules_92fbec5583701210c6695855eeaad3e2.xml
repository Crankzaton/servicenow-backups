<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>sn_nlu_workbench.NLUBatchTestIntegrator.isTrainingModeValid(current)</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NLU batch test run - process results</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var tables = sn_nlu_workbench.NLUWorkbenchConstants.tables;
    var SOLUTION_STATES = sn_nlu_workbench.NLUWorkbenchConstants.SOLUTION_STATES;
    var EXECUTION_STATUS = sn_nlu_workbench.NLUWorkbenchConstants.EXECUTION_STATUS;

    var testExecution;
    try {
        // Get the execution record: 
        var executionGr = new GlideRecord(tables.NLU_BATCH_TEST_RUN_EXECUTION);
        if (executionGr.get('solution', current.sys_id)) {
            testExecution = new sn_nlu_workbench.NLUBatchTestExecution(null, executionGr);
            var status = current.getValue('state');

            if (status === SOLUTION_STATES.TRAIN_SUCCESS_STATE) {
                testExecution.updateStatus(EXECUTION_STATUS.PROCESSING_RESULTS);
                sn_nlu_workbench.NLUBatchTestResultsProcessor.processInBackground(testExecution.getId());
            } else if (status === SOLUTION_STATES.TRAIN_TIMEOUT_STATE) {
                testExecution.updateStatus(EXECUTION_STATUS.REQUEST_TIMEOUT);
            } else if (SOLUTION_STATES.TRAIN_ERROR_STATES.indexOf(status) !== -1) {
                testExecution.updateStatus(EXECUTION_STATUS.FAILED);
            } else if (status === SOLUTION_STATES.TRAIN_CANCELLED_STATE) {
                testExecution.updateStatus(EXECUTION_STATUS.CANCELLED);
            }
        }
    } catch (ex) {
        gs.error('Failed to process batch test results: ' + ex.message);
        testExecution && testExecution.updateStatus(EXECUTION_STATUS.FAILED);
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:50:27</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>92fbec5583701210c6695855eeaad3e2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NLU batch test run - process results</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_92fbec5583701210c6695855eeaad3e2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:50:27</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=92fbec5583701210c6695855eeaad3e2"/>
</record_update>
