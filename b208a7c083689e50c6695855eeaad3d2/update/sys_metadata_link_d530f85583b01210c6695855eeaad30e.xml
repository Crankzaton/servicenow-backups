<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>019292f7132893009f325db12244b04b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.CloudMidSelectionApi&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Cloud management MID selection API. It should be used by all calls for requesting MIDs for cloud.&lt;/description&gt;
        &lt;name&gt;CloudMidSelectionApi&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CloudMidSelectionApi = Class.create();
CloudMidSelectionApi.prototype = {
    initialize: function() {},

    /*
     * Select a single mid for cloud
     * 
     * @param: {string} app Application calling this API (e.g. ServiceMapping)
     * @param: {string} provider provider. This won't be respected if ldc is passed in. Example here is AWS.
     * @param: {string} ldc Logical data center. 
     * @param: {object} context Extra context that callers needs to pass through that will be availabe at the MID selection override.   
     */
    selectMid: function(app, provider, ldc, context) {
        // initialize
        var midSelector = new SNC.MidSelector();
        var capabilities = [];
        var midServer = '';

        // By default we should have cloud management capability - since this is a cloud call
        capabilities.push({
            'capability': 'Cloud Management'
        });

        // If ldc is not specified - it is by provider (e.g. Ansible/Puppet)	
        // If ldc is specified we can get provider from ldc
        if (gs.nil(ldc)) {
            if (gs.nil(provider))
                throw 'Logical datacenter or provider has to be specified for cloud MID selection';

            // Simple add the provider as capability and all done
            capabilities.push({
                'capability': provider
            });

        } else {
            var glideUtil = new GlideRecordUtil();

            var dcType;
            //Try to figure out dcType from service account
            if (!gs.nil(context)) {
                var contextObj = JSON.parse(context);
                var cloudServiceAccountId = contextObj.service_account_id;

                if (!gs.nil(cloudServiceAccountId)) {
                    var servAcc = glideUtil.getGlideRecordByAttribute('cmdb_ci_cloud_service_account', 'account_id', cloudServiceAccountId);
                    if (servAcc.next())
                        dcType = servAcc.getValue('datacenter_type');
                }
            }

            if (gs.nil(dcType)) {
                // This should not happen - so we should throw an exception rather than simply warn and move on
                var ldcRec = glideUtil.getGlideRecordByAttribute('cmdb_ci_logical_datacenter', 'region', ldc);
                if (!ldcRec.next())
                    throw 'Logical datacenter ' + ldc + ' could not be found!';

                // This should never be null								
                dcType = ldcRec.getValue('sys_class_name');
            }
            // get the provider (cloudType) and add it as a capability
            var capiRec = glideUtil.getGlideRecordByAttribute('sn_capi_provider', 'datacenter_class', dcType);
            if (!capiRec.next())
                throw 'Provider not found for datacenterType ' + dcType + '!';

            var cloudType = capiRec.getValue('name');
            if (gs.nil(cloudType))
                throw 'Provider name is empty for datacenterType ' + dcType + '!';

            capabilities.push({
                'capability': cloudType,
                'value': ldc
            });

        }

        // Now we have everything set up - call the mid selector API to select one mid
        return midSelector.selectMid(app, null, capabilities, context);
    },

    type: 'CloudMidSelectionApi'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;amit.dhuleshia@snc&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-03-06 21:16:09&lt;/sys_created_on&gt;
        &lt;sys_id&gt;019292f7132893009f325db12244b04b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CloudMidSelectionApi&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Automation" source="com.snc.core.automation"&gt;6ca7f42c3cb1311068bcf327dfe37f6a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_019292f7132893009f325db12244b04b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-14 17:37:21&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:08:57</sys_created_on>
        <sys_id>d530f85583b01210c6695855eeaad30e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CloudMidSelectionApi</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d530f85583b01210c6695855eeaad30e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:08:57</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
