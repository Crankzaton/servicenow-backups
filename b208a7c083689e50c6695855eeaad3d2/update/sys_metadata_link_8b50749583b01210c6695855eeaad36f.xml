<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>09534be6a9a421d4f877bee6906445ac</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.DataExtractionConstants&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;DataExtractionConstants&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DataExtractionConstants = Class.create();
DataExtractionConstants.prototype = {
    initialize: function() {

        //Properties
        this.MAX_NUMBER_OTHER_FEATURES = this.getIntProperty(
            "max_number_other_features", -1
        );

        this.MAX_NUMBER_RECORDS_FOR_TRAINING = this.getIntProperty(
            "max_number_records_for_training", -1
        );

        this.MAX_PAGINATION_RECORDS = this.getIntProperty(
            "max_pagination_records", 5000, 5000
        );

        this.MAX_NUMBER_OF_ATTACHMENT_FOR_TRAINING = this.getIntProperty(
            "max_number_of_attachment_for_training", -1
        );

        this.MAX_BYTE_SIZE_FOR_ATTACHMENTS = this.getIntProperty(
            "max_byte_size_for_attachments", 5242880, 5242880
        );

        this.SUPPORTED_ATTACHMENT_TYPES = gs.getProperty(
            "glide.platform_ml_task.supported_attachment_types",
            "PDF,XLS,XLSX,DOCX,CSV,EML,TXT"
        ).split(",");

        // supported use cases
        this.SUPPORTED_USE_CASES = {
            "SINGLE_TABLE": "Single table",
            "TWO_TABLE_JOIN": "Two tables joined by a reference field",
            "TWO_TABLE_JOIN_WITH_M2M": "Two tables joined by a m2m table",
        };

        this.ERROR_TYPES = {
            "CONTRACT_DEFINITION_ERROR": "The contract is invalid or mandatory fields are missing",
            "USE_CASE_ERROR": "The contract do not describe a valid use case",
            "SECURITY_ERROR": "Invalid Access to the data",
            "VALIDATION_ERROR": "The tables, fields or encoded queries are invalid",
            "DATA_ERROR": "There was an error while processing the data",
            "UNKNOWN": "An error have happened, check logs for more info"
        };

        this.ALL_SUPPORTED_ATTACHMENT_TYPES = {
            "PDF": "application/pdf",
            "XLS": "application/vnd.ms-excel",
            "XLSX": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "DOCX": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "CSV": "text/csv",
            "EML": "message/rfc822",
            "TXT": "text/plain"
        };

        this.ORDER_TYPES = {
            "ASC": "Ascending",
            "DESC": "Descending",
            "EMPTY": "Empty" //default
        };

        this.OTHER_FEATURES_TYPES = {
            "ATTACHMENT": "attachment",
            "ARRAY": "array"
        };

        this.UNKNOWN_TAG = "UNKNOWN";
        this.ATTACHMMENT_LABEL = "attachmentText";
        this.ERROR_TYPE_KEY = "errorType";
        this.ERROR_MESSAGE_KEY = "errorMessages";
        this.VALID_ROTATION_TYPES = ["rotate"];
        this.TABLES = {
            SYS_ATTACHMENT: "sys_attachment",
            SYS_TABLE_ROTATION: "sys_table_rotation",
            SYS_TABLE_ROTATION_SCHEDULE: "sys_table_rotation_schedule"
        };
        this.READ_REPLICA_DB_CATEGORY = "task_intelligence";

    },

    getIntProperty: function(property, defaultValue, limit) {
        if (gs.nil(property))
            return null;

        var propertySuffix = "glide.platform_ml_task.";
        var propertyValue = parseInt(
            gs.getProperty(propertySuffix + property, defaultValue)
        ) || defaultValue;

        return (!gs.nil(limit) &amp;&amp; (propertyValue &gt; parseInt(limit))) ? parseInt(limit) : propertyValue;
    },

    type: 'DataExtractionConstants'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-25 17:15:00&lt;/sys_created_on&gt;
        &lt;sys_id&gt;09534be6a9a421d4f877bee6906445ac&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;64&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DataExtractionConstants&lt;/sys_name&gt;
        &lt;sys_package display_value="Predictive Intelligence" source="com.glide.platform_ml"&gt;c41430683c31311068bcf327dfe37f28&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_09534be6a9a421d4f877bee6906445ac&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-07-28 06:50:04&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:37</sys_created_on>
        <sys_id>8b50749583b01210c6695855eeaad36f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DataExtractionConstants</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8b50749583b01210c6695855eeaad36f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:37</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
