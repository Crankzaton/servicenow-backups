<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a90edc1b0f46a010603bf634a7767ee2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.WrapUpInteractionUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Provides methods to access details about interaction wrap up.&lt;/description&gt;
        &lt;name&gt;WrapUpInteractionUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WrapUpInteractionUtil = Class.create();

WrapUpInteractionUtil.wrapup_config_cache = "WRAP_UP_CONFIGURATION_CACHE";
WrapUpInteractionUtil.table = "interaction_wrap_up_configuration";

WrapUpInteractionUtil.prototype = {

    initialize: function() {
        this._initPrivateCache(WrapUpInteractionUtil.wrapup_config_cache);
    },

    /* This function iterates through the wrap up configurations and finds the first active
       configuration with conditions that are true for a given interaction. Empty conditions
       are true for all interactions. Confgurations are cached. */

    getWrapUpConfiguration: function(interaction) {
        var configs = GlideCacheManager.get(WrapUpInteractionUtil.wrapup_config_cache, WrapUpInteractionUtil.table);

        if (gs.nil(configs))
            configs = this._initInteractionWrapUpCache();
        else
            configs = JSON.parse(configs);

        for (var i = 0; i &lt; configs.length; i++) {
            var conditions = configs[i].conditions;
            if (conditions == null || GlideFilter.checkRecord(interaction, conditions)) {
                return configs[i];
            }
        }
        return null;
    },

    isWrapUpEnabled: function(interaction) {
        var wrapUpConfig = this.getWrapUpConfiguration(interaction);
        if (wrapUpConfig != null)
            return true;
        return false;
    },

    getWrapUpConfigurationSysId: function(interaction) {
        var wrapUpConfig = this.getWrapUpConfiguration(interaction);
        if (wrapUpConfig != null)
            return wrapUpConfig.sys_id;
        return null;
    },

    isWrapUpDurationEnforced: function(interaction) {
        var wrapUpConfig = this.getWrapUpConfiguration(interaction);
        if (wrapUpConfig != null &amp;&amp; wrapUpConfig.enforce_duration == true)
            return true;
        return false;
    },

    getWrapUpDuration: function(interaction) {
        var wrapUpConfig = this.getWrapUpConfiguration(interaction);
        if (wrapUpConfig != null &amp;&amp; wrapUpConfig.enforce_duration == true)
            return wrapUpConfig.duration;
        return -1;
    },

    isShowWrapUpTimerEnabled: function(interaction) {
        var wrapUpConfig = this.getWrapUpConfiguration(interaction);
        if (wrapUpConfig != null &amp;&amp; wrapUpConfig.enforce_duration == true)
            return wrapUpConfig.show_timer == '1';
        return false;
    },

    /**
     * Show 'End Wrap Up' button if the Interaction is Assigned to the Current Logged in
     * User and interaction is in wrap_up state
     */
    showEndWrapUpButton: function(interaction) {
        if (interaction.assigned_to == gs.getUserID() &amp;&amp; interaction.state == "wrap_up" &amp;&amp; interaction.state.canWrite()) {
            return true;
        }
        return false;
    },

    _initPrivateCache: function(name) {
        if (!name)
            return;

        if (GlideCacheManager.get(name, "_created_") === null) {
            GlideCacheManager.addPrivateCacheable(name);
            GlideCacheManager.put(name, "_created_", new GlideDateTime().getNumericValue());
        }
    },

    /**
     * Interaction Wrap Up configurations are stored in node cache.
     * Cache will be loaded lazily whenever a request for the cache arrives.
     */
    _initInteractionWrapUpCache: function() {
        var gr_config = new GlideRecord(WrapUpInteractionUtil.table);
        gr_config.addQuery('active', 'true');
        gr_config.orderBy('order');
        gr_config.query();

        configs = [];
        while (gr_config.next()) {
            var config = {
                name: gr_config.getValue('name'),
                sys_id: gr_config.getValue('sys_id'),
                conditions: gr_config.getValue('conditions'),
                enforce_duration: gr_config.getValue('enforce_duration'),
                duration: gr_config.getValue('duration'),
                order: gr_config.getValue('order'),
                show_timer: gr_config.getValue('show_timer')
            };
            configs.push(config);
        }

        if (configs.length &gt; 0) {
            GlideCacheManager.put(WrapUpInteractionUtil.wrapup_config_cache, WrapUpInteractionUtil.table, JSON.stringify(configs));
        }
        return configs;
    },

    closeStaleInteractions: function(maxWrapupDuration) {
        var wrapupTimeout = new GlideDateTime();
        wrapupTimeout.addSeconds(-1 * maxWrapupDuration * 60);

        var interactionGr = new GlideRecord("interaction");
        interactionGr.addQuery('active', true);
        interactionGr.addQuery('state', '=', 'wrap_up');
        interactionGr.addQuery('state_changed_on', '&lt;', wrapupTimeout.getValue());
        interactionGr.query();
        interactionGr.setValue('state', 'closed_complete');
        interactionGr.setValue('system_wrap_up', true);
        interactionGr.updateMultiple();
    },

    type: 'WrapUpInteractionUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-05 17:57:46&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a90edc1b0f46a010603bf634a7767ee2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;30&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WrapUpInteractionUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Interactions Management" source="com.glide.interaction"&gt;0aeab4203c35311068bcf327dfe37f30&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a90edc1b0f46a010603bf634a7767ee2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-04-13 02:44:26&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:32</sys_created_on>
        <sys_id>4aeff09d83341210c6695855eeaad31a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WrapUpInteractionUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4aeff09d83341210c6695855eeaad31a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:32</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
