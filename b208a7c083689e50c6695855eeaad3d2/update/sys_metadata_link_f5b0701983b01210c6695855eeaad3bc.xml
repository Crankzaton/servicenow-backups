<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1a7a1ade9315320064f572edb67ffb3b</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.RM_DemoData&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;RM_DemoData&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[        var RM_DemoData = Class.create(); RM_DemoData.prototype = {
            initialize: function(start, end) {
                this.workerRoleId = '8cd72e3193f3220064f572edb67ffb42';
                this.startDate = new GlideDate();
                this.startDate.setValue(start);
                this.endDate = new GlideDate();
                this.endDate.setValue(end);
            },

            run: function() {
                this._populateCapacityForPpsResources();
                this._createResourceAllocationDailies();
                this._populateActuals();
                this._updateAggregates();
            },

            _populateCapacityForPpsResources: function() {
                gs.log('RM_DemoData: Populating capacity for all pps_resource users from ' + this.startDate.getValue() + ' to ' + this.endDate.getValue());

                var users = this._getPpsResourceRoleUsers();

                for (var i = 0; i &lt; users.length; ++i) {
					var rmAggHelper = new RMAggregateHelper();
					rmAggHelper.updateWeeklyAndMonthlyAggregates(users[i], this.startDate.getValue(), this.endDate.getValue(), ['capacity']);
                }

                gs.log('RM_DemoData: Populated capacity for all pps_resource users from ' + this.startDate.getValue() + ' to ' + this.endDate.getValue());
            },

            _createResourceAllocationDailies: function() {
                gs.log('RM_DemoData: Creating daily allocations for soft allocations');
                var gr = new GlideRecord('resource_allocation');
                gr.addQuery('resource_plan.state', '!=', 4);
                gr.orderBy('number');
                gr.query();

                while (gr.next()) {
                    var allocation = new ResourceAllocation(gr);
                    allocation.createEvents(false);
                }
                gs.log('RM_DemoData: Finished creating daily allocations for soft allocations');
            },

            _populateActuals: function() {
                var resourcePlans = this._getResourcePlans();
                var updateOnly = true;
                while (resourcePlans.next()) {
                    var timeCard = this._getTimeCards(resourcePlans.getValue('sys_id'));
                    while (timeCard.next()) {
                        var resourceActuals = new ResourceActuals(timeCard);
                        resourceActuals.updateActualsFromTimeCard();
                    }
                }
            },

            _getResourcePlans: function() {
                var gr = new GlideRecord('resource_plan');
                gr.query();
                return gr;
            },

            _getTimeCards: function(resourcePlan) {
                var gr = new GlideRecord('time_card');
                gr.addQuery('resource_plan', resourcePlan);
                gr.addQuery('state', 'IN', 'Approved,Processed');
                gr.query();
                return gr;
            },

            _updateAggregates: function() {
                gs.log('RM_DemoData: Populating aggregate tables for all pps_resource users from ' + this.startDate.getValue() + ' to ' + this.endDate.getValue());


                var rmAggHelper = new RMAggregateHelper();
                var categories = rmAggHelper.allCategories();

                var ga = new GlideAggregate('resource_allocation_daily');
                ga.groupBy('task');
                ga.groupBy('user');
                ga.query();
                while (ga.next()) {
					if(JSUtil.notNil(ga.task)){
						rmAggHelper.updateAllAggregates(ga.user, this.startDate.getValue(), this.endDate.getValue(), categories, ga.task);
						gs.log('RM_DemoData: Populated aggregate tables for user ' + ga.user.name + ' from ' + this.startDate.getValue() + ' to ' + this.endDate.getValue());
					}
                }
            },

            _getPpsResourceRoleUsers: function() {
                if (gs.nil(this._ppsResources)) {
                    var ga = new GlideAggregate('sys_user_has_role');
                    ga.addQuery('role', this.workerRoleId);
                    ga.addQuery('user.active', true);
                    ga.addAggregate('COUNT');
                    ga.groupBy('user');
                    ga.query();

                    var users = [];
                    while (ga.next())
                        users.push(ga.getValue('user'));

                    this._ppsResources = users;
                }
                return this._ppsResources;
            },

            type: 'RM_DemoData'
        };]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-03-06 20:22:43&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1a7a1ade9315320064f572edb67ffb3b&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;RM_DemoData&lt;/sys_name&gt;
        &lt;sys_package display_value="PPM Standard" source="com.snc.financial_planning_pmo"&gt;92ef82e747e64210cd4e1ce4316d43e3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1a7a1ade9315320064f572edb67ffb3b&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-21 12:51:44&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:11</sys_created_on>
        <sys_id>f5b0701983b01210c6695855eeaad3bc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RM_DemoData</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_f5b0701983b01210c6695855eeaad3bc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
