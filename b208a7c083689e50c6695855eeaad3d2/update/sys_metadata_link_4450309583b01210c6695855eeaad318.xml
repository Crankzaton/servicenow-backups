<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>06e69b52d7433200811300285e6103f8</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_apptmnt_booking.AppointmentBookingDao&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Dao for appointment booking module&lt;/description&gt;
        &lt;name&gt;AppointmentBookingDao&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var AppointmentBookingDao = Class.create();

AppointmentBookingDao.prototype = {
	initialize: function() {
		this.logger = AppointmentBookingLogger.getLogger("AppointmentBookingDao");
	},
	
	/**
	* @public 
	* Returns config object for the task table
	* @param {String}: table name eg: wm_order
	*/
	getAppConfigFromDB : function(tableName) {
		this.logger.info("inside AppointmentBookingDao:getAppConfigFromDB");
		var configGR = new GlideRecord(AppointmentBookingConstants.CONFIG_TABLE);
		configGR.addActiveQuery();
		configGR.addQuery("task_table",tableName);
		configGR.query();
		if (configGR.next()) {
			this.logger.info("AppointmentBookingDao:getAppConfigFromDB configGR id: "+configGR.sys_id);
			return configGR;
		}
		return null;
	},
	
	/**
	* @public 
	* Returns {GlideRecord} appointnment 
	* @param {String}: task sys_id
	* @param {String}: catalog item sys_id &lt;optional&gt;
	*/
	getAppointmentFromDB : function(taskId, catalog_item) {
		this.logger.info("inside AppointmentBookingDao:getAppointmentFromDB");
		var gr = new GlideRecord(AppointmentBookingConstants.APPOINTMENT_TABLE); //TODO: move to constants
		gr.addQuery("state","NOT IN","cancelled");
		if (taskId)
			gr.addQuery("task",taskId);
		if (catalog_item)
			gr.addQuery("catalog_item",catalog_item);
		gr.query();
		// TODO: should we handle multiple appointments for one task?
		if (gr.next()) {
			if(gr.canRead()){
				this.logger.info("AppointmentBookingDao:getAppointmentFromDB id: "+gr.number);
				return gr;				
			}
		}
		return null;
	},
	
	/**
	* @public 
	* Creates an appointment record
	* @param {Object}: params containing the data to create an appointment
	*/
	createAppointment : function (params){
		try {
		// TODO: add glide record to insert appointment
			this.logger.info("inside AppointmentBookingDao:createAppointment");
		
			var appointmentDaoExtPoint = new sn_apptmnt_booking.AppointmentBookingExtPointUtil().getExtensionPoint("sn_apptmnt_booking.AppointmentBookingDaoExtPoint");
		
			if (appointmentDaoExtPoint)
				return appointmentDaoExtPoint.createAppointment(params);
		} catch (err) {
			gs.error("AppointmentBookingDao::createAppointment:  " + err);
		}
		
		return null;
	
	},
	
	/**
	* @public 
	* Update an existing appointment record'
	* @param {String}: sys_id
	* @param {Object}: params containing the data to update an appointment
	*/
	updateAppointment : function (appoinmentId, params){
		// TODO: add glide record to insert appointment
		try {
			this.logger.info("inside AppointmentBookingDao:updateAppointment");
		
			var appointmentDaoExtPoint = new sn_apptmnt_booking.AppointmentBookingExtPointUtil().getExtensionPoint("sn_apptmnt_booking.AppointmentBookingDaoExtPoint");
		
			if (appointmentDaoExtPoint)
				return appointmentDaoExtPoint.updateAppointment(appoinmentId, params);
		} catch(err) {
			gs.error("AppointmentBookingDao::updateAppointment:  " + err);
		}
		
		return null;
	
	},
	
	getServiceConfig : function(catalog_id){
		var gr = new GlideRecord(AppointmentBookingConstants.SERVICE_CONFIG_TABLE);
		gr.addQuery(AppointmentBookingConstants.CATALOG_ITEM, catalog_id);
		gr.query();
		return gr;
	},
		
	getConfig : function(config_id){
		var gr = new GlideRecord(AppointmentBookingConstants.CONFIG_TABLE);
		gr.addQuery("sys_id",config_id);
		gr.query();
		return gr;
	},
	
	getServiceConfigForTaskTable : function(catalog_id, table_id){
		var gr = new GlideRecord(AppointmentBookingConstants.SERVICE_CONFIG_TABLE);
		gr.addQuery("catalog_item",catalog_id);
		gr.addQuery("appointment_booking_config.task_table",table_id);
		gr.query();
		if(gr.next())
			return gr;

		return;
	},
		
	/**
	* @public 
	* Gets the catalog id for the template
	*/
	
	getCatalogId : function(template){
		var catalodIds = [];
		if(gs.nil(template))
			return catalodIds;

		var gr = new GlideRecord("sc_cat_item_producer");
		gr.addQuery("model",template);
		gr.addActiveQuery();
		gr.query();
		while(gr.next()){
			catalodIds.push(gr.getValue("sys_id"));
		}
		return catalodIds;
	},
	
	/**
	* @public 
	* Gets the template definitions using catalog
	*/
	getTemplateDefinitionsForCatalog : function (catalogId, table) {
		this.logger.info("inside getTemplateDefinitionsForCatalog catalogId = "+catalogId + " | table = "+table);
		var data  =  {};
		var soModel = this.getTemplateIdFromCatalog(catalogId);
		if (soModel) {
			var soTasksModelIds = this.getParentTaskModelFromSOModel(soModel);
			if (soTasksModelIds) {
				var smTemplateDefinitions = new GlideRecord("sm_template_definition");
				smTemplateDefinitions.addQuery("template", "IN", [soTasksModelIds.join()+""]);
				if (table)
					smTemplateDefinitions.addQuery("table", table);
				smTemplateDefinitions.query();
				this.logger.info("inside getTemplateDefinitionsForCatalog row count  = "+smTemplateDefinitions.getRowCount());
				while(smTemplateDefinitions.next()) {
					var fieldValues = data[smTemplateDefinitions.field];
					if (fieldValues) {
						// modifying field value
						fieldValues.push(smTemplateDefinitions.value+"");
						data[smTemplateDefinitions.field] = fieldValues;
					} else {
						// init and adding field value for first time
						fieldValues = [];
						fieldValues.push(smTemplateDefinitions.value+"");
						data[smTemplateDefinitions.field] = fieldValues;
					}
				}
			}
		}
		this.logger.info("inside getTemplateDefinitionsForCatalog data  = "+JSON.stringify(data));
		return data;
	},
	
	getParentTaskModelFromSOModel : function (soModel) {
		this.logger.info("inside getParentTaskModelFromSOModel soModel = "+soModel);
		var soTasksModelIds = [];
		if (soModel) {
			var soTasksModel = new GlideRecord("sm_m2m_somodel_stmodel");
			soTasksModel.addQuery("so_model",soModel);
			//soTasksModel.addQuery("order", 0);
			soTasksModel.query();
			this.logger.info("inside getParentTaskModelFromSOModel row count  = "+soTasksModel.getRowCount());
			while (soTasksModel.next())
				soTasksModelIds.push(soTasksModel.getValue("st_model"));
		}
		this.logger.info("inside getParentTaskModelFromSOModel soTasksModelIds  = "+soTasksModelIds);
		return soTasksModelIds;
	},
	
	getTemplateIdFromCatalog : function(catalogId){
		this.logger.info("inside getTemplateIdFromCatalog catalogId = "+catalogId);
		var gr = new GlideRecord("sc_cat_item_producer");
		gr.get(catalogId);
		this.logger.info("inside getTemplateIdFromCatalog model = "+gr.model);
		if (gr.isValidRecord())
			return gr.model;
		return false;
	},
	
	/**
	* @public 
	* Returns the appointment associated with the WO, if any
	*/
	getAppointmentGRForWorkOrder : function(sys_id){
		var appointmentGR = new GlideRecord(AppointmentBookingConstants.APPOINTMENT_TABLE);
		appointmentGR.addQuery("task",sys_id);
		appointmentGR.query();
		while(appointmentGR.next()){			
			return appointmentGR;
		}
		return null;
	},
		type: 'AppointmentBookingDao'
	};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-06-02 00:36:20&lt;/sys_created_on&gt;
        &lt;sys_id&gt;06e69b52d7433200811300285e6103f8&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;90&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;AppointmentBookingDao&lt;/sys_name&gt;
        &lt;sys_package display_value="Appointment Booking" source="sn_apptmnt_booking"&gt;d0f0c1303ba23200ce8a4d72f3efc4ac&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Appointment Booking"&gt;d0f0c1303ba23200ce8a4d72f3efc4ac&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_06e69b52d7433200811300285e6103f8&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-12 05:36:01&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:24</sys_created_on>
        <sys_id>4450309583b01210c6695855eeaad318</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AppointmentBookingDao</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_4450309583b01210c6695855eeaad318</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:24</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
