<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0f0fe0978703030087542fb5e8cb0b38</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ResourceGridSeededMetadata&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ResourceGridSeededMetadata&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ResourceGridSeededMetadata = Class.create();

ResourceGridSeededMetadata.TASK_COLUMNS = [
	{ task: { column: 'short_description', snValueFormatter: 'formatTask', headerName: gs.getMessage('Task'), rowGroup: true, valueGetter: 'taskValueGetter', valueFormatter: 'taskValueFormatter', hide: true, cellRenderer: 'tooltipRenderer'} },
	{ task_id: { column: 'sys_id', hidden: true }},
	{task_date_range: {column:'task_date_range', snValueFormatter: 'getTaskDateRange', hidden: true}},
	{ priority: { column: 'priority', snDataType: 'string',snValueFormatter: 'getPriorityOfTask', hidden: true}},
	{ task_state: {snValueFormatter: 'getTaskState', snDataType: 'string', headerName: gs.getMessage('Project/Demand State') , hidden:true}},
	{task_type: { headerName:gs.getMessage('Type'), snDataType: 'string', snValueFormatter: 'getTaskType', hidden:true } },
	{ top_task_id: { column: 'sys_id', hidden:true } },
	{ task_active: { snValueFormatter: 'getTaskActiveStatus', snDataType: 'string', hidden:true } }
	
];

ResourceGridSeededMetadata.LEFT_PINNED_COLUMNS = [
	//{ group: { headerName: '', cellRenderer:'group', showRowGroup: 'info', hide: true} },
	{ name: { headerName: gs.getMessage(' Resource name'), showRowGroup: true, cellRenderer: 'agGroupCellRenderer' , cellClassRules: 'nameClassRules', snDisableConfig: true} },
	{ name: { snValueFormatter: 'formatName', snDataType: 'string', headerName: gs.getMessage('Name'), rowGroup: true, hide: true, cellRenderer: 'infoIconRenderer', valueGetter: 'resourcePlanIdGetter'} },
	{ resource_type: { column: 'resource_type', snDataType: 'choice', headerName: gs.getMessage('Resource type'), valueGetter: 'labelGetter', hide: true } },
	{ extension: { column: 'extension', headerName: gs.getMessage('Extension'), snDataType: 'choice', hidden: true } },
	{ request: { snDataType: 'request', snValueFormatter: 'formatRequest', headerName: gs.getMessage('Planned') }},
	{ planned_cost: {column: 'planned_cost', snDataType  : 'currency', columnGroupShow: 'open', headerName: gs.getMessage('Planned cost')}},
	{ allocated_cost: {column: 'allocated_cost', snDataType  : 'currency', columnGroupShow: 'open', headerName: gs.getMessage('Conf/Alloc cost')}},
	{ actual_cost: {column: 'actual_cost', snDataType  : 'currency', columnGroupShow: 'open', headerName: gs.getMessage('Actual cost')}},
	{ resource_plan_id: { snDataType: 'string', column: 'sys_id', hidden: true} },
	{ group_id: { snDataType: 'string', column: 'group_resource', hidden: true } },
	{ user_id: { snDataType: 'string', column: 'user_resource', hidden: true } },
	{ role_id: { snDataType: 'string', column: 'role', hidden: true } },
	{ task_id: { column: 'task', snDataType: 'string', hidden: true }},
	{ top_task_id: { column:'top_task', snDataType: 'string', hidden:true } },
	{ info_icon_label: {snValueFormatter: 'infoIconLabel',snDataType: 'string', hidden: true}},
	{ plan_type: { snDataType: 'string', column: 'plan_type', hidden: true} },
	{ request_type: { snDataType: 'string', column: 'request_type', hidden: true} },
];

ResourceGridSeededMetadata.LEFT_GROUPED_COLUMNS = [
	
	{ state: { column: 'state', snDataType: 'choice', headerName: gs.getMessage('State'), valueGetter: 'stateValueGetter', snDisableConfig: true, cellRenderer: 'resourcePlanStateCellRenderer'} },
	{ group_role: { headerName:gs.getMessage('Group'), snValueFormatter: 'formatGroupRole', valueGetter: 'groupRoleGetter', columnGroupShow: 'open' } },
	{ Task: { snValueFormatter: 'getTaskDescription', snDataType: 'string', headerName: gs.getMessage('Task') ,columnGroupShow: 'open' , tooltipField : 'task_tooltip' } },
	{ priority: { column: 'priority', snDataType: 'string', headerName: gs.getMessage('Priority'), columnGroupShow: 'open', valueGetter: 'priorityOfTaskGetter',snValueFormatter: 'getPriorityOfTask'}},
	{ task_tooltip: {snValueFormatter: 'getTaskDescription', snDataType: 'string', hidden : true}},
	{ start_date: { column: 'start_date', snDataType: 'date', headerName: gs.getMessage('Start Date'), columnGroupShow: 'open', valueGetter: 'labelGetter'} },
	{ end_date: { column: 'end_date', snDataType: 'date', headerName: gs.getMessage('End Date'), columnGroupShow: 'open', valueGetter: 'labelGetter'} },
	
	{ is_planned_more_than_allocated : { column: 'is_planned_more_than_allocated', snDataType: 'string', headerName: '', hidden: true, snValueFormatter: 'validatePlannedVsAllocated'} },
	{skills: {headerName: gs.getMessage('Skills') , snDataType: 'string' ,snValueFormatter: 'formatSkills', valueGetter: 'skillsValueGetter', columnGroupShow: 'open' , tooltipField: 'skills_tooltip' , hide: true }},
	{ skills_tooltip: {snValueFormatter: 'formatSkillsTooltip', snDataType: 'string', hidden : true}},
	{members: {headerName: gs.getMessage('Members list') , snDataType: 'string' ,snValueFormatter: 'formatMembersList' , valueGetter: 'memebersValueGetter', columnGroupShow: 'open' , tooltipField: 'members_tooltip' , hide: true  }},
	{ members_tooltip: {snValueFormatter: 'formatMembersListTooltip', snDataType: 'string', hidden : true}},
	{allocated_members: {headerName: gs.getMessage('Confirmed/Allocated users') , snDataType: 'string' ,snValueFormatter: 'formatAllocatedMembersList' , valueGetter: 'memebersValueGetter', columnGroupShow: 'open' , tooltipField: 'allocated_members_tooltip' , hide: true  }},
	{ allocated_members_tooltip: {snValueFormatter: 'formatAllocatedMembersListTooltip', snDataType: 'string', hidden : true}},
	//additional columns
	{ number : { column: 'number', snDataType  : 'string', columnGroupShow: 'open', headerName: gs.getMessage('Number')}},
	{ short_description : { column: 'short_description', snDataType  : 'string', columnGroupShow: 'open', headerName: gs.getMessage('Name')}},
	{ task_state: {snValueFormatter: 'getTaskState', snDataType: 'string', headerName: gs.getMessage('Project/Demand state') ,columnGroupShow: 'open'}},
	{ allocated_hours: {column: 'allocated_hours', snDataType  : 'float', columnGroupShow: 'open', headerName: gs.getMessage('Conf/Alloc hours')}},
	{ actual_hours: {column: 'actual_hours', snDataType  : 'float', columnGroupShow: 'open', headerName: gs.getMessage('Actual hours')}},
	{ task_type: { headerName:gs.getMessage('Type'), snDataType: 'string', columnGroupShow: 'open', snValueFormatter: 'getTaskType' } },
	{ distribution : { column: 'distribution', snDataType  : 'choice',  valueGetter: 'labelGetter', columnGroupShow: 'open', headerName: gs.getMessage('Allocation type')}},
	{ distribution_type : { column: 'distribution_type', snDataType  : 'choice',  valueGetter: 'labelGetter', columnGroupShow: 'open', headerName: gs.getMessage('Allocation spread')}},
	{ extension : { column: 'extension', snDataType  : 'choice',  valueGetter: 'labelGetter', columnGroupShow: 'open', headerName: gs.getMessage('Extension')}}
];

ResourceGridSeededMetadata.REQUESTED_DAILY_ALLOCATION_PIVOT_COLUMNS = [
	{ planned: { snDataType: 'integer', snValueFormatter: 'formatRequested', headerName: gs.getMessage('Planned'), editable: true, snColumnType: 'pivoted', isPivotCol : true, snPivotColName : 'planned' } },
	{ planned_hours: { snDataType: 'float', column: 'hours', hidden: true, snColumnType: 'pivoted'} },
	{ resource_plan_id: { snDataType: 'string', column: 'requested_allocation.resource_plan', hidden: true} },
	{ task_id: { snDataType: 'string', column: 'requested_allocation.resource_plan.task', hidden: true } },
	{ requested_date: { snDataType: 'string', column: 'requested_date', hidden: true} }
];

ResourceGridSeededMetadata.REQUESTED_DAILY_ALLOCATION_PIVOT_COLUMN_LIST = ['planned', 'planned_hours'];

ResourceGridSeededMetadata.RESOURCE_ALLOCATION_DAILY_PIVOT_COLUMNS = [
	{ booking_type: {snDataType: 'string', column: 'booking_type', hidden: true }},
	{ allocated: { snDataType: 'integer', snValueFormatter: 'formatAllocated', headerName: gs.getMessage('Conf/Alloc'),  editable: true, snColumnType: 'pivoted', isPivotCol : true, snPivotColName : 'allocated'} },
	{ allocated_hours: { snDataType: 'integer', snValueFormatter: 'formatAllocatedHours', hidden: true, snColumnType: 'pivoted'}},
	{ actuals: { snDataType: 'float', column: 'actual_hours', headerName: gs.getMessage('Actuals'),  editable: true, snColumnType: 'pivoted', isPivotCol : true, snPivotColName : 'actuals' } },
	{ task_id: { snDataType: 'string', column: 'task', hidden: true } },
	{ allocation_id: { snDataType: 'string', column: 'allocation', hidden: true} },
	{ allocation_date: { snDataType: 'string', column: 'date', hidden: true} },
	{ user: { snDataType: 'string', column: 'allocation.user', hidden: true} },
];
ResourceGridSeededMetadata.RESOURCE_ALLOCATION_DAILY_PIVOT_COLUMN_LIST = ['allocated', 'actuals', 'allocated_hours'];

ResourceGridSeededMetadata.RIGHT_AGGREGATE_COLUMNS = [
	{ total_planned: { snDataType: 'integer', aggFunc: 'sum', column: 'total_planned', headerName: gs.getMessage('Planned'), isPivotCol : true, snPivotColName : 'total_planned', prependGroupLabel: gs.getMessage("Total"), snHideColumnFromConfigPanel: true} },
	{ total_allocated: { snDataType: 'integer', aggFunc: 'sum', column: 'total_allocated', headerName: gs.getMessage('Conf/Alloc'), isPivotCol : true, snPivotColName : 'total_allocated', columnGroupShow: 'open', prependGroupLabel: gs.getMessage("Total"), snHideColumnFromConfigPanel: true}},
	{ total_actuals: { snDataType: 'integer', aggFunc: 'sum', column: 'total_actuals', headerName:gs.getMessage('Actuals'),  isPivotCol : true, snPivotColName : 'total_actuals', columnGroupShow: 'open', prependGroupLabel: gs.getMessage("Total"), snHideColumnFromConfigPanel: true}},
	{ resource_plan_id: { snDataType: 'string', column: 'resource_plan', hidden: true} }
];

ResourceGridSeededMetadata.RIGHT_ACTION_COLUMNS = [
	{ actions: {headerName: '', renderer: 'resourcePlanAction', snValueFormatter: 'formatActions', snColumnType: 'actions'} }
];
ResourceGridSeededMetadata.EDITABLE_COLUMN_CONFIG = {
	planned: {
		editableInStates: ["1","2","4"] //Planning, Requested, Rejected
	}
};
	
ResourceGridSeededMetadata.RESOURCE_ALLOCATION_COLUMNS = [
	{ name: { column: 'user', snValueFormatter: 'formatResourceAllocationUserName', snDataType: 'string', headerName: gs.getMessage('Name') } },
	{ allocation_id: { snDataType: 'string', column: 'sys_id', hidden: true} },
	{ user: { snDataType: 'string', column: 'user', hidden: true} },
	{ resource_type: { column: 'resource_plan.resource_type', snDataType: 'string', headerName: 'Resource Type', hidden: true}},
	{ top_task_id: { column: 'resource_plan.top_task', snDataType: 'string', hidden:true } },
	{state: { column: 'resource_plan.state', snDataType: 'choice', headerName: gs.getMessage('State'), hidden: true}},
	{start_date: {column: 'resource_plan.start_date', snDataType: 'string', headerName: 'Start Date', hidden: true}},
	{end_date: {column: 'resource_plan.end_date', snDataType: 'string', headerName: 'End Date', hidden: true}},
	{ resource_plan_id: { snDataType: 'string', column: 'resource_plan', hidden: true} }
];]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-12-20 11:08:10&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0f0fe0978703030087542fb5e8cb0b38&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;288&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ResourceGridSeededMetadata&lt;/sys_name&gt;
        &lt;sys_package display_value="Resource Grid Interface" source="com.snc.resource_grid"&gt;7e00da2b47e64210cd4e1ce4316d438f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_0f0fe0978703030087542fb5e8cb0b38&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-08-25 06:41:33&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:08</sys_created_on>
        <sys_id>6e70fc9583b01210c6695855eeaad3a1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ResourceGridSeededMetadata</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6e70fc9583b01210c6695855eeaad3a1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:08</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
