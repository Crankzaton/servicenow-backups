<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>03007681433231101ed803295bb8f263</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.GenAILargeInputPostprocessor&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point global.GenAILargeInputPostprocessor
GenAI Postprocessor extension point for Large Input&lt;/description&gt;
        &lt;name&gt;GenAILargeInputPostprocessor&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var GenAILargeInputPostprocessor = Class.create();
GenAILargeInputPostprocessor.prototype = {
    initialize: function() {
    },

    /**
     * Converts chunk results to combine prompt
     *
     * @param {Object} combineRequestAttributes - Attributes for combine
	 * request with chunk results.
	 * @param {String} capabilityId - Capability ID for the capability.
     *
     * @return {Object} - Combine request attributes.
     */
    process: function(combineRequestAttributes, capabilityId) {
		Object.keys(combineRequestAttributes).forEach(function (attribute) {
			if (Array.isArray(combineRequestAttributes[attribute])) {
				combineRequestAttributes[attribute] = combineRequestAttributes[attribute].join(" ");
				var attributeGr = new GlideRecord("sys_one_extend_definition_attribute");
				attributeGr.addActiveQuery();
				attributeGr.addQuery("capability", capabilityId);
				attributeGr.addQuery("name", attribute);
				attributeGr.query();
				if (attributeGr.next()) {
					if (attributeGr.getValue("data_type").includes("json")) {
						var attributePromptTemplate = attributeGr.getValue("attribute_label");
						var keys = [];
						if (!attributePromptTemplate) {
							keys = ["{{" + attribute + ".all_remaining_attributes}}"];
						} else {
							keys = attributePromptTemplate.match(/{{[^}]+}}/g);
						}
						var attributeJSON = {};
						for (var i in keys) {
							keys[i] = keys[i].substring(2, keys[i].length - 2);
							keys[i] = keys[i].split(".")[1];
							if (i == 0) {
								attributeJSON[keys[i]] = combineRequestAttributes[attribute];
							} else {
								attributeJSON[keys[i]] = "";
							}
						}

						if (attributeGr.getValue("data_type") === "json_array") {
							attributeJSON = [attributeJSON];
						}

						combineRequestAttributes[attribute] = attributeJSON;
					}
				}
			}
		});

		return combineRequestAttributes;
    },

	/**
     * Checks if the current instance is appropriate for a given
	 * capabilityId and definitionId
     *
     * @param {String} capabilityId - The sys_id for the capability.
	 * @param {String} definitionId - The sys_id for the capability definition.
     *
     * @return {Boolean} true/false - is the instance valid or not.
     */
	validateHandler: function (capabilityId, definitionId) {
		return true;
	},

    type: 'GenAILargeInputPostprocessor'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-11-27 16:32:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;03007681433231101ed803295bb8f263&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;GenAILargeInputPostprocessor&lt;/sys_name&gt;
        &lt;sys_package display_value="Glide OneExtend" source="com.glide.one_extend"&gt;dc98175b47220210cd4e1ce4316d4324&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_03007681433231101ed803295bb8f263&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-01-12 05:44:25&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:02</sys_created_on>
        <sys_id>e2303c5583b01210c6695855eeaad3d3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GenAILargeInputPostprocessor</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e2303c5583b01210c6695855eeaad3d3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:02</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
