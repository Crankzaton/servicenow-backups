<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>19c4a6f3eb32120034d1eeea1206fe06</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_change_cab.CABChangeRequestSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;ServiceNow logic for CAB Change Requests&lt;/description&gt;
        &lt;name&gt;CABChangeRequestSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CABChangeRequestSNC = Class.create();
CABChangeRequestSNC.prototype = Object.extendsObject(CAB, {

	_addDateRangeQuery: function (gr, startDate, endDate) {
		var cr = new global.ChangeRequestCalendar(this._gr);
		cr._addDateRangeQuery(gr, startDate, endDate);
	},

	getRelatedSchedules: function (startDate, endDate) {
		var cr = new global.ChangeRequestCalendar(this._gr);
		return cr.getRelatedSchedules(startDate, endDate);
	},

	getChangesWithSameAssignedTo: function (startDate, endDate) {
		var cr = new global.ChangeRequestCalendar(this._gr);
		return cr.getChangesWithSameAssignedTo(startDate, endDate);
	},

	getChangesWithSameAssignmentGroup: function (startDate, endDate) {
		var cr = new global.ChangeRequestCalendar(this._gr);
		return cr.getChangesWithSameAssignmentGroup(startDate, endDate);
	},

	getChangesAffectingSamePrimaryCI: function (startDate, endDate) {
		var cr = new global.ChangeRequestCalendar(this._gr);
		return cr.getChangesAffectingSamePrimaryCI(startDate, endDate);
	},
	
	getScheduleInformation: function (windowArr, startDate, endDate) {
		var cr = new global.ChangeRequestCalendar(this._gr);
		return cr.getScheduleInformation(windowArr, startDate, endDate);
	},

	removeCABAgendaItems: function () {
		var agendaItemGr = new GlideRecord(CAB.AGENDA_ITEM);
		agendaItemGr.addQuery("task", this._gr.getUniqueValue());
		agendaItemGr.addQuery("state", "pending");
		agendaItemGr.query();
		agendaItemGr.deleteMultiple();
	},

	updateAttendeesForAgendaItems: function (previous) {
		var agendaItemGr = new GlideRecord(CAB.AGENDA_ITEM);
		agendaItemGr.addQuery("task", this._gr.getUniqueValue());
		agendaItemGr.addQuery("state", "pending");
		agendaItemGr.query();
		
		if (!agendaItemGr.hasNext())
			return;
		
		if (!CABAgendaItem.TASK_FIELDS_FOR_ATTENDEES)
			return;
		
		var fieldData = {};
		// Get any changes to fields we're interested in for creating attendees related to this Change
		for (var i = 0; i &lt; CABAgendaItem.TASK_FIELDS_FOR_ATTENDEES.length; i++) {
			var fieldName = CABAgendaItem.TASK_FIELDS_FOR_ATTENDEES[i];
			if (this._gr[fieldName].changes()) {
				fieldData[fieldName] = {"currentValue": this._gr.getValue(fieldName)};
				if (previous)
					fieldData[fieldName]["previousValue"] = previous.getValue(fieldName);
			}
		}

		while (agendaItemGr.next())
			new CABAgendaItem(agendaItemGr).refreshAttendeesFromTaskData(fieldData);
	},
	
	updateDecisionforAgendaItem: function(decision) {
		var agendaItemGr = new GlideRecord(CAB.AGENDA_ITEM);
		agendaItemGr.addQuery("task", this._gr.getUniqueValue());
		agendaItemGr.addQuery("cab_meeting.state", "NOT IN", "complete,canceled");
		agendaItemGr.query();
		
		if (!decision)
			decision = this._gr.getValue("approval");

		while (agendaItemGr.next()) {
			var agendaItem = new CABAgendaItem(agendaItemGr);
			if (decision === "approved") {
				if (agendaItem.isPending()) {
					agendaItem.setPreApproved();
				
					if (agendaItemGr.cab_meeting.complete_preapproved_changes == true)
						agendaItem.setComplete();
				}
				else if (agendaItem.isInProgress() || agendaItem.isPaused())
					agendaItem.setApproved();
				
				agendaItem.update();
			}
			else if (decision === "rejected") {
				var cabMeeting = new CABMeeting(agendaItemGr.cab_meeting.getRefRecord());
				if (cabMeeting.isPending() &amp;&amp; !agendaItem.isPending())
					agendaItem.setPending();
				
				agendaItem.reject();
			}
		}
	},
	
	addApprovalDecisionToMeetingNotes: function(decisionDisplayValue) {
		var agendaItemGr = new GlideRecord(CAB.AGENDA_ITEM);
		agendaItemGr.addQuery("task", this._gr.getUniqueValue());
		agendaItemGr.addQuery("cab_meeting.state", "in_progress");
		agendaItemGr.query();

		if (!decisionDisplayValue)
			decisionDisplayValue = this._gr.getDisplayValue("approval");

		while (agendaItemGr.next()) {
			var agendaItem = new CABAgendaItem(agendaItemGr);
			var meetingGr = agendaItemGr.cab_meeting.getRefRecord();
			if (meetingGr &amp;&amp; meetingGr.auto_add_agenda_decisions)
				agendaItem.addDecisionToMeetingNotes(decisionDisplayValue, gs.getUserDisplayName());
		}
	},

	toJS: function(includeCanWrite, dotWalkFields) {
		var jsObj = this._toJS(this._gr, includeCanWrite);
		
		
		if (dotWalkFields &amp;&amp; Array.isArray(dotWalkFields))
			dotWalkFields.forEach(function (fieldName) {
				if (!fieldName)
					return;
				
				var fieldPath = fieldName.split(".");
				var element = this._gr;
				fieldPath.forEach(function(pathEl) {
					element = element[pathEl];
				});
				
				jsObj[fieldName] = {
					"value": element.toString(),
					"display_value": element.getDisplayValue()
				};
			}, this);

		return jsObj;
	},
	
	toSPForm: function() {
		if (!this._gr.canRead())
			return null;
		
		if (!this._cabFormUtil)
			this._cabFormUtil = new global.CABFormUtil();
		
		return this._cabFormUtil.getForm(this._gr);
	},

    type: 'CABChangeRequestSNC'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-04-22 10:10:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;19c4a6f3eb32120034d1eeea1206fe06&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CABChangeRequestSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Change Management - CAB Workbench" source="sn_change_cab"&gt;18351d53eb32120034d1eeea1206fe79&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Change Management - CAB Workbench"&gt;18351d53eb32120034d1eeea1206fe79&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_19c4a6f3eb32120034d1eeea1206fe06&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-30 15:54:55&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:06</sys_created_on>
        <sys_id>24b0fcd583b01210c6695855eeaad38c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CABChangeRequestSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_24b0fcd583b01210c6695855eeaad38c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:06</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
