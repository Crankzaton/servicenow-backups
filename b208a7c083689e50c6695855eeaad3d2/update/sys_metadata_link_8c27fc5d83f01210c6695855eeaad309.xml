<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7b1a76e277d38110033a902f8c5a99be</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.PDActivityRepository&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PDActivityRepository&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var PDActivityRepository = Class.create();
PDActivityRepository.prototype = {
    initialize: function() {},
    type: 'PDActivityRepository',

    insertActivity: function(fields) {
        fields = fields || {};
        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_ACTIVITY);
        gr.initialize();
        var rawActivityUtil = new PDRawActivityUtil();
        rawActivityUtil.processActivity(fields);
        var processDefinition = fields['processDefinition'];
        var activityDefinition = fields['activityDefinition'];
        var label = fields['label'];
        var lane = fields['lane'];
        if (!processDefinition || !activityDefinition || !label)
            throw (gs.getMessage(
                'Missing one or more of required fields: processDefinition, activityDefinition, label'));
        // the user can optionally pass in a sysId to hardcode the record to
        var sysId = fields['sysId'];
        if (sysId)
            gr.setNewGuidValue(sysId);

        this._setFieldsOnGr(fields, gr, false);

        var insertedId = gr.insert();

        if (!insertedId) {
            var errorRecordId = sysId || '';
            throw gs.getMessage('Unable to insert activity {0}: {1}', [errorRecordId, gr.getLastErrorMessage()]);
        }

        var insertedGr = this.get(insertedId);

        // an activity record has to be inserted and saved first before updating its inputs 
        // because inputs don't exist on the activity until the activity has been inserted and the activity definition is set. 
        // The inputs are inherited from the activity definition, so we don't have them until the activity definition is set.
        if (fields.inputs)
            this._handleGlideElementGlideVarChanges(
                fields.inputs, insertedGr, PDConstants.FIELDS.INPUTS);
        if (fields.typeVals)
            this._handleGlideElementGlideVarChanges(
                fields.typeVals, insertedGr, PDConstants.FIELDS.TYPE_VALS);

        rawActivityUtil.processInputs(insertedGr);
        return this._getActivityFromGR(insertedGr);
    },

    updateActivity: function(fields) {
        fields = fields || {};

        var sysId = fields['sysId'];

        if (!sysId)
            throw (gs.getMessage('Missing required field: sysId'));

        var startDelay = fields['startDelay'];
        startDelay = PDUtils.updateStartWithDelay(startDelay);

        var activityGr = this.get(sysId);
        var rawActivityUtil = new PDRawActivityUtil();
        rawActivityUtil.processActivity(fields);
        if (!activityGr)
            throw (gs.getMessage('Unable to find activity with id: {0}', sysId));

        this._setFieldsOnGr(fields, activityGr, true);

        if (!activityGr.update())
            throw gs.getMessage('Unable to update activity {0}: {1}', [sysId, activityGr.getLastErrorMessage()]);
        rawActivityUtil.processInputs(activityGr);
        var activity = this._getActivityFromGR(activityGr);
        activity.startDelay = {
            timerAttributes: startDelay
        };
        return activity;
    },

    // activitiesStr: a string of activity Ids separated by ,
    deleteActivities: function(activitiesStr) {
        if (!activitiesStr || activitiesStr.length === 0)
            throw (gs.getMessage('No activity to delete'));

        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_ACTIVITY);
        gr.addQuery('sys_id', 'IN', activitiesStr);
        gr.query();
        gr.deleteMultiple();
    },

    get: function(sysId) {
        var gr = PDUtils.newGlideRecordWithSkipProcessUpdate(PDConstants.TABLES.PD_ACTIVITY);
        gr.get(sysId);

        if (gr.isValidRecord())
            return gr;

        return null;
    },

    _setFieldsOnGr: function(fields, gr, includeGlideVars) {
        for (var fieldName in fields) {
            var fieldValue = fields[fieldName];
            var snakeCaseFieldName = PDUtils.camelcaseToSnakecase(fieldName);
            switch (snakeCaseFieldName) {
                case PDConstants.FIELDS.SYS_ID: //we never want to set the sys id of an update
                    continue;
                case PDConstants.FIELDS.INPUTS:
                case PDConstants.FIELDS.TYPE_VALS:
                    if (includeGlideVars) {
                        this._handleGlideElementGlideVarChanges(fieldValue, gr, snakeCaseFieldName);
                        break;
                    } else
                        continue;
                case PDConstants.FIELDS.START_RULE:
                    this._handleStartRuleChange(fieldValue, gr);
                    break;
                case PDConstants.FIELDS.PROCESS_SCHEMA_VERSION:
                    gr[PDConstants.FIELDS.PROCESS_SCHEMA_VERSION] = fields['processSchemaVersion']; //gr.setValue doesn't work here because process_schema_version is not a valid field
                    break;
                default:
                    PDUtils.setGlideRecordFieldValue(gr, snakeCaseFieldName, fieldValue);
            }
        }
    },

    _handleGlideElementGlideVarChanges: function(glideElementGlideVars, activityGr, fieldName) {
        if (!((glideElementGlideVars || {}).variables || {}).length)
            return;

        glideElementGlideVars.variables.forEach(function(variable) {
            var variableElement = activityGr.getElement(fieldName + '.' + variable.variableName);
            variableElement.setValue(variable.variableValue || '');
            variableElement.setValueMapping(variable.variableMapping || '');
        });
        activityGr.update();
    },

    getActivitiesByProcessDefinition: function(processDefinitionId) {
        if (!processDefinitionId)
            throw (gs.getMessage('Missing required parameter: processDefinitionId'));

        var gr = new GlideRecord(PDConstants.TABLES.PD_ACTIVITY);
        gr.addQuery(PDConstants.FIELDS.PROCESS_DEFINITION, processDefinitionId);
        gr.query();

        var activities = [];
        while (gr.next()) {
            activities.push(this._getActivityFromGR(gr));
        }
        return activities;
    },

    _handleStartRuleChange: function(startRulePayload, gr) {
        var definition = startRulePayload.definition;
        // start rule definition will be checked by business rule (STRY54824130)
        gr.setValue(PDConstants.FIELDS.START_RULE, definition);
        if (definition === PDConstants.START_RULES.AFTER_ACTIVITIES) {
            var activities = (startRulePayload.vars || {}).activities || [];
            gr.getElement(PDConstants.FIELDS.START_RULE_VAR_AFTER_ACTIVITIES).setValue(activities);
            var branches = (startRulePayload.vars || {}).branches || [];
            branches = branches
                .map(function(branch) {
                    return branch.activityId + '.' + branch.branchId;
                })
                .join(',');
            gr.getElement(PDConstants.FIELDS.START_RULE_VAR_BRANCHES).setValue(branches);
        }
    },

    _getInputArrayFromGR: function(gr) {
        var variablesRecord = gr.getElement('inputs').getVariablesRecord();
        var inputsMetadata = PDUtils.getGlideVariablesMetadata(variablesRecord);
        return {
            variables: inputsMetadata
        };
    },

    _getActivityFromGR: function(gr) {
        var FIELDS = PDConstants.FIELDS;
        var inputs = this._getInputArrayFromGR(gr);

        var geStartRuleVarsActivities =
            gr.getElement(PDConstants.FIELDS.START_RULE_VAR_AFTER_ACTIVITIES);
        var startRuleVarValueActivities =
            geStartRuleVarsActivities &amp;&amp; geStartRuleVarsActivities.getValue();
        if (startRuleVarValueActivities)
            startRuleVarValueActivities = geStartRuleVarsActivities.split(',');

        var geStartRuleVarsBranches =
            gr.getElement(PDConstants.FIELDS.START_RULE_VAR_BRANCHES);
        var startRuleVarValueBranches =
            geStartRuleVarsBranches &amp;&amp; geStartRuleVarsBranches.getValue();
        if (startRuleVarValueBranches)
            startRuleVarValueBranches = startRuleVarValueBranches.split(',')
            .map(function(branch) {
                var splitBranch = branch.split('.');
                return {
                    activityId: splitBranch[0],
                    branchId: splitBranch[1]
                };
            });

        return {
            sys_id: PDUtils.getFieldReturnValue(gr, FIELDS.SYS_ID),
            label: PDUtils.getFieldReturnValue(gr, FIELDS.LABEL),
            coordinates: PDUtils.getFieldReturnValue(gr, FIELDS.COORDINATES),
            swim_lane: PDUtils.getFieldReturnValue(gr, FIELDS.SWIM_LANE),
            lane: PDUtils.getFieldReturnValue(gr, FIELDS.LANE),
            startRule: {
                definition: gr.getValue(FIELDS.START_RULE),
                vars: {
                    activities: startRuleVarValueActivities || [],
                    branches: startRuleVarValueBranches || []
                }
            },
            restart_rule: PDUtils.getFieldReturnValue(gr, FIELDS.RESTART_RULE),
            inputs: inputs,
            active: PDUtils.getFieldReturnValue(gr, FIELDS.ACTIVE),
            name: PDUtils.getFieldReturnValue(gr, FIELDS.NAME),
            description: PDUtils.getFieldReturnValue(gr, FIELDS.DESCRIPTION),
            activity_definition: PDUtils.getFieldReturnValue(gr, FIELDS.ACTIVITY_DEFINITION),
            process_definition: PDUtils.getFieldReturnValue(gr, FIELDS.PROCESS_DEFINITION),
            sys_created_on: PDUtils.getFieldReturnValue(gr, FIELDS.SYS_CREATED_ON),
            sys_updated_on: PDUtils.getFieldReturnValue(gr, FIELDS.SYS_UPDATED_ON),
            condition_to_run: PDUtils.getFieldReturnValue(gr, FIELDS.CONDITION_TO_RUN),
            order: PDUtils.getFieldReturnValue(gr, FIELDS.ORDER)
        };
    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-09 17:17:56&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7b1a76e277d38110033a902f8c5a99be&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;194&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PDActivityRepository&lt;/sys_name&gt;
        &lt;sys_package display_value="Process Automation Designer Core - Model" source="com.glide.pad.core.model"&gt;0ae817db47220210cd4e1ce4316d431f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7b1a76e277d38110033a902f8c5a99be&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-22 13:17:06&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:11</sys_created_on>
        <sys_id>8c27fc5d83f01210c6695855eeaad309</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PDActivityRepository</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_8c27fc5d83f01210c6695855eeaad309</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:11</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
