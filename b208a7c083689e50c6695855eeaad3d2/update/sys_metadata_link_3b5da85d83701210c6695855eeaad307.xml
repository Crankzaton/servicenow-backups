<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>0fea19be730f3300fdbd04fbc4f6a7dd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;true&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;sys_properties&lt;/collection&gt;
        &lt;condition&gt;(current.name == "glide.authenticate.multifactor.browser.fingerprint.validity") || (current.name == "glide.authenticate.multifactor.remembered.browser.max.count")&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Validate MFA Browser FP Cookie Life Span&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	var propValue = current.value;
	var propName = current.name;
	var prevValue = previous.value;
	
	this.fingerprintValidityDefaultVal = 8;
	this.fingerprintValidityMinVal = 1;
	this.fingerprintValidityMaxVal = 24;

	this.maxRememberedBrowserDefaultVal = 5;
	this.maxRememberedBrowserMinVal = 1;
	this.maxRememberedBrowserMaxVal = 10;
	
	if(propName == "glide.authenticate.multifactor.browser.fingerprint.validity"){
		propValue = validateMFABrowserCookieSpanInHours(propValue, prevValue);
		if(prevValue != propValue){
			//update auto flush job definition
			updateAutoFlushRecord(propValue*60*60);
		}
	} else if(propName == "glide.authenticate.multifactor.remembered.browser.max.count")
		propValue = validateMFAMaxRememberedBrowsers(propValue, prevValue);

	current.value = String(parseInt(propValue));
})(current, previous);

function validateMFABrowserCookieSpanInHours(fpValidityInHours, prevValue){
	if (fpValidityInHours == '' || isNaN(fpValidityInHours)) {
		if(!isNaN(prevValue)){
			gs.addInfoMessage(gs.getMessage("Invalid value of browser fingerprint validity; retained existing value: {0} hours", prevValue));
			return prevValue;
		}
		gs.addInfoMessage(gs.getMessage("Invalid value of browser fingerprint validity; replaced with default value: {0} hours", this.fingerprintValidityDefaultVal));
		return this.fingerprintValidityDefaultVal;
	} else if (fpValidityInHours &lt; this.fingerprintValidityMinVal) {
		gs.addInfoMessage(gs.getMessage("Browser fingerprint validity cannot be less than {0} hour; replaced with minimum allowed value: {0} hour", this.fingerprintValidityMinVal));
		return this.fingerprintValidityMinVal;
	} else if (fpValidityInHours &gt; this.fingerprintValidityMaxVal) {
		gs.addInfoMessage(gs.getMessage("Browser fingerprint validity cannot be more than {0} hours; replaced with maximum allowed value: {0} hours", this.fingerprintValidityMaxVal));
		return this.fingerprintValidityMaxVal;
	}
	return fpValidityInHours;
}

function validateMFAMaxRememberedBrowsers(value, prevValue){
	if (value == '' || isNaN(value)) {
		if(!isNaN(prevValue)){
			gs.addInfoMessage(gs.getMessage("Invalid value of maximum number of remembered browsers per user; replaced with existing value: {0}", prevValue));
			return prevValue;
		}
		gs.addInfoMessage(gs.getMessage("Invalid value of maximum number of remembered browsers per user; replaced with default value: {0}", this.maxRememberedBrowserDefaultVal));
		return this.maxRememberedBrowserDefaultVal;
	} else if (value &lt; this.maxRememberedBrowserMinVal) {
		gs.addInfoMessage(gs.getMessage("At least {0} browser per user must be allowed to remember; replaced with minimum allowed value: {0}", this.maxRememberedBrowserMinVal));
		return this.maxRememberedBrowserMinVal;
	} else if (value &gt; this.maxRememberedBrowserMaxVal) {
		gs.addInfoMessage(gs.getMessage("More than {0} browsers per user cannot be remembered; replaced with maximum allowed value: {0}", this.maxRememberedBrowserMaxVal));
		return this.maxRememberedBrowserMaxVal;
	}
	return value;
}

function updateAutoFlushRecord(ageInSeconds){
	var gr = new GlideRecord("sys_auto_flush");
	if(gr.isValid()){
		gr.get("fa213ae073033300fdbd04fbc4f6a77e");
		gr.query();
		if(gr.next()){
			gr.age=ageInSeconds;
			gr.update();
			gs.log('Updated MFA browser fingerprint table auto flush job age to : '+ ageInSeconds + " seconds.");
		}
	}
}]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-08-07 13:45:48&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path/&gt;
        &lt;sys_id&gt;0fea19be730f3300fdbd04fbc4f6a7dd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Validate MFA Browser FP Cookie Life Span&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Integration - Multifactor Authentication" source="com.snc.integration.multifactor.authentication"&gt;5b99f4e43cf1311068bcf327dfe37fe4&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_0fea19be730f3300fdbd04fbc4f6a7dd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-08-07 17:46:00&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=0fea19be730f3300fdbd04fbc4f6a7dd"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:56:34</sys_created_on>
        <sys_id>3b5da85d83701210c6695855eeaad307</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate MFA Browser FP Cookie Life Span</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_3b5da85d83701210c6695855eeaad307</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:56:34</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
