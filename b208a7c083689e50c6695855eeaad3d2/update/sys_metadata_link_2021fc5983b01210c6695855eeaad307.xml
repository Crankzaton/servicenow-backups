<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2b311ae673811300099f98b8caf6a7da</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ATFSnapshotHelper&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ATFSnapshotHelper&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ATFSnapshotHelper = Class.create();
ATFSnapshotHelper.prototype = Object.extendsObject(AbstractAjaxProcessor, {
	process: function() {
		var name = this.getParameter('sysparm_name');
		if (name == 'getComponentsFromSnapshot')
			return JSON.stringify(this.getComponentsFromSnapshot(this.getParameter('sysparm_test_id'),
				this.getParameter('sysparm_step_order'), this.getParameter('sysparm_methods')));
		if (name == 'findSnapshot')
			return JSON.stringify(this.findSnapshot(this.getParameter('sysparm_test_id'),
			 this.getParameter('sysparm_step_order')));
	},

	/** Given a test sys_id and step order, finds the relevant snapshot and returns all components in it (in a format digestible by select2) */
	getComponentsFromSnapshot: function(testSysId, stepOrder, methods) {
		if (!methods)
			methods = "";

		var mugshotCacheComponents = new sn_atf.ATFSnapshot().getUIComponentsFromMugshotCache(testSysId, stepOrder);
		var uiComponents = {};
		var snapshotId = this.findSnapshot(testSysId, stepOrder);
		if (snapshotId) {
			var componentsByType = new sn_atf.ATFSnapshot().getUIComponentsByType(snapshotId, methods);
			componentsByType = this._addMugshotCacheComponents(componentsByType, mugshotCacheComponents);
			uiComponents['children'] = componentsByType;
		} else
			uiComponents['children'] = mugshotCacheComponents;

		var results = [];
		results.push(uiComponents);

		var components = {};
		components['results'] = results;
		return components;
	},

	/** Given a test sys_id and step order, finds the relevant snapshot and returns all components in it as a choice list */
	getComponentsFromSnapshotAsChoiceList: function(currentStepGR) {
        var methods = "";
        if (currentStepGR.step_config.toString() === "def25c4b73730300c79260bdfaf6a700")
        	methods = "click";

		var mugshotCacheComponents = new sn_atf.ATFSnapshot().getUIComponentsFromMugshotCache(currentStepGR.test, currentStepGR.order);
		var components;
		var snapshotId = this.findSnapshot(currentStepGR.test, currentStepGR.order);
		if (snapshotId) {
			components = new sn_atf.ATFSnapshot().getUIComponentsByType(snapshotId, methods);
			components = this._addMugshotCacheComponents(components, mugshotCacheComponents);
		} else
			components = mugshotCacheComponents;

		var componentChoiceList = new GlideChoiceList();
		for (var i = 0; i &lt; components.length; i += 1) {
			var component = components[i];
			// component.id is the locator here (it has to be 'id' for select2 to work correctly)
			componentChoiceList.add(new GlideChoice(component.id, component.text + ' [' + component.component_id + '] &lt;' + component.tag + '&gt;'));
		}

		return componentChoiceList;
	},

	findSnapshot: function(testSysId, stepOrder) {
		return new sn_atf.ATFSnapshot().findSnapshot(testSysId, stepOrder);
	},

	/**
	 * Adds components from the mugshot cache if they don't already exist in the list of components
	 */
	_addMugshotCacheComponents: function(components, mugshotCacheComponents) {
		var existingMugshotHashes = [];
		for (var i = 0; i &lt; components.length; i += 1)
			existingMugshotHashes.push(components[i].id);

		for (i = 0; i &lt; mugshotCacheComponents.length; i += 1) {
			var mugshotCacheComponent = mugshotCacheComponents[i];
			if (existingMugshotHashes.indexOf(mugshotCacheComponent.id) === -1) {
				components.push(mugshotCacheComponent);
				existingMugshotHashes.push(mugshotCacheComponent.id);
			}
		}

		return components;
	},

    type: 'ATFSnapshotHelper'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2018-03-27 20:28:34&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2b311ae673811300099f98b8caf6a7da&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ATFSnapshotHelper&lt;/sys_name&gt;
        &lt;sys_package display_value="Automated Test Framework - Custom UI" source="com.glide.automated_testing_impl.custom_ui"&gt;5728b4203cf1311068bcf327dfe37f8c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2b311ae673811300099f98b8caf6a7da&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2018-07-13 22:52:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:00</sys_created_on>
        <sys_id>2021fc5983b01210c6695855eeaad307</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ATFSnapshotHelper</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2021fc5983b01210c6695855eeaad307</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:00</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
