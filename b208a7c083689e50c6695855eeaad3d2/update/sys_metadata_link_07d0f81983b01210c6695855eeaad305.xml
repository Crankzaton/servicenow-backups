<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2000516273320110491d235f04f6a709</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.SLAAsyncQueueHealthCheckSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;SLAAsyncQueueHealthCheckSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SLAAsyncQueueHealthCheckSNC = Class.create();
SLAAsyncQueueHealthCheckSNC.prototype = {
    initialize: function() {
    },

	check: function() {
		this._recoverRecordsWithNoJob();
		this._recoverRecordsWithNonExistentJob();
	},

	/* Set back to "ready" any records with a state of "queued" or "processing" but do not have an SLA Async Job
	   Records with these values will never be processed by the delegator again so need to be updated back to "ready"

	   An example of when this can happen is if a node is restarted while an SLA Async job is running */
	_recoverRecordsWithNoJob: function() {
		var slaAsyncQueueGr = new GlideRecord(SLAAsyncSNC.SLA_ASYNC_QUEUE);
		slaAsyncQueueGr.addQuery("state", "IN", "queued,processing");
		slaAsyncQueueGr.addNullQuery("sys_trigger");

		this._setRecordsToReady(slaAsyncQueueGr);
	},

	/* Set back to "ready" any records with a state of "queued" or "processing" which reference an SLA Async Job that
	   no longer exists

	   An example of when this can happen is if a node crashes while an SLA Async job is running */
	_recoverRecordsWithNonExistentJob: function() {
		var slaAsyncQueueGr = new GlideAggregate(SLAAsyncSNC.SLA_ASYNC_QUEUE);
		slaAsyncQueueGr.addQuery("state", "IN", "ready,queued,processing");
		slaAsyncQueueGr.addNotNullQuery("sys_trigger");
		slaAsyncQueueGr.setWorkflow(false);
		slaAsyncQueueGr.groupBy("sys_trigger");
		slaAsyncQueueGr.query();

		while (slaAsyncQueueGr.next()) {
			var triggerJobId = slaAsyncQueueGr.getValue("sys_trigger");
			if (this._triggerJobExists(triggerJobId))
				continue;

			var recoverSlaAsyncQueueGr = new GlideRecord(SLAAsyncSNC.SLA_ASYNC_QUEUE);
			recoverSlaAsyncQueueGr.addQuery("state", "IN", "ready,queued,processing");
			recoverSlaAsyncQueueGr.addQuery("sys_trigger", triggerJobId);

			this._setRecordsToReady(recoverSlaAsyncQueueGr);			
		}
	},

	_triggerJobExists: function(triggerJobId) {
		if (!triggerJobId)
			return false;
		
		var sysTriggerGr = new GlideRecord("sys_trigger");
		sysTriggerGr.setWorkflow(false);
		return sysTriggerGr.get(triggerJobId);
	},

	_setRecordsToReady: function(slaAsyncGr) {
		if (!slaAsyncGr || typeof slaAsyncGr.getTableName !== "function" || slaAsyncGr.getTableName() !== SLAAsyncSNC.SLA_ASYNC_QUEUE)
			return;

		slaAsyncGr.setWorkflow(false);
		slaAsyncGr.setValue("sys_trigger", "");
		slaAsyncGr.setValue("state", "ready");
		slaAsyncGr.updateMultiple();
	},

	type: 'SLAAsyncQueueHealthCheckSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-04-14 12:51:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2000516273320110491d235f04f6a709&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SLAAsyncQueueHealthCheckSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Service level management" source="com.snc.sla"&gt;e2d7bc6c3cb1311068bcf327dfe37f1f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2000516273320110491d235f04f6a709&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-04-19 10:58:18&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:49</sys_created_on>
        <sys_id>07d0f81983b01210c6695855eeaad305</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SLAAsyncQueueHealthCheckSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_07d0f81983b01210c6695855eeaad305</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:49</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
