<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>afbec8ef53960110001cddeeff7b12bb</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ContractManagementUtilsAJAX&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description&gt;Common util for any Ajax calls from the client side&lt;/description&gt;
        &lt;name&gt;ContractManagementUtilsAJAX&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ContractManagementUtilsAJAX = Class.create();
ContractManagementUtilsAJAX.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	_validateStartDate: function (startDate, startDateLabel) {
		if (!startDate) {
			return '';
		}
		var startDateInternal;
		try {
			startDateInternal = global.AssetUtils.getInternalDate(startDate,
				gs.getSession().getUser().getDateFormat()).getNumericValue();
		} catch (error) {
			return gs.getEscapedMessage('{0} is invalid', startDateLabel);
		}
		var currentDateInternal = new GlideDateTime().getLocalDate().getNumericValue();
		if (startDateInternal &lt; currentDateInternal) {
			return gs.getEscapedMessage("{0} needs to be at least today's date", startDateLabel);
		}
		return '';
	},

	_validateEndDate: function (startDate, startDateLabel, endDate, endDateLabel) {
		if (!endDate) {
			return '';
		}
		var startDateInternal;
		var endDateInternal;
		var userDateFormat = gs.getSession().getUser().getDateFormat();
		if (startDate) {
			try {
				startDateInternal = global.AssetUtils.getInternalDate(startDate,
					userDateFormat).getNumericValue();
			} catch (error) {
				return gs.getEscapedMessage('{0} is invalid', startDateLabel);
			}
		}

		try {
			endDateInternal = global.AssetUtils.getInternalDate(endDate,
				userDateFormat).getNumericValue();
		} catch (error) {
			return gs.getEscapedMessage('{0} is invalid', endDateLabel);
		}

		var currentDateInternal = new GlideDateTime().getLocalDate().getNumericValue();

		if (gs.nil(startDateInternal) &amp;&amp; endDateInternal &lt;= currentDateInternal) {
			return gs.getEscapedMessage("{0} needs to be at least after today's date", endDateLabel);
		}

		if (!gs.nil(startDateInternal) &amp;&amp; endDateInternal &lt;= startDateInternal) {
			return gs.getEscapedMessage('{0} must be after {1}', [endDateLabel, startDateLabel]);
		}

		return '';
	},

	validateStartEndDates: function () {
		var startDate = this.getParameter('sysparm_start_date');
		var endDate = this.getParameter('sysparm_end_date');
		var startDateLabel = this.getParameter('sysparm_start_date_label');
		var endDateLabel = this.getParameter('sysparm_end_date_label');

		if (!startDate || !endDate) {
			return '';
		}

		var output = '';
		output = this._validateStartDate(startDate, startDateLabel);
		if (gs.nil(output)) {
			output = this._validateEndDate(startDate, startDateLabel, endDate, endDateLabel);
		}

		return output;
	},

	calculateRenewalEndDatesUsingOptions: function () {
		var output = {
			startDate: '',
			endDate: '',
			errorMessage: '',
		};

		var C_OPTION_MAPPING = {
			'1 year': {
				y: 1,
				m: 0,
				d: 0,
			},
			'2 years': {
				y: 2,
				m: 0,
				d: 0,
			},
			'3 years': {
				y: 3,
				m: 0,
				d: 0,
			},
		};

		var startDate = this.getParameter('sysparm_start_date');
		var startDateLabel = this.getParameter('sysparm_start_date_label');
		var renewalOptions = this.getParameter('sysparm_renewal_options');
		var endDate = this.getParameter('sysparm_end_date');
		var endDateLabel = this.getParameter('sysparm_end_date_label');
		var errors = '';
		if (!startDate) {
			return JSON.stringify(output);
		}
		errors = this._validateStartDate(startDate, startDateLabel);
		if (gs.nil(errors)) {
			output.startDate = startDate;
			if (renewalOptions !== '') {
				if (typeof C_OPTION_MAPPING[renewalOptions] !== 'undefined') {
					var years = C_OPTION_MAPPING[renewalOptions].y;
					var months = C_OPTION_MAPPING[renewalOptions].m;
					var days = C_OPTION_MAPPING[renewalOptions].d;
					var endDateObject = new GlideDateTime(startDate);
					endDateObject.addDays(days - 1);
					endDateObject.addMonths(months);
					endDateObject.addYears(years);
					output.endDate = endDateObject.getDate().getDisplayValue();
				}
			} else {
				errors = this._validateEndDate(startDate, startDateLabel, endDate, endDateLabel);
				if (gs.nil(errors)) {
					output.endDate = endDate;
				}
			}
		} else {
			output.errorMessage = errors;
		}
		return JSON.stringify(output);
	},
	cancelContract: function() {
		var sysId = this.getParameter('sysparm_sys_id');
		var gr = new GlideRecord('ast_contract');
		gr.get(sysId);
		new global.ContractManagementUtils().activateRateCards(gr, false);
		gr.state = 'cancelled';
		gr.substate = '';
		gr.update();
	},
	type: 'ContractManagementUtilsAJAX',
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-23 14:08:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;afbec8ef53960110001cddeeff7b12bb&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ContractManagementUtilsAJAX&lt;/sys_name&gt;
        &lt;sys_package display_value="Contract Management" source="com.snc.contract_management"&gt;53e738ac3cb1311068bcf327dfe37ff3&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_afbec8ef53960110001cddeeff7b12bb&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-04-20 18:07:01&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:59</sys_created_on>
        <sys_id>a000c59d83341210c6695855eeaad30a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ContractManagementUtilsAJAX</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a000c59d83341210c6695855eeaad30a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:59</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
