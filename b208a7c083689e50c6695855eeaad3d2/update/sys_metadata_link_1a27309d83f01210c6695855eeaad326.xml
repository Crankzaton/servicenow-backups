<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7e7c3da453222010df5dddeeff7b12a2</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nb_action.NBAActionInputPillParser&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NBAActionInputPillParser&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NBAActionInputPillParser = Class.create();
NBAActionInputPillParser.prototype = {
    initialize: function() {
        this.CONTEXT_EXPR_START = "{{vp_context";
        this.FLOW_OUTPUT_EXPR_START = "{{vp_flow_outputs";
        this.SEARCH_OUTPUT = "{{search_result";
        this.SEARCH_TEASER_TEXT = "{{search_teaser_text}}";
        this.EXPR_END = "}}";
        this.EXPR_START = "{{";
        this.GENIUS_RESULT="{{genius_result";
    },

    parseActionInputsPill: function(actionInputsGlideVar, flowOutputsObj, contextGr) {
        var actionInputValues = {};
        for (var actionInputName in actionInputsGlideVar) {
            if (actionInputName != "sys_meta" &amp;&amp; actionInputName != "sys_id") {
                var parameterizedInputValue = actionInputsGlideVar[actionInputName].getDisplayValue();
                var parsedInputValue = this.getParsedInputValue(parameterizedInputValue, flowOutputsObj, contextGr);

                //The following check is satisfied when the glidevar values are static
                if (parsedInputValue === parameterizedInputValue) {
                    if (!gs.nil(actionInputsGlideVar[actionInputName].sys_id))
                        parsedInputValue = actionInputsGlideVar[actionInputName].getRefRecord();
                    else
                        parsedInputValue = actionInputsGlideVar[actionInputName];
                }
                actionInputValues[actionInputName] = parsedInputValue;
            }
        }
        return actionInputValues;
    },

    getParsedInputValue: function(parameterizedInputValue, flowOutputsObj, contextGr) {
        var parsedInputValue = parameterizedInputValue;
        var pattern = /(\{{[a-z0-9_.-?]*}})/gi;
        var results = parameterizedInputValue.match(pattern);
        var returnValue, pillvariable;
        if (!gs.nil(results)) {
            for (var i = 0; i &lt; results.length; i++) {
                var result = results[i];
                if (result.indexOf(this.CONTEXT_EXPR_START) != -1)
                    returnValue = this.getParsedInputFromContext(result, contextGr, parsedInputValue);

                else if (result.indexOf(this.FLOW_OUTPUT_EXPR_START) != -1) {
                    pillvariable = result.substring(this.FLOW_OUTPUT_EXPR_START.length + 1, result.lastIndexOf(this.EXPR_END));
                    returnValue = this.getParsedInputFromFlowOutputs(pillvariable, flowOutputsObj, parsedInputValue);
                } else if (result.indexOf(this.SEARCH_OUTPUT) != -1 || result == this.SEARCH_TEASER_TEXT) {
                    pillvariable = result.substring(this.EXPR_START.length, result.lastIndexOf(this.EXPR_END));
                    returnValue = this.getParsedInputFromFlowOutputs(pillvariable, flowOutputsObj, parsedInputValue);
                }
                else if(result.indexOf(this.GENIUS_RESULT) != -1)
				{
					pillvariable = result.substring(this.GENIUS_RESULT.length+1, result.lastIndexOf(this.EXPR_END));
                    returnValue = this.getParsedInputFromFlowOutputs(pillvariable, flowOutputsObj, parsedInputValue);
				}

                parsedInputValue = this.getFinalParsedInputValue(result, returnValue, parsedInputValue, parameterizedInputValue);
            }
        }
        return parsedInputValue;
    },

    getFinalParsedInputValue: function(result, returnValue, parsedInputValue, parameterizedInputValue) {
        if (result.length &lt; parameterizedInputValue.length) {
            if (sn_nb_action.NextBestActionUtil.isValidRecord(returnValue) &amp;&amp; !gs.nil(returnValue.getTableName())) {
                return parsedInputValue.replace(result, returnValue.getDisplayValue());
            } else {
                return parsedInputValue.replace(result, returnValue);
            }
        }
        return returnValue;
    },

    getParsedInputFromContext: function(pillExpr, contextGr, parsedInputValue) {
        if (pillExpr.length == this.CONTEXT_EXPR_START.length + this.EXPR_END.length) {
            return contextGr;
        } else {
            var pillvariable = pillExpr.substring(this.CONTEXT_EXPR_START.length + 1, pillExpr.lastIndexOf(this.EXPR_END));
            var replaceValue = this.getReplaceValueFromGr(contextGr, pillvariable);
            var parsedInput = gs.nil(replaceValue) ? Constants.STRING_WHITESPACE : replaceValue;
            return parsedInput;
        }
    },



    getParsedInputFromFlowOutputs: function(pillvariable, flowOutputsObj, parsedInputValue) {
        var variables = pillvariable.split(".");
        if (variables.length &gt; 1) {
            if (flowOutputsObj[variables[0]] != '' &amp;&amp; !gs.nil(flowOutputsObj[variables[0]].isValidRecord())) {
                var lookupStr = pillvariable.substring(variables[0].length + 1);
                var replaceValue = this.getReplaceValueFromGr(flowOutputsObj[variables[0]], lookupStr);
                var parsedInput = gs.nil(replaceValue) ? Constants.STRING_WHITESPACE : replaceValue;
                return parsedInput;
            } else if (flowOutputsObj[variables[0]] == '')
                return Constants.STRING_WHITESPACE;
        } else if ((flowOutputsObj[pillvariable] instanceof GlideRecord) &amp;&amp; flowOutputsObj[pillvariable].hasNext()) {
            var outputList = [];
            while (flowOutputsObj[pillvariable].next()) {
                var gr = new GlideRecord(flowOutputsObj[pillvariable].getTableName());
                gr.get(flowOutputsObj[pillvariable].sys_id);
                outputList.push(gr);
            }
            return outputList;
        } else if (flowOutputsObj[pillvariable] == '')
            return Constants.STRING_WHITESPACE;
        else
            return flowOutputsObj[pillvariable];

    },

    //For resolving the reference fields
    getReplaceValueFromGr: function(gr, lookupStr) {
        var replaceValue = gr.getElement(lookupStr).getRefRecord();
        if (gs.nil(replaceValue)) {
            replaceValue = gr.getDisplayValue(lookupStr);
            return replaceValue;
        } else if (replaceValue.isValidRecord()) {
            return replaceValue;
        }
        return null;
    },

    //Parser logic for Flow inputs in Input generator table

    parseFlowInputsPill: function(flowInputsGlideVar, contextGr) {
        var flowInputValues = {};
        for (var flowInputName in flowInputsGlideVar) {
            if (flowInputName != "sys_meta" &amp;&amp; flowInputName != "sys_id") {
                var parameterizedInputValue = flowInputsGlideVar[flowInputName].getDisplayValue();
                var parsedInputValue = this.getParsedInputValue(parameterizedInputValue, {}, contextGr);

                //The following check is satisfied when the glidevar values are static
                if (parsedInputValue === parameterizedInputValue) {
                    if (!gs.nil(flowInputsGlideVar[flowInputName].sys_id))
                        parsedInputValue = flowInputsGlideVar[flowInputName].getRefRecord();
                    else
                        parsedInputValue = flowInputsGlideVar[flowInputName];
                }
                flowInputValues[flowInputName] = parsedInputValue;
            }
        }
        return flowInputValues;
    },


    type: 'NBAActionInputPillParser'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-02-22 08:19:52&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7e7c3da453222010df5dddeeff7b12a2&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;49&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NBAActionInputPillParser&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommended Actions" source="sn_nb_action"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Recommended Actions"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7e7c3da453222010df5dddeeff7b12a2&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-24 12:31:31&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:20</sys_created_on>
        <sys_id>1a27309d83f01210c6695855eeaad326</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NBAActionInputPillParser</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_1a27309d83f01210c6695855eeaad326</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:20</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
