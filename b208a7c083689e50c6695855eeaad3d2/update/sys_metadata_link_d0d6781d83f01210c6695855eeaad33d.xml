<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>625763576c903110f877fd400b57d6cd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_hr_core.hr_PrivateNotesCrudAPISNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;hr_PrivateNotesCrudAPISNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var hr_PrivateNotesCrudAPISNC = Class.create();
hr_PrivateNotesCrudAPISNC.prototype = {
    initialize: function() {
        this.PRIVATE_NOTE_TABLE = 'sn_hr_core_private_note';
    },

    /**
     * Creates a private note and returns the note details. 
     * @param {String} params - sys_id of HR case
     * @param {String} params - user notes 
     * @returns {Object} - Object with note details and last updated time
     */
    createNote: function(hrCaseId, note) {
        if (!hrCaseId || !note)
            return null;

        var grNote = new GlideRecordSecure(this.PRIVATE_NOTE_TABLE);
        grNote.setValue('note', note);
        grNote.setValue('hr_case', hrCaseId);
        grNote.setValue('user', gs.getUserID());
        var noteId = grNote.insert();
        if (gs.nil(noteId))
            throw new Error('Failed to create private note');

        return {
            note: grNote.getValue('note'),
            updatedTime: grNote.getValue('sys_updated_on')
        };
    },

    /**
     * Edit a private note and returns the note details. 
     * @param {String} hrCaseId - sys_id of HR case
     * @param {String} params - user notes 
     * @returns {Object} - Object with note details and last updated time
     */
    editNote: function(hrCaseId, note) {
        if (!hrCaseId)
            return false;

        var grNote = this._getPrivateNoteForUser(hrCaseId);

        grNote.setValue('note', note);

        if (!grNote.update())
            throw new Error('Failed to edit private note');

        return {
            note: grNote.getValue('note'),
            updatedTime: grNote.getValue('sys_updated_on')
        };
    },

    /**
     * Delete a private note. 
     * @param {String} hrCaseId - sys_id of HR case
     * @returns {Boolean} - true if successful
     */
    deleteNoteForUser: function(hrCaseId) {
        if (!hrCaseId)
            return false;

        var grNote = this._getPrivateNoteForUser(hrCaseId);

        if (!grNote.deleteRecord())
            throw new Error('Failed to delete private note');

        return true;
    },

    /**
     * Deletes all notes for a case. 
     * @param {String} hrCaseId - sys_id of HR case
     * @returns {Boolean} - true if successful
     */
    deleteAllNotesForCase: function(hrCaseId) {
        if (!hrCaseId)
            return false;
        var gr = new GlideRecord(this.PRIVATE_NOTE_TABLE);
        gr.addQuery('hr_case', hrCaseId);
        gr.query();
        gr.deleteMultiple();
    },

    /**
     * Retrieve private notes details for logged in user. 
     * @param {String} hrCaseId - sys_id of HR case
     * @returns {Boolean} - true if successful
     */
    getPrivateNoteDetailsForUser: function(hrCaseId) {
        var noteGr = this._getPrivateNoteForUser(hrCaseId);

        if (!noteGr)
            return null;

        return {
            note: noteGr.getValue('note'),
            updatedTime: noteGr.getValue('sys_updated_on')
        };
    },

    _getPrivateNoteForUser: function(hrCaseId) {
        var gr = new GlideRecordSecure(this.PRIVATE_NOTE_TABLE);
        gr.addQuery('hr_case', hrCaseId);
        gr.addQuery('user', gs.getUserID());
        gr.query();
        if (!gr.next())
            throw new Error('Private note not found');

        return gr;
    },

    type: 'hr_PrivateNotesCrudAPISNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-08-02 13:43:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;625763576c903110f877fd400b57d6cd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;23&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;hr_PrivateNotesCrudAPISNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Human Resources: Core" source="sn_hr_core"&gt;d4ac3fff5b311200a4656ede91f91af2&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Human Resources: Core"&gt;d4ac3fff5b311200a4656ede91f91af2&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_625763576c903110f877fd400b57d6cd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-08-07 12:27:38&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:50</sys_created_on>
        <sys_id>d0d6781d83f01210c6695855eeaad33d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>hr_PrivateNotesCrudAPISNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_d0d6781d83f01210c6695855eeaad33d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:50</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
