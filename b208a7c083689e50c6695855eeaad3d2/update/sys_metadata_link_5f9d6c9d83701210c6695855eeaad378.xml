<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1f3a2f3123c10300cc4bcb0a56bf65e0</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;wm_order&lt;/collection&gt;
        &lt;condition/&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Create Appointment&lt;/name&gt;
        &lt;order&gt;10000&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {

	// appointment creation logic //
	var sn_appointment = current.variables.sn_appointment;
	var helper = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT_BOOKING_IMPL);
	if (helper.validateAppointment(sn_appointment)) {
		var max = parseInt(gs.getProperty('sn_apptmnt_booking.user_max_new_appointments_daily', 100));
        var canBookAppointment = new sn_apptmnt_booking.AppointmentBookingUtil().canBookAppointment(max);
		var sn_appointmentJSON = JSON.parse(sn_appointment);
		
		var platform = sn_appointmentJSON.config.view;
		var url;
		
		if (!canBookAppointment) {
			current.setAbortAction(true);
			// redirecting user to the same record producer
			if(platform == 'platform'){
				url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&amp;sysparm_catalog_view=catalog_field_service_catalog&amp;sysparm_error_code=LIMIT_REACHED";
			}else{
				url = "?id=sc_cat_item&amp;sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&amp;sysparm_error_code=LIMIT_REACHED";
			} 
		} 

		var appointmentConfig = new GlideRecord(sn_apptmnt_booking.AppointmentBookingConstants.CONFIG_TABLE);
		appointmentConfig.get(sn_appointmentJSON.config.service_config.appointment_booking_config);
		
		//Checking and updating Capacity Usage, if availaibility is based on capacity
		var capacityMode = (appointmentConfig.availability_method == "capacity_based" &amp;&amp; GlidePluginManager.isActive("com.snc.fsm_capacity_management"));
		if(capacityMode){
			var capacityObj = new DynamicSchedulingCapacityManagement().updateUsageWithoutTask(sn_appointmentJSON, current);
			if(gs.nil(capacityObj) || !capacityObj.hasCapacity){
				current.setAbortAction(true);
				if(platform == 'platform'){
					url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&amp;sysparm_catalog_view=catalog_field_service_catalog&amp;sysparm_error_code=LIMIT_REACHED";
				}else{
					url = "?id=sc_cat_item&amp;sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&amp;sysparm_error_code=LIMIT_REACHED";
				} 
			}
		}
		
		// creating an appointment
		var appointmentId = helper.submitAppointmentFromPortal(sn_appointment, current, sn_appointmentJSON.config.opened_for, sn_appointmentJSON.config.location, current.short_description, current.description);
		
		if(gs.nil(appointmentId)){
			if(capacityMode &amp;&amp; !gs.nil(capacityObj)){
				//Reducing the usage for the usageId on capacity with the amount of capacity used.
				var capacityQuery = new sn_fsm_capacity_mg.FSMCapacityQueryUtil();
				for(var i=0; i&lt;capacityObj.usages; i++){
					var usageObj = capacityObj.usages[i];
					capacityQuery.updateUsage(usageObj.usageId, -usageObj.usedCapacity);
				}
			}
			
			current.setAbortAction(true);
			if(platform == 'platform'){
				url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&amp;sysparm_catalog_view=catalog_field_service_catalog&amp;sysparm_error_code=CREATION_FAILED";
			}else{
				url = "?id=sc_cat_item&amp;sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&amp;sysparm_error_code=CREATION_FAILED";
			} 
			
		}
		
		if(appointmentId){
			if(capacityMode &amp;&amp; !gs.nil(capacityObj) &amp;&amp; !gs.nil(capacityObj.task)){
				capacityObj.task.insert(); //Creating the appointment task used in Capacity
				current.task_created = true;
			}
			
			if(platform == 'platform'){
				url = "/wm_order.do?sys_id="+current.sys_id;
			}
			else{
				url = "";
			}	 
			
		}
		
		//redirecting to the appropriate page
		if (pm.isActive('com.glide.service-portal.customer-portal'))
			gs.setRedirect(url);
		
		if(platform == 'platform'){
			url = "/wm_order.do?sys_id="+current.sys_id;
		}else{
			url = "/csm?id=fsm_ticket&amp;table=wm_order&amp;sys_id="+current.sys_id+"&amp;view=csp";
		}	
		var message = 'Please track your appointment request here &lt;a href="'+url+'"&gt;'+current.number+'&lt;/a&gt;';
		//Do not want to show error message since we are already redirecting to the work order page.
		//gs.addInfoMessage(message);
	}
	
})(current, previous);
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-09-07 22:49:53&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;1f3a2f3123c10300cc4bcb0a56bf65e0&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Create Appointment&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_1f3a2f3123c10300cc4bcb0a56bf65e0&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-08-24 10:06:12&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=1f3a2f3123c10300cc4bcb0a56bf65e0"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:57:37</sys_created_on>
        <sys_id>5f9d6c9d83701210c6695855eeaad378</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Create Appointment</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_5f9d6c9d83701210c6695855eeaad378</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:57:37</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
