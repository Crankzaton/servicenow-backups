<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.run_calc_brs != false</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Recalculate</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
 try{
  var isDataSeparationSkippedFromNowOnwards = typeof DataSeparatorGlobalUtil !== "undefined" ? DataSeparatorGlobalUtil.skipDataSeparation() : false;
  var taskExclusions = new PlannedTaskRecalculationExclusion();
  var enginePreferencehandlers = new GlideScriptedExtensionPoint().getExtensions("enginePreferencehandlers");
  var skipRecalc = false;

  var preEngineHandler = new PreEngineHandlers();
  var enginePreferences = preEngineHandler.getEnginePreferences(current.getValue('sys_class_name')); 
  var enginePrefJson = JSON.parse(enginePreferences);
  if(enginePrefJson.hasOwnProperty('skip_recalc')){
   skipRecalc = enginePrefJson.skip_recalc;
  }

  if( !(taskExclusions.isExcluded(current) || skipRecalc)) {
   var recalculationHelper = new RecalculationHelper();
   var doRecalculate = recalculationHelper.recalculate(current);
   if(doRecalculate) {
    var tasksToRecalculate = recalculationHelper.tasksToRecalculate(current);
    var plannedTaskAPI = new SNC.PlannedTaskAPI();
    plannedTaskAPI.setEnginePreference(enginePreferences);
    var recalculationConstraintsStrategy = new RecalculationConstraintsStrategy();
    plannedTaskAPI.setConstraints(recalculationConstraintsStrategy.recalculationConstraint(current.top_task.getRefRecord(),current));   
    var jsonRet = plannedTaskAPI.recalculateTaskWithPreviousGr(current, true, tasksToRecalculate, previous);  
    var _previous = current.getValue('top_task') == current.getValue('sys_id') ? previous: undefined;
    PostEngineHandlers.fire(current.top_task, jsonRet, _previous, current);   
   }
  } 
 }
 finally{
  if (isDataSeparationSkippedFromNowOnwards)
   DataSeparatorGlobalUtil.honourDataSeparation();
 }
 
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:07</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9c7be49183701210c6695855eeaad3d5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Recalculate</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_9c7be49183701210c6695855eeaad3d5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:07</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=9c7be49183701210c6695855eeaad3d5"/>
</record_update>
