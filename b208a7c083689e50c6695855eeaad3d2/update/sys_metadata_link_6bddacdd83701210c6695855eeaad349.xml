<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2a785cf2b3100300f7d1a13816a8dc8e</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;
    &lt;sys_script action="INSERT_OR_UPDATE"&gt;
        &lt;abort_action&gt;false&lt;/abort_action&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;action_delete&gt;false&lt;/action_delete&gt;
        &lt;action_insert&gt;true&lt;/action_insert&gt;
        &lt;action_query&gt;false&lt;/action_query&gt;
        &lt;action_update&gt;false&lt;/action_update&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;add_message&gt;false&lt;/add_message&gt;
        &lt;advanced&gt;true&lt;/advanced&gt;
        &lt;change_fields&gt;false&lt;/change_fields&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;collection&gt;sys_cb_variable_accelerator&lt;/collection&gt;
        &lt;condition&gt;!current.isActionAborted() &amp;amp;&amp;amp; !VariableAcceleratorUtil.hasExistingPrompt(current) &amp;amp;&amp;amp; !VariableAcceleratorUtil.isDeleteAction(action)&lt;/condition&gt;
        &lt;description/&gt;
        &lt;execute_function&gt;false&lt;/execute_function&gt;
        &lt;filter_condition/&gt;
        &lt;is_rest&gt;false&lt;/is_rest&gt;
        &lt;message/&gt;
        &lt;name&gt;Generate variable and prompt&lt;/name&gt;
        &lt;order&gt;100&lt;/order&gt;
        &lt;priority&gt;100&lt;/priority&gt;
        &lt;rest_method/&gt;
        &lt;rest_method_text/&gt;
        &lt;rest_service/&gt;
        &lt;rest_service_text/&gt;
        &lt;rest_variables/&gt;
        &lt;role_conditions/&gt;
        &lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var send_to_modal = GlideTransaction.get().getRequestParameter("sysparm_close_on_success");
	send_to_modal = send_to_modal == "true";
	
	var topic_var;
	if (shouldMakeVariable(current))
		topic_var = makeVariable(current);

	if (shouldMakeVariable(current) &amp;&amp; !topic_var) {
		gs.addInfoMessage(gs.getMessage("Unable to insert variable."));
		current.setAbortAction(true);
		return;
	}

	if (topic_var.getValue("internal_type") == "choice") {
		if (!current.choices.nil())
			makeAndInsertChoices(JSON.parse(current.getValue("choices")), topic_var);
	}
	
	if (current.getValue("var_only") == 1) {
		if (send_to_modal) {
			gs.setRedirect("/cb_close_modal.do?sysparm_direct=true");
			return;
		}
		
		//we aren't making a new prompt, didn't ask for the modal, so redirect to the list
		gs.setRedirect("/topic_variable_list.do?sysparm_query=model=" + current.getValue("topic"));
		return;
	}
	
	var prompt;
	if (shouldMakePrompt(current))
		prompt = makeRegularPrompt(current, topic_var);
	
	if (!prompt) {
		gs.addInfoMessage(gs.getMessage("Unable to insert prompt"));
		current.setAbortAction(true);
		return;
	}

	if (send_to_modal) {
		gs.setRedirect("/cb_close_modal.do?sysparm_direct=true");
		return;
	}
	
	//reload the prompt to fetch an accurate scope
	var prompt_id = prompt.getUniqueValue();
	prompt.initialize();
	prompt.get(prompt_id);
	
	var prompt_url = gs.generateURL("sys_cb_prompt", prompt_id);
	prompt_url += "&amp;sysparm_transaction_scope=" + prompt.getValue("sys_scope");
	
	//we're done, we didn't send to modal, so send them to the prompt
	gs.setRedirect(prompt_url);
	
	
	
	function shouldMakeVariable(current) {
		return current.getValue("type") != "output";
	}
	
	function shouldMakePrompt(current) {
		return current.getValue("var_only") != 1;
	}
	
	function makeVariable(current) {
		if (current.getValue("type") == "output")
			return null;
		
		if (variableNameExists(current)) {
			current.setAbortAction(true);
			gs.addInfoMessage(gs.getMessage("That variable name is not available. Please choose a different name."));
			return null;
		}
		
		//generate the variable
		gs.debug("Creating new variable of type {0}", getInternalType(current.getValue("type")));
		
		var topic_var = new GlideRecord("topic_variable");
		topic_var.newRecord();
		topic_var.setValue("internal_type", getInternalType(current.getValue("type")));
		topic_var.setValue("model", current.getValue("topic"));
		topic_var.setValue("model_id", current.getValue("topic"));
		topic_var.setValue("name", "var__m_topic_variable_" + current.getValue("topic"));
		topic_var.setValue("element", current.getValue("column"));
		topic_var.setValue("label", current.getValue("name"));
		
		if (needsMaxLength(current.getValue("type")))
			topic_var.setValue("max_length", getMaxLengthForType(current.getValue("type")));
		
		if (needsReference(current.getValue("type"))) {
			gs.debug("Setting reference to {0}, qual to {1}",
					 current.getValue("table"),
					 current.getValue("reference_condition")
			);
			
			topic_var.setValue("reference", current.getValue("table"));
			topic_var.setValue("use_reference_qualifier", "simple");
			topic_var.setValue("limit", current.getValue("limit"));
			
			if (current.reference_condition.hasMapping()) {
				topic_var.reference_qual_condition.setValueMapping(
					current.reference_condition.getValueMapping()
				);
				gs.debug("ValueMapping set to {0}", current.reference_condition.getValueMapping());
			} else {
				topic_var.setValue("reference_qual_condition",
					current.getValue("reference_condition")
				);
				gs.debug("Regular value. Setting to {0}", current.getValue("reference_condition"));
			}
		}
		
		if (!current.default_value.nil()) {
			gs.debug("Setting default_value to {0}", current.getValue("default"));
			topic_var.setValue("default_value", current.getValue("default_value"));
		}
		
		if (current.getValue("type") == "choice") {
			gs.debug("Setting choice to {0}", current.getValue("choice_type"));
			topic_var.setValue("choice", current.getValue("choice_type"));	
		}
		
		if (current.getValue("type") == "url") {
			gs.debug("Adding query parameters to the URL");
			if (current.query_parameters.hasMapping()) {
				topic_var.query_parameters.setValueMapping(
					current.query_parameters.getValueMapping()
				);
				gs.debug("ValueMapping set to {0}", current.query_parameters.getValueMapping());
			} else {
				topic_var.setValue("query_parameters", current.getValue("query_parameters"));
				gs.debug("Regular value set to {0}", current.getValue("query_parameters"));
			}
		}
	
		gs.debug("Inserting new variable with type {0} and name {1} and label {2}",
				 topic_var.getValue("internal_type"),
				 topic_var.getValue("element"),
				 topic_var.getValue("label")
		);
	
		if (topic_var.insert())
			return topic_var;
		
		return null;
	}
	
	function variableNameExists(current) {
		var name = current.getValue("column");
		var topic = current.getValue("topic");
		var type = current.getValue("type");
		
		if (type == "output")
			return false;
		
		var topic_var = new GlideRecord("topic_variable");
		topic_var.addQuery("model", topic);
		topic_var.addQuery("element", name);
		topic_var.query();
		
		return topic_var.hasNext();
	}
	
	function getInternalType(type) {
		if(type == "boolean")
			type = "bool";
		
		var map = {
			string : "string",
			reference : "reference",
			integer : "integer",
			ph_number : "ph_number",
			bool : "boolean",
			glide_date_time : "glide_date_time",
			email : "email",
			url : "url",
			user_image : "user_image",
			glide_list : "glide_list",
			guid : "guid",
			choice : "choice"
		};
	
		if (map.hasOwnProperty(type))
			return map[type];
		
		return "string";	
	}

	function needsMaxLength(type) {
		var map = {
			"reference" : true,
			"glide_list" : true,
			"string" : true
		};
		
		if (map.hasOwnProperty(type))
			return true;
		
		return false;
	}

	function needsReference(type) {
		if (type == "reference" || type == "glide_list")
			return true;
		
		return false;
	}
	
	function getMaxLengthForType(type) {
		gs.debug("Getting max_length for type {0}", type);
		var default_value = 250;
		var map = {
			string : 250,
			reference : 32,
			glide_list : 32,
			defaultValue : 250
		};
		
		if (map.hasOwnProperty(type))
			return map[type];
		
		return defaultValue;
	}

	function makeAndInsertChoices(choices, new_variable) {
		gs.debug("Creating choices for {0}", choices);
		var i = 0;
		for (var key in choices) {
			if (choices.hasOwnProperty(key)) {
				gs.debug("Making choice {0}", key);
				if (makeChoice(key, choices[key], new_variable, i))
					i++;
				else
					gs.addInfoMessage(gs.getMessage("Unable to create choice {0} {1}", [key, choices[key]]));
			}
		}
	}

	function makeChoice(label, value, new_variable, idx) {
		gs.debug("Making choice {0} with value {1} for variable {2}",
				 label, value, new_variable.getValue("label")
		);
		var newChoice = new GlideRecord("sys_choice");
		newChoice.setValue("element", new_variable.getValue("element"));
		newChoice.setValue("name", new_variable.getValue("name"));
		newChoice.setValue("label", label);
		newChoice.setValue("value", value);
		newChoice.setValue("sequence", idx);
		
		return newChoice.insert();
	}

	function needsDefaultValue(type, choice_type) {
		gs.debug("Checking if {0} (choice type {1}) needs a default value", type, choice_type);
		if (type == "choice" &amp;&amp; choice_type == "3")
			return true;
		
		if (type == "url")
			return true;
		
		return false;
	}
	
	function makeRegularPrompt(current, topic_var) {
		gs.debug("Making a regular prompt");
		
		var prompt = new GlideRecord("sys_cb_prompt");
		prompt.newRecord();
		prompt.setValue("topic_goal", current.getValue("topic_goal"));
		prompt.setValue("parent", current.getValue("parent"));
		prompt.setValue("optional", current.getValue("optional"));
		
		if (topic_var)
			prompt.setValue("variable", topic_var.getValue("element"));
	
		if (current.getValue("prompt_label"))
			prompt.setValue("name", current.getValue("prompt_label"));
		else if (current.getValue("prompt_msg"))
			prompt.setValue("name", current.getValue("prompt_msg"));
		else if (current.getValue("acknowledge_msg"))
			prompt.setValue("name", current.getValue("acknowledge_msg"));
		else
			prompt.setValue("name", "(blank)");
		
		if (current.prompt_msg.hasMapping()) {
			gs.debug("Prompt has a mapping value, so setting that to {0}", current.prompt_msg.getValueMapping());
			prompt.prompt_msg.setValueMapping(current.prompt_msg.getValueMapping());
		} else {
			gs.debug("Prompt does not have a mapping value, so setting that to {0}", current.getValue("prompt_msg"));
			prompt.setValue("prompt_msg", current.getValue("prompt_msg"));
		}
		
		if (current.acknowledge_msg.hasMapping()) {
			gs.debug("Acknowledge has a mapping value, so setting that to {0}",
					 current.acknowledge_msg.getValueMapping()
			);
			prompt.acknowledge_msg.setValueMapping(current.acknowledge_msg.getValueMapping());
		} else {
			gs.debug("Acknowledge does not have a mapping value, so setting that to {0}",
					 current.getValue("acknowledge_msg")
			);
			prompt.setValue("acknowledge_msg", current.getValue("acknowledge_msg"));
		}
		
		if (current.reference_nil.hasMapping()) {
			gs.debug("Ref nil has a mapping value, so setting that to {0}",
					 current.reference_nil.getValueMapping()
			);
			prompt.reference_nil.setValueMapping(current.reference_nil.getValueMapping());
		} else {
			gs.debug("Ref nil does not have a mapping value, so setting that to {0}",
					 current.getValue("reference_nil")
			);
			prompt.setValue("reference_nil", current.getValue("reference_nil"));
		}
		
		if (current.getValue("type") == "choice" &amp;&amp; current.getValue("choice_type") == "1")
			prompt.setValue("optional", true);
		
		if (prompt.insert())
			return prompt;
			
		return null;
	}

})(current, previous);]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-08-04 04:38:32&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;2a785cf2b3100300f7d1a13816a8dc8e&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;66&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;Generate variable and prompt&lt;/sys_name&gt;
        &lt;sys_overrides/&gt;
        &lt;sys_package display_value="Glide Conversation Server" source="com.glide.cs"&gt;ad7df0203c75311068bcf327dfe37f75&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_2a785cf2b3100300f7d1a13816a8dc8e&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2017-09-24 17:45:21&lt;/sys_updated_on&gt;
        &lt;template/&gt;
        &lt;when&gt;before&lt;/when&gt;
    &lt;/sys_script&gt;
    &lt;sys_translated_text action="delete_multiple" query="documentkey=2a785cf2b3100300f7d1a13816a8dc8e"/&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:58:44</sys_created_on>
        <sys_id>6bddacdd83701210c6695855eeaad349</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Generate variable and prompt</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_6bddacdd83701210c6695855eeaad349</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:58:44</sys_updated_on>
        <tablename>sys_script</tablename>
    </sys_metadata_link>
</record_update>
