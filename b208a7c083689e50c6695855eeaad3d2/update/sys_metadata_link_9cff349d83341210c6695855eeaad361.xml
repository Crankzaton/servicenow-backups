<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ab56a948772a811031e3b3c64b5a99bf</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_table_builder.FlowRecords&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;FlowRecords&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FlowRecords = Class.create();

FlowRecords.prototype = {

    /**
     * @param {string} - tableName on records exists
     */
    initialize: function(options) {
        this.tableName = options &amp;&amp; options.tableName || '';
        this.sortQuery = options &amp;&amp; options.sortQuery || '';
        this.query = options &amp;&amp; options.query || '';
    },

    /**
     */
    getRecordDetails: function() {
        var rows = [];
        var triggerTypes = [
            'record_create_or_update',
            'record_create',
            'record_update',
            //'record_delete',
        ];
        var flowIdTriggerMap = this._getFlowSysIds(triggerTypes, this.tableName);
        var flowSysIds = Object.keys(flowIdTriggerMap);
        var query = TBUtil.applySortQuery(this.query, this.sortQuery);
        var flows = FlowQueries.getFlowDataOfTable(flowSysIds, query);
        var canCreate = flows.canCreate();

        while (flows.next()) {
            var flowDetail = this._getFlowDetail(flows, flowIdTriggerMap);
            rows.push(flowDetail);
        }

        return {
            rows: rows,
            canCreate: canCreate,
        };
    },

    _getFlowDetail: function(obj, flowIdTriggerMap) {
        var sysId = obj.getValue('sys_id');
        return {
            sysId: sysId,
            name: obj.getDisplayValue('name'),
            active: !!JSON.parse(obj.getValue('active')),
            triggerType: flowIdTriggerMap[sysId],
            status: obj.getDisplayValue('status'),
            updated: obj.getDisplayValue('sys_updated_on'),
            updatedBy: this._getUserDisplayName(obj.getDisplayValue('sys_updated_by')),
            canDelete: obj.canDelete(),
            canWrite: obj.canWrite(),
        };
    },

    _getFlowSysIds: function(triggerTypes, tbName) {
        var triggers = FlowQueries.getTriggersOfType(triggerTypes);
        var sysIds = {};
        while (triggers.next()) {
            var tableName = triggers.getDisplayValue('trigger_inputs.table');
            if (tableName === tbName) {
                var triggerType = triggers.getValue('trigger_type');
                var sysId = triggers.getValue('flow');
                sysIds[sysId] = triggerType;
            }
        }
        return sysIds;
    },

    _getUserDisplayName: function(userName) {
        var users = new GlideRecord('sys_user');
        users.addQuery('user_name', userName);
        users.query();
        if (users.next()) {
            return users.getDisplayValue('name');
        }
    },

    type: 'FlowRecords'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-03-25 09:48:40&lt;/sys_created_on&gt;
        &lt;sys_id&gt;ab56a948772a811031e3b3c64b5a99bf&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;84&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FlowRecords&lt;/sys_name&gt;
        &lt;sys_package display_value="Table Builder" source="sn_table_builder"&gt;f53f19bac362fa22ca2e93692d32f18f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Table Builder"&gt;f53f19bac362fa22ca2e93692d32f18f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_ab56a948772a811031e3b3c64b5a99bf&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-12-13 13:54:34&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 09:17:42</sys_created_on>
        <sys_id>9cff349d83341210c6695855eeaad361</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FlowRecords</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9cff349d83341210c6695855eeaad361</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 09:17:42</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
