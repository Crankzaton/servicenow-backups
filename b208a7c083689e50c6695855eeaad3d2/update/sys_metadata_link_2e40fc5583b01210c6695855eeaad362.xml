<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>05b971650b32320036e62c7885673afd</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_templated_snip.NoteTemplate&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;NoteTemplate&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var NoteTemplate = Class.create();
NoteTemplate.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    ajaxSetTemplateVariables: function() {
        var template = this.getParameter("sysparm_template");
        var tableName = this.getParameter("sysparm_table_name");
        var tableSysId = this.getParameter("sysparm_table_sys_id");

        return this.setTemplateVariables(template, tableName, tableSysId);

    },

    setTemplateVariables: function(template, tableName, tableSysId) {
        var matched = template.match(/\${([^}]*)}/g);
        var gr = new GlideRecord(tableName);

        if (gr.get(tableSysId)) {
            for (var i in matched) {
                var element = gr;
                var field;
                var str = matched[i].match(/\${(.*)}/).pop();
                str = str.trim();
                if (!str)
                    continue;
                var references = str.split(/[\.]+/g);
                for (var j = 0; j &lt; references.length; j++) {
                    field = references[j];
                    if (j == references.length - 1)
                        break;
                    if (element != null &amp;&amp; element.isValidField(field)) {
                        if (element.getElement(field).canRead())
                            element = element.getElement(field).getRefRecord();
                        else {
                            template = template.replace(matched[i], "&lt;font color='#ff0000'&gt;" + matched[i] + "&lt;/font&gt;");
                            break;
                        }
                    } else
                        break;
                }
                if (element != null &amp;&amp; element.isValidField(field)) {
                    if (element.getElement(field).canRead()) {
                        if (element.getElement(field).getED().getInternalType() == 'string') {
                            var replacedValue = "";
                            if (!gs.nil(element.getDisplayValue(field)))
                                replacedValue = element.getDisplayValue(field).replace(/(?:\r\n|\r|\n)/g, '&lt;br&gt;');
                            template = template.replace(matched[i], replacedValue);
                        } else
                            template = template.replace(matched[i], element.getDisplayValue(field));

                    } else
                        template = template.replace(matched[i], "&lt;font color='#ff0000'&gt;" + matched[i] + "&lt;/font&gt;");

                } else if (field == "Date") {
                    var currentTime = new GlideDateTime();
                    currentTime = currentTime.getDisplayValue().toString();
                    currentTime = currentTime.split(" ");
                    var currentDate = currentTime[0];

                    template = template.replace(matched[i], currentDate);
                } else if (field == "current_user") {
                    template = template.replace(matched[i], gs.getUserDisplayName());
                } else
                    template = template.replace(matched[i], "&lt;font color='#ff0000'&gt;" + matched[i] + "&lt;/font&gt;");

            }

        }

        return template;
    },

    validateTemplate: function(parsedBody, tableName) {
        var unEvaluatedVariable = [];
        var inaccessibleVariable = [];

        if (!tableName)
            return parsedBody;
        else {
            parsedBody = this.resetErroredSpanInDocument(parsedBody);
            var regex = /\${([^}]*)}/g;
            var matched = parsedBody.match(regex);
            var gr = new GlideRecord(tableName);
            gr.initialize();
            if (gr) {
                for (var i in matched) {
                    if (unEvaluatedVariable.indexOf(matched[i]) &gt; -1 || inaccessibleVariable.indexOf(matched[i]) &gt; -1 || matched[i] == "${Date}" || matched[i] == "${current_user}")
                        continue;
                    var element = gr;
                    var field;

                    var str = matched[i].match(/\${(.*)}/).pop();
                    str = str.trim();

                    if (!str)
                        continue;
                    var references = str.split(/[\.]+/g);
                    for (var j = 0; j &lt; references.length; j++) {
                        field = references[j];
                        if (j == references.length - 1)
                            break;
                        if (element.isValidField(field)) {
                            if (element.getElement(field).canRead())
                                element = element.getElement(field).getRefRecord();

                            else {
                                parsedBody = parsedBody.replace(matched[i], '&lt;span class="errored-field" style="color:#ff0000;"&gt;' + matched[i] + '&lt;/span&gt;');
                                inaccessibleVariable.push(matched[i]);
                                break;
                            }
                        } else
                            break;
                    }
                    if (element.isValidField(field)) {
                        if (!element.getElement(field).canRead()) {
                            parsedBody = parsedBody.replace(matched[i], '&lt;span class="errored-field" style="color:#ff0000;"&gt;' + matched[i] + '&lt;/span&gt;');
                            inaccessibleVariable.push(matched[i]);
                        }
                    } else {
                        if (field == "Date" || field == "current_user")
                            continue;

                        parsedBody = parsedBody.replace(matched[i], '&lt;span class="errored-field" style="color:#ff0000;"&gt;' + matched[i] + '&lt;/span&gt;');
                        unEvaluatedVariable.push(matched[i]);
                    }
                }
            }
            var result = [];
            result.push(parsedBody);
            result.push(unEvaluatedVariable);
            result.push(inaccessibleVariable);
            return result;

        }
    },

    resetErroredSpanInDocument: function(documentBody) {
        //regular expression that matches all the span pairs in the documentBody with class as errored-field
        var spanRegex = /&lt;\s*span\s*class="errored-field".*?&gt;/g;
        var matchedSpanTags = documentBody.match(spanRegex);
        for (var i in matchedSpanTags) {
            documentBody = documentBody.replace(matchedSpanTags[i], "&lt;span&gt;");
        }
        return documentBody;
    },

    saveToM2MMLTable: function(taskId, templateId) {
        var task = this.getParameter("sysparm_task") || taskId;
        var template = this.getParameter("sysparm_template") || templateId;

        var noteTemplateForTable = new GlideRecord('sn_m2m_note_template_for_table');
        noteTemplateForTable.addQuery('task', task);
        noteTemplateForTable.addQuery('note_template', template);
        noteTemplateForTable.query();

        //if the template selected by User has been applied to the task already, increase the count
        if (noteTemplateForTable.next()) {
            noteTemplateForTable.count = parseInt(noteTemplateForTable.count) + 1;
            var templateUpdate = noteTemplateForTable.update();

            return templateUpdate;
        }

        //if the template selected by User never been applied to the task, insert new record and set count to 1
        noteTemplateForTable.initialize();
        noteTemplateForTable.note_template = template;
        noteTemplateForTable.task = task;
        noteTemplateForTable.count = 1;

        var noteTemplateId = noteTemplateForTable.insert();

        return noteTemplateId;
    },

    type: 'NoteTemplate'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-05-17 23:40:17&lt;/sys_created_on&gt;
        &lt;sys_id&gt;05b971650b32320036e62c7885673afd&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;100&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;NoteTemplate&lt;/sys_name&gt;
        &lt;sys_package display_value="Templated Snippets" source="sn_templated_snip"&gt;2d3597c80b67320036e62c7885673a43&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Templated Snippets"&gt;2d3597c80b67320036e62c7885673a43&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_05b971650b32320036e62c7885673afd&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-07 09:35:47&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:09:19</sys_created_on>
        <sys_id>2e40fc5583b01210c6695855eeaad362</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>NoteTemplate</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2e40fc5583b01210c6695855eeaad362</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:09:19</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
