<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Regenerate the asym keys</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function() {

    // Perform some prechecks on the instance before regeneration. 
    // 1. Check if it is an on-prem instance. If yes, skip the regeneration. 
    var onPremInstance = gs.getProperty('glide.installation.self_hosted');
    if (onPremInstance == 'true') {
        gs.info('Regeneration of asym keys: It is an on-prem instance. Hence skipping regeneration asym keys');
        return;
    }

    // 2. Check if it EJBCA enabled instance, If yes skip the re-generation since we will not generate the EJBCA keys locally.
    var ejbcaEnabled = gs.getProperty('com.glide.kmf.ejbca.enabled');
    if (ejbcaEnabled == 'true') {
        gs.info('Regeneration of asym keys: EJBCA is enabled, and we cannot generate the EJBCA keys locally, hence skipping the re-generation of asym key');
        return;
    }

    var instanceId = gs.getProperty('instance_id');

    // 3. Process the KMF health, and check if the vault is reachable. If not rechable, skip the re-generation.
    if (!isVaultHealthy(instanceId))
        return;

    //4. Deactivate the asym instance keys
    var success = true;

    gs.info('Regeneration of asym keys: Deactivating the asym keys');
    success = deactivateAsymKeys();
    if (!success) {
        gs.info('Regeneration of asym keys: Failed to deactivate the asym keys');
        return;
    }
    gs.info('Regeneration of asym keys: Successfully deactivated the asym keys');


    //5. Deactivate the public key wrap, public key sigver key pairs
    gs.info('Regeneration of asym keys: Deactivating the key pairs');
    success = deactivateInstanceCertificates(instanceId);
    if (!success) {
        gs.info('Regeneration of asym keys: Failed to deactivate the asym key pairs');
        return;
    }
    gs.info('Regeneration of asym keys: Successfully deactivated the asym key pairs');

    //6. Run ensure all to make sure we have generated the asym keys with right padding
    gs.info('Regeneration of asym keys: Executing ensureAllInstanceInitialKeysExist');
    success = new sn_kmf.KMFInstanceKeyAPI().ensureAllInstanceInitialKeysExist();
    if (!success) {
        gs.info('Regeneration of asym keys: Failed to execute ensureAllInstanceInitialKeysExist, manual intervention is needed');
        return;
    }
    gs.info('Regeneration of asym keys: Successfully executed ensureAllInstanceInitialKeysExist');

    function deactivateAsymKeys() {
        var dbu = new GlideDBUpdate('sys_kmf_instance_key');
        var dbq = new GlideDBQuery('sys_kmf_instance_key');

        try {
            dbq.addQuery('key_type.sibling_key_type', '!=', 'NULL');
            dbq.addQuery('key_alias', 'instancePublicKeyWrap').addOrCondition('key_alias', 'instancePrivateSigVer');
            dbq.addQuery('origin', 'servicenow');
            dbq.addQuery('key_lifecycle_state', 'active');
            dbu.setQuery(dbq);
            dbu.setMultiple(true);
            dbu.setValue('key_lifecycle_state', 'deactivated');
            dbu.setValue('last_rotated_date', new GlideDate());
            dbu.setValue('deactivation_date', new GlideDate());

            dbu.executeAndReturnException();
        } catch (ex) {
            gs.error('Exception while updating the instance key: ' + ex);
            return false;
        } finally {
            dbu.close();
            dbq.close();
        }

        return true;
    }

    function deactivateInstanceCertificates(instanceId) {
        var gr = new GlideRecord('sys_certificate');
        gr.addEncodedQuery('name=' + instanceId + 'publickeywrap^ORname=' + instanceId + 'publicsigver');
        gr.query();

        while (gr.next()) {
            gr.setValue('active', 'false');
            var result = gr.update('deactivating asym key pair using fix script');
            if (!result)
                return false;
        }

        return true;
    }

    function isVaultHealthy(instanceId) {
        var kmfAutomationInterface = new SNC.KMFAutomationInterface();

        var hasProperValidAsymKeys = kmfAutomationInterface.isInstancePublicKeysPresentOnVault(instanceId);
        if (hasProperValidAsymKeys) {
            gs.info('Regeneration of asym keys: Vault keys are healthy, hence skipping the re-generation of asym key');
            return false;
        }
  
  var canCommunicateWithVault = kmfAutomationInterface.canCommunicateWithVault();
        if (!canCommunicateWithVault) {
            gs.info('Regeneration of asym keys: Vault is not reachable, hence skipping the re-generation of asym key');
            return false;
        }

        return true;
    }

})();]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:49:16</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b8bbe01583701210c6695855eeaad3d3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Regenerate the asym keys</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_b8bbe01583701210c6695855eeaad3d3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:49:16</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=b8bbe01583701210c6695855eeaad3d3"/>
</record_update>
