<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>144fbc675352030097a2ddeeff7b1238</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ConsumerDao&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Dao for use cases related to Contact object.&lt;/description&gt;
        &lt;name&gt;ConsumerDao&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ConsumerDao = Class.create();
ConsumerDao.prototype = {
	initialize: function() {
		this.logger = CSMBaseLogger.getLogger("ConsumerDao");
	},

	createConsumer : function(params){
		var consumerGr = CSMBaseAPIUtils.prepareGlideRecord(params, CSMBaseConstants.CONSUMER_TABLE);
		var consumerCreateResult = consumerGr.insert();
		if(!consumerCreateResult){
			this.logger.error("last error message = " + consumerGr.getLastErrorMessage());
			return CSMBaseAPIErrorHandler.getFormattedError(403, "Operation Failed", consumerGr.getLastErrorMessage());
		}
		if(consumerCreateResult &amp;&amp; params.social_handle &amp;&amp; params.social_channel &amp;&amp; params.social_handle_url){
			this.socialUtils = new SocialUtils();
			this.socialUtils.bindConsumerToSocialProfile(consumerCreateResult, params.social_handle, params.social_handle_url, params.social_channel);
		}
		this.logger.info("inside ConsumerDao:createConsumer result = "+consumerCreateResult);
		return consumerCreateResult;
	},

	getConsumerBySearchQueryString : function(searchQueryStr, offset, limit){
		this.logger.info("inside ConsumerDao:getConsumerBySearchQueryString searchQueryStr = "+searchQueryStr);

		var resultJson = {};
		var consumerObjArr = [];
		var consumerGr = new GlideRecordSecure(CSMBaseConstants.CONSUMER_TABLE);
		if(JSUtil.notNil(searchQueryStr))
			consumerGr.addEncodedQuery(searchQueryStr);
		consumerGr.orderBy("name");
		var firstRow = parseInt(offset);
		var lastRow = firstRow+parseInt(limit);
		consumerGr.chooseWindow(firstRow, lastRow);
		consumerGr.query();
		resultJson.totalRecords = CSMBaseAPIUtils.getRowsCount(CSMBaseConstants.CONSUMER_TABLE,searchQueryStr);
		while(consumerGr.next()){
			var consumerObj = CSMBaseAPIUtils.getJSONFromGR(consumerGr);
			this.logger.debug("inside ConsumerDao:getConsumerBySearchQueryString consumerObj = "+JSON.stringify(consumerObj));
			consumerObjArr.push(consumerObj);
		}
		resultJson.consumers = consumerObjArr;
		return resultJson;
	},
	
	getConsumerById : function(id, displayValue){
		this.logger.info("inside ConsumerDao:getConsumerById id = "+id);

		var consumerObj = null;
		if(id){
			var consumerGr = new GlideRecordSecure(CSMBaseConstants.CONSUMER_TABLE);
			if(consumerGr.get(id)){
				consumerObj = CSMBaseAPIUtils.getJSONFromGR(consumerGr,displayValue);
				this.logger.debug("inside ConsumerDao:getConsumerById consumerObj = "+JSON.stringify(consumerObj));
			}
		}
		return consumerObj;
	},
	
	/** 
	* This function returns the sys_user record class name for any given user/contact
	* If user is not specified, this returns logged in user's class name
	* Currently this function is being used by CSP portal's Support Profile menu as check condition
	*/
	getContactClass: function(userID) {
		if(gs.nil(userID))
			userID = gs.getUser().getID();
		var userClassKey = userID + "_userClass",
			userClass = gs.getSession().getClientData(userClassKey);
		if (gs.nil(userClass)) {
			var sysUserGR = new GlideRecord("sys_user");
			if (sysUserGR.get(userID)) {
				userClass = sysUserGR.getValue("sys_class_name");
				gs.getSession().putClientData(userClassKey, userClass);
			}
		}
		return userClass;
	},

	type: 'ConsumerDao'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2017-11-14 00:10:13&lt;/sys_created_on&gt;
        &lt;sys_id&gt;144fbc675352030097a2ddeeff7b1238&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;37&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ConsumerDao&lt;/sys_name&gt;
        &lt;sys_package display_value="Customer Service Base Entities" source="com.snc.cs_base"&gt;4f2cce6b47664210cd4e1ce4316d43a4&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_144fbc675352030097a2ddeeff7b1238&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-03-05 12:04:02&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:37</sys_created_on>
        <sys_id>2190f4d583b01210c6695855eeaad30c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ConsumerDao</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_2190f4d583b01210c6695855eeaad30c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:37</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
