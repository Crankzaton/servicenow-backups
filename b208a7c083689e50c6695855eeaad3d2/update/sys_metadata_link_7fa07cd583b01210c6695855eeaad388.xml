<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>18fd73e853c3101046dfddeeff7b1249</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.ESXMigrationUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ESXMigrationUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ESXMigrationUtil;

(function() {
    var tablesToRetire = ['cmdb_ci_vcenter_datastore', 'cmdb_ci_vcenter_network', 'cmdb_ci_esx_resource_pool'];

    ESXMigrationUtil = {
        retireCIsForESXForwardMigration: retireCIsForESXForwardMigration
    };

    /* This script include will be called to retire all duplicate CIs during esx migration

		auto - forward migration will be triggered automatically during vCenter discovery
		manual - reverse migration will be triggered by an on demand scheduled job

		Given a list of sys_ids of esx server,
		retire all the entities for which server column is equal to given esx server
		@param esx_sys_ids : list of sys_ids of  all esx server for this vCenter
    */

    function retireCIsForESXForwardMigration(esx_sys_ids, logger) {
        var invalidSysIds = [];
        var esxForMigration = [];

        esx_sys_ids.forEach(function(sysid) {
            var gr = new GlideRecord('cmdb_ci_esx_server');
            gr.addQuery('sys_id', sysid);
            gr.query();
            if (!gr.next())
                invalidSysIds.push(sysid);
            else {
                var vmGR = new GlideRecord('cmdb_ci_vm_object');
                vmGR.addQuery('server', sysid);
                vmGR.addQuery('install_status', 1);
                vmGR.setLimit(1);
                vmGR.query();
                if (vmGR.next()) {
                    esxForMigration.push(sysid); // stand alone esx server is migrated to vCenter
                }
            }
        });

        if (invalidSysIds.length &gt; 0) {
            if (logger)
                logger.error("ESXi to vCenter migration script aborted. Following sys_ids are invalid for esx server " + invalidSysIds + " Please provide correct sys_ids");
            else
                gs.error("ESXi to vCenter migration script aborted. Following sys_ids are invalid for esx server " + invalidSysIds + " Please provide correct sys_ids");
            return;
        }
		if(esxForMigration.length &gt; 0){
			if (logger)
				logger.info(gs.getMessage("Triggering migration script for esx server {0}", esxForMigration.toString()));
			tablesToRetire.forEach(function(table) {
				if (table == 'cmdb_ci_vcenter_datastore') {
					// fetch all installed datastores
					var dsGR = new GlideRecord('cmdb_ci_vcenter_datastore');
					dsGR.addQuery('server', 'IN', esxForMigration);
					dsGR.addQuery('install_status', 1);
					dsGR.query();
					// retire all related cmdb_ci_vcenter_datastore_disk for the datastore
					while (dsGR.next()) {
						var dskGR = new GlideRecord('cmdb_ci_vcenter_datastore_disk');
						dskGR.addQuery('datastore', dsGR.getValue('sys_id'));
						dskGR.addQuery('install_status', 1);
						dskGR.setValue('install_status', 7);
						dskGR.updateMultiple();
					}
				}
				/* Server column referring to an ESX server implies that this record was created by standalone ESX discovery,
			   so it is updated as retired.
			   install_status '7' = retired, '1' = installed
			*/
				var gr = new GlideRecord(table);
				gr.addQuery('server', 'IN', esxForMigration);
				gr.addQuery('install_status', 1);
				gr.setValue('install_status', 7);
				gr.updateMultiple();
			});
		}
    }
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-09-01 18:07:51&lt;/sys_created_on&gt;
        &lt;sys_id&gt;18fd73e853c3101046dfddeeff7b1249&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ESXMigrationUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Core Automation" source="com.snc.core.automation"&gt;6ca7f42c3cb1311068bcf327dfe37f6a&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_18fd73e853c3101046dfddeeff7b1249&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;pooja.chugwani&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-10-12 03:52:40&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:02</sys_created_on>
        <sys_id>7fa07cd583b01210c6695855eeaad388</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ESXMigrationUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7fa07cd583b01210c6695855eeaad388</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:02</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
