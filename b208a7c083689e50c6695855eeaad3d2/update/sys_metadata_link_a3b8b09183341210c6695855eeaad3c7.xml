<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>9e03c49a7403111003e47792fd0af75c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_uibtk_api.ClientScript&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ClientScript&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[const ClientScript = Class.create();
ClientScript.prototype = Object.extendsObject(BuilderToolkitAPIBase, {
    TABLE: 'sys_ux_client_script',
    FIELDS: ['script_api_version', 'required_translations', 'type', 'script', 'target', 'macroponent', 'name', 'includes'],

    /**
     * @param fields {string[]}
     */
    initialize: function(fields) {
        BuilderToolkitAPIBase.prototype.initialize.call(this, this.TABLE, fields || this.FIELDS);
    },

    /**
     * @param record the Client Script record we are working on
     */
    getRequiredTranslations: function(record) {
        const matchingStr = record?.type === 'transform' ? "helpers\.translateSync" : "helpers\.translate";

        const translations = [];
        const regex = `${matchingStr}\\(\\s*(?:(?:\\"([^\\"\\n]+)\\")|(?:\\'([^\\'\\n]+)\\'))`;
        const matches = record.script.match(regex);
        if (matches) {
            matches.filter((match) =&gt; match &amp;&amp; match.indexOf(matchingStr.replace('\\')) === -1)
                .forEach((match) =&gt; {
                    translations.push({
                        code: null,
                        message: match,
                        comment: null
                    });
                });
        }
        return translations;
    },

    /**
     * @param clientScripts {clientScript[]} array of client scripts to work on
     * @param macroponentSysId {string} sys_id of the macroponent these scripts are tied to
     */
    upsertAndDeleteRecords: function(clientScripts = [], macroponentSysId = null) {
        // If we have no macroponentSysId, we might accidentally delete client scripts so ABORT
        if (!macroponentSysId) {
            return;
        }
        const clientScriptSysIds = clientScripts.map((cs) =&gt; cs.sysId) ?? [];
        const results = [];
        const clientScriptGR = this.getRecordsByQuery(`sys_idIN${Object.keys(clientScriptSysIds)}^ORmacroponent=${macroponentSysId}`, '', true);
        // Make sure we actually found something, then work on those
        if (clientScriptGR) {
            while (clientScriptGR.next()) {
                // If we aren't in the object, we are deleted
                if (!clientScriptSysIds.includes(clientScriptGR.getUniqueValue())) {
                    clientScriptGR.deleteRecord();
                }
                // Else we need to check for an update and remove from our list of IDs so we know what to create
                else {
                    const currentIdArr = clientScriptSysIds.splice(clientScriptSysIds.indexOf(clientScriptGR.getUniqueValue()), 1);

                    const currentScript = clientScripts.filter(({
                        sysId
                    }) =&gt; sysId === currentIdArr[0])[0];
                    const currentFieldValues = clientScriptGR.getElements().reduce(this.getFieldValues.bind(this), {});

                    // Get our required translations from the script and set them before we compare to be safe
                    currentScript.requiredTranslations = this.getRequiredTranslations(currentScript);

                    // Let's compare our field values to make sure we don't update needlessly
                    // If we don't match values, update the record and return the result
                    for (const field in currentScript) {
                        if (clientScriptGR.isValidField(field) &amp;&amp; currentFieldValues[field] !== currentScript[field]) {
                            const {
                                sysId,
                                ...fields
                            } = currentScript;
                            this.setFieldValues(clientScriptGR, fields);
                            results.push(clientScriptGR.update());
                            break;
                        }
                    }
                }
            }
        }

        // Now if we have any clientScriptIds left, we need to insert
        const remainingRecords = clientScriptSysIds.length &gt; 0 ? clientScripts.filter(({
            sysId
        }) =&gt; clientScriptSysIds.includes(sysId)) : null;
        if (remainingRecords !== null) {
            remainingRecords.forEach(({
                sysId,
                ...fields
            }) =&gt; {
                results.push(this.createRecord({
                    sysId,
                    ...fields,
                    requiredTranslations: this.getRequiredTranslations(fields)
                }));
            });
        }
        return results;
    },

    /**
     * @param records {object[]} array of records with camelCased keys
     */
    updateRecords: function(records) {
        return records.length === 0 ? true : records.map(function(record) {
            return this.updateRecord(record);
        }.bind(this));
    },

    /**
     * @param fields {object} a object with keys in camel case and values
     */
    updateRecord: function({
        sysId,
        ...fields
    }) {
        let recordGR = this.getRecordById(sysId, true);
        if (!recordGR) {
            return this.createRecord({
                sysId,
                ...fields
            });
        } else if (recordGR &amp;&amp; recordGR.canWrite() &amp;&amp; recordGR.getValue('target') !== 'preset') {
            this.setFieldValues(recordGR, fields);
            return recordGR.update();
        }
        return {
            error: true,
            reason: !recordGR ? BuilderToolkitConstants.ERRORS.NO_RECORD_FOUND : BuilderToolkitConstants.ERRORS.WRITE_ACCESS_ERROR_MESSAGE
        };
    },

    type: 'ClientScript'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-11-10 19:05:47&lt;/sys_created_on&gt;
        &lt;sys_id&gt;9e03c49a7403111003e47792fd0af75c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;41&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ClientScript&lt;/sys_name&gt;
        &lt;sys_package display_value="@devsnc/uibtk-api" source="sn_uibtk_api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="@devsnc/uibtk-api"&gt;cdfd3bed43321110e70583020cb8f28e&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_9e03c49a7403111003e47792fd0af75c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-06 17:07:30&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:46:15</sys_created_on>
        <sys_id>a3b8b09183341210c6695855eeaad3c7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ClientScript</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_a3b8b09183341210c6695855eeaad3c7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:46:15</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
