<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>current.sys_class_name == 'alm_entitlement_asset'  || current.sys_class_name == 'alm_entitlement_user'</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Ensure Entitlements do not exceed rights</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[verifyEntitlements();

function verifyEntitlements() {
 var gr = new GlideRecord("clm_m2m_contract_asset");
 gr.addQuery("asset", current.licensed_by);
 gr.addQuery("contract.license_type", 'enterprise');

 gr.addQuery("contract.starts", "<=", new GlideDateTime().getDate());
 var ce = gr.addQuery("contract.ends", ">=", new GlideDateTime().getDate());
 ce.addOrCondition("contract.ends", "");

 gr.addQuery("added", "<=", new GlideDateTime().getDate());
 var ae = gr.addQuery("removed", ">=", new GlideDateTime().getDate());
 ae.addOrCondition("removed", "");

 gr.query();
 if (!gr.next()) {
  gr = new GlideRecord('alm_entitlement');
  gr.addQuery('licensed_by', current.licensed_by);
  gr.query();
  var actualRows = gr.getRowCount();

  /* Cannot allocate more licenses than rights */
  if (actualRows >= current.licensed_by.rights) {
   gs.addErrorMessage(gs.getMessage('Cannot allocate more licenses than rights'));
   current.setAbortAction(true);
  }

  /* Warn if allocating more licenses than license pool of satisfying consumption rule */
  // Find the allocated entity's satisfying consumption rule, if any
  var allocatedEntity = (current.allocated_to || current.assigned_to) + '';
  var allocatedTable = current.allocated_to ? 'cmdb_ci' : 'sys_user';
  var consumerInfo = {
   sysId: allocatedEntity,
   table: allocatedTable,
  };
  GroupingUtil.updateConsumerGroupInfo(consumerInfo);
  var consumptionRule;
  var consumptionRulesAndLicensePools = SAMPremiumUtils.getEntitlementConsumptionRulesAndLicensePools(
   current.licensed_by + ''
  );
  var consumptionRules = Object.keys(consumptionRulesAndLicensePools);
  for (var i = 0; i < consumptionRules.length; i++) {
   var samConsumptionRule = new SamConsumptionRule(consumptionRules[i]);
   if (samConsumptionRule.canConsume(consumerInfo)) {
    consumptionRule = consumptionRules[i];
    break;
   }
  }

  // Gather all other entitlement allocations that satisfy the consumption rule and sum their quantities
  var totalAllocationQuantity = current.quantity;
  if (consumptionRule) {
   var allocationGr = new GlideRecord('alm_entitlement');
   allocationGr.addQuery('sys_id', '!=', current.sys_id);
   allocationGr.addQuery('licensed_by', current.licensed_by);
   allocationGr.query();
   if (allocationGr.next()) {
    allocatedEntity = (allocationGr.allocated_to || allocationGr.assigned_to) + '';
    allocatedTable = allocationGr.allocated_to ? 'cmdb_ci' : 'sys_user';
    consumerInfo = {
     sysId: allocatedEntity,
     table: allocatedTable,
    };
    GroupingUtil.updateConsumerGroupInfo(consumerInfo);
    if (samConsumptionRule.canConsume(consumerInfo)) {
     totalAllocationQuantity += (parseInt(allocationGr.getValue('quantity'), 10) || 0);
    }
   }
   
   // If total allocation quanity is greater than the consumption rule's license pool, display a warning
   var licensePool = consumptionRulesAndLicensePools[consumptionRule];
   if (licensePool && totalAllocationQuantity > licensePool) {
    // Get display value of consumption rule
    var consumptionRuleGr = new GlideRecord('samp_consumption_rule');
    consumptionRuleGr.get(consumptionRule);
    gs.addInfoMessage(gs.getMessage(
     'The sum of all allocations that satisfy the consumption rule ' + consumptionRuleGr.getDisplayValue() + ' are greater than its license pool ' + licensePool
    ));
   }
  }
 }
}]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:48:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>968b20d183701210c6695855eeaad3f1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Ensure Entitlements do not exceed rights</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_968b20d183701210c6695855eeaad3f1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:48:33</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=968b20d183701210c6695855eeaad3f1"/>
</record_update>
