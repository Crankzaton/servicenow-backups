<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>2d6507f988e42110fa9bf275d1a04398</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.TurfUnionUtils&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;TurfUnionUtils&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[//https://github.com/mfogel/polygon-clipping/blob/v0.15.3/src/bbox.js
var TurfUnionUtils = Class.create();
TurfUnionUtils.prototype = {
	// Warning: 'point' input will be modified and re-used (for performance)
    initialize: function () {
    },
    type: 'TurfUnionUtils',
	
};

/**
 * A bounding box has the format:
 *
 *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }
 *
 */

TurfUnionUtils.isInBbox = function(bbox, point){
  return (
    (bbox.ll.x &lt;= point.x) &amp;&amp;
    (point.x &lt;= bbox.ur.x) &amp;&amp;
    (bbox.ll.y &lt;= point.y) &amp;&amp;
    (point.y &lt;= bbox.ur.y)
  );
};

/* Returns either null, or a bbox (aka an ordered pair of points)
 * If there is only one point of overlap, a bbox with identical points
 * will be returned */
TurfUnionUtils.getBboxOverlap = function(b1, b2){
  // check if the bboxes overlap at all
  if (
    b2.ur.x &lt; b1.ll.x ||
    b1.ur.x &lt; b2.ll.x ||
    b2.ur.y &lt; b1.ll.y ||
    b1.ur.y &lt; b2.ll.y
  ) return null;

  // find the middle two X values
  var lowerX = b1.ll.x &lt; b2.ll.x ? b2.ll.x : b1.ll.x;
  var upperX = b1.ur.x &lt; b2.ur.x ? b1.ur.x : b2.ur.x;

  // find the middle two Y values
  var lowerY = b1.ll.y &lt; b2.ll.y ? b2.ll.y : b1.ll.y;
  var upperY = b1.ur.y &lt; b2.ur.y ? b1.ur.y : b2.ur.y;

  // put those middle values together to get the overlap
  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } };
};

/* Cross Product of two vectors with first point at origin */
TurfUnionUtils.crossProduct = function(a, b){return a.x * b.y - a.y * b.x;};

/* Get the x coordinate where the given line (defined by a point and vector)
 * crosses the horizontal line with the given y coordiante.
 * In the case of parrallel lines (including overlapping ones) returns null. */
TurfUnionUtils.horizontalIntersection = function(pt, v, y){
  if (v.y === 0) return null;
  return { x: pt.x + v.x / v.y * ( y - pt.y ), y: y };
};

/* Get the y coordinate where the given line (defined by a point and vector)
 * crosses the vertical line with the given x coordiante.
 * In the case of parrallel lines (including overlapping ones) returns null. */
TurfUnionUtils.verticalIntersection = function(pt, v, x){
  if (v.x === 0) return null;
  return { x: x, y: pt.y + v.y / v.x * ( x - pt.x ) };
};

/* Get the intersection of two lines, each defined by a base point and a vector.
 * In the case of parrallel lines (including overlapping ones) returns null. */
TurfUnionUtils.intersection = function(pt1, v1, pt2, v2){
  // take some shortcuts for vertical and horizontal lines
  // this also ensures we don't calculate an intersection and then discover
  // it's actually outside the bounding box of the line
  if (v1.x === 0) return TurfUnionUtils.verticalIntersection(pt2, v2, pt1.x);
  if (v2.x === 0) return TurfUnionUtils.verticalIntersection(pt1, v1, pt2.x);
  if (v1.y === 0) return TurfUnionUtils.horizontalIntersection(pt2, v2, pt1.y);
  if (v2.y === 0) return TurfUnionUtils.horizontalIntersection(pt1, v1, pt2.y);

  // General case for non-overlapping segments.
  // This algorithm is based on Schneider and Eberly.
  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244

  var kross = TurfUnionUtils.crossProduct(v1, v2);
  if (kross == 0) return null;

  var ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y };
  var d1 = TurfUnionUtils.crossProduct(ve, v1) / kross;
  var d2 = TurfUnionUtils.crossProduct(ve, v2) / kross;

  // take the average of the two calculations to minimize rounding error
  var x1 = pt1.x + d2 * v1.x, x2 = pt2.x + d1 * v2.x;
  var y1 = pt1.y + d2 * v1.y, y2 = pt2.y + d1 * v2.y;
  var x = (x1 + x2) / 2;
  var y = (y1 + y2) / 2;
  return { x: x, y: y };
};

var epsilon = Number.EPSILON;

// IE Polyfill
if (epsilon === undefined) epsilon = Math.pow(2, -52);

var EPSILON_SQ = epsilon * epsilon;

/* FLP comparator */
TurfUnionUtils.cmp = function(a, b) {
  // check if they're both 0
  if (-epsilon &lt; a &amp;&amp; a &lt; epsilon) {
    if (-epsilon &lt; b &amp;&amp; b &lt; epsilon) {
      return 0;
    }
  }

  // check if they're flp equal
  var ab = a - b;
  if (ab * ab &lt; EPSILON_SQ * a * b) {
    return 0;
  }

  // normal comparison
  return a &lt; b ? -1 : 1;
};

TurfUnionUtils.compareVectorAngles = function(basePt, endPt1, endPt2) {
  var v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y };
  var v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y };
  var kross = TurfUnionUtils.crossProduct(v1, v2);
  return TurfUnionUtils.cmp(kross, 0);
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-01-23 09:28:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;2d6507f988e42110fa9bf275d1a04398&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;TurfUnionUtils&lt;/sys_name&gt;
        &lt;sys_package display_value=""&gt;fa60558563b044509d2cba84af9c019c&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value=""&gt;fa60558563b044509d2cba84af9c019c&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_2d6507f988e42110fa9bf275d1a04398&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-01-31 10:12:54&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:13:17</sys_created_on>
        <sys_id>e831749983b01210c6695855eeaad360</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TurfUnionUtils</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e831749983b01210c6695855eeaad360</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:13:17</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
