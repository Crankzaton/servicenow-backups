<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>37ee05940f362010e70a4abec4767e55</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_mab_api.ErrorHandler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;ErrorHandler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var ErrorHandler = Class.create();
ErrorHandler.prototype = {
    initialize: function() {
    },

    type: 'ErrorHandler',

	throwBadRequestError: function (message) {
		var error = new Error(message);
		error.name = 'BadRequestError';
		error.fBadRequest = true;
		throw error;
	},

	throwBadConfigError: function (message) {
		var error = new Error(message);
		error.name = 'BadConfigurationError';
		throw error;
	},

	throwInternalError: function (message) {
		var error = new Error(message);
		error.name = 'InternalServerError';
		throw error;
	},

	throwNotFoundError: function (message) {
		var error = new Error(message);
		error.name = 'NotFoundError';
		error.fNotFound = true;
		throw error;
	},

	/**
	* Throws an error an sn_ws error when the error type is caught from within one of our services.
	*
	* @param {Error} Caught instance of one of the thrown errors from a function within in this class.
	* The name on the Error parameter indicates which type of sn web error will be thrown.
	*
	* @return {N/A} In all paths an error will be thrown.
	*/
	throwSnWsError: function (error) {
		var errorMessage = "Internal MAB error of type " + error.name + ": " + error.message;

		if (error.fBadRequest) {
			throw new sn_ws_err.BadRequestError(errorMessage);
		} else if (error.fNotFound) {
			throw new sn_ws_err.NotFoundError(errorMessage);
		} else {
			// there is no dedicated sn_ws_err for 500 errors
			gs.error(errorMessage);
			throw error; 
		}
	}
};
]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-03-05 20:37:11&lt;/sys_created_on&gt;
        &lt;sys_id&gt;37ee05940f362010e70a4abec4767e55&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;36&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;ErrorHandler&lt;/sys_name&gt;
        &lt;sys_package display_value="Mobile App Builder API" source="sn_mab_api"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Mobile App Builder API"&gt;3c64259bc7812010100f2f3bf4c2609a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_37ee05940f362010e70a4abec4767e55&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2021-03-08 18:23:24&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:35:51</sys_created_on>
        <sys_id>9f563c9983f01210c6695855eeaad399</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ErrorHandler</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9f563c9983f01210c6695855eeaad399</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:35:51</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
