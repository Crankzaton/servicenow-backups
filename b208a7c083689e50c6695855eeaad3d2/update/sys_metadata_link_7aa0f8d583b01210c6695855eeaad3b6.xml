<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>182535fb77b7e110e8601b7dae5a9961</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.UxKeyboardShortcutUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UxKeyboardShortcutUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UxKeyboardShortcutUtil = Class.create();
UxKeyboardShortcutUtil.transformKeyToUpperCase = function(shortcut) {
	var transformedShorcut = {};

	for (var key in shortcut) {
		if (key === "key") {
			transformedShorcut[key] = shortcut[key].toUpperCase();
			continue;
		}
		transformedShorcut[key] = shortcut[key];
	}

	return transformedShorcut;
};

// current.shortcut.changes() always returns true so we need to manually validate that shortcuts have indeed changed so BRs can exit early
UxKeyboardShortcutUtil.haveShortcutsChanged = function(currentShortcut, previousShortcut, defaultShortcut) {
	return UxKeyboardShortcutUtil.areShortcutsEqual(currentShortcut.mac, previousShortcut.mac) 
		&amp;&amp; !UxKeyboardShortcutUtil.areShortcutsEqual(currentShortcut.mac, defaultShortcut.mac)
		&amp;&amp; UxKeyboardShortcutUtil.areShortcutsEqual(currentShortcut.windows, previousShortcut.windows)
		&amp;&amp; !UxKeyboardShortcutUtil.areShortcutsEqual(currentShortcut.windows, defaultShortcut.windows);
};

UxKeyboardShortcutUtil.areShortcutsEqual = function(shortcut1, shortcut2) {
	var transformedShortcut1 = UxKeyboardShortcutUtil.transformKeyToUpperCase(shortcut1);
	var transformedShortcut2 = UxKeyboardShortcutUtil.transformKeyToUpperCase(shortcut2);

	return JSUtil.areEqual(transformedShortcut1, transformedShortcut2);
};

UxKeyboardShortcutUtil.convertShortcut = function(currentShortcut, previousShortcut) {
	var autoConversionEnabled = !GlideProperties.getBoolean('glide.uxf.disable_shortcut_auto_conversion', false);

	if (!autoConversionEnabled) {
		// Auto-conversion has been disabled and shortcuts have been validated, use currentShortcut
		return currentShortcut;
	}
	
	if (!currentShortcut.windows || (currentShortcut.mac &amp;&amp; !UxKeyboardShortcutUtil.areShortcutsEqual(currentShortcut.mac, previousShortcut.mac))) {
		// Windows shortcut was deleted or Mac shortcut was changed. Regenerate Windows from Mac shortcut.
		var macShortcut = UxKeyboardShortcutUtil.transformKeyToUpperCase(currentShortcut.mac);

		gs.addInfoMessage(gs.getMessage('Windows shortcut auto-converted'));

		return {
			mac: macShortcut,
			windows: {
				altKey: macShortcut.altKey,
				ctrlKey: macShortcut.metaKey,
				shiftKey: macShortcut.shiftKey,
				key: macShortcut.key
			}
		};

	}
	
	// Mac shortcut was deleted or Windows shortcut was changed. Regenerate Mac from Windows shortcut.
	var windowsShortcut = UxKeyboardShortcutUtil.transformKeyToUpperCase(currentShortcut.windows);

	gs.addInfoMessage(gs.getMessage('Mac shortcut auto-converted'));

	return {
		mac: {
			altKey: windowsShortcut.altKey,
			metaKey: windowsShortcut.ctrlKey,
			shiftKey: windowsShortcut.shiftKey,
			key: windowsShortcut.key
		},
		windows: windowsShortcut
	};
};

UxKeyboardShortcutUtil.prototype = {
    type: 'UxKeyboardShortcutUtil'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-07-09 22:09:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;182535fb77b7e110e8601b7dae5a9961&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UxKeyboardShortcutUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="UX Keyboard Shortcut" source="com.glide.ux.keyboard_shortcut"&gt;dc78571b47220210cd4e1ce4316d437f&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_182535fb77b7e110e8601b7dae5a9961&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-09-08 23:15:37&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:10:58</sys_created_on>
        <sys_id>7aa0f8d583b01210c6695855eeaad3b6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UxKeyboardShortcutUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7aa0f8d583b01210c6695855eeaad3b6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:10:58</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
