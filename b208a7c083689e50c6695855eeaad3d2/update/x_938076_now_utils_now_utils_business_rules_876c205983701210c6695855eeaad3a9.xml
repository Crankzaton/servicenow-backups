<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition>!current.sold_product.nil() || !current.install_base_item.nil()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>validate account, consumer and product</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    if (!current.account.nil()) {

        if (!current.sold_product.nil()) {
            /*  entitlement account not maching with sold product account */
            if (current.sold_product.account != current.account) {
                gs.addErrorMessage(gs.getMessage("Account selected does not match account in the sold product"));
                current.setAbortAction(true);
                return;
            }
        }

        if (!current.install_base_item.nil()) {
            /* entitlement account not maching with install base account */
            if (current.install_base_item.account != current.account) {
                gs.addErrorMessage(gs.getMessage("Account selected does not match account in the install base item"));
                current.setAbortAction(true);
                return;
            }
        }
    } else if (!current.consumer.nil()) {
        if (!current.sold_product.nil()) {
            /* entitlement consumer not maching with  sold product consumer */
            if (current.sold_product.consumer != current.consumer) {
                gs.addErrorMessage(gs.getMessage("Consumer selected does not match Consumer in the sold product"));
                current.setAbortAction(true);
                return;
            }
        }
        if (!current.install_base_item.nil()) {
            /* entitlement consumer not maching with  install base consumer */
            if (current.install_base_item.consumer != current.consumer) {
                gs.addErrorMessage(gs.getMessage("Consumer selected does not match consumer in the install base item"));
                current.setAbortAction(true);
                return;
            }
        }

    } else {

        if (!current.sold_product.nil()) {
            if (!current.sold_product.account.nil()) /* set consumer/account to consumer/account of sold product */
                current.account = current.sold_product.account;
            else
                current.consumer = current.sold_product.consumer;
        } else if (!current.install_base_item.nil()) {
            if (!current.install_base_item.account.nil()) /* set consumer/account to consumer/account of install base item */
                current.account = current.install_base_item.account;
            else
                current.consumer = current.install_base_item.consumer;
        }
    }
    if (!current.sold_product.nil()) {
        /* check if product is matching with sold_product.product */
        if (!current.product.nil()) {
            if ((current.sold_product.product != current.product)) {
                gs.addErrorMessage(gs.getMessage("Product selected does not match product in the sold product"));
                current.setAbortAction(true);
                return;
            }
        } else /* assign product = sold_prodct.product if product is empty */
            current.product = current.sold_product.product;

    }

    if (!current.sold_product.nil() && !current.install_base_item.nil()) {
        /* install base and sold item should belongs to same account  */
        if (!current.install_base_item.account.nil()) {
            if (current.install_base_item.account != current.sold_product.account) {
                gs.addErrorMessage(gs.getMessage("Sold product and install base item are not selected from the same account"));
                current.setAbortAction(true);
                return;
            }
        } else if (!current.install_base_item.consumer.nil()) {
            if (current.install_base_item.consumer != current.sold_product.consumer) {
                gs.addErrorMessage(gs.getMessage("Sold product and install base item are not selected from the same consumer"));
                current.setAbortAction(true);
                return;
            }
        }
    }

})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:25</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>876c205983701210c6695855eeaad3a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>validate account, consumer and product</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_876c205983701210c6695855eeaad3a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:25</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=876c205983701210c6695855eeaad3a9"/>
</record_update>
