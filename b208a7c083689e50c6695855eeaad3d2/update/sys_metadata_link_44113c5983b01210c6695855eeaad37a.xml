<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>27eba094c300301085c091294440dd89</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_collab_request.UserDelegatedDevPermissions&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;UserDelegatedDevPermissions&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var UserDelegatedDevPermissions = (function() {
	return {
		
		// Returns list of permission sets and roles for a given scopeId
		getPermissionSetsGrantedToUserFromScope: function(scopeId) {
			var currentUserSysId = gs.getUserID();
			var collabReqUtils = new CollabReqUtils();
			var permSetRoleList = [];
			var scopePermSetRoleAssignmentTable = new GlideRecord('sys_scope_permission_set_role_assignment');
			var userHasRoleJoinQueryCondition = scopePermSetRoleAssignmentTable.addJoinQuery('sys_user_has_role', "role", "role");
			
			userHasRoleJoinQueryCondition.addCondition("user", currentUserSysId);
			scopePermSetRoleAssignmentTable.addQuery("scope", scopeId);
			scopePermSetRoleAssignmentTable.query();
			
			while(scopePermSetRoleAssignmentTable.next()) {
				var permSetRoleObj = collabReqUtils.getObjectFromGlideRecord(scopePermSetRoleAssignmentTable, ['role', 'permission_set']);
				var permissionName = "";
				var developmentPermSetTable = scopePermSetRoleAssignmentTable.permission_set.getRefRecord();
				if (developmentPermSetTable.isValidRecord()) {
					permissionName = developmentPermSetTable.getValue("name");
					permSetRoleObj["permission_name"] = permissionName;
					permSetRoleList.push(permSetRoleObj);
				}
			}

			return permSetRoleList;
		},
		getPermSetNamesAndIdsFromObj: function(permissionsGranted) {
			var grantedPermSetNameAndId = {};
			permissionsGranted.forEach( function(permSetAndRole) {
				var permSetId = permSetAndRole["permission_set"];
				grantedPermSetNameAndId[permSetId] = permSetAndRole["permission_name"];
			});
			
			return grantedPermSetNameAndId;
		},
		
		throwAppNotFound: function(appId) {
			throw new sn_ws_err.ServiceError()
				.setStatus(404)
				.setMessage(appId ? gs.getMessage("Could not find the application {0}", appId) : gs.getMessage("Could not find the application"));
		},
		
		isScopeValid: function(scopeId) {
			var appTable = new GlideRecord("sys_app");
			
			if(appTable.get(scopeId)) {
				return appTable.isValid();
			} else {
				var storeAppTable = new GlideRecord("sys_store_app");
				storeAppTable.get(scopeId);
				
				return storeAppTable.isValid();
			}
		},
		
		canUserReadApp: function(appId) {
			var apps = new GlideRecord('sys_app');
			apps.get(appId);
			
			var storeAppTable = new GlideRecord("sys_store_app");
			storeAppTable.get(appId);

            return apps.canRead() || storeAppTable.canRead();
		}
	};
})();]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2021-05-06 21:23:58&lt;/sys_created_on&gt;
        &lt;sys_id&gt;27eba094c300301085c091294440dd89&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;UserDelegatedDevPermissions&lt;/sys_name&gt;
        &lt;sys_package display_value="Collaboration Request" source="sn_collab_request"&gt;f6ad5d41c3222010a9f5e548fa40dd69&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Collaboration Request"&gt;f6ad5d41c3222010a9f5e548fa40dd69&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_27eba094c300301085c091294440dd89&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-01-20 21:06:54&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:12:41</sys_created_on>
        <sys_id>44113c5983b01210c6695855eeaad37a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>UserDelegatedDevPermissions</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_44113c5983b01210c6695855eeaad37a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:12:41</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
