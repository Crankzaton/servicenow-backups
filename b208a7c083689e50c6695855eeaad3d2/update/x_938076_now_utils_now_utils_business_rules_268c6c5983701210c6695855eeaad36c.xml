<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="x_938076_now_utils_now_utils_business_rules">
    <x_938076_now_utils_now_utils_business_rules action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Display last test execution failure</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

 var LAST_EXECUTION_PREVIOUS_STEP_FAILURE = "<a href='{0}' target='_blank'>Last execution of the test</a> has failed on one of the previous steps. Fix the failing step to provide current page data for the new step";
 var LAST_EXECUTION_CURRENT_STEP_FAILURE = "<a href='{0}'>Last execution of the step</a> has failed with reason: {1}";
 
 //inspect last execution result for failure
 var grTestResult = new GlideRecord("sys_atf_test_result");
 grTestResult.addQuery("test", current.test);
 grTestResult.orderByDesc("sys_created_on");
 grTestResult.setLimit(1);
 grTestResult.query();
 if (grTestResult.next()) {
  if (isFailureStatus(grTestResult.status)) {
   if (!current.isNewRecord()) {
    var grStepResult = new GlideRecord("sys_atf_test_result_item");
    grStepResult.addQuery("test_result", grTestResult.sys_id);
    grStepResult.addQuery("step", current.sys_id);
    grStepResult.query();
    if (grStepResult.next())
     if (isFailureStatus(grStepResult.status)) {
      // escape any html in the failure reason message
      var reason = grStepResult.output.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
      gs.addErrorMessage(gs.getMessage(LAST_EXECUTION_CURRENT_STEP_FAILURE, [grTestResult.getLink(false), reason]));
     }
   } else
      gs.addErrorMessage(gs.getMessage(LAST_EXECUTION_PREVIOUS_STEP_FAILURE, grTestResult.getLink(false)));
  }
 }

 function isFailureStatus(status) {
   return status == "error" || status == "failure";
 }
})(current, previous);]]></script>
        <sys_class_name>x_938076_now_utils_now_utils_business_rules</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 07:52:56</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>268c6c5983701210c6695855eeaad36c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Display last test execution failure</sys_name>
        <sys_overrides/>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>x_938076_now_utils_now_utils_business_rules_268c6c5983701210c6695855eeaad36c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 07:52:56</sys_updated_on>
        <template/>
        <when>before</when>
    </x_938076_now_utils_now_utils_business_rules>
    <sys_translated_text action="delete_multiple" query="documentkey=268c6c5983701210c6695855eeaad36c"/>
</record_update>
