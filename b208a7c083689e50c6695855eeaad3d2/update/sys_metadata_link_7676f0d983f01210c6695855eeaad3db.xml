<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4387efc477703110878cd30e5b5a99c6</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_wn.WhatsNewAPIHandlerSNC&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Api handler for whats-new api endpoints&lt;/description&gt;
        &lt;name&gt;WhatsNewAPIHandlerSNC&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var WhatsNewAPIHandlerSNC = Class.create();
WhatsNewAPIHandlerSNC.prototype = {
	initialize: function() {
		this.whatsNewUtil = new sn_wn.WhatsNewUtil();
	},

	restResponseOk: {
		status: WhatsNewCommonConstants.HTTP_RESPONSE_STATUS_CODE_OK,
		message: WhatsNewCommonConstants.RECORD_INSERTED_SUCCESSFULLY
	},

	restResponseInvalid: {
		status: WhatsNewCommonConstants.HTTP_RESPONSE_STATUS_CODE_BAD_REQUEST,
		message: WhatsNewCommonConstants.INVALID_REQUEST_PAYLOAD
	},

	restResponseConflict: {
		status: WhatsNewCommonConstants.HTTP_RESPONSE_STATUS_CODE_CONFLICT,
		message: WhatsNewCommonConstants.RECORD_ALREADY_EXISTS
	},

	restResponseNotFound: {
		status: WhatsNewCommonConstants.HTTP_RESPONSE_STATUS_CODE_NOT_FOUND,
	},

	handleTotalContentCountRequest: function(payload) {
		var res = {
			total: 0,
			status: 200
		};
		var referringURL = decodeURIComponent(payload.referringURL + "");
		if(gs.nil(referringURL))
			return this.restResponseInvalid;
		var appConfig = this._getAppConfig(referringURL),
			cnt=0;
		if (!appConfig.sysId)
			return res;
		var appConfigContentGR = this._getConfigContentRecords(appConfig.sysId);
		while(appConfigContentGR.next())
			cnt++;
		res.total = cnt;
		return res;
	},

	handleMenuPageRequest: function(payload) {
		var res = {
			menuPage : {
				appConfigSysId: "",
				content: [],
				limit: parseInt(gs.getProperty("sn_wn.whats_new.ui.menu_content_count", 4)),
				message: "",
				referringURL: "",
				shortDescription: "",
				status: 200,
				title: "",
				total: 0
			},
			showWnTab: false,
			newContentAvailable: false,
			defaultHelpTab: (gs.getProperty("sn_wn.whats_new.ui.default_help_tab", "true") === "true")
		};

		if (gs.nil(payload) || !this.validateReferringURLPayload(payload)) {
			res.menuPage.status = this.restResponseInvalid.status;
			res.menuPage.message = this.restResponseInvalid.message;
			return res;
		}

		this._initMenuPage(res.menuPage, payload);

		var appConfig = this._getAppConfig(res.menuPage.referringURL);
		if (!appConfig.sysId)
			return res.menuPage;
		var userAppActivityGR = this.whatsNewUtil.getRecordByParams(WhatsNewCommonConstants.TABLE.SN_WN_USER_APP_ACTIVITY, {
			app_config: appConfig.sysId,
			user: gs.getUserID()
		}, null, null, true);
		if(!userAppActivityGR.hasNext())
			res.newContentAvailable = true;
		res.menuPage.appConfigSysId = appConfig.sysId;
		res.menuPage.title = appConfig.title;
		res.menuPage.shortDescription = appConfig.shortDescription;

		var appConfigContentGR = this._getConfigContentRecords(appConfig.sysId, null, res.menuPage.limit);
		res.menuPage.total = appConfigContentGR.getRowCount();
		res.menuPage.content = this._buildContent(appConfigContentGR, true);
		if(res.menuPage.content.length &gt; 0 &amp;&amp; (gs.getProperty("sn_wn.whats_new.ui.enabled", "false") === "true"))
			res.showWnTab = true;
		return res;
	},

	handleFeaturePageRequest: function(payload) {
		var featurePage = {
			appConfigSysId: "",
			content: [],
			limit: 10,
			message: "",
			offset: 0,
			referringURL: "",
			shortDescription: "",
			status: 200,
			title: "",
			total: 0
		};

		if (gs.nil(payload) || !this.validateReferringURLPayload(payload)) {
			featurePage.status = this.restResponseInvalid.status;
			featurePage.message = this.restResponseInvalid.message;
			return featurePage;
		}

		this._initFeaturePage(featurePage, payload);

		var appConfig = this._getAppConfig(featurePage.referringURL);
		if (!appConfig.sysId)
			return featurePage;

		featurePage.appConfigSysId = appConfig.sysId;
		featurePage.title = appConfig.title;
		featurePage.shortDescription = appConfig.shortDescription;

		var appConfigContentGR = this._getConfigContentRecords(appConfig.sysId, featurePage.offset, featurePage.limit);
		featurePage.content = this._buildContent(appConfigContentGR);
		featurePage.total = featurePage.content.length;

		return featurePage;
	},

	handleHasUserAppActivityRequest: function(payload) {
		var userAppActivity = {
			appConfigSysId: "",
			hasUserAppActivity: true, // Default to true so that the indicator is not shown by default
			message: "",
			referringURL: "",
			status: 200,
			userAppActivitySysId: "",
			userSysId: ""
		};

		if (!this.validateHasUserAppActivityPayload(payload, userAppActivity))
			return userAppActivity;

		this._initUserAppActivity(userAppActivity, payload.referringURL, payload.userSysId);

		var appConfig = this._getAppConfig(userAppActivity.referringURL);
		if (!appConfig.sysId) {
			userAppActivity.status = this.restResponseInvalid.status;
			userAppActivity.message = gs.getMessage("Cannot find corresponding Application Configuration record for the page: {0}", [userAppActivity.referringURL]);
			return userAppActivity;
		}
		userAppActivity.appConfigSysId = appConfig.sysId;

		var userAppActivityGR = this.whatsNewUtil.getRecordByParams(WhatsNewCommonConstants.TABLE.SN_WN_USER_APP_ACTIVITY, {
			app_config: appConfig.sysId,
			user: userAppActivity.userSysId
		}, null, null, true);
		userAppActivity.hasUserAppActivity = userAppActivityGR.next();
		userAppActivity.userAppActivitySysId = userAppActivity.hasUserAppActivity ? userAppActivityGR.getUniqueValue() : "";

		return userAppActivity;
	},

	handleUserAppActivityRequest: function(payload) {
		payload.userSysId = payload.userSysId || gs.getUserID();
		if (gs.nil(payload) || !this.validateUserAppActivityPayload(payload))
			return this.restResponseInvalid;

		var sysId = this.whatsNewUtil.checkAndInsert(WhatsNewCommonConstants.TABLE.SN_WN_USER_APP_ACTIVITY, {
			user: payload.userSysId,
			app_config: payload.appConfigSysId
		}, true);

		return gs.nil(sysId) ? this.restResponseConflict : this.restResponseOk;
	},

	handleUserActivityRequest: function(payload) {
		if(!payload.appConfigSysId)
			return this.restResponseInvalid;
		var res = this.handleUserAppActivityRequest(payload);
		if(res.status !== 200) 
			return this.restResponseOk;
		var appConfigContentGR = this._getConfigContentRecords(payload.appConfigSysId);
		var sysId;
		while(appConfigContentGR.next()) {
			if(!this._hasReadContent(appConfigContentGR.getValue('content'))) {
				sysId = this.whatsNewUtil.checkAndInsert(WhatsNewCommonConstants.TABLE.SN_WN_USER_CONTENT_ACTIVITY, {
					user: payload.userSysId,
					content: appConfigContentGR.getValue('content')
				}, true);
				if(gs.nil(sysId))
					allUserContentRecordsInserted = false;
			}
		}
		return this.restResponseOk;
	},

	handleUserContentActivityRequest: function(payload) {
		payload.userSysId = payload.userSysId || gs.getUserID();
		if (gs.nil(payload) || !this.validateUserContentActivityPayload(payload))
			return this.restResponseInvalid;

		var sysId = this.whatsNewUtil.checkAndInsert(WhatsNewCommonConstants.TABLE.SN_WN_USER_CONTENT_ACTIVITY, {
			user: payload.userSysId,
			content: payload.contentSysId
		}, true);

		return gs.nil(sysId) ? this.restResponseConflict : this.restResponseOk;
	},

	validateHasUserAppActivityPayload: function(payload, userAppActivity) {
		if (gs.nil(payload) || gs.nil(payload.userSysId) || gs.nil(payload.referringURL)) {
			userAppActivity.status = this.restResponseInvalid.status;
			userAppActivity.message = this.restResponseInvalid.message;
			return false;
		}

		if (!this.doesRecordExist("sys_user", payload.userSysId)) {
			userAppActivity.status = this.restResponseNotFound.status;
			userAppActivity.message = gs.getMessage("Record not found in {0} for sys_id {1}", ["sys_user", payload.userSysId]);
			return false;
		}

		return true;
	},

	validateReferringURLPayload: function(payload) {
		return !gs.nil(payload.referringURL);
	},

	validateUserAppActivityPayload: function(payload) {
		if (gs.nil(payload.userSysId) || gs.nil(payload.appConfigSysId))
			return false;
		return this.doesRecordExist('sys_user', payload.userSysId) &amp;&amp; this.doesRecordExist(WhatsNewCommonConstants.TABLE.SN_WN_APP_CONFIG, payload.appConfigSysId);
	},

	validateUserContentActivityPayload: function(payload) {
		if (gs.nil(payload.userSysId) || gs.nil(payload.contentSysId))
			return false;
		return this.doesRecordExist('sys_user', payload.userSysId) &amp;&amp; this.doesRecordExist(WhatsNewCommonConstants.TABLE.SN_WN_CONTENT, payload.contentSysId);
	},

	doesRecordExist: function(table, recordSysId) {
		var gr = this.whatsNewUtil.getRecordBySysId(table, recordSysId, true);
		return !gs.nil(gr) &amp;&amp; gr.isValidRecord();
	},

	_initFeaturePage: function(featurePage, payload) {
		if (!gs.nil(payload.referringURL))
			featurePage.referringURL = decodeURIComponent(payload.referringURL + "");
		if (!gs.nil(payload.offset) &amp;&amp; !isNaN(parseInt(payload.offset)))
			featurePage.offset = parseInt(payload.offset);
		if (!gs.nil(payload.limit) &amp;&amp; !isNaN(parseInt(payload.limit)))
			featurePage.limit = parseInt(payload.limit);
	},

	_initMenuPage: function(menuPage, payload) {
		if (!gs.nil(payload.referringURL))
			menuPage.referringURL = decodeURIComponent(payload.referringURL + "");
		if (!gs.nil(payload.limit) &amp;&amp; !isNaN(parseInt(payload.limit)))
			menuPage.limit = parseInt(payload.limit);
	},

	_initUserAppActivity: function(userAppActivity, referringURL, userSysId) {
		userAppActivity.referringURL = decodeURIComponent(referringURL + "");
		userAppActivity.userSysId = userSysId;
	},

	_getAppConfig: function(referringURL) {
		var appConfig = {
			sysId: "",
			path: "",
			title: "",
			shortDescription: ""
		};

		var appConfigGR = new GlideRecord(WhatsNewCommonConstants.TABLE.SN_WN_APP_CONFIG);
		appConfigGR.addActiveQuery();
		appConfigGR.query();
		while (appConfigGR.next()) {
			var path = appConfigGR.getValue("base_path");
			// Initially the first matching application configuration is sufficient.
			// Later, may require a reason to differentiate between multiple app config records that match
			if (referringURL.indexOf(path) !== -1) {
				appConfig.sysId = appConfigGR.getUniqueValue();
				appConfig.path = path;
				appConfig.title = appConfigGR.getDisplayValue("title");
				appConfig.shortDescription = appConfigGR.getDisplayValue("short_description");
				return appConfig;
			}
		}

		return appConfig;
	},

	_getConfigContentRecords: function(appConfigSysId, offset, limit) {
		var appConfigContentGR = new GlideRecordSecure(WhatsNewCommonConstants.TABLE.SN_WN_APP_CONFIG_CONTENT_M2M);
		appConfigContentGR.addQuery("app_config", appConfigSysId);
		appConfigContentGR.addNotNullQuery("content");
		appConfigContentGR.addQuery("content.active", true);
		appConfigContentGR.addQuery("content.state", "published");
		if ((gs.getProperty("sn_wn.whats_new.ui.show_future_content", true)) !== "true") {
			var version = gs.getProperty("glide.buildname");
			version = version ? version.toLowerCase().charAt(0) : "a";
			appConfigContentGR.addQuery("content.min_version", "&lt;=", version);
		}
		appConfigContentGR.orderBy("order");
		if ((offset === 0 || offset) &amp;&amp; limit)
			appConfigContentGR.chooseWindow(offset, offset + limit);
		else if (!offset &amp;&amp; limit)
			appConfigContentGR.setLimit(limit);
		appConfigContentGR.query();

		return appConfigContentGR;
	},

	_buildContent: function(appConfigContentGR, reducedContent) {
		var content = [];

		while (appConfigContentGR.next()) {
			var contentGR = this.whatsNewUtil.getRecordBySysId(WhatsNewCommonConstants.TABLE.SN_WN_CONTENT, appConfigContentGR.getValue("content"));
			if (!contentGR || !contentGR.isValidRecord())
				continue;
			if (reducedContent)
				content.push({
					"title": contentGR.getDisplayValue("title"),
					"content": (contentGR.getDisplayValue("short_description") || contentGR.getDisplayValue("content")),
					"minimizedText": true,
					"read": this._hasReadContent(contentGR.getUniqueValue()),
					"sys_id": contentGR.getUniqueValue()
				});
			else
				content.push({
					"title": contentGR.getDisplayValue("title"),
					"short_description": contentGR.getDisplayValue("short_description"),
					"content": contentGR.getDisplayValue("content"),
					"minimizedText": true,
					"mediaArr": this._getContentMedia(contentGR.getUniqueValue()),
					"available": this._isContentAvailable(contentGR),
					"read": this._hasReadContent(contentGR.getUniqueValue()),
					"doc_resource": contentGR.getDisplayValue("doc_resource"),
					"sys_id": contentGR.getUniqueValue()
				});
		}

		return content;
	},

	_isContentAvailable: function(contentGR) {
		var currentVersion = gs.getProperty("glide.buildname");
		currentVersion = currentVersion ? currentVersion.toLowerCase().charAt(0) : "a";
		if (contentGR.getValue("min_version") &gt; currentVersion)
			return false;

		var requiredPlugins = contentGR.getValue("required_plugin");
		if (gs.nil(requiredPlugins))
			return true;

		requiredPlugins = JSON.parse(requiredPlugins);
		var installedPlugins = this._getInstalledPluginVersions(Object.keys(requiredPlugins));

		for (requiredPluginId in requiredPlugins) {
			if (!installedPlugins.hasOwnProperty(requiredPluginId))
				return false;
			if (installedPlugins[requiredPluginId] &lt; requiredPlugins[requiredPluginId])
				return false;
		}

		return true;
	},

	_getInstalledPluginVersions: function(pluginIds) {
		var installedPlugins = {};
		var pluginGR = new GlideRecord("v_plugin");
		pluginGR.addEncodedQuery("idIN" + pluginIds.toString() + "^activeINactive,upgradable");
		pluginGR.query();
		while (pluginGR.next())
			installedPlugins[pluginGR.getValue("id")] = pluginGR.getValue("version");

		return installedPlugins;
	},

	_hasReadContent: function(contentSysId) {
		var userContentGR = new GlideRecord(WhatsNewCommonConstants.TABLE.SN_WN_USER_CONTENT_ACTIVITY);
		userContentGR.addQuery("content", contentSysId);
		userContentGR.addQuery("user", gs.getUserID());
		userContentGR.setLimit(1);
		userContentGR.query();

		return userContentGR.hasNext();
	},

	_getContentMedia: function(contentSysId) {
		var mediaArr = [];

		var contentMediaGR = new GlideRecord(WhatsNewCommonConstants.TABLE.SN_WN_CONTENT_MEDIA_M2M);
		contentMediaGR.addQuery("content", contentSysId);
		contentMediaGR.addNotNullQuery("media");
		contentMediaGR.orderBy("order");
		contentMediaGR.query();
		while (contentMediaGR.next()) {
			var mediaGR = this.whatsNewUtil.getRecordBySysId(WhatsNewCommonConstants.TABLE.SN_WN_MEDIA, contentMediaGR.getValue("media"), true);
			mediaArr.push({
				"url": mediaGR.getDisplayValue(mediaGR.getValue("type")),
				"type": mediaGR.getValue("type")
			});
		}

		return mediaArr;
	},

	type: 'WhatsNewAPIHandlerSNC'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-08-17 07:55:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4387efc477703110878cd30e5b5a99c6&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;22&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;WhatsNewAPIHandlerSNC&lt;/sys_name&gt;
        &lt;sys_package display_value="Whats New Framework Core" source="sn_wn"&gt;cb08e377eb9071106fb3951ff15228b8&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Whats New Framework Core"&gt;cb08e377eb9071106fb3951ff15228b8&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_4387efc477703110878cd30e5b5a99c6&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-10-22 08:11:12&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:36:22</sys_created_on>
        <sys_id>7676f0d983f01210c6695855eeaad3db</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>WhatsNewAPIHandlerSNC</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_7676f0d983f01210c6695855eeaad3db</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:36:22</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
