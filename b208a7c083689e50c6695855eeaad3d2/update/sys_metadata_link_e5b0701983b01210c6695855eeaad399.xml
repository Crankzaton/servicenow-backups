<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>1a5cc1ff0ffa00105cbf3694ba767efc</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;public&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;global.FSMAjaxUtil&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;true&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;FSMAjaxUtil&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var FSMAjaxUtil = Class.create();
FSMAjaxUtil.prototype = Object.extendsObject(AbstractAjaxProcessor, {
	
	calculateWindowEnd: function() {
		var workOrderId = this.getParameter('sysparm_woId');
		var workOrderTaskId = this.getParameter('sysparm_wotId');
		
		var wotGr = new GlideRecord('wm_task');
		wotGr.get(workOrderTaskId);
		
		if (wotGr.canRead()) {
			var glideSLA = new GlideRecord('task_sla');
			var maxBreachTime = "";
			if(glideSLA.canRead()){
			var glideSLAOR = glideSLA.addQuery('task', workOrderTaskId);
			glideSLAOR.addOrCondition('task', workOrderId);
			glideSLA.query();
			maxBreachTime = new global.FSMGeneralUtil().calculateWindowEndBasedOnSLA(glideSLA);
			
			if (wotGr &amp;&amp; wotGr.window_start &amp;&amp; maxBreachTime.getNumericValue() &lt;= wotGr.window_start.getGlideObject().getNumericValue())
				return;
			}
			return maxBreachTime;
		}
		
		return "";
	},
	
	ajaxFunction_getTaskTemplate: function() {
        var templateId = this.getParameter('sysparm_record');
        if (!templateId) 
            return;

        var answer = {};

        var gr = new GlideRecord("cmdb_worktask_product_model");
        if ( gr.isValid() &amp;&amp; gr.canRead() &amp;&amp; gr.get(templateId)) {
			answer["work_type"] = gr.work_type + "";
			if((GlidePluginManager.isActive('com.snc.fsm_crew_scheduling')) &amp;&amp; ((gr.requires_crew) || (gr.work_type.getRefRecord().requires_crew)))
				answer["requires_crew"] = true;
        }
		
        return new JSON().encode(answer);
    },
	

	
	isAccessHoursAppActive: function(){
		var answer = {};
		answer.isActive = new FSMGeneralUtil().isAccessHoursAppActive();
		return new JSON().encode(answer);
	},
	
	isFSMTerritoryPlanningActive: function(){
		var result = {};
		var obj = new global.WMFilters();
		result.active = obj.isTerritoryPlanningActive();
		return new JSON().encode(result);
	},

	isMarketplacePluginActive: function(){
		var result = {};
		var obj = new global.WMFilters();
		result.active = obj.isMarketplacePluginActive();
		return new JSON().encode(result);
	},

	makeTemplateReadOnly: function() {
		var answer = {};
		var sc = new sn_sm.SMConfiguration();
		var sysId = this.getParameter('sysparm_recordId') + '';
		var state = this.getParameter('sysparam_recordState');
		var wo = new GlideRecord("wm_order");
		answer['enableTemplate'] = true;
		wo.get(sysId);
		var isEnabled = sc.isEnabled(wo, "work_order_template_draft_state", false);
		if(state == 1 &amp;&amp; isEnabled){
			var wot = new GlideRecord('wm_task');
    		wot.addQuery('parent', sysId);
			wot.query();
			if(!wot.next()){
				answer['enableTemplate'] = true;
			} else if(wo.getValue('task_created') == 1) {
				answer['enableTemplate'] = false;
			}
		}
		return new JSON().encode(answer);
	},

	isTrackingEnabledAtAffectedProduct: function(){
		return gs.getProperty("sn_fsm.track_work_at_affected_products",true);
	},
	
	type: 'FSMAjaxUtil'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2020-02-13 01:04:45&lt;/sys_created_on&gt;
        &lt;sys_id&gt;1a5cc1ff0ffa00105cbf3694ba767efc&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;FSMAjaxUtil&lt;/sys_name&gt;
        &lt;sys_package display_value="Field Service Management" source="com.snc.work_management"&gt;b66bd6bb4722c210cd4e1ce4316d4387&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_1a5cc1ff0ffa00105cbf3694ba767efc&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-12-04 16:28:20&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:11:10</sys_created_on>
        <sys_id>e5b0701983b01210c6695855eeaad399</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FSMAjaxUtil</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e5b0701983b01210c6695855eeaad399</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:11:10</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
