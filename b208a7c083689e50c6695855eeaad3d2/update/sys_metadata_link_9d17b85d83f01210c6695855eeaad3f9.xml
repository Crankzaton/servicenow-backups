<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>785c199d53ff81107234ddeeff7b12ea</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_nb_action.DecisionTableGeneratorTypeHandler&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;Implements extension point sn_nb_action.GeneratorTypeHandler&amp;#13;
Generator type handler to implement 'Decision table' Generator type.&lt;/description&gt;
        &lt;name&gt;DecisionTableGeneratorTypeHandler&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var DecisionTableGeneratorTypeHandler = Class.create();
DecisionTableGeneratorTypeHandler.prototype = Object.extendsObject(GeneratorTypeHandlerBase, {

    getId: function() {
        return Constants.GENERATOR_TYPE_SYS_ID.DECISION_TABLE;
    },

    getOutputSchema: function(param) {
        var decisionTableGr = param.generatorRecord;
        if (!decisionTableGr || !decisionTableGr.isValidRecord) {
            var errorDetails = new RAExceptionManager('INVALID_DECISION_TABLE');
            var logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, 'DecisionTableGeneratorTypeHandler');
            logger.error('Decision table is invalid');
            return {
                'status': Constants.STATUS_ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorDetails.getMessage()
            };
        }
        var decisionTableId = decisionTableGr.getValue(Constants.COL_SYS_ID);
        try {
            var dtApi = new sn_dt.DecisionTableAPI();
            var dtMetaData = dtApi.getDecisionTable(decisionTableId);
            var multipleAnswerSupported = dtMetaData.multipleAnswerSupported;
            var schema = [];
            var metaData = {};
            if (multipleAnswerSupported) {
                var answerElements = dtMetaData.answerElements;
                for (var elemIdx = 0; elemIdx &lt; answerElements.length; elemIdx++) {
                    var answerElement = answerElements[elemIdx];
                    if (Constants.TYPE_REFERENCE == answerElement.type) {
                        NextBestActionUtil.addToSchema(schema,
                            answerElement.name,
                            answerElement.label,
                            Constants.TYPE_REFERENCE,
                            answerElement.reference);
                    } else {
                        NextBestActionUtil.addToSchema(schema,
                            answerElement.name,
                            answerElement.label,
                            Constants.TYPE_STRING);
                    }
                }
            } else {
                var answerTable = dtMetaData.answerTable;
                NextBestActionUtil.addToSchema(schema,
                    answerTable.value,
                    answerTable.displayValue,
                    Constants.TYPE_REFERENCE,
                    answerTable.value);
            }
            return {
                'status': Constants.STATUS_SUCCESS,
                'schema': schema,
                'metaData': metaData
            };
        } catch (e) {
            logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, 'DecisionTableGeneratorTypeHandler');
            logger.error('Failed to fetch Output schema of Decision table ' + decisionTableId);
            return {
                'status': Constants.STATUS_ERROR,
                'errorCode': '40002',
                'errorMessage': e.message
            };

        }
    },

    getOutputs: function(param) {
        var decisionTableGr = param.generatorRecord;
        if (!decisionTableGr || !decisionTableGr.isValidRecord || !decisionTableGr.active) {
            var errorDetails = new RAExceptionManager('INVALID_OR_INACTIVE_DECISION_TABLE');
            var logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, 'DecisionTableGeneratorTypeHandler');
            logger.error('Decision table is invalid or inactive');
            return {
                'status': Constants.STATUS_ERROR,
                'errorCode': errorDetails.getCode(),
                'errorMessage': errorDetails.getMessage()
            };
        }
        var decisionTableId = decisionTableGr.getValue(Constants.COL_SYS_ID);
        try {
            var inputs = param.inputs;

            var dtApi = new sn_dt.DecisionTableAPI();
            //Get Decision table details
            var dtMetaData = dtApi.getDecisionTable(decisionTableId);
            var multipleAnswerSupported = dtMetaData.multipleAnswerSupported;
            var dtGetDecisionsApiInputs = {};
            Object.keys(inputs)
                .forEach(function(key) {
                    if (!(Constants.SYS_META == key || Constants.COL_SYS_ID == key)) {
                        dtGetDecisionsApiInputs[key] = inputs[key];
                    }
                });
            //Evaluate Decision table based on provided inputs
            var dtEvaluationResults = dtApi.getDecisions(decisionTableId, dtGetDecisionsApiInputs);
            var outputs = [];
            for (var resIdx = 0; Array.isArray(dtEvaluationResults) &amp;&amp; resIdx &lt; dtEvaluationResults.length; resIdx++) {
                var result = dtEvaluationResults[resIdx];
                var output = {};
                if (multipleAnswerSupported) {
                    var resultElements = result.result_elements;
                    Object.keys(resultElements)
                        .forEach(function(key) {
                            if (!(Constants.SYS_META == key || Constants.COL_SYS_ID == key)) {
                                output[key] = resultElements[key].toString();
                            }
                        });
                } else {
                    var answerName = dtMetaData.answerTable.value;
                    var answerRecord = result.getValue(Constants.COL_SYS_ID);
                    output[answerName] = answerRecord;
                }
                outputs.push(output);
            }
            return {
                'status': Constants.STATUS_SUCCESS,
                'outputs': outputs
            };
        } catch (e) {
            logger = new global.GSLog(sn_nb_action.Constants.PROP_LOG_LEVEL, 'DecisionTableGeneratorTypeHandler');
            logger.error('Failed to evaluate Decision table ' + decisionTableId);
            return {
                'status': Constants.STATUS_ERROR,
                'errorCode': '40002',
                'errorMessage': e.message
            };
        }
    },

    type: 'DecisionTableGeneratorTypeHandler'
});]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-05-30 09:34:18&lt;/sys_created_on&gt;
        &lt;sys_id&gt;785c199d53ff81107234ddeeff7b12ea&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;DecisionTableGeneratorTypeHandler&lt;/sys_name&gt;
        &lt;sys_package display_value="Recommended Actions" source="sn_nb_action"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="Recommended Actions"&gt;427fe83177221010d7159b71a91061e1&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_785c199d53ff81107234ddeeff7b12ea&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-06-29 13:20:14&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:38:59</sys_created_on>
        <sys_id>9d17b85d83f01210c6695855eeaad3f9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DecisionTableGeneratorTypeHandler</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_9d17b85d83f01210c6695855eeaad3f9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:38:59</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
