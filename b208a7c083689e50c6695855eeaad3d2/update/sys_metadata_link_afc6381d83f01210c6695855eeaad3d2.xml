<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>612d4441ff312110468365d7d3b8fe4c</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.PassThroughCache&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;PassThroughCache&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/**
 * This class provides fairly naive caching capabilities for the passed in object.
 * It mirrors the public functions on the provided object and stores the results
 * from calling through to the provided object in a local in-memory cache and
 * reuses this data for subsequent calls to this PassThroughCache instead of
 * making additional calls to the passed in object. These cache results are
 * retained for the life of this PassThroughCache object.
 */
var PassThroughCache = Class.create();
PassThroughCache.prototype = {

    /**
     * @param obj The object to add caching to
     */
    initialize: function(obj) {
        this._resultCache = new Map();
        this._createPassThroughCacheFunctions(obj);
    },

    /**
     * Wires up functions on this object that mirror the public functions
     * on the provided 'obj'
     *
     * @param obj The object to add caching to
     */
    _createPassThroughCacheFunctions: function(obj) {
        this._getPublicFunctionNames(obj)
            .forEach(functionName =&gt; this._addPassThroughCacheFunction(obj, functionName));
    },

    /**
     * Retrieves an array of public function names from the obj
     *
     * @param obj The object to get the public function names from
     * @returns {string[]} An array of function names
     */
    _getPublicFunctionNames: function(obj) {
        // Note: Object.getOwnPropertyNames(obj) does not seem to work in Rhino presently
        //   It just silently fails and returns and empty array. So keys have to be enumerated
        //   like this.
        let keys = [];
        for (key in obj)
            keys.push(key);

        // Reduce the keys down to the ones that are functions and aren't a constructor or private
        return keys
            .filter(key =&gt; typeof obj[key] === 'function')
            .filter(key =&gt; key.toLowerCase() !== 'initialize')
            .filter(key =&gt; key.toLowerCase() !== 'constructor')
            .filter(key =&gt; !key.startsWith('_'));
    },

    /**
     * Adds a pass through cache function that calls obj.func(parameters) and caches the result for each
     * unique set of parameters.
     *
     * @param obj The object that has the results being cached
     * @param funcName Name of the function to create
     */
    _addPassThroughCacheFunction: function(obj, funcName) {
        this[funcName] = (...funcParameters) =&gt; {
            // Build a complex key based on the arguments, so each unique set of arguments gets its results cached
            const cacheKey = `${funcName}(${JSON.stringify(funcParameters)})`;
            if (!this._resultCache.has(cacheKey))
                this._resultCache.set(cacheKey, obj[funcName](...funcParameters));
            return this._resultCache.get(cacheKey);
        };
    },

    type: 'PassThroughCache'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;maint&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-03-23 15:26:52&lt;/sys_created_on&gt;
        &lt;sys_id&gt;612d4441ff312110468365d7d3b8fe4c&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;PassThroughCache&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_612d4441ff312110468365d7d3b8fe4c&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;maint&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-05-06 22:39:27&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:37:47</sys_created_on>
        <sys_id>afc6381d83f01210c6695855eeaad3d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PassThroughCache</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_afc6381d83f01210c6695855eeaad3d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:37:47</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
