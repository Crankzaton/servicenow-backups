<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>7ec3f7ef43302110b4a1c083a9b8f2fa</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;sn_entitlement.SubscriptionEntitlementDAO&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description&gt;DAO class to fetch data from subscription_entitlement table&lt;/description&gt;
        &lt;name&gt;SubscriptionEntitlementDAO&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var SubscriptionEntitlementDAO = Class.create();
SubscriptionEntitlementDAO.prototype = {
    initialize: function() {
        this.logger = new LoggingUtil();
        this._cacheManager = new LicensingCacheManager();
        this._cacheDataHandler = new CacheDataHandler();

        // Contains the list of columns that are part of SKUMetadata cache object.
        this._cacheColumnList = [
            LicensingEngineDBConstants.NAME,
            LicensingEngineDBConstants.FGE_IDS,
            LicensingEngineDBConstants.SYS_ID,
            LicensingEngineDBConstants.START_DATE,
            LicensingEngineDBConstants.END_DATE,
            LicensingEngineDBConstants.DEFINITION_ID,
            LicensingEngineDBConstants.SUBSCRIPTION_IDENTIFIER,
            LicensingEngineDBConstants.PURCHASED_COUNT,
            LicensingEngineDBConstants.SUBSCRIPTION_TYPE,
            LicensingEngineDBConstants.MEASURED_ROLE_TYPES,
            LicensingEngineDBConstants.PRODUCT_CODE
        ];
        this._cacheRefColumnList = [];
    },

    loadSubscriptionEntitlementIntoCache: function() {
        let entitlmentIdToSubscriptionObj = new Map();
        const gr = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        gr.addQuery(LicensingEngineDBConstants.STATUS, LicensingEngineConstants.ACTIVE_STATUS);
        gr.query();
        entitlmentIdToSubscriptionObj = this._cacheDataHandler.prepareCacheData(gr, entitlmentIdToSubscriptionObj, LicensingEngineDBConstants.ENTITLEMENT_ID, this._cacheColumnList, this._cacheRefColumnList);
        this._cacheManager.putDataIntoCache(LicensingEngineConstants.LICENSING_CACHE_CATALOG, LicensingEngineConstants.SUBSCRIPTION_ENTITLEMENT_CACHE, entitlmentIdToSubscriptionObj);
    },

    // Serialize when a single record contains multiple entitlment IDs.
    serializeId: function(attrList, fGEIds) {
        if (gs.nil(attrList))
            return fGEIds;

        if (attrList.indexOf(LicensingEngineConstants.COMMA) &lt; 0) {
            fGEIds.push(attrList);
            return fGEIds;
        }

        var idList = attrList.split(LicensingEngineConstants.COMMA);
        idList.forEach(function(id) {
            fGEIds.push(id.trim());
        });
        return fGEIds;
    },

    // returns an array of subscription types associated with the given entitlement identifiers
    getSubscriptionTypesByEntIds: function(entitlementIds) {
        var subTypes = [];
        var entleGr = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        entleGr.addQuery(LicensingEngineDBConstants.ENTITLEMENT_ID, LicensingEngineDBConstants.IN, entitlementIds);
        entleGr.query();
        while (entleGr.next())
            subTypes.push(entleGr.getValue(LicensingEngineDBConstants.SUBSCRIPTION_TYPE));
        return subTypes;
    },

    // returns subscription type associated with the given subscripiton sys_id
    getSubscriptionTypeBySysId: function(subsSysId) {
        var entleGr = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        if (entleGr.get(subsSysId))
            return entleGr.getValue(LicensingEngineDBConstants.SUBSCRIPTION_TYPE);
        return null;
    },

    // returns an array of measured role types associated with the given entitlement identifier
    getMeasuredRoleTypesByEntId: function(entId) {
        var result = [];
        var entleGr = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        entleGr.addQuery(LicensingEngineDBConstants.ENTITLEMENT_ID, entId);
        entleGr.query();
        if (entleGr.next()) {
            var roleTypesString = entleGr.getValue(LicensingEngineDBConstants.MEASURED_ROLE_TYPES);
            if (!gs.nil(roleTypesString))
                result = this.getArrayByListString(roleTypesString);
        }
        return result;
    },

    // returns an array of measured role types associated with the given subscription sys_id
    getMeasuredRoleTypesBySysId: function(sysId) {
        var result = [];
        var entleGr = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
        entleGr.addQuery(LicensingEngineDBConstants.SYS_ID, sysId);
        entleGr.query();
        if (entleGr.next()) {
            var roleTypesString = entleGr.getValue(LicensingEngineDBConstants.MEASURED_ROLE_TYPES);
            if (!gs.nil(roleTypesString))
                result = this.getArrayByListString(roleTypesString);
        }
        return result;
    },

    getArrayByListString: function(argString) {
        var result = [];
        if (argString.indexOf(LicensingEngineConstants.COMMA) &gt; 0)
            return argString.split(LicensingEngineConstants.COMMA);
        result.push(argString);
        return result;
    },

    getProdInstNamesByEntitlementIds: function(entitlementIds) {
        var prodInstNames = [];
        try {
            var entitleGr = new GlideRecord(LicensingEngineDBConstants.SUBSCRIPTION_ENTITLEMENT);
            entitleGr.addQuery(LicensingEngineDBConstants.STATUS, LicensingEngineConstants.ACTIVE_STATUS);
            entitleGr.addQuery(LicensingEngineDBConstants.ENTITLEMENT_ID, LicensingEngineDBConstants.IN, entitlementIds);
            entitleGr.query();
            while (entitleGr.next())
                this.serializeProdInstNames(entitleGr.getValue(LicensingEngineDBConstants.PRODUCTION_INSTANCE_NAMES), prodInstNames);

            this.logger.logInfo(LicensingEngineConstants.SUBSCRIPTION_ENTITLEMENT_DAO, LicensingEngineConstants.GET_PROD_INSTANCE_NAMES, "ProdInstanceNames loaded from DB:  " + prodInstNames);
        } catch (error) {
            this.logger.logErrorInDetermining(LicensingEngineConstants.SUBSCRIPTION_ENTITLEMENT_DAO, LicensingEngineConstants.GET_PROD_INSTANCE_NAMES, "error while loading ProdInstanceNames from DB", error);
        }
        return prodInstNames.length == 0 ? null : prodInstNames;
    },

    serializeProdInstNames: function(prodInstNamesFromDB, prodInstNames) {
        if (gs.nil(prodInstNamesFromDB))
            return prodInstNames;
        if (prodInstNamesFromDB.indexOf(LicensingEngineConstants.COMMA) &lt; 0) {
            prodInstNames.push(prodInstNamesFromDB);
            return prodInstNames;
        }

        var prodInstNamesList = prodInstNamesFromDB.split(LicensingEngineConstants.COMMA);
        prodInstNamesList.forEach(function(id) {
            if (prodInstNames.indexOf(id.trim()) &lt; 0)
                prodInstNames.push(id.trim());
        });
        return prodInstNames;
    },

    loadAllDataIntoCache: function() {
        this.loadSubscriptionEntitlementIntoCache();
    },

    type: 'SubscriptionEntitlementDAO'
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2023-02-10 09:41:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;7ec3f7ef43302110b4a1c083a9b8f2fa&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;49&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;SubscriptionEntitlementDAO&lt;/sys_name&gt;
        &lt;sys_package display_value="Licensing Engine" source="sn_entitlement"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="Licensing Engine"&gt;bcadabf277f311109c62f5f3cb5a992a&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_7ec3f7ef43302110b4a1c083a9b8f2fa&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-11-15 08:42:59&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-21 08:39:21</sys_created_on>
        <sys_id>e227309d83f01210c6695855eeaad380</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SubscriptionEntitlementDAO</sys_name>
        <sys_package display_value="Now Utils" source="x_938076_now_utils">b208a7c083689e50c6695855eeaad3d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Now Utils">b208a7c083689e50c6695855eeaad3d2</sys_scope>
        <sys_update_name>sys_metadata_link_e227309d83f01210c6695855eeaad380</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-21 08:39:21</sys_updated_on>
        <tablename>sys_script_include</tablename>
    </sys_metadata_link>
</record_update>
